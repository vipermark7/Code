{"version":3,"sources":["tools/ImageUtils.js"],"names":["async","dirname","basename","process","platform","logger","warn","let","dimensions","await","_getImageDimensionsAsync","_","getImageDimensionsMacOSAsync","iconSizePx","iconFilename","destinationIconPath","_resizeImageAsync","_resizeImageWithSipsAsync","_hasWarned","resizeImageAsync","spawnAsyncThrowError","stdio","cwd","childProcess","components","stdout","split","map","c","parseInt","filter","n","isNaN","_getImageDimensionsWithSipsAsync","setResizeImageFunction","fn","setGetImageDimensionsFunction"],"mappings":";;;;;;;AAOA;;;;+BAGAA,WACEC,OADFD,EAEEE,QAFFF,EAG2B;AACzB,QAAIG,QAAQC,QAARD,KAAqB,QAAzB,EAAmC;AACjCE,0CAAOC,IAAPD,CAAY,qDAAZA;AACF;AACAE,QAAIC,aAAa,IAAjBD;AACA,QAAI;AACFC,mBAAaC,MAAMC,yBAAyBR,QAAzBQ,EAAmCT,OAAnCS,CAAnBF;AACF,KAFA,CAEE,OAAOG,CAAP,EAAU,CAAC;AACb,WAAOH,UAAP;AACF,G;;kBAZeI,4B;;;;;;gCAefZ,WACEa,UADFb,EAEEc,YAFFd,EAGEe,mBAHFf,EAIE;AACA,QACEG,QAAQC,QAARD,KAAqB,QAArBA,IACAa,sBAAsBC,yBADtBd,IAEA,CAACe,UAHH,EAIE;AACAb,0CAAOC,IAAPD,CAAY,qDAAZA;AACAa,mBAAa,IAAbA;AACF;AACA,WAAOF,kBAAkBH,UAAlBG,EAA8BF,YAA9BE,EAA4CD,mBAA5CC,CAAP;AACF,G;;kBAdeG,gB;;;;;;gCAgBfnB,WACEa,UADFb,EAEEc,YAFFd,EAGEe,mBAHFf,EAIE;AACA,WAAOoB,oEAAqB,MAArBA,EAA6B,CAAC,IAAD,EAAOP,UAAP,EAAmBC,YAAnB,CAA7BM,EAA+D;AACpEC,aAAO,CAAC,QAAD,EAAW,QAAX,EAAqB,SAArB,CAD6D,EAC9B;AACtCC,WAAKP;AAF+D,KAA/DK,CAAP;AAIF,G;;kBATeH,yB;;;;;;gCAWfjB,WACEE,QADFF,EAEEC,OAFFD,EAG0B;AACxBO,QAAIgB,eAAed,MAAMW,oEACvB,MADuBA,EAEvB,CAAC,IAAD,EAAO,YAAP,EAAqB,IAArB,EAA2B,aAA3B,EAA0ClB,QAA1C,CAFuBkB,EAGvB;AACEE,WAAKrB;AADP,KAHuBmB,CAAzBb;AAOA;AACA,UAAMiB,aAAaD,aAAaE,MAAbF,CAAoBG,KAApBH,CAA0B,OAA1BA,CAAnB;AACA,WAAOC,WAAWG,GAAXH,CAAeI;AAAAA,aAAKC,SAASD,CAATC,EAAY,EAAZA,CAALD;AAAAA,KAAfJ,EAAqCM,MAArCN,CAA4CO;AAAAA,aAAK,CAACC,MAAMD,CAANC,CAAND;AAAAA,KAA5CP,CAAP;AACF,G;;kBAdeS,gC;;;;;AAgBf;;;;;AAhEA;AAAA;AAAA;;;;AACA;AAAA;AAAA;;;;;;AAmBA1B,IAAIW,aAAa,KAAjBX;AA6CAA,IAAIS,oBAAoBC,yBAAxBV;AACAA,IAAIG,2BAA2BuB,gCAA/B1B;;AAEA;AACA;AACA,SAAS2B,sBAAT,CACEC,EADF,EAEE;AACAnB,sBAAoBmB,EAApBnB;AACF;;AAEA;AACA;AACA,SAASoB,6BAAT,CACED,EADF,EAEE;AACAzB,6BAA2ByB,EAA3BzB;AACF;;QAGEE,4B,GAAAA,4B;QACAO,gB,GAAAA,gB;QACAe,sB,GAAAA,sB;QACAE,6B,GAAAA,6B","file":"../../tools/ImageUtils.js","sourcesContent":["/**\n * @flow\n */\n\nimport { spawnAsyncThrowError } from '../detach/ExponentTools';\nimport logger from '../detach/Logger';\n\n/**\n *  @return array [ width, height ] or null if that fails for some reason.\n */\nasync function getImageDimensionsMacOSAsync(\n  dirname: string,\n  basename: string\n): Promise<?Array<number>> {\n  if (process.platform !== 'darwin') {\n    logger.warn('`sips` utility may or may not work outside of macOS');\n  }\n  let dimensions = null;\n  try {\n    dimensions = await _getImageDimensionsAsync(basename, dirname);\n  } catch (_) {}\n  return dimensions;\n}\n\nlet _hasWarned = false;\nasync function resizeImageAsync(\n  iconSizePx: number,\n  iconFilename: string,\n  destinationIconPath: string\n) {\n  if (\n    process.platform !== 'darwin' &&\n    _resizeImageAsync === _resizeImageWithSipsAsync &&\n    !_hasWarned\n  ) {\n    logger.warn('`sips` utility may or may not work outside of macOS');\n    _hasWarned = true;\n  }\n  return _resizeImageAsync(iconSizePx, iconFilename, destinationIconPath);\n}\n\nasync function _resizeImageWithSipsAsync(\n  iconSizePx: number,\n  iconFilename: string,\n  destinationIconPath: string\n) {\n  return spawnAsyncThrowError('sips', ['-Z', iconSizePx, iconFilename], {\n    stdio: ['ignore', 'ignore', 'inherit'], // only stderr\n    cwd: destinationIconPath,\n  });\n}\n\nasync function _getImageDimensionsWithSipsAsync(\n  basename: string,\n  dirname: string\n): Promise<Array<number>> {\n  let childProcess = await spawnAsyncThrowError(\n    'sips',\n    ['-g', 'pixelWidth', '-g', 'pixelHeight', basename],\n    {\n      cwd: dirname,\n    }\n  );\n  // stdout looks something like 'pixelWidth: 1200\\n pixelHeight: 800'\n  const components = childProcess.stdout.split(/(\\s+)/);\n  return components.map(c => parseInt(c, 10)).filter(n => !isNaN(n));\n}\n\n// Allow us to swap out the default implementations of image functions\nlet _resizeImageAsync = _resizeImageWithSipsAsync;\nlet _getImageDimensionsAsync = _getImageDimensionsWithSipsAsync;\n\n// Allow users to provide an alternate implementation for our image resize function.\n// This is used internally in order to use sharp instead of sips in standalone builder.\nfunction setResizeImageFunction(\n  fn: (iconSizePx: number, iconFilename: string, destinationIconPath: string) => Promise<any>\n) {\n  _resizeImageAsync = fn;\n}\n\n// Allow users to provide an alternate implementation for our image dimensions function.\n// This is used internally in order to use sharp instead of sips in standalone builder.\nfunction setGetImageDimensionsFunction(\n  fn: (basename: string, dirname: string) => Promise<?Array<number>>\n) {\n  _getImageDimensionsAsync = fn;\n}\n\nexport {\n  getImageDimensionsMacOSAsync,\n  resizeImageAsync,\n  setResizeImageFunction,\n  setGetImageDimensionsFunction,\n};\n"],"sourceRoot":"/xdl@52.0.12/src"}