{"version":3,"sources":["Diagnostics.js"],"names":["async","info","let","user","await","UserManager","getCurrentUserAsync","username","expoHome","UserSettings","dotExpoHomeDirectory","infoJsonFile","path","join","writeAsync","tempDir","Env","home","archivePath","Utils","ncpAsync","filter","filename","includes","settingsJsonFile","SETTINGS_FILE_NAME","settingsJson","readAsync","key","e","console","error","tar","create","file","gzip","cwd","relative","rimraf","sync","isNode","fs","createReadStream","Blob","readFile","formData","append","response","Api","callMethodAsync","url","_uploadLogsAsync","options","Binaries","sourceBashLoginScriptsAsync","whichCommand","process","platform","result","spawnAsync","nodeVersion","_","trim","stdout","nodePath","npmVersion","npmPath","watchmanVersion","Watchman","unblockAndGetVersionAsync","watchmanPath","adbVersion","adbPath","env","PATH","shell","SHELL","os","homedir","nvmPath","NVM_PATH","lang","LANG","dirname","__dirname","memoryFree","_formatBytes","freemem","memoryTotal","totalmem","ip","address","hostname","xdeProcesses","child_process","execSync","toString","numXdeProcesses","watchmanProcesses","numWatchmanProcesses","ngrokProcesses","numNgrokProcesses","isXcodeInstalled","xcrunVersion","xcodebuildVersion","launchctlLimit","uploadLogs","limitLengthForIntercom","mapValues","value","length","startsWith","substring","getDeviceInfoAsync","bytes","toFixed"],"mappings":"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","file":"../Diagnostics.js","sourcesContent":["/**\n * @flow\n */\n\nimport _ from 'lodash';\nimport child_process from 'child_process';\nimport fs from 'fs-extra';\nimport JsonFile from '@expo/json-file';\nimport os from 'os';\nimport path from 'path';\nimport rimraf from 'rimraf';\nimport spawnAsync from '@expo/spawn-async';\nimport tar from 'tar';\n\nimport ip from './ip';\nimport Api from './Api';\nimport * as Binaries from './Binaries';\nimport * as Env from './Env';\nimport FormData from './tools/FormData';\nimport { isNode } from './tools/EnvironmentHelper';\nimport UserManager, { ANONYMOUS_USERNAME } from './User';\nimport UserSettings from './UserSettings';\nimport * as Utils from './Utils';\nimport * as Watchman from './Watchman';\n\nasync function _uploadLogsAsync(info: any): Promise<boolean | string> {\n  let user = await UserManager.getCurrentUserAsync();\n  let username = user ? user.username : ANONYMOUS_USERNAME;\n\n  // write info to file\n  let expoHome = UserSettings.dotExpoHomeDirectory();\n  let infoJsonFile = new JsonFile(path.join(expoHome, 'debug-info.json'));\n  await infoJsonFile.writeAsync(info);\n\n  // copy files to tempDir\n  let tempDir = path.join(Env.home(), `${username}-diagnostics`);\n  let archivePath = path.join(expoHome, 'diagnostics.tar.gz');\n  await Utils.ncpAsync(expoHome, tempDir, {\n    filter: filename => {\n      if (\n        filename.includes('diagnostics') ||\n        filename.includes('starter-app-cache') ||\n        filename.includes('android-apk-cache') ||\n        filename.includes('ios-simulator-app-cache') ||\n        filename.includes('state.json~')\n      ) {\n        return false;\n      } else {\n        return true;\n      }\n    },\n  });\n\n  // remove access token\n  try {\n    let settingsJsonFile = new JsonFile(path.join(tempDir, UserSettings.SETTINGS_FILE_NAME));\n    let settingsJson = await settingsJsonFile.readAsync();\n    for (let key of ['accessToken', 'auth', 'uuid', 'sendTo']) {\n      if (settingsJson[key]) {\n        settingsJson[key] = 'redacted';\n      }\n    }\n    await settingsJsonFile.writeAsync(settingsJson);\n  } catch (e) {\n    console.error(e);\n  }\n\n  // compress\n  await tar.create({ file: archivePath, gzip: true, cwd: Env.home() }, [\n    path.relative(Env.home(), tempDir),\n  ]);\n  rimraf.sync(tempDir);\n\n  // upload\n  let file;\n  if (isNode()) {\n    file = fs.createReadStream(archivePath);\n  } else {\n    file = new Blob([await fs.readFile(archivePath)]);\n  }\n  let formData = new FormData();\n  formData.append('archive', file);\n\n  let response = await Api.callMethodAsync('uploadDiagnostics', [{}], 'put', null, { formData });\n  return response.url;\n}\n\n/* eslint-disable prefer-template */\n// From http://stackoverflow.com/questions/15900485/correct-way-to-convert-size-in-bytes-to-kb-mb-gb-in-javascript\nfunction _formatBytes(bytes: number): string {\n  if (bytes >= 1000000000) {\n    return (bytes / 1000000000).toFixed(2) + ' GB';\n  } else if (bytes >= 1000000) {\n    return (bytes / 1000000).toFixed(2) + ' MB';\n  } else if (bytes >= 1000) {\n    return (bytes / 1000).toFixed(2) + ' KB';\n  } else if (bytes > 1) {\n    return bytes + ' bytes';\n  } else if (bytes === 1) {\n    return bytes + '${bytes} byte';\n  } else {\n    return '0 bytes';\n  }\n}\n/* eslint-enable prefer-template */\n\nexport async function getDeviceInfoAsync(options: any = {}): Promise<any> {\n  let info = {};\n\n  await Binaries.sourceBashLoginScriptsAsync();\n  let whichCommand = process.platform === 'win32' ? 'where' : 'which';\n\n  try {\n    let result = await spawnAsync('node', ['--version']);\n    info.nodeVersion = _.trim(result.stdout);\n  } catch (e) {}\n\n  try {\n    let result = await spawnAsync(whichCommand, ['node']);\n    info.nodePath = _.trim(result.stdout);\n  } catch (e) {}\n\n  try {\n    let result = await spawnAsync('npm', ['--version']);\n    info.npmVersion = _.trim(result.stdout);\n  } catch (e) {}\n\n  try {\n    let result = await spawnAsync(whichCommand, ['npm']);\n    info.npmPath = _.trim(result.stdout);\n  } catch (e) {}\n\n  try {\n    info.watchmanVersion = await Watchman.unblockAndGetVersionAsync();\n  } catch (e) {}\n\n  try {\n    let result = await spawnAsync(whichCommand, ['watchman']);\n    info.watchmanPath = _.trim(result.stdout);\n  } catch (e) {}\n\n  try {\n    let result = await spawnAsync('adb', ['version']);\n    info.adbVersion = _.trim(result.stdout);\n  } catch (e) {}\n\n  try {\n    let result = await spawnAsync(whichCommand, ['adb']);\n    info.adbPath = _.trim(result.stdout);\n  } catch (e) {}\n\n  info.path = process.env.PATH;\n  info.shell = process.env.SHELL;\n  info.home = os.homedir();\n  info.nvmPath = process.env.NVM_PATH;\n  info.lang = process.env.LANG;\n  info.dirname = __dirname;\n  info.memoryFree = _formatBytes(os.freemem());\n  info.memoryTotal = _formatBytes(os.totalmem());\n  info.ip = ip.address();\n  info.hostname = os.hostname();\n\n  // TODO: fix these commands on linux\n  if (process.platform === 'darwin') {\n    // || process.platform === 'linux') {\n    try {\n      info.xdeProcesses = _.trim(child_process.execSync('pgrep XDE | xargs ps -p').toString());\n    } catch (e) {}\n\n    try {\n      info.numXdeProcesses = _.trim(child_process.execSync('pgrep XDE | wc -l').toString());\n    } catch (e) {}\n\n    try {\n      info.watchmanProcesses = _.trim(\n        child_process.execSync('pgrep watchman | xargs ps -p').toString()\n      );\n    } catch (e) {}\n\n    try {\n      info.numWatchmanProcesses = _.trim(\n        child_process.execSync('pgrep watchman | wc -l').toString()\n      );\n    } catch (e) {}\n\n    try {\n      info.ngrokProcesses = _.trim(child_process.execSync('pgrep ngrok | xargs ps -p').toString());\n    } catch (e) {}\n\n    try {\n      info.numNgrokProcesses = _.trim(child_process.execSync('pgrep ngrok | wc -l').toString());\n    } catch (e) {}\n  }\n\n  if (process.platform === 'darwin') {\n    // `xcrun` and `xcodebuild` will pop up a dialog if Xcode isn't installed\n    if (Binaries.isXcodeInstalled()) {\n      try {\n        let result = await spawnAsync('xcrun', ['--version']);\n        info.xcrunVersion = _.trim(result.stdout);\n      } catch (e) {}\n\n      try {\n        let result = await spawnAsync('xcodebuild', ['-version']);\n        info.xcodebuildVersion = _.trim(result.stdout);\n      } catch (e) {}\n    }\n\n    try {\n      let result = await spawnAsync('launchctl', ['limit']);\n      info.launchctlLimit = _.trim(result.stdout);\n    } catch (e) {}\n  }\n\n  // TODO: can probably get rid of these options if we remove Intercom\n  if (options.uploadLogs) {\n    info.url = await _uploadLogsAsync(info);\n  }\n\n  if (options.limitLengthForIntercom) {\n    info = _.mapValues(info, value => {\n      if (value && value.length > 100 && !value.startsWith('http')) {\n        return value.substring(0, 100);\n      } else {\n        return value;\n      }\n    });\n  }\n\n  return info;\n}\n"],"sourceRoot":"/xdl@52.0.12/src"}