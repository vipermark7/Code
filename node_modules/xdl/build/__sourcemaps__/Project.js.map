{"version":3,"sources":["Project.js"],"names":["async","projectDir","packagerPort","expoServerPort","await","ProjectSettings","readPackagerInfoAsync","currentStatus","projectRoot","url","UrlUtils","constructManifestUrlAsync","isUrlFallback","getManifestUrlWithFallbackAsync","ErrorCode","NO_PROJECT_ROOT","_assertValidProjectRoot","rangeStart","let","port","freeportAsync","NO_PORT_FOUND","_getFreePortAsync","platform","errorCode","minLength","getPlatformSpecificBundleUrl","fullUrl","response","axios","get","responseType","transformResponse","data","proxy","validateStatus","status","headers","error","body","JSON","parse","e","ProjectUtils","logError","message","length","_getForPlatformAsync","manifest","android","googleServicesFile","contents","fs","readFile","path","resolve","_resolveGoogleServicesFile","resolver","strict","assetSchemas","ExpSchema","getAssetSchemasAsync","sdkVersion","filter","fieldPath","urls","Promise","all","map","pathOrURL","match","existsSync","err","Error","localAssetPath","manifestField","forEach","index","set","logMethod","logWarning","_resolveManifestAssets","options","exp","pkg","readConfigJsonAsync","configName","configFilenameAsync","NO_PACKAGE_JSON","slug","name","INVALID_MANIFEST","getSlugAsync","formData","append","releaseChannel","queryResult","Api","callMethodAsync","getLatestReleaseAsync","sourceDirs","outputDir","assetPathToWrite","ensureDir","bundlesPathToWrite","androidIndexes","iosIndexes","sourceDir","promises","sourceAssetDir","outputAssetDir","assetPromise","copy","push","sourceBundleDir","outputBundleDir","bundlePromise","putJsonInMemory","indexPath","accumulator","JsonFile","readAsync","Array","isArray","androidIndexPath","iosIndexPath","getSortedIndex","indexes","sort","index1","index2","semver","eq","logger","global","gte","sortedAndroidIndexes","sortedIosIndexes","_writeArtifactSafelyAsync","join","stringify","mergeAppDistributions","publicUrl","assetUrl","_validatePackagerReadyAsync","packagerOpts","isDev","dev","minify","iosBundle","androidBundle","_buildPublishBundlesAsync","iosBundleHash","crypto","createHash","update","digest","iosBundleUrl","iosJsPath","androidBundleHash","androidBundleUrl","androidJsPath","info","publishOptions","_getPublishExpConfigAsync","assets","_fetchAndSaveAssetsAsync","dumpAssetmap","assetmap","asset","hash","hooks","assetUrlOverride","publishedTime","Date","toISOString","commitTime","hashIds","uuid","v1","revisionId","encode","now","developer","tool","username","UserManager","getCurrentUsernameAsync","id","bundleUrl","urljoin","dumpSourcemap","iosSourceMap","androidSourceMap","_maybeBuildSourceMapsAsync","force","iosMapName","iosMapPath","androidMapName","androidMapPath","truncateLastNLines","appendFile","debugHtml","exportForAppHosting","filePath","n","lines","readLastLines","read","to_vanquish","size","stat","truncate","paths","files","fileHashes","keyChunks","chunk","Object","keys","key","logDebug","quiet","assetPath","p","_saveAssetAsync","user","ensureLoggedInAsync","Analytics","logEvent","developerTool","Config","validationStatus","Doctor","validateWithNetworkAsync","ERROR","FATAL","PUBLISH_VALIDATION_ERROR","validPostPublishHooks","postPublish","hook","file","config","fn","_requireFromProject","_fn","HOOK_INITIALIZATION_ERROR","_fetchAndUploadAssetsAsync","_uploadArtifactsAsync","serverError","Sentry","captureException","_maybeWriteArtifactsToDiskAsync","ios","publishManifestPath","androidManifest","iosManifest","ExponentTools","getManifestAsync","Accept","hookOptions","log","msg","result","then","warn","stack","context","StandaloneContext","createUserContext","supportingDirectory","IosWorkspace","getPaths","IosPlist","modifyAsync","shellPlist","publishBundlePath","fullManifestUrl","replace","constantsPath","deleteLinesInFileAsync","regexFileAsync","isKernel","_handleKernelPublishedAsync","publishAsync","_createBlob","packagerInfo","startReactNativeServerAsync","reset","schema","joi","object","string","validate","INVALID_OPTIONS","toString","version","process","env","locales","getResolvedLocalesAsync","opts","entryPoint","Exp","determineEntryPointAsync","publishUrl","constructPublishUrlAsync","INVALID_BUNDLE","MINIMUM_BUNDLE_SIZE","sourceMapUrl","constructSourceMapUrlAsync","hostedAssetPrefix","assetsUrl","constructAssetsUrlAsync","iosAssetsJson","INVALID_ASSETS","androidAssetsJson","manifestAssets","absolutePath","md5hex","iosAssets","androidAssets","concat","_collectAssets","assetBundlePatterns","fullPatterns","bundledAssets","Set","shouldBundle","__packager_asset","some","minimatch","add","type","_configureExpForAssets","assetCdnPath","EXPO_CDN","uploadAssetsAsync","hostedUrl","keyName","artifactPath","artifact","pathToWrite","dirname","errorMsg","writeFile","publishSourceMapPath","kernelBundleUrl","api","scheme","host","kernel","androidManifestPath","iosManifestPath","metas","metadata","missing","exists","relativePath","_readFileForUpload","isNode","createReadStream","Blob","configPrefix","ThirdParty","getManifest","getConfigAsync","current","boolean","mode","any","valid","expIds","array","regex","bundleIdentifier","package","buildAsync","retries","test","delayAsync","_waitForRunningAsync","verbose","stopReactNativeServerAsync","Watchman","addToPathAsync","unblockAndGetVersionAsync","customLogReporterPath","resolveModule","assetExts","nonPersistent","maxWorkers","Versions","gteSdkVersion","userPackagerOpts","uniq","undefined","cliOpts","reduce","val","defaultCliPath","cliPath","rnCliPath","nodePath","_nodePathForProjectRoot","packagerProcess","child_process","fork","cwd","REACT_NATIVE_APP_ROOT","NODE_PATH","ELECTRON_RUN_AS_NODE","silent","setPackagerInfoAsync","packagerPid","pid","on","treekill","stdout","setEncoding","stderr","pipe","split","_logPackagerOutput","exitPromise","reject","once","code","packagerUrl","constructBundleUrlAsync","urlType","hostType","race","treekillAsync","stopExpoServerAsync","app","express","use","json","limit","urlencoded","extended","manifestHandler","req","res","getPackagerOptsAsync","bundleUrlPackagerOpts","xde","shouldExposeEnvironmentVariableInManifest","mainModuleName","guessMainModulePath","queryParams","constructBundleQueryParamsAsync","hostname","encodeURI","encodeURIComponent","debuggerHost","constructDebuggerHostAsync","logUrl","constructLogUrlAsync","hostUri","constructHostUriAsync","hostUUID","UserSettings","anonymousIdentifier","currentSession","getSessionAsync","offline","manifestString","_cachedSignedManifest","signedManifest","unsignedManifest","signature","publishInfo","getPublishInfoAsync","args","hostInfo","server","serverVersion","require","serverDriver","serverOS","os","serverOSVersion","release","send","post","deviceId","deviceName","_handleDeviceLogs","close","expRc","readExpRcAsync","manifestPort","listen","address","saveRecentExpRootAsync","startExpoServerAsync","hostnameAsync","ngrokPid","attempts","configPath","dotExpoHomeDirectory","ngrokConnectAsync","NGROK_ERROR","error_code","kill","ngrokKillAsync","resetProjectRandomnessAsync","_connectToNgrokAsync","NO_PACKAGER_PORT","NO_EXPO_SERVER_PORT","stopTunnelsAsync","Android","startAdbReverseAsync","logInfo","packageShortName","base","startedTunnelsSuccessfully","TUNNEL_TIMEOUT","expoServerNgrokUrl","authtoken","ngrok","authToken","proto","randomness","manifestTunnelRandomness","getProjectRandomnessAsync","domainify","domain","packagerNgrokUrl","logWithLevel","tag","_expoEventType","addListener","startTunnelsAsync","ngrokProcess","ngrokProcessPid","removeAllListeners","stopAdbReverseAsync","number","integer","setOptionsAsync","getUrlAsync","DevSession","startSession","startAsync","stopSession","_stopInternalAsync","setTimeout","stopAsync","promisify","connect","modulePath","fullPath","decache","_stripPackagerOutputBox","output","re","found","level","_isIgnorableDuplicateModuleWarning","startsWith","reactNativeNodeModulesPath","reactNativeNodeModulesPattern","escapeRegExp","reactNativeNodeModulesCollisionRegex","RegExp","_isIgnorableBugReportingExtraData","logs","i","obj","DEBUG","groupDepth","shouldHide","includesStack","directory","parentDirectory","delimiter","blacklistedEnvironmentVariables","has","toUpperCase"],"mappings":"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","file":"../Project.js","sourcesContent":["/**\n * @flow\n */\nimport axios from 'axios';\nimport child_process from 'child_process';\nimport crypto from 'crypto';\nimport delayAsync from 'delay-async';\nimport decache from 'decache';\nimport express from 'express';\nimport freeportAsync from 'freeport-async';\nimport fs from 'fs-extra';\nimport HashIds from 'hashids';\nimport joi from 'joi';\nimport JsonFile from '@expo/json-file';\nimport promisify from 'util.promisify';\nimport chunk from 'lodash/chunk';\nimport escapeRegExp from 'lodash/escapeRegExp';\nimport get from 'lodash/get';\nimport reduce from 'lodash/reduce';\nimport set from 'lodash/set';\nimport uniq from 'lodash/uniq';\nimport minimatch from 'minimatch';\nimport ngrok from '@expo/ngrok';\nimport os from 'os';\nimport path from 'path';\nimport semver from 'semver';\nimport split from 'split';\nimport treekill from 'tree-kill';\nimport md5hex from 'md5hex';\nimport url from 'url';\nimport urljoin from 'url-join';\nimport uuid from 'uuid';\nimport readLastLines from 'read-last-lines';\n\nimport * as Analytics from './Analytics';\nimport * as Android from './Android';\nimport Api from './Api';\nimport Config from './Config';\nimport * as Doctor from './project/Doctor';\nimport * as DevSession from './DevSession';\nimport ErrorCode from './ErrorCode';\nimport logger from './Logger';\nimport * as ExponentTools from './detach/ExponentTools';\nimport * as Exp from './Exp';\nimport * as ExpSchema from './project/ExpSchema';\nimport FormData from './tools/FormData';\nimport * as IosPlist from './detach/IosPlist';\nimport * as IosWorkspace from './detach/IosWorkspace';\nimport { isNode } from './tools/EnvironmentHelper';\nimport * as ProjectSettings from './ProjectSettings';\nimport * as ProjectUtils from './project/ProjectUtils';\nimport * as Sentry from './Sentry';\nimport StandaloneContext from './detach/StandaloneContext';\nimport * as ThirdParty from './ThirdParty';\nimport * as UrlUtils from './UrlUtils';\nimport UserManager, { ANONYMOUS_USERNAME } from './User';\nimport UserSettings from './UserSettings';\nimport * as Versions from './Versions';\nimport * as Watchman from './Watchman';\nimport XDLError from './XDLError';\n\nimport type { User as ExpUser } from './User'; //eslint-disable-line\n\nconst EXPO_CDN = 'https://d1wp6m56sqw74a.cloudfront.net';\nconst MINIMUM_BUNDLE_SIZE = 500;\nconst TUNNEL_TIMEOUT = 10 * 1000;\n\nconst treekillAsync = promisify(treekill);\nconst ngrokConnectAsync = promisify(ngrok.connect);\nconst ngrokKillAsync = promisify(ngrok.kill);\n\ntype CachedSignedManifest = {\n  manifestString: ?string,\n  signedManifest: ?string,\n};\n\nlet _cachedSignedManifest: CachedSignedManifest = {\n  manifestString: null,\n  signedManifest: null,\n};\n\nexport type ProjectStatus = 'running' | 'ill' | 'exited';\n\nexport async function currentStatus(projectDir: string): Promise<ProjectStatus> {\n  const { packagerPort, expoServerPort } = await ProjectSettings.readPackagerInfoAsync(projectDir);\n  if (packagerPort && expoServerPort) {\n    return 'running';\n  } else if (packagerPort || expoServerPort) {\n    return 'ill';\n  } else {\n    return 'exited';\n  }\n}\n\n// DECPRECATED: use UrlUtils.constructManifestUrlAsync\nexport async function getManifestUrlWithFallbackAsync(projectRoot: string) {\n  return {\n    url: await UrlUtils.constructManifestUrlAsync(projectRoot),\n    isUrlFallback: false,\n  };\n}\n\nasync function _assertValidProjectRoot(projectRoot) {\n  if (!projectRoot) {\n    throw new XDLError(ErrorCode.NO_PROJECT_ROOT, 'No project root specified');\n  }\n}\n\nasync function _getFreePortAsync(rangeStart) {\n  let port = await freeportAsync(rangeStart);\n  if (!port) {\n    throw new XDLError(ErrorCode.NO_PORT_FOUND, 'No available port found');\n  }\n\n  return port;\n}\n\nasync function _getForPlatformAsync(projectRoot, url, platform, { errorCode, minLength }) {\n  url = UrlUtils.getPlatformSpecificBundleUrl(url, platform);\n\n  let fullUrl = `${url}&platform=${platform}`;\n  let response;\n\n  try {\n    response = await axios.get(fullUrl, {\n      responseType: 'text',\n      // Workaround for https://github.com/axios/axios/issues/907.\n      // Without transformResponse, axios will parse the body as JSON regardless of the responseType/\n      transformResponse: [data => data],\n      proxy: false,\n      validateStatus: status => status === 200,\n      headers: {\n        'Exponent-Platform': platform,\n      },\n    });\n  } catch (error) {\n    if (error.response) {\n      if (error.response.data) {\n        let body;\n        try {\n          body = JSON.parse(error.response.data);\n        } catch (e) {\n          ProjectUtils.logError(projectRoot, 'expo', response.data);\n        }\n\n        if (body) {\n          if (body.message) {\n            ProjectUtils.logError(projectRoot, 'expo', body.message);\n          } else {\n            ProjectUtils.logError(projectRoot, 'expo', response.data);\n          }\n        }\n      }\n      throw new XDLError(\n        errorCode,\n        `Packager URL ${fullUrl} returned unexpected code ${response.status}. ` +\n          'Please open your project in the Expo app and see if there are any errors. ' +\n          'Also scroll up and make sure there were no errors or warnings when opening your project.'\n      );\n    } else {\n      throw error;\n    }\n  }\n\n  if (!response.data || (minLength && response.data.length < minLength)) {\n    throw new XDLError(errorCode, `Body is: ${response.data}`);\n  }\n\n  return response.data;\n}\n\nasync function _resolveGoogleServicesFile(projectRoot, manifest) {\n  if (manifest.android && manifest.android.googleServicesFile) {\n    const contents = await fs.readFile(\n      path.resolve(projectRoot, manifest.android.googleServicesFile),\n      'utf8'\n    );\n    manifest.android.googleServicesFile = contents;\n  }\n}\n\nasync function _resolveManifestAssets(projectRoot, manifest, resolver, strict = false) {\n  try {\n    // Asset fields that the user has set\n    const assetSchemas = (await ExpSchema.getAssetSchemasAsync(manifest.sdkVersion)).filter(\n      ({ fieldPath }) => get(manifest, fieldPath)\n    );\n\n    // Get the URLs\n    const urls = await Promise.all(\n      assetSchemas.map(async ({ fieldPath }) => {\n        const pathOrURL = get(manifest, fieldPath);\n        if (pathOrURL.match(/^https?:\\/\\/(.*)$/)) {\n          // It's a remote URL\n          return pathOrURL;\n        } else if (fs.existsSync(path.resolve(projectRoot, pathOrURL))) {\n          return await resolver(pathOrURL);\n        } else {\n          const err = new Error('Could not resolve local asset.');\n          // $FlowFixMe\n          err.localAssetPath = pathOrURL;\n          // $FlowFixMe\n          err.manifestField = fieldPath;\n          throw err;\n        }\n      })\n    );\n\n    // Set the corresponding URL fields\n    assetSchemas.forEach(({ fieldPath }, index) => set(manifest, fieldPath + 'Url', urls[index]));\n  } catch (e) {\n    let logMethod = ProjectUtils.logWarning;\n    if (strict) {\n      logMethod = ProjectUtils.logError;\n    }\n    if (e.localAssetPath) {\n      logMethod(\n        projectRoot,\n        'expo',\n        `Unable to resolve asset \"${e.localAssetPath}\" from \"${\n          e.manifestField\n        }\" in your app/exp.json.`\n      );\n    } else {\n      logMethod(\n        projectRoot,\n        'expo',\n        `Warning: Unable to resolve manifest assets. Icons might not work. ${e.message}.`\n      );\n    }\n\n    if (strict) {\n      throw new Error('Resolving assets failed.');\n    }\n  }\n}\n\nfunction _requireFromProject(modulePath, projectRoot, exp) {\n  try {\n    let fullPath = ProjectUtils.resolveModule(modulePath, projectRoot, exp);\n    // Clear the require cache for this module so get a fresh version of it\n    // without requiring the user to restart Expo CLI\n    decache(fullPath);\n    // $FlowIssue: doesn't work with dynamic requires\n    return require(fullPath);\n  } catch (e) {\n    return null;\n  }\n}\n\nexport async function getSlugAsync(projectRoot: string, options: Object = {}) {\n  // Verify that exp/app.json exist\n  let { exp, pkg } = await ProjectUtils.readConfigJsonAsync(projectRoot);\n  if (!exp || !pkg) {\n    const configName = await ProjectUtils.configFilenameAsync(projectRoot);\n    throw new XDLError(\n      ErrorCode.NO_PACKAGE_JSON,\n      `Couldn't read ${configName} file in project at ${projectRoot}`\n    );\n  }\n\n  if (!exp.slug && pkg.name) {\n    exp.slug = pkg.name;\n  } else if (!exp.slug) {\n    const configName = await ProjectUtils.configFilenameAsync(projectRoot);\n    throw new XDLError(\n      ErrorCode.INVALID_MANIFEST,\n      `${configName} in ${projectRoot} must contain the slug field`\n    );\n  }\n  return exp.slug;\n}\n\nexport async function getLatestReleaseAsync(\n  projectRoot: string,\n  options: {\n    releaseChannel: string,\n    platform: string,\n  }\n) {\n  // TODO(ville): move request from multipart/form-data to JSON once supported by the endpoint.\n  let formData = new FormData();\n  formData.append('queryType', 'history');\n  formData.append('slug', await getSlugAsync(projectRoot));\n  formData.append('version', '2');\n  formData.append('count', '1');\n  formData.append('releaseChannel', options.releaseChannel);\n  formData.append('platform', options.platform);\n  const { queryResult } = await Api.callMethodAsync('publishInfo', [], 'post', null, {\n    formData,\n  });\n  if (queryResult && queryResult.length > 0) {\n    return queryResult[0];\n  } else {\n    return null;\n  }\n}\n\n// Takes multiple exported apps in sourceDirs and coalesces them to one app in outputDir\nexport async function mergeAppDistributions(\n  projectRoot: string,\n  sourceDirs: Array<string>,\n  outputDir: string\n) {\n  const assetPathToWrite = path.resolve(projectRoot, outputDir, 'assets');\n  await fs.ensureDir(assetPathToWrite);\n  const bundlesPathToWrite = path.resolve(projectRoot, outputDir, 'bundles');\n  await fs.ensureDir(bundlesPathToWrite);\n\n  // merge files from bundles and assets\n  const androidIndexes = [];\n  const iosIndexes = [];\n\n  for (let sourceDir of sourceDirs) {\n    const promises = [];\n\n    // copy over assets/bundles from other src dirs to the output dir\n    if (sourceDir !== outputDir) {\n      // copy file over to assetPath\n      const sourceAssetDir = path.resolve(projectRoot, sourceDir, 'assets');\n      const outputAssetDir = path.resolve(projectRoot, outputDir, 'assets');\n      const assetPromise = fs.copy(sourceAssetDir, outputAssetDir);\n      promises.push(assetPromise);\n\n      // copy files over to bundlePath\n      const sourceBundleDir = path.resolve(projectRoot, sourceDir, 'bundles');\n      const outputBundleDir = path.resolve(projectRoot, outputDir, 'bundles');\n      const bundlePromise = fs.copy(sourceBundleDir, outputBundleDir);\n      promises.push(bundlePromise);\n\n      await Promise.all(promises);\n    }\n\n    // put index.jsons into memory\n    const putJsonInMemory = async (indexPath, accumulator) => {\n      const index = await JsonFile.readAsync(indexPath);\n      if (!index.sdkVersion) {\n        throw new XDLError(\n          ErrorCode.INVALID_MANIFEST,\n          `Invalid index.json, must specify an sdkVersion at ${indexPath}`\n        );\n      }\n      if (Array.isArray(index)) {\n        // index.json could also be an array\n        accumulator.push(...index);\n      } else {\n        accumulator.push(index);\n      }\n    };\n\n    const androidIndexPath = path.resolve(projectRoot, sourceDir, 'android-index.json');\n    await putJsonInMemory(androidIndexPath, androidIndexes);\n\n    const iosIndexPath = path.resolve(projectRoot, sourceDir, 'ios-index.json');\n    await putJsonInMemory(iosIndexPath, iosIndexes);\n  }\n\n  // sort indexes by descending sdk value\n  const getSortedIndex = indexes => {\n    return indexes.sort((index1, index2) => {\n      if (semver.eq(index1.sdkVersion, index2.sdkVersion)) {\n        logger.global.error(\n          `Encountered multiple index.json with the same SDK version ${\n            index1.sdkVersion\n          }. This could result in undefined behavior.`\n        );\n      }\n      return semver.gte(index1.sdkVersion, index2.sdkVersion) ? -1 : 1;\n    });\n  };\n\n  const sortedAndroidIndexes = getSortedIndex(androidIndexes);\n  const sortedIosIndexes = getSortedIndex(iosIndexes);\n\n  // Save the json arrays to disk\n  await _writeArtifactSafelyAsync(\n    projectRoot,\n    null,\n    path.join(outputDir, 'android-index.json'),\n    JSON.stringify(sortedAndroidIndexes)\n  );\n\n  await _writeArtifactSafelyAsync(\n    projectRoot,\n    null,\n    path.join(outputDir, 'ios-index.json'),\n    JSON.stringify(sortedIosIndexes)\n  );\n}\n\n/**\n * Apps exporting for self hosting will have the files created in the project directory the following way:\n.\n├── android-index.json\n├── ios-index.json\n├── assets\n│   └── 1eccbc4c41d49fd81840aef3eaabe862\n└── bundles\n      ├── android-01ee6e3ab3e8c16a4d926c91808d5320.js\n      └── ios-ee8206cc754d3f7aa9123b7f909d94ea.js\n */\nexport async function exportForAppHosting(\n  projectRoot: string,\n  publicUrl: string,\n  assetUrl: string,\n  outputDir: string,\n  options: {} = {}\n) {\n  await _validatePackagerReadyAsync(projectRoot);\n\n  // make output dirs if not exists\n  const assetPathToWrite = path.resolve(projectRoot, path.join(outputDir, 'assets'));\n  await fs.ensureDir(assetPathToWrite);\n  const bundlesPathToWrite = path.resolve(projectRoot, path.join(outputDir, 'bundles'));\n  await fs.ensureDir(bundlesPathToWrite);\n\n  // build the bundles\n  let packagerOpts = {};\n  if (options.isDev) {\n    packagerOpts = { dev: true, minify: true };\n  }\n  const { iosBundle, androidBundle } = await _buildPublishBundlesAsync(projectRoot, packagerOpts);\n  const iosBundleHash = crypto\n    .createHash('md5')\n    .update(iosBundle)\n    .digest('hex');\n  const iosBundleUrl = `ios-${iosBundleHash}.js`;\n  const iosJsPath = path.join(outputDir, 'bundles', iosBundleUrl);\n\n  const androidBundleHash = crypto\n    .createHash('md5')\n    .update(androidBundle)\n    .digest('hex');\n  const androidBundleUrl = `android-${androidBundleHash}.js`;\n  const androidJsPath = path.join(outputDir, 'bundles', androidBundleUrl);\n\n  await _writeArtifactSafelyAsync(projectRoot, null, iosJsPath, iosBundle);\n  await _writeArtifactSafelyAsync(projectRoot, null, androidJsPath, androidBundle);\n  logger.global.info('Finished saving JS Bundles.');\n\n  // save the assets\n  // Get project config\n  const publishOptions = options.publishOptions || {};\n  const exp = await _getPublishExpConfigAsync(projectRoot, publishOptions);\n  const { assets } = await _fetchAndSaveAssetsAsync(projectRoot, exp, publicUrl, outputDir);\n\n  if (options.dumpAssetmap) {\n    logger.global.info('Dumping asset map.');\n    const assetmap = {};\n    assets.forEach(asset => {\n      assetmap[asset.hash] = asset;\n    });\n    await _writeArtifactSafelyAsync(\n      projectRoot,\n      null,\n      path.join(outputDir, 'assetmap.json'),\n      JSON.stringify(assetmap)\n    );\n  }\n\n  // Delete keys that are normally deleted in the publish process\n  delete exp.hooks;\n\n  // Add assetUrl to manifest\n  exp.assetUrlOverride = assetUrl;\n\n  exp.publishedTime = new Date().toISOString();\n  exp.commitTime = new Date().toISOString();\n\n  // generate revisionId and id the same way www does\n  const hashIds = new HashIds(uuid.v1(), 10);\n  exp.revisionId = hashIds.encode(Date.now());\n\n  if (options.isDev) {\n    exp.developer = {\n      tool: 'exp',\n    };\n  }\n\n  if (!exp.slug) {\n    throw new XDLError(\n      ErrorCode.INVALID_MANIFEST,\n      'Must provide a slug field in the app.json manifest.'\n    );\n  }\n  let username = await UserManager.getCurrentUsernameAsync();\n  if (!username) {\n    username = ANONYMOUS_USERNAME;\n  }\n  exp.id = `@${username}/${exp.slug}`;\n\n  // save the android manifest\n  exp.bundleUrl = urljoin(publicUrl, 'bundles', androidBundleUrl);\n  exp.platform = 'android';\n  await _writeArtifactSafelyAsync(\n    projectRoot,\n    null,\n    path.join(outputDir, 'android-index.json'),\n    JSON.stringify(exp)\n  );\n\n  // save the ios manifest\n  exp.bundleUrl = urljoin(publicUrl, 'bundles', iosBundleUrl);\n  exp.platform = 'ios';\n  await _writeArtifactSafelyAsync(\n    projectRoot,\n    null,\n    path.join(outputDir, 'ios-index.json'),\n    JSON.stringify(exp)\n  );\n\n  // build source maps\n  if (options.dumpSourcemap) {\n    const { iosSourceMap, androidSourceMap } = await _maybeBuildSourceMapsAsync(projectRoot, exp, {\n      force: true,\n    });\n    // write the sourcemap files\n    const iosMapName = `ios-${iosBundleHash}.map`;\n    const iosMapPath = path.join(outputDir, 'bundles', iosMapName);\n    await _writeArtifactSafelyAsync(projectRoot, null, iosMapPath, iosSourceMap);\n\n    const androidMapName = `android-${androidBundleHash}.map`;\n    const androidMapPath = path.join(outputDir, 'bundles', androidMapName);\n    await _writeArtifactSafelyAsync(projectRoot, null, androidMapPath, androidSourceMap);\n\n    // Remove original mapping to incorrect sourcemap paths\n    logger.global.info('Configuring sourcemaps');\n    await truncateLastNLines(iosJsPath, 1);\n    await truncateLastNLines(androidJsPath, 1);\n\n    // Add correct mapping to sourcemap paths\n    await fs.appendFile(iosJsPath, `\\n//# sourceMappingURL=${iosMapName}`);\n    await fs.appendFile(androidJsPath, `\\n//# sourceMappingURL=${androidMapName}`);\n\n    // Make a debug html so user can debug their bundles\n    logger.global.info('Preparing additional debugging files');\n    const debugHtml = `\n    <script src=\"${urljoin('bundles', iosBundleUrl)}\"></script>\n    <script src=\"${urljoin('bundles', androidBundleUrl)}\"></script>\n    Open up this file in Chrome. In the Javascript developer console, navigate to the Source tab.\n    You can see a red coloured folder containing the original source code from your bundle.\n    `;\n    await _writeArtifactSafelyAsync(\n      projectRoot,\n      null,\n      path.join(outputDir, 'debug.html'),\n      debugHtml\n    );\n  }\n}\n\n// truncate the last n lines in a file\nasync function truncateLastNLines(filePath: string, n: number) {\n  const lines = await readLastLines.read(filePath, n);\n  const to_vanquish = lines.length;\n  const { size } = await fs.stat(filePath);\n  await fs.truncate(filePath, size - to_vanquish);\n}\n\nasync function _saveAssetAsync(projectRoot, assets, outputDir) {\n  // Collect paths by key, also effectively handles duplicates in the array\n  const paths = {};\n  assets.forEach(asset => {\n    asset.files.forEach((path, index) => {\n      paths[asset.fileHashes[index]] = path;\n    });\n  });\n\n  // save files one chunk at a time\n  const keyChunks = chunk(Object.keys(paths), 5);\n  for (const keys of keyChunks) {\n    const promises = [];\n    for (const key of keys) {\n      ProjectUtils.logDebug(projectRoot, 'expo', `uploading ${paths[key]}`);\n\n      logger.global.info({ quiet: true }, `Saving ${paths[key]}`);\n\n      let assetPath = path.resolve(outputDir, 'assets', key);\n\n      // copy file over to assetPath\n      const p = fs.copy(paths[key], assetPath);\n      promises.push(p);\n    }\n    await Promise.all(promises);\n  }\n  logger.global.info('Files successfully saved.');\n}\n\nexport async function publishAsync(\n  projectRoot: string,\n  options: Object = {}\n): Promise<{ url: string, ids: string[], err: ?string }> {\n  const user = await UserManager.ensureLoggedInAsync();\n  await _validatePackagerReadyAsync(projectRoot);\n  Analytics.logEvent('Publish', {\n    projectRoot,\n    developerTool: Config.developerTool,\n  });\n\n  const validationStatus = await Doctor.validateWithNetworkAsync(projectRoot);\n  if (validationStatus == Doctor.ERROR || validationStatus === Doctor.FATAL) {\n    throw new XDLError(\n      ErrorCode.PUBLISH_VALIDATION_ERROR,\n      \"Couldn't publish because errors were found. (See logs above.) Please fix the errors and try again.\"\n    );\n  }\n\n  // Get project config\n  let exp = await _getPublishExpConfigAsync(projectRoot, options);\n\n  // TODO: refactor this out to a function, throw error if length doesn't match\n  let { hooks } = exp;\n  delete exp.hooks;\n  let validPostPublishHooks = [];\n  if (hooks && hooks.postPublish) {\n    hooks.postPublish.forEach(hook => {\n      let { file, config } = hook;\n      let fn = _requireFromProject(file, projectRoot, exp);\n      if (typeof fn !== 'function') {\n        logger.global.error(\n          `Unable to load postPublishHook: '${file}'. The module does not export a function.`\n        );\n      } else {\n        hook._fn = fn;\n        validPostPublishHooks.push(hook);\n      }\n    });\n\n    if (validPostPublishHooks.length !== hooks.postPublish.length) {\n      logger.global.error();\n\n      throw new XDLError(\n        ErrorCode.HOOK_INITIALIZATION_ERROR,\n        'Please fix your postPublish hook configuration.'\n      );\n    }\n  }\n\n  let { iosBundle, androidBundle } = await _buildPublishBundlesAsync(projectRoot);\n\n  await _fetchAndUploadAssetsAsync(projectRoot, exp);\n\n  let { iosSourceMap, androidSourceMap } = await _maybeBuildSourceMapsAsync(projectRoot, exp, {\n    force: validPostPublishHooks.length,\n  });\n\n  let response;\n  try {\n    response = await _uploadArtifactsAsync({\n      exp,\n      iosBundle,\n      androidBundle,\n      options,\n    });\n  } catch (e) {\n    if (e.serverError === 'SCHEMA_VALIDATION_ERROR') {\n      throw new Error(\n        `There was an error validating your project schema. Check for any warnings about the contents of your app/exp.json.`\n      );\n    }\n    Sentry.captureException(e);\n    throw e;\n  }\n\n  await _maybeWriteArtifactsToDiskAsync({\n    exp,\n    projectRoot,\n    iosBundle,\n    androidBundle,\n    iosSourceMap,\n    androidSourceMap,\n  });\n\n  if (\n    validPostPublishHooks.length ||\n    (exp.ios && exp.ios.publishManifestPath) ||\n    (exp.android && exp.android.publishManifestPath)\n  ) {\n    let [androidManifest, iosManifest] = await Promise.all([\n      ExponentTools.getManifestAsync(response.url, {\n        'Exponent-SDK-Version': exp.sdkVersion,\n        'Exponent-Platform': 'android',\n        'Expo-Release-Channel': options.releaseChannel,\n        Accept: 'application/expo+json,application/json',\n      }),\n      ExponentTools.getManifestAsync(response.url, {\n        'Exponent-SDK-Version': exp.sdkVersion,\n        'Exponent-Platform': 'ios',\n        'Expo-Release-Channel': options.releaseChannel,\n        Accept: 'application/expo+json,application/json',\n      }),\n    ]);\n\n    const hookOptions = {\n      url: response.url,\n      exp,\n      iosBundle,\n      iosSourceMap,\n      iosManifest,\n      androidBundle,\n      androidSourceMap,\n      androidManifest,\n      projectRoot,\n      log: msg => {\n        logger.global.info({ quiet: true }, msg);\n      },\n    };\n\n    for (let hook of validPostPublishHooks) {\n      logger.global.info(`Running postPublish hook: ${hook.file}`);\n      try {\n        let result = hook._fn({\n          config: hook.config,\n          ...hookOptions,\n        });\n\n        // If it's a promise, wait for it to resolve\n        if (result && result.then) {\n          result = await result;\n        }\n\n        if (result) {\n          logger.global.info({ quiet: true }, result);\n        }\n      } catch (e) {\n        logger.global.warn(`Warning: postPublish hook '${hook.file}' failed: ${e.stack}`);\n      }\n    }\n\n    if (exp.ios && exp.ios.publishManifestPath) {\n      await _writeArtifactSafelyAsync(\n        projectRoot,\n        'ios.publishManifestPath',\n        exp.ios.publishManifestPath,\n        JSON.stringify(iosManifest)\n      );\n      const context = StandaloneContext.createUserContext(projectRoot, exp);\n      const { supportingDirectory } = IosWorkspace.getPaths(context);\n      await IosPlist.modifyAsync(supportingDirectory, 'EXShell', shellPlist => {\n        shellPlist.releaseChannel = options.releaseChannel;\n        return shellPlist;\n      });\n    }\n\n    if (exp.android && exp.android.publishManifestPath) {\n      await _writeArtifactSafelyAsync(\n        projectRoot,\n        'android.publishManifestPath',\n        exp.android.publishManifestPath,\n        JSON.stringify(androidManifest)\n      );\n    }\n\n    // We need to add EmbeddedResponse instances on Android to tell the runtime\n    // that the shell app manifest and bundle is packaged.\n    if (exp.android && exp.android.publishManifestPath && exp.android.publishBundlePath) {\n      let fullManifestUrl = response.url.replace('exp://', 'https://');\n      let constantsPath = path.join(\n        projectRoot,\n        'android',\n        'app',\n        'src',\n        'main',\n        'java',\n        'host',\n        'exp',\n        'exponent',\n        'generated',\n        'AppConstants.java'\n      );\n      await ExponentTools.deleteLinesInFileAsync(\n        `START EMBEDDED RESPONSES`,\n        `END EMBEDDED RESPONSES`,\n        constantsPath\n      );\n      await ExponentTools.regexFileAsync(\n        '// ADD EMBEDDED RESPONSES HERE',\n        `\n        // ADD EMBEDDED RESPONSES HERE\n        // START EMBEDDED RESPONSES\n        embeddedResponses.add(new Constants.EmbeddedResponse(\"${fullManifestUrl}\", \"assets://shell-app-manifest.json\", \"application/json\"));\n        embeddedResponses.add(new Constants.EmbeddedResponse(\"${\n          androidManifest.bundleUrl\n        }\", \"assets://shell-app.bundle\", \"application/javascript\"));\n        // END EMBEDDED RESPONSES`,\n        constantsPath\n      );\n      await ExponentTools.regexFileAsync(\n        /RELEASE_CHANNEL = \"[^\"]*\"/,\n        `RELEASE_CHANNEL = \"${options.releaseChannel}\"`,\n        constantsPath\n      );\n    }\n  }\n\n  // TODO: move to postPublish hook\n  if (exp.isKernel) {\n    await _handleKernelPublishedAsync({\n      user,\n      exp,\n      projectRoot,\n      url: response.url,\n    });\n  }\n\n  return {\n    ...response,\n    url:\n      options.releaseChannel && options.releaseChannel !== 'default'\n        ? `${response.url}?release-channel=${options.releaseChannel}`\n        : response.url,\n  };\n}\n\nasync function _uploadArtifactsAsync({ exp, iosBundle, androidBundle, options }) {\n  logger.global.info('Uploading JavaScript bundles');\n  let formData = new FormData();\n\n  formData.append('expJson', JSON.stringify(exp));\n  formData.append('iosBundle', _createBlob(iosBundle), 'iosBundle');\n  formData.append('androidBundle', _createBlob(androidBundle), 'androidBundle');\n  formData.append('options', JSON.stringify(options));\n  let response = await Api.callMethodAsync('publish', null, 'put', null, {\n    formData,\n  });\n  return response;\n}\n\nasync function _validatePackagerReadyAsync(projectRoot) {\n  _assertValidProjectRoot(projectRoot);\n\n  // Ensure the packager is started\n  let packagerInfo = await ProjectSettings.readPackagerInfoAsync(projectRoot);\n  if (!packagerInfo.packagerPort) {\n    ProjectUtils.logWarning(\n      projectRoot,\n      'expo',\n      'Metro Bundler is not running. Trying to restart it...'\n    );\n    await startReactNativeServerAsync(projectRoot, { reset: true });\n  }\n}\n\nasync function _getPublishExpConfigAsync(projectRoot, options) {\n  let schema = joi.object().keys({\n    releaseChannel: joi.string(),\n  });\n\n  // Validate schema\n  const { error } = joi.validate(options, schema);\n  if (error) {\n    throw new XDLError(ErrorCode.INVALID_OPTIONS, error.toString());\n  }\n  options.releaseChannel = options.releaseChannel || 'default'; // joi default not enforcing this :/\n\n  // Verify that exp/app.json and package.json exist\n  let { exp, pkg } = await ProjectUtils.readConfigJsonAsync(projectRoot);\n  if (!exp || !pkg) {\n    const configName = await ProjectUtils.configFilenameAsync(projectRoot);\n    throw new XDLError(\n      ErrorCode.NO_PACKAGE_JSON,\n      `Couldn't read ${configName} file in project at ${projectRoot}`\n    );\n  }\n\n  // Support version and name being specified in package.json for legacy\n  // support pre: exp.json\n  if (!exp.version && pkg.version) {\n    exp.version = pkg.version;\n  }\n\n  if (!exp.slug && pkg.name) {\n    exp.slug = pkg.name;\n  }\n\n  if (exp.android && exp.android.config) {\n    delete exp.android.config;\n  }\n\n  if (exp.ios && exp.ios.config) {\n    delete exp.ios.config;\n  }\n\n  // Only allow projects to be published with UNVERSIONED if a correct token is set in env\n  if (exp.sdkVersion === 'UNVERSIONED' && !process.env['EXPO_SKIP_MANIFEST_VALIDATION_TOKEN']) {\n    throw new XDLError(ErrorCode.INVALID_OPTIONS, 'Cannot publish with sdkVersion UNVERSIONED.');\n  }\n  exp.locales = await ExponentTools.getResolvedLocalesAsync(exp);\n  return exp;\n}\n\n// Fetch iOS and Android bundles for publishing\nasync function _buildPublishBundlesAsync(projectRoot, opts?: Object) {\n  let entryPoint = await Exp.determineEntryPointAsync(projectRoot);\n  let publishUrl = await UrlUtils.constructPublishUrlAsync(projectRoot, entryPoint, null, opts);\n\n  logger.global.info('Building iOS bundle');\n  let iosBundle = await _getForPlatformAsync(projectRoot, publishUrl, 'ios', {\n    errorCode: ErrorCode.INVALID_BUNDLE,\n    minLength: MINIMUM_BUNDLE_SIZE,\n  });\n\n  logger.global.info('Building Android bundle');\n  let androidBundle = await _getForPlatformAsync(projectRoot, publishUrl, 'android', {\n    errorCode: ErrorCode.INVALID_BUNDLE,\n    minLength: MINIMUM_BUNDLE_SIZE,\n  });\n\n  return { iosBundle, androidBundle };\n}\n\n// note(brentvatne): currently we build source map anytime there is a\n// postPublish hook -- we may have an option in the future to manually\n// enable sourcemap building, but for now it's very fast, most apps in\n// production should use sourcemaps for error reporting, and in the worst\n// case, adding a few seconds to a postPublish hook isn't too annoying\nasync function _maybeBuildSourceMapsAsync(projectRoot, exp, options = {}) {\n  if (!options.force) {\n    return { iosSourceMap: null, androidSourceMap: null };\n  }\n\n  let entryPoint = await Exp.determineEntryPointAsync(projectRoot);\n  let sourceMapUrl = await UrlUtils.constructSourceMapUrlAsync(projectRoot, entryPoint);\n\n  logger.global.info('Building sourcemaps');\n  let iosSourceMap = await _getForPlatformAsync(projectRoot, sourceMapUrl, 'ios', {\n    errorCode: ErrorCode.INVALID_BUNDLE,\n    minLength: MINIMUM_BUNDLE_SIZE,\n  });\n\n  let androidSourceMap = await _getForPlatformAsync(projectRoot, sourceMapUrl, 'android', {\n    errorCode: ErrorCode.INVALID_BUNDLE,\n    minLength: MINIMUM_BUNDLE_SIZE,\n  });\n\n  return { iosSourceMap, androidSourceMap };\n}\n\n/**\n * Collects all the assets declared in the android app, ios app and manifest\n *\n * @param {string} hostedAssetPrefix\n *    The path where assets are hosted (ie) http://xxx.cloudfront.com/assets/\n *\n * @modifies {exp} Replaces relative asset paths in the manifest with hosted URLS\n *\n */\nasync function _collectAssets(projectRoot, exp, hostedAssetPrefix) {\n  let entryPoint = await Exp.determineEntryPointAsync(projectRoot);\n  let assetsUrl = await UrlUtils.constructAssetsUrlAsync(projectRoot, entryPoint);\n\n  let iosAssetsJson = await _getForPlatformAsync(projectRoot, assetsUrl, 'ios', {\n    errorCode: ErrorCode.INVALID_ASSETS,\n  });\n\n  let androidAssetsJson = await _getForPlatformAsync(projectRoot, assetsUrl, 'android', {\n    errorCode: ErrorCode.INVALID_ASSETS,\n  });\n\n  // Resolve manifest assets to their hosted URL and add them to the list of assets to\n  // be uploaded. Modifies exp.\n  const manifestAssets = [];\n  await _resolveManifestAssets(\n    projectRoot,\n    exp,\n    async assetPath => {\n      const absolutePath = path.resolve(projectRoot, assetPath);\n      const contents = await fs.readFile(absolutePath);\n      const hash = md5hex(contents);\n      manifestAssets.push({ files: [absolutePath], fileHashes: [hash], hash });\n      return urljoin(hostedAssetPrefix, hash);\n    },\n    true\n  );\n\n  // Upload asset files\n  const iosAssets = JSON.parse(iosAssetsJson);\n  const androidAssets = JSON.parse(androidAssetsJson);\n  return iosAssets.concat(androidAssets).concat(manifestAssets);\n}\n\n/**\n * Configures exp, preparing it for asset export\n *\n * @modifies {exp}\n *\n */\nasync function _configureExpForAssets(projectRoot, exp, assets) {\n  // Add google services file if it exists\n  await _resolveGoogleServicesFile(projectRoot, exp);\n\n  // Convert asset patterns to a list of asset strings that match them.\n  // Assets strings are formatted as `asset_<hash>.<type>` and represent\n  // the name that the file will have in the app bundle. The `asset_` prefix is\n  // needed because android doesn't support assets that start with numbers.\n  if (exp.assetBundlePatterns) {\n    const fullPatterns = exp.assetBundlePatterns.map(p => path.join(projectRoot, p));\n    logger.global.info('Processing asset bundle patterns:');\n    fullPatterns.forEach(p => logger.global.info('- ' + p));\n    // The assets returned by the RN packager has duplicates so make sure we\n    // only bundle each once.\n    const bundledAssets = new Set();\n    for (const asset of assets) {\n      const file = asset.files && asset.files[0];\n      const shouldBundle =\n        asset.__packager_asset && file && fullPatterns.some(p => minimatch(file, p));\n      ProjectUtils.logDebug(\n        projectRoot,\n        'expo',\n        `${shouldBundle ? 'Include' : 'Exclude'} asset ${file}`\n      );\n      if (shouldBundle) {\n        asset.fileHashes.forEach(hash =>\n          bundledAssets.add('asset_' + hash + (asset.type ? '.' + asset.type : ''))\n        );\n      }\n    }\n    exp.bundledAssets = [...bundledAssets];\n    delete exp.assetBundlePatterns;\n  }\n\n  return exp;\n}\n\nasync function _fetchAndUploadAssetsAsync(projectRoot, exp) {\n  logger.global.info('Analyzing assets');\n\n  const assetCdnPath = urljoin(EXPO_CDN, '~assets');\n  const assets = await _collectAssets(projectRoot, exp, assetCdnPath);\n\n  logger.global.info('Uploading assets');\n\n  if (assets.length > 0 && assets[0].fileHashes) {\n    await uploadAssetsAsync(projectRoot, assets);\n  } else {\n    logger.global.info({ quiet: true }, 'No assets to upload, skipped.');\n  }\n\n  // Updates the manifest to reflect additional asset bundling + configs\n  await _configureExpForAssets(projectRoot, exp, assets);\n\n  return exp;\n}\n\nasync function _fetchAndSaveAssetsAsync(projectRoot, exp, hostedUrl, outputDir) {\n  logger.global.info('Analyzing assets');\n\n  const assetCdnPath = urljoin(hostedUrl, 'assets');\n  const assets = await _collectAssets(projectRoot, exp, assetCdnPath);\n\n  logger.global.info('Saving assets');\n\n  if (assets.length > 0 && assets[0].fileHashes) {\n    await _saveAssetAsync(projectRoot, assets, outputDir);\n  } else {\n    logger.global.info({ quiet: true }, 'No assets to upload, skipped.');\n  }\n\n  // Updates the manifest to reflect additional asset bundling + configs\n  await _configureExpForAssets(projectRoot, exp, assets);\n\n  return { exp, assets };\n}\n\nasync function _writeArtifactSafelyAsync(projectRoot, keyName, artifactPath, artifact) {\n  const pathToWrite = path.resolve(projectRoot, artifactPath);\n  if (!fs.existsSync(path.dirname(pathToWrite))) {\n    const errorMsg = keyName\n      ? `app.json specifies: ${pathToWrite}, but that directory does not exist.`\n      : `app.json specifies ${keyName}: ${pathToWrite}, but that directory does not exist.`;\n    logger.global.warn(errorMsg);\n  } else {\n    await fs.writeFile(pathToWrite, artifact);\n  }\n}\n\nasync function _maybeWriteArtifactsToDiskAsync({\n  exp,\n  projectRoot,\n  iosBundle,\n  androidBundle,\n  iosSourceMap,\n  androidSourceMap,\n}) {\n  if (exp.android && exp.android.publishBundlePath) {\n    await _writeArtifactSafelyAsync(\n      projectRoot,\n      'android.publishBundlePath',\n      exp.android.publishBundlePath,\n      androidBundle\n    );\n  }\n\n  if (exp.ios && exp.ios.publishBundlePath) {\n    await _writeArtifactSafelyAsync(\n      projectRoot,\n      'ios.publishBundlePath',\n      exp.ios.publishBundlePath,\n      iosBundle\n    );\n  }\n\n  if (exp.android && exp.android.publishSourceMapPath) {\n    await _writeArtifactSafelyAsync(\n      projectRoot,\n      'android.publishSourceMapPath',\n      exp.android.publishSourceMapPath,\n      androidSourceMap\n    );\n  }\n\n  if (exp.ios && exp.ios.publishSourceMapPath) {\n    await _writeArtifactSafelyAsync(\n      projectRoot,\n      'ios.publishSourceMapPath',\n      exp.ios.publishSourceMapPath,\n      iosSourceMap\n    );\n  }\n}\n\nasync function _handleKernelPublishedAsync({ projectRoot, user, exp, url }) {\n  let kernelBundleUrl = `${Config.api.scheme}://${Config.api.host}`;\n  if (Config.api.port) {\n    kernelBundleUrl = `${kernelBundleUrl}:${Config.api.port}`;\n  }\n  kernelBundleUrl = `${kernelBundleUrl}/@${user.username}/${exp.slug}/bundle`;\n\n  if (exp.kernel.androidManifestPath) {\n    let manifest = await ExponentTools.getManifestAsync(url, {\n      'Exponent-SDK-Version': exp.sdkVersion,\n      'Exponent-Platform': 'android',\n      Accept: 'application/expo+json,application/json',\n    });\n    manifest.bundleUrl = kernelBundleUrl;\n    manifest.sdkVersion = 'UNVERSIONED';\n    await fs.writeFile(\n      path.resolve(projectRoot, exp.kernel.androidManifestPath),\n      JSON.stringify(manifest)\n    );\n  }\n\n  if (exp.kernel.iosManifestPath) {\n    let manifest = await ExponentTools.getManifestAsync(url, {\n      'Exponent-SDK-Version': exp.sdkVersion,\n      'Exponent-Platform': 'ios',\n      Accept: 'application/expo+json,application/json',\n    });\n    manifest.bundleUrl = kernelBundleUrl;\n    manifest.sdkVersion = 'UNVERSIONED';\n    await fs.writeFile(\n      path.resolve(projectRoot, exp.kernel.iosManifestPath),\n      JSON.stringify(manifest)\n    );\n  }\n}\n\n// TODO(jesse): Add analytics for upload\nasync function uploadAssetsAsync(projectRoot, assets) {\n  // Collect paths by key, also effectively handles duplicates in the array\n  const paths = {};\n  assets.forEach(asset => {\n    asset.files.forEach((path, index) => {\n      paths[asset.fileHashes[index]] = path;\n    });\n  });\n\n  // Collect list of assets missing on host\n  const metas = (await Api.callMethodAsync('assetsMetadata', [], 'post', {\n    keys: Object.keys(paths),\n  })).metadata;\n  const missing = Object.keys(paths).filter(key => !metas[key].exists);\n\n  if (missing.length === 0) {\n    logger.global.info({ quiet: true }, `No assets changed, skipped.`);\n  }\n\n  // Upload them!\n  await Promise.all(\n    chunk(missing, 5).map(async keys => {\n      let formData = new FormData();\n      for (const key of keys) {\n        ProjectUtils.logDebug(projectRoot, 'expo', `uploading ${paths[key]}`);\n\n        let relativePath = paths[key].replace(projectRoot, '');\n        logger.global.info({ quiet: true }, `Uploading ${relativePath}`);\n\n        formData.append(key, await _readFileForUpload(paths[key]), paths[key]);\n      }\n      await Api.callMethodAsync('uploadAssets', [], 'put', null, { formData });\n    })\n  );\n}\n\nfunction _createBlob(string) {\n  if (isNode()) {\n    return string;\n  } else {\n    return new Blob([string]);\n  }\n}\n\nasync function _readFileForUpload(path) {\n  if (isNode()) {\n    return fs.createReadStream(path);\n  } else {\n    const data = await fs.readFile(path);\n    return new Blob([data]);\n  }\n}\n\nasync function getConfigAsync(\n  projectRoot: string,\n  options: {\n    current?: boolean,\n    mode?: string,\n    platform?: string,\n    expIds?: Array<string>,\n    type?: string,\n    releaseChannel?: string,\n    bundleIdentifier?: string,\n    publicUrl?: string,\n  } = {}\n) {\n  if (!options.publicUrl) {\n    // get the manifest from the project directory\n    const { exp, pkg } = await ProjectUtils.readConfigJsonAsync(projectRoot);\n    const configName = await ProjectUtils.configFilenameAsync(projectRoot);\n    return {\n      exp,\n      pkg,\n      configName: await ProjectUtils.configFilenameAsync(projectRoot),\n      configPrefix: configName === 'app.json' ? 'expo.' : '',\n    };\n  } else {\n    // get the externally hosted manifest\n    return {\n      exp: await ThirdParty.getManifest(options.publicUrl, options),\n      configName: options.publicUrl,\n      configPrefix: '',\n      pkg: {},\n    };\n  }\n}\n\nexport async function buildAsync(\n  projectRoot: string,\n  options: {\n    current?: boolean,\n    mode?: string,\n    platform?: string,\n    expIds?: Array<string>,\n    type?: string,\n    releaseChannel?: string,\n    bundleIdentifier?: string,\n    publicUrl?: string,\n    sdkVersion?: string,\n  } = {}\n) {\n  await UserManager.ensureLoggedInAsync();\n  _assertValidProjectRoot(projectRoot);\n\n  Analytics.logEvent('Build Shell App', {\n    projectRoot,\n    developerTool: Config.developerTool,\n    platform: options.platform,\n  });\n\n  const schema = joi.object().keys({\n    current: joi.boolean(),\n    mode: joi.string(),\n    platform: joi.any().valid('ios', 'android', 'all'),\n    expIds: joi.array(),\n    type: joi.any().valid('archive', 'simulator', 'client'),\n    releaseChannel: joi.string().regex(/[a-z\\d][a-z\\d._-]*/),\n    bundleIdentifier: joi.string().regex(/^[a-zA-Z][a-zA-Z0-9\\-\\.]+$/),\n    publicUrl: joi.string(),\n    sdkVersion: joi.strict(),\n  });\n\n  const { error } = joi.validate(options, schema);\n  if (error) {\n    throw new XDLError(ErrorCode.INVALID_OPTIONS, error.toString());\n  }\n\n  const { exp, pkg, configName, configPrefix } = await getConfigAsync(projectRoot, options);\n\n  if (!exp || !pkg) {\n    throw new XDLError(\n      ErrorCode.NO_PACKAGE_JSON,\n      `Couldn't read ${configName} file in project at ${projectRoot}`\n    );\n  }\n\n  // Support version and name being specified in package.json for legacy\n  // support pre: exp.json\n  if (!exp.version && pkg.version) {\n    exp.version = pkg.version;\n  }\n  if (!exp.slug && pkg.name) {\n    exp.slug = pkg.name;\n  }\n\n  if (options.mode !== 'status' && (options.platform === 'ios' || options.platform === 'all')) {\n    if (!exp.ios || !exp.ios.bundleIdentifier) {\n      throw new XDLError(\n        ErrorCode.INVALID_MANIFEST,\n        `Must specify a bundle identifier in order to build this experience for iOS. ` +\n          `Please specify one in ${configName} at \"${configPrefix}ios.bundleIdentifier\"`\n      );\n    }\n  }\n\n  if (options.mode !== 'status' && (options.platform === 'android' || options.platform === 'all')) {\n    if (!exp.android || !exp.android.package) {\n      throw new XDLError(\n        ErrorCode.INVALID_MANIFEST,\n        `Must specify a java package in order to build this experience for Android. ` +\n          `Please specify one in ${configName} at \"${configPrefix}android.package\"`\n      );\n    }\n  }\n\n  return await Api.callMethodAsync('build', [], 'put', {\n    manifest: exp,\n    options,\n  });\n}\n\nasync function _waitForRunningAsync(projectRoot, url, retries = 300) {\n  try {\n    let response = await axios.get(url, {\n      responseType: 'text',\n      proxy: false,\n    });\n    if (/packager-status:running/.test(response.data)) {\n      return true;\n    } else if (retries === 0) {\n      ProjectUtils.logError(\n        projectRoot,\n        'expo',\n        `Could not get status from Metro bundler. Server response: ${response.data}`\n      );\n    }\n  } catch (e) {\n    if (retries === 0) {\n      ProjectUtils.logError(\n        projectRoot,\n        'expo',\n        `Could not get status from Metro bundler. ${e.message}`\n      );\n    }\n  }\n\n  if (retries <= 0) {\n    throw new Error('Connecting to Metro bundler failed.');\n  } else {\n    await delayAsync(100);\n    return _waitForRunningAsync(projectRoot, url, retries - 1);\n  }\n}\n\nfunction _stripPackagerOutputBox(output: string) {\n  let re = /Running packager on port (\\d+)/;\n  let found = output.match(re);\n  if (found && found.length >= 2) {\n    return `Running packager on port ${found[1]}\\n`;\n  } else {\n    return null;\n  }\n}\n\nfunction _logPackagerOutput(projectRoot: string, level: string, data: Object) {\n  let output = data.toString();\n  if (!output) {\n    return;\n  }\n  // Temporarily hide warnings about duplicate providesModule declarations\n  // under react-native\n  if (_isIgnorableDuplicateModuleWarning(projectRoot, level, output)) {\n    ProjectUtils.logDebug(\n      projectRoot,\n      'expo',\n      `Suppressing @providesModule warning: ${output}`,\n      'project-suppress-providesmodule-warning'\n    );\n    return;\n  }\n  if (/^Scanning folders for symlinks in /.test(output)) {\n    ProjectUtils.logDebug(projectRoot, 'metro', output);\n    return;\n  }\n  if (level === 'info') {\n    ProjectUtils.logInfo(projectRoot, 'metro', output);\n  } else {\n    ProjectUtils.logError(projectRoot, 'metro', output);\n  }\n}\n\nfunction _isIgnorableDuplicateModuleWarning(\n  projectRoot: string,\n  level: string,\n  output: string\n): boolean {\n  if (\n    level !== 'error' ||\n    !output.startsWith('jest-haste-map: @providesModule naming collision:')\n  ) {\n    return false;\n  }\n\n  let reactNativeNodeModulesPath = path.join(\n    projectRoot,\n    'node_modules',\n    'react-native',\n    'node_modules'\n  );\n  let reactNativeNodeModulesPattern = escapeRegExp(reactNativeNodeModulesPath);\n  let reactNativeNodeModulesCollisionRegex = new RegExp(\n    `Paths: ${reactNativeNodeModulesPattern}.+ collides with ${reactNativeNodeModulesPattern}.+`\n  );\n  return reactNativeNodeModulesCollisionRegex.test(output);\n}\n\nfunction _isIgnorableBugReportingExtraData(body) {\n  return body.length === 2 && body[0] === 'BugReporting extraData:';\n}\n\nfunction _handleDeviceLogs(projectRoot: string, deviceId: string, deviceName: string, logs: any) {\n  for (let i = 0; i < logs.length; i++) {\n    let log = logs[i];\n    let body = typeof log.body === 'string' ? [log.body] : log.body;\n    let string = body\n      .map(obj => {\n        if (typeof obj === 'undefined') {\n          return 'undefined';\n        }\n        if (obj === 'null') {\n          return 'null';\n        }\n        if (typeof obj === 'string' || typeof obj === 'number' || typeof obj === 'boolean') {\n          return obj;\n        }\n        try {\n          return JSON.stringify(obj);\n        } catch (e) {\n          return obj.toString();\n        }\n      })\n      .join(' ');\n    let level = log.level;\n    if (_isIgnorableBugReportingExtraData(body)) {\n      level = logger.DEBUG;\n    }\n    let groupDepth = log.groupDepth;\n    let shouldHide = log.shouldHide;\n    let includesStack = log.includesStack;\n    ProjectUtils.logWithLevel(\n      projectRoot,\n      level,\n      {\n        tag: 'device',\n        deviceId,\n        deviceName,\n        groupDepth,\n        shouldHide,\n        includesStack,\n      },\n      string\n    );\n  }\n}\nexport async function startReactNativeServerAsync(\n  projectRoot: string,\n  options: Object = {},\n  verbose: boolean = true\n) {\n  _assertValidProjectRoot(projectRoot);\n  await stopReactNativeServerAsync(projectRoot);\n  await Watchman.addToPathAsync(); // Attempt to fix watchman if it's hanging\n  await Watchman.unblockAndGetVersionAsync(projectRoot);\n\n  let { exp } = await ProjectUtils.readConfigJsonAsync(projectRoot);\n\n  let packagerPort = await _getFreePortAsync(19001); // Create packager options\n\n  let packagerOpts = {\n    port: packagerPort,\n    customLogReporterPath: ProjectUtils.resolveModule('expo/tools/LogReporter', projectRoot, exp),\n    assetExts: ['ttf'],\n    nonPersistent: !!options.nonPersistent,\n  };\n\n  if (options.maxWorkers) {\n    packagerOpts['max-workers'] = options.maxWorkers;\n  }\n\n  if (!Versions.gteSdkVersion(exp, '16.0.0')) {\n    delete packagerOpts.customLogReporterPath;\n  }\n  const userPackagerOpts = exp.packagerOpts;\n  if (userPackagerOpts) {\n    // The RN CLI expects rn-cli.config.js's path to be absolute. We use the\n    // project root to resolve relative paths since that was the original\n    // behavior of the RN CLI.\n    if (userPackagerOpts.config) {\n      userPackagerOpts.config = path.resolve(projectRoot, userPackagerOpts.config);\n    }\n\n    packagerOpts = {\n      ...packagerOpts,\n      ...userPackagerOpts,\n      ...(userPackagerOpts.assetExts\n        ? {\n            assetExts: uniq([...packagerOpts.assetExts, ...userPackagerOpts.assetExts]),\n          }\n        : {}),\n    };\n\n    if (userPackagerOpts.port !== undefined && userPackagerOpts.port !== null) {\n      packagerPort = userPackagerOpts.port;\n    }\n  }\n  let cliOpts = reduce(\n    packagerOpts,\n    (opts, val, key) => {\n      // If the packager opt value is boolean, don't set\n      // --[opt] [value], just set '--opt'\n      if (val && typeof val === 'boolean') {\n        opts.push(`--${key}`);\n      } else if (val) {\n        opts.push(`--${key}`, val);\n      }\n      return opts;\n    },\n    ['start']\n  );\n  if (options.reset) {\n    cliOpts.push('--reset-cache');\n  } // Get custom CLI path from project package.json, but fall back to node_module path\n  let defaultCliPath = ProjectUtils.resolveModule(\n    'react-native/local-cli/cli.js',\n    projectRoot,\n    exp\n  );\n  const cliPath = exp.rnCliPath || defaultCliPath;\n  let nodePath;\n  // When using a custom path for the RN CLI, we want it to use the project\n  // root to look up config files and Node modules\n  if (exp.rnCliPath) {\n    nodePath = _nodePathForProjectRoot(projectRoot);\n  } else {\n    nodePath = null;\n  }\n  // Run the copy of Node that's embedded in Electron by setting the\n  // ELECTRON_RUN_AS_NODE environment variable\n  // Note: the CLI script sets up graceful-fs and sets ulimit to 4096 in the\n  // child process\n  let packagerProcess = child_process.fork(cliPath, cliOpts, {\n    cwd: projectRoot,\n    env: {\n      ...process.env,\n      REACT_NATIVE_APP_ROOT: projectRoot,\n      NODE_PATH: nodePath,\n      ELECTRON_RUN_AS_NODE: 1,\n    },\n    silent: true,\n  });\n  await ProjectSettings.setPackagerInfoAsync(projectRoot, {\n    packagerPort,\n    packagerPid: packagerProcess.pid,\n  }); // TODO: do we need this? don't know if it's ever called\n  process.on('exit', () => {\n    treekill(packagerProcess.pid);\n  });\n  packagerProcess.stdout.setEncoding('utf8');\n  packagerProcess.stderr.setEncoding('utf8');\n  packagerProcess.stdout.pipe(split()).on('data', data => {\n    if (verbose) {\n      _logPackagerOutput(projectRoot, 'info', data);\n    }\n  });\n  packagerProcess.stderr.on('data', data => {\n    if (verbose) {\n      _logPackagerOutput(projectRoot, 'error', data);\n    }\n  });\n  let exitPromise = new Promise((resolve, reject) => {\n    packagerProcess.once('exit', async code => {\n      ProjectUtils.logDebug(projectRoot, 'expo', `Metro Bundler process exited with code ${code}`);\n      if (code) {\n        reject(new Error(`Metro Bundler process exited with code ${code}`));\n      } else {\n        resolve();\n      }\n      try {\n        await ProjectSettings.setPackagerInfoAsync(projectRoot, {\n          packagerPort: null,\n          packagerPid: null,\n        });\n      } catch (e) {}\n    });\n  });\n  let packagerUrl = await UrlUtils.constructBundleUrlAsync(projectRoot, {\n    urlType: 'http',\n    hostType: 'localhost',\n  });\n  await Promise.race([_waitForRunningAsync(projectRoot, `${packagerUrl}/status`), exitPromise]);\n}\n\n// Simulate the node_modules resolution\n// If you project dir is /Jesse/Expo/Universe/BubbleBounce, returns\n// \"/Jesse/node_modules:/Jesse/Expo/node_modules:/Jesse/Expo/Universe/node_modules:/Jesse/Expo/Universe/BubbleBounce/node_modules\"\nfunction _nodePathForProjectRoot(projectRoot: string): string {\n  let paths = [];\n  let directory = path.resolve(projectRoot);\n  while (true) {\n    paths.push(path.join(directory, 'node_modules'));\n    let parentDirectory = path.dirname(directory);\n    if (directory === parentDirectory) {\n      break;\n    }\n    directory = parentDirectory;\n  }\n  return paths.join(path.delimiter);\n}\nexport async function stopReactNativeServerAsync(projectRoot: string) {\n  _assertValidProjectRoot(projectRoot);\n  let packagerInfo = await ProjectSettings.readPackagerInfoAsync(projectRoot);\n  if (!packagerInfo.packagerPort || !packagerInfo.packagerPid) {\n    ProjectUtils.logDebug(projectRoot, 'expo', `No packager found for project at ${projectRoot}.`);\n    return;\n  }\n  ProjectUtils.logDebug(\n    projectRoot,\n    'expo',\n    `Killing packager process tree: ${packagerInfo.packagerPid}`\n  );\n  try {\n    await treekillAsync(packagerInfo.packagerPid, 'SIGKILL');\n  } catch (e) {\n    ProjectUtils.logDebug(projectRoot, 'expo', `Error stopping packager process: ${e.toString()}`);\n  }\n  await ProjectSettings.setPackagerInfoAsync(projectRoot, {\n    packagerPort: null,\n    packagerPid: null,\n  });\n}\n\nlet blacklistedEnvironmentVariables = new Set([\n  'EXPO_APPLE_PASSWORD',\n  'EXPO_ANDROID_KEY_PASSWORD',\n  'EXPO_ANDROID_KEYSTORE_PASSWORD',\n  'EXPO_IOS_DIST_P12_PASSWORD',\n  'EXPO_IOS_PUSH_P12_PASSWORD',\n]);\n\nfunction shouldExposeEnvironmentVariableInManifest(key) {\n  if (blacklistedEnvironmentVariables.has(key.toUpperCase())) {\n    return false;\n  }\n  return key.startsWith('REACT_NATIVE_') || key.startsWith('EXPO_');\n}\n\nexport async function startExpoServerAsync(projectRoot: string) {\n  _assertValidProjectRoot(projectRoot);\n  await stopExpoServerAsync(projectRoot);\n  let app = express();\n  app.use(\n    express.json({\n      limit: '10mb',\n    })\n  );\n  app.use(\n    express.urlencoded({\n      limit: '10mb',\n      extended: true,\n    })\n  );\n  if ((await Doctor.validateWithNetworkAsync(projectRoot)) === Doctor.FATAL) {\n    throw new Error(`Couldn't start project. Please fix the errors and restart the project.`);\n  } // Serve the manifest.\n  let manifestHandler = async (req, res) => {\n    try {\n      // We intentionally don't `await`. We want to continue trying even\n      // if there is a potential error in the package.json and don't want to slow\n      // down the request\n      Doctor.validateWithNetworkAsync(projectRoot);\n      let { exp: manifest } = await ProjectUtils.readConfigJsonAsync(projectRoot);\n      if (!manifest) {\n        const configName = await ProjectUtils.configFilenameAsync(projectRoot);\n        throw new Error(`No ${configName} file found`);\n      } // Get packager opts and then copy into bundleUrlPackagerOpts\n      let packagerOpts = await ProjectSettings.getPackagerOptsAsync(projectRoot);\n      let bundleUrlPackagerOpts = JSON.parse(JSON.stringify(packagerOpts));\n      bundleUrlPackagerOpts.urlType = 'http';\n      if (bundleUrlPackagerOpts.hostType === 'redirect') {\n        bundleUrlPackagerOpts.hostType = 'tunnel';\n      }\n      manifest.xde = true; // deprecated\n      manifest.developer = {\n        tool: Config.developerTool,\n        projectRoot,\n      };\n      manifest.packagerOpts = packagerOpts;\n      manifest.env = {};\n      for (let key of Object.keys(process.env)) {\n        if (shouldExposeEnvironmentVariableInManifest(key)) {\n          manifest.env[key] = process.env[key];\n        }\n      }\n      let entryPoint = await Exp.determineEntryPointAsync(projectRoot);\n      let platform = req.headers['exponent-platform'] || 'ios';\n      entryPoint = UrlUtils.getPlatformSpecificBundleUrl(entryPoint, platform);\n      let mainModuleName = UrlUtils.guessMainModulePath(entryPoint);\n      let queryParams = await UrlUtils.constructBundleQueryParamsAsync(\n        projectRoot,\n        packagerOpts,\n        req.hostname\n      );\n      let path = `/${encodeURI(mainModuleName)}.bundle?platform=${encodeURIComponent(\n        platform\n      )}&${queryParams}`;\n      manifest.bundleUrl =\n        (await UrlUtils.constructBundleUrlAsync(projectRoot, bundleUrlPackagerOpts, req.hostname)) +\n        path;\n      manifest.debuggerHost = await UrlUtils.constructDebuggerHostAsync(projectRoot, req.hostname);\n      manifest.mainModuleName = mainModuleName;\n      manifest.logUrl = await UrlUtils.constructLogUrlAsync(projectRoot, req.hostname);\n      manifest.hostUri = await UrlUtils.constructHostUriAsync(projectRoot, req.hostname);\n      await _resolveManifestAssets(\n        projectRoot,\n        manifest,\n        async path => manifest.bundleUrl.match(/^https?:\\/\\/.*?\\//)[0] + 'assets/' + path\n      ); // the server normally inserts this but if we're offline we'll do it here\n      await _resolveGoogleServicesFile(projectRoot, manifest);\n      const hostUUID = await UserSettings.anonymousIdentifier();\n      let currentSession = await UserManager.getSessionAsync();\n      if (!currentSession || Config.offline) {\n        manifest.id = `@${ANONYMOUS_USERNAME}/${manifest.slug}-${hostUUID}`;\n      }\n      let manifestString = JSON.stringify(manifest);\n      if (req.headers['exponent-accept-signature']) {\n        if (_cachedSignedManifest.manifestString === manifestString) {\n          manifestString = _cachedSignedManifest.signedManifest;\n        } else {\n          if (!currentSession || Config.offline) {\n            const unsignedManifest = {\n              manifestString,\n              signature: 'UNSIGNED',\n            };\n            _cachedSignedManifest.manifestString = manifestString;\n            manifestString = JSON.stringify(unsignedManifest);\n            _cachedSignedManifest.signedManifest = manifestString;\n          } else {\n            let publishInfo = await Exp.getPublishInfoAsync(projectRoot);\n            let signedManifest = await Api.callMethodAsync(\n              'signManifest',\n              [publishInfo.args],\n              'post',\n              manifest\n            );\n            _cachedSignedManifest.manifestString = manifestString;\n            _cachedSignedManifest.signedManifest = signedManifest.response;\n            manifestString = signedManifest.response;\n          }\n        }\n      }\n      const hostInfo = {\n        host: hostUUID,\n        server: 'xdl',\n        serverVersion: require('../package.json').version,\n        serverDriver: Config.developerTool,\n        serverOS: os.platform(),\n        serverOSVersion: os.release(),\n      };\n      res.append('Exponent-Server', JSON.stringify(hostInfo));\n      res.send(manifestString);\n      Analytics.logEvent('Serve Manifest', {\n        projectRoot,\n        developerTool: Config.developerTool,\n      });\n    } catch (e) {\n      ProjectUtils.logDebug(projectRoot, 'expo', `Error in manifestHandler: ${e} ${e.stack}`);\n      // 5xx = Server Error HTTP code\n      res.status(520).send({\n        error: e.toString(),\n      });\n    }\n  };\n  app.get('/', manifestHandler);\n  app.get('/manifest', manifestHandler);\n  app.get('/index.exp', manifestHandler);\n  app.post('/logs', async (req, res) => {\n    try {\n      let deviceId = req.get('Device-Id');\n      let deviceName = req.get('Device-Name');\n      if (deviceId && deviceName && req.body) {\n        _handleDeviceLogs(projectRoot, deviceId, deviceName, req.body);\n      }\n    } catch (e) {\n      ProjectUtils.logError(projectRoot, 'expo', `Error getting device logs: ${e} ${e.stack}`);\n    }\n    res.send('Success');\n  });\n  app.post('/shutdown', async (req, res) => {\n    server.close();\n    res.send('Success');\n  });\n  let expRc = await ProjectUtils.readExpRcAsync(projectRoot);\n  let expoServerPort = expRc.manifestPort ? expRc.manifestPort : await _getFreePortAsync(19000);\n  await ProjectSettings.setPackagerInfoAsync(projectRoot, {\n    expoServerPort,\n  });\n  let server = app.listen(expoServerPort, () => {\n    let host = server.address().address;\n    let port = server.address().port;\n    ProjectUtils.logDebug(projectRoot, 'expo', `Local server listening at http://${host}:${port}`);\n  });\n  await Exp.saveRecentExpRootAsync(projectRoot);\n}\nexport async function stopExpoServerAsync(projectRoot: string) {\n  _assertValidProjectRoot(projectRoot);\n  let packagerInfo = await ProjectSettings.readPackagerInfoAsync(projectRoot);\n  if (packagerInfo && packagerInfo.expoServerPort) {\n    try {\n      await axios.post(`http://127.0.0.1:${packagerInfo.expoServerPort}/shutdown`);\n    } catch (e) {}\n  }\n  await ProjectSettings.setPackagerInfoAsync(projectRoot, {\n    expoServerPort: null,\n  });\n}\nasync function _connectToNgrokAsync(\n  projectRoot: string,\n  args: mixed,\n  hostnameAsync: Function,\n  ngrokPid: ?number,\n  attempts: number = 0\n) {\n  try {\n    let configPath = path.join(UserSettings.dotExpoHomeDirectory(), 'ngrok.yml');\n    let hostname = await hostnameAsync();\n    let url = await ngrokConnectAsync({\n      hostname,\n      configPath,\n      ...args,\n    });\n    return url;\n  } catch (e) {\n    // Attempt to connect 3 times\n    if (attempts >= 2) {\n      if (e.message) {\n        throw new XDLError(ErrorCode.NGROK_ERROR, e.toString());\n      } else {\n        throw new XDLError(ErrorCode.NGROK_ERROR, JSON.stringify(e));\n      }\n    }\n    if (!attempts) {\n      attempts = 0;\n    } // Attempt to fix the issue\n    if (e.error_code && e.error_code === 103) {\n      if (attempts === 0) {\n        // Failed to start tunnel. Might be because url already bound to another session.\n        if (ngrokPid) {\n          try {\n            process.kill(ngrokPid, 'SIGKILL');\n          } catch (e) {\n            ProjectUtils.logDebug(projectRoot, 'expo', `Couldn't kill ngrok with PID ${ngrokPid}`);\n          }\n        } else {\n          await ngrokKillAsync();\n        }\n      } else {\n        // Change randomness to avoid conflict if killing ngrok didn't help\n        await Exp.resetProjectRandomnessAsync(projectRoot);\n      }\n    } // Wait 100ms and then try again\n    await delayAsync(100);\n    return _connectToNgrokAsync(projectRoot, args, hostnameAsync, null, attempts + 1);\n  }\n}\n\nexport async function startTunnelsAsync(projectRoot: string) {\n  let username = await UserManager.getCurrentUsernameAsync();\n  if (!username) {\n    username = ANONYMOUS_USERNAME;\n  }\n  _assertValidProjectRoot(projectRoot);\n  let packagerInfo = await ProjectSettings.readPackagerInfoAsync(projectRoot);\n  if (!packagerInfo.packagerPort) {\n    throw new XDLError(\n      ErrorCode.NO_PACKAGER_PORT,\n      `No packager found for project at ${projectRoot}.`\n    );\n  }\n  if (!packagerInfo.expoServerPort) {\n    throw new XDLError(\n      ErrorCode.NO_EXPO_SERVER_PORT,\n      `No Expo server found for project at ${projectRoot}.`\n    );\n  }\n  await stopTunnelsAsync(projectRoot);\n  if (await Android.startAdbReverseAsync(projectRoot)) {\n    ProjectUtils.logInfo(\n      projectRoot,\n      'expo',\n      'Successfully ran `adb reverse`. Localhost URLs should work on the connected Android device.'\n    );\n  }\n  let packageShortName = path.parse(projectRoot).base;\n  let expRc = await ProjectUtils.readExpRcAsync(projectRoot);\n\n  let startedTunnelsSuccessfully = false;\n\n  // Some issues with ngrok cause it to hang indefinitely. After\n  // TUNNEL_TIMEOUTms we just throw an error.\n  await Promise.race([\n    (async () => {\n      await delayAsync(TUNNEL_TIMEOUT);\n      if (!startedTunnelsSuccessfully) {\n        throw new Error('Starting tunnels timed out');\n      }\n    })(),\n    (async () => {\n      let expoServerNgrokUrl = await _connectToNgrokAsync(\n        projectRoot,\n        {\n          authtoken: Config.ngrok.authToken,\n          port: packagerInfo.expoServerPort,\n          proto: 'http',\n        },\n        async () => {\n          let randomness = expRc.manifestTunnelRandomness\n            ? expRc.manifestTunnelRandomness\n            : await Exp.getProjectRandomnessAsync(projectRoot);\n          return [\n            randomness,\n            UrlUtils.domainify(username),\n            UrlUtils.domainify(packageShortName),\n            Config.ngrok.domain,\n          ].join('.');\n        },\n        packagerInfo.ngrokPid\n      );\n      let packagerNgrokUrl = await _connectToNgrokAsync(\n        projectRoot,\n        {\n          authtoken: Config.ngrok.authToken,\n          port: packagerInfo.packagerPort,\n          proto: 'http',\n        },\n        async () => {\n          let randomness = expRc.manifestTunnelRandomness\n            ? expRc.manifestTunnelRandomness\n            : await Exp.getProjectRandomnessAsync(projectRoot);\n          return [\n            'packager',\n            randomness,\n            UrlUtils.domainify(username),\n            UrlUtils.domainify(packageShortName),\n            Config.ngrok.domain,\n          ].join('.');\n        },\n        packagerInfo.ngrokPid\n      );\n      await ProjectSettings.setPackagerInfoAsync(projectRoot, {\n        expoServerNgrokUrl,\n        packagerNgrokUrl,\n        ngrokPid: ngrok.process().pid,\n      });\n\n      startedTunnelsSuccessfully = true;\n\n      ProjectUtils.logWithLevel(\n        projectRoot,\n        'info',\n        {\n          tag: 'expo',\n          _expoEventType: 'TUNNEL_READY',\n        },\n        'Tunnel ready.'\n      );\n\n      ngrok.addListener('statuschange', status => {\n        if (status === 'reconnecting') {\n          ProjectUtils.logError(\n            projectRoot,\n            'expo',\n            'We noticed your tunnel is having issues. ' +\n              'This may be due to intermittent problems with our tunnel provider. ' +\n              'If you have trouble connecting to your app, try to Restart the project, ' +\n              'or switch Host to LAN.'\n          );\n        } else if (status === 'online') {\n          ProjectUtils.logInfo(projectRoot, 'expo', 'Tunnel connected.');\n        }\n      });\n    })(),\n  ]);\n}\nexport async function stopTunnelsAsync(projectRoot: string) {\n  _assertValidProjectRoot(projectRoot);\n  // This will kill all ngrok tunnels in the process.\n  // We'll need to change this if we ever support more than one project\n  // open at a time in XDE.\n  let packagerInfo = await ProjectSettings.readPackagerInfoAsync(projectRoot);\n  let ngrokProcess = ngrok.process();\n  let ngrokProcessPid = ngrokProcess ? ngrokProcess.pid : null;\n  ngrok.removeAllListeners('statuschange');\n  if (packagerInfo.ngrokPid && packagerInfo.ngrokPid !== ngrokProcessPid) {\n    // Ngrok is running in some other process. Kill at the os level.\n    try {\n      process.kill(packagerInfo.ngrokPid);\n    } catch (e) {\n      ProjectUtils.logDebug(\n        projectRoot,\n        'expo',\n        `Couldn't kill ngrok with PID ${packagerInfo.ngrokPid}`\n      );\n    }\n  } else {\n    // Ngrok is running from the current process. Kill using ngrok api.\n    await ngrokKillAsync();\n  }\n  await ProjectSettings.setPackagerInfoAsync(projectRoot, {\n    expoServerNgrokUrl: null,\n    packagerNgrokUrl: null,\n    ngrokPid: null,\n  });\n  await Android.stopAdbReverseAsync(projectRoot);\n}\n\nexport async function setOptionsAsync(\n  projectRoot: string,\n  options: {\n    packagerPort?: number,\n  }\n) {\n  _assertValidProjectRoot(projectRoot); // Check to make sure all options are valid\n  let schema = joi.object().keys({\n    packagerPort: joi.number().integer(),\n  });\n  const { error } = joi.validate(options, schema);\n  if (error) {\n    throw new XDLError(ErrorCode.INVALID_OPTIONS, error.toString());\n  }\n  await ProjectSettings.setPackagerInfoAsync(projectRoot, options);\n}\nexport async function getUrlAsync(projectRoot: string, options: Object = {}) {\n  _assertValidProjectRoot(projectRoot);\n  return await UrlUtils.constructManifestUrlAsync(projectRoot, options);\n}\n\nexport async function startAsync(\n  projectRoot: string,\n  options: Object = {},\n  verbose: boolean = true\n): Promise<any> {\n  _assertValidProjectRoot(projectRoot);\n  Analytics.logEvent('Start Project', {\n    projectRoot,\n    developerTool: Config.developerTool,\n  });\n  await startExpoServerAsync(projectRoot);\n  await startReactNativeServerAsync(projectRoot, options, verbose);\n  if (!Config.offline) {\n    try {\n      await startTunnelsAsync(projectRoot);\n    } catch (e) {\n      ProjectUtils.logDebug(projectRoot, 'expo', `Error starting tunnel ${e.message}`);\n    }\n  }\n  let { exp } = await ProjectUtils.readConfigJsonAsync(projectRoot);\n  DevSession.startSession(projectRoot, exp);\n  return exp;\n}\nasync function _stopInternalAsync(projectRoot: string): Promise<void> {\n  DevSession.stopSession();\n  await stopExpoServerAsync(projectRoot);\n  await stopReactNativeServerAsync(projectRoot);\n  if (!Config.offline) {\n    try {\n      await stopTunnelsAsync(projectRoot);\n    } catch (e) {\n      ProjectUtils.logDebug(projectRoot, 'expo', `Error stopping ngrok ${e.message}`);\n    }\n  }\n}\nexport async function stopAsync(projectDir: string): Promise<void> {\n  const result = await Promise.race([\n    _stopInternalAsync(projectDir),\n    new Promise((resolve, reject) => setTimeout(resolve, 2000, 'stopFailed')),\n  ]);\n  if (result === 'stopFailed') {\n    // find RN packager and ngrok pids, attempt to kill them manually\n    const { packagerPid, ngrokPid } = await ProjectSettings.readPackagerInfoAsync(projectDir);\n    if (packagerPid) {\n      try {\n        process.kill(packagerPid);\n      } catch (e) {}\n    }\n    if (ngrokPid) {\n      try {\n        process.kill(ngrokPid);\n      } catch (e) {}\n    }\n    await ProjectSettings.setPackagerInfoAsync(projectDir, {\n      expoServerPort: null,\n      packagerPort: null,\n      packagerPid: null,\n      expoServerNgrokUrl: null,\n      packagerNgrokUrl: null,\n      ngrokPid: null,\n    });\n  }\n}\n"],"sourceRoot":"/xdl@52.0.12/src"}