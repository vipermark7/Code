{"version":3,"sources":["modules/Modules.js"],"names":["getAllForPlatform","getAllNativeForExpoClientOnPlatform","getVersionableModulesForPlatform","getDetachableModulesForPlatformAndSdkVersion","getPublishableModules","mapForPlatform","platform","moduleConfig","config","expoSdkUniversalModulesConfigs","map","filter","includeInExpoClient","isNativeModule","versionable","sdkVersion","detachable","semver","satisfies","sdkVersions","libName"],"mappings":";;;;;;;;QAyBgBA,iB,GAAAA,iB;QAIAC,mC,GAAAA,mC;QAMAC,gC,GAAAA,gC;QAMAC,4C,GAAAA,4C;QAaAC,qB,GAAAA,qB;;;;AAlDhB;AAAA;AAAA;;;;AAEA;AAAA;AAAA;;;;AAeA,SAASC,cAAT,CAAwBC,QAAxB,EAAgE;AAC9D,SAAOC,6BAAsBA,YAAtBA,EAAuCA,aAAaC,MAAbD,CAAoBD,QAApBC,CAAvCA,CAAP;AACF;;AAEO,SAASP,iBAAT,CAA2BM,QAA3B,EAAoE;AACzE,SAAOG,2DAA+BC,GAA/BD,CAAmCJ,eAAeC,QAAfD,CAAnCI,CAAP;AACF;;AAEO,SAASR,mCAAT,CAA6CK,QAA7C,EAAsF;AAC3F,SAAON,kBAAkBM,QAAlBN,EAA4BW,MAA5BX,CACLO,gBAAgBA,aAAaK,mBAAbL,IAAoCA,aAAaM,cAD5Db,CAAP;AAGF;;AAEO,SAASE,gCAAT,CAA0CI,QAA1C,EAAmF;AACxF,SAAOL,oCAAoCK,QAApCL,EAA8CU,MAA9CV,CAAqDM,gBAAgB;AAC1E,WAAOA,aAAaO,WAApB;AACD,GAFMb,CAAP;AAGF;;AAEO,SAASE,4CAAT,CACLG,QADK,EAELS,UAFK,EAGgB;AACrB,SAAOf,kBAAkBM,QAAlBN,EAA4BW,MAA5BX,CAAmCO,gBAAgB;AACxD,WACEA,aAAaM,cAAbN,IACAA,aAAaS,UADbT,KAECQ,eAAe,aAAfA,IAAgCE,oCAAOC,SAAPD,CAAiBF,UAAjBE,EAA6BV,aAAaY,WAA1CF,CAFjCV,CADF;AAKD,GANMP,CAAP;AAOF;;AAEO,SAASI,qBAAT,GAAsD;AAC3D,SAAOK,2DAA+BE,MAA/BF,CAAsCF,gBAAgB,CAAC,CAACA,aAAaa,OAArEX,CAAP;AACF","file":"../../modules/Modules.js","sourcesContent":["/**\n * @flow\n */\n\nimport semver from 'semver';\n\nimport { expoSdkUniversalModulesConfigs } from './config';\n\ntype Platform = 'ios' | 'android';\n\ntype ModuleConfig = {\n  podName: string,\n  libName: string,\n  sdkVersions: string,\n  detachable: boolean,\n  isNativeModule: boolean,\n  subdirectory: string,\n  versionable: boolean,\n  includeInExpoClient: boolean,\n};\n\nfunction mapForPlatform(platform: Platform): () => ModuleConfig {\n  return moduleConfig => ({ ...moduleConfig, ...moduleConfig.config[platform] });\n}\n\nexport function getAllForPlatform(platform: Platform): Array<ModuleConfig> {\n  return expoSdkUniversalModulesConfigs.map(mapForPlatform(platform));\n}\n\nexport function getAllNativeForExpoClientOnPlatform(platform: Platform): Array<ModuleConfig> {\n  return getAllForPlatform(platform).filter(\n    moduleConfig => moduleConfig.includeInExpoClient && moduleConfig.isNativeModule\n  );\n}\n\nexport function getVersionableModulesForPlatform(platform: Platform): Array<ModuleConfig> {\n  return getAllNativeForExpoClientOnPlatform(platform).filter(moduleConfig => {\n    return moduleConfig.versionable;\n  });\n}\n\nexport function getDetachableModulesForPlatformAndSdkVersion(\n  platform: Platform,\n  sdkVersion: string\n): Array<ModuleConfig> {\n  return getAllForPlatform(platform).filter(moduleConfig => {\n    return (\n      moduleConfig.isNativeModule &&\n      moduleConfig.detachable &&\n      (sdkVersion === 'UNVERSIONED' || semver.satisfies(sdkVersion, moduleConfig.sdkVersions))\n    );\n  });\n}\n\nexport function getPublishableModules(): Array<ModuleConfig> {\n  return expoSdkUniversalModulesConfigs.filter(moduleConfig => !!moduleConfig.libName);\n}\n"],"sourceRoot":"/xdl@52.0.12/src"}