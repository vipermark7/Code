{"version":3,"sources":["detach/IosIPABuilder.js"],"names":["createIPABuilder","logger","_logger","withFields","buildPhase","buildParams","async","provisioningProfilePath","clientBuild","await","copyProvisioningProfileToHomedir","appUUID","info","plistData","readCMSMessage","codeSignIdentity","IosCodeSigning","ensureCertificateValid","validateProvisioningProfile","distCertFingerprint","teamID","bundleIdentifier","exportMethod","resolveExportMethod","exportOptionsPlistPath","path","join","provisionDir","exportOptionsData","provisioningProfileUUID","UUID","writeExportOptionsPlistFile","unsignedIpaPath","buildDir","ipaBuilderArgs","ipaPath","workspace","archivePath","outputPath","keychainPath","buildIPA","generatedEntitlementsPath","appDir","createEntitlementsFile","manifest","resignIPA","entitlementsPath","sourceIpaPath","destIpaPath","uploadPath","removeProvisioningProfileFromHomedir","build","fs","remove","getProvisioningProfilePath","err","error","cleanup","mkdirp","getProvisioningProfileDirPath","newProvisioningProfilePath","copy","output","spawnAsyncThrowError","stdio","plistRaw","_","attempt","plist","parse","isError","Error","message","workingDir","os","homedir"],"mappings":";;;;;kBAYwBA,gB;;;;AAZxB;AAAA;AAAA;;AACA;;AACA;;;;AACA;AAAA;AAAA;;;;AACA;AAAA;AAAA;;;;AAEA;AAAA;AAAA;;;;AACA;AAAA;AAAA;;;;AACA;AAAA;AAAA;;;;;;;;AAEA,MAAMC,SAASC,oCAAQC,UAARD,CAAmB,EAAEE,YAAY,0BAAd,EAAnBF,CAAf;;AAEe,SAASF,gBAAT,CAA0BK,WAA1B,EAAuC;AAAA;AAAA,iCAepDC,aAAuB;AACrB,YAAM,EAAEC,uBAAF,EAA2BC,WAA3B,KAA2CH,WAAjD;;AAEAI,YAAMC,iCAAiCH,uBAAjCG,EAA0DC,OAA1DD,CAAND;AACAR,aAAOW,IAAPX,CAAY,+CAAZA;;AAEA,UAAI;AACF,cAAMY,YAAYJ,MAAMK,eAAeP,uBAAfO,CAAxB;AACAb,eAAOW,IAAPX,CAAY,2CAAZA;;AAEAA,eAAOW,IAAPX,CAAY,4EAAZA;AACA,cAAMc,mBAAmBN,MAAMO,4CAAeC,sBAAfD,CAAsCX,WAAtCW,CAA/B;AACAf,eAAOW,IAAPX,CAAY,8BAAZA;;AAEAA,eAAOW,IAAPX,CAAY,oCAAZA;AACAe,oDAAeE,2BAAfF,CAA2CH,SAA3CG,EAAsD;AACpDG,+BAAqBJ,gBAD+B;AAEpDK,gBAFoD;AAGpDC;AAHoD,SAAtDL;AAKAf,eAAOW,IAAPX,CAAY,+BAAZA;;AAEAA,eAAOW,IAAPX,CAAY,sCAAZA;AACA,cAAMqB,eAAeN,4CAAeO,mBAAfP,CAAmCH,SAAnCG,CAArB;AACA,cAAMQ,yBAAyBC,cAAKC,IAALD,CAAUE,YAAVF,EAAwB,sBAAxBA,CAA/B;AACA,cAAMG,oBAAoB;AACxBP,0BADwB;AAExBQ,mCAAyBhB,UAAUiB,IAFX;AAGxBR,sBAHwB;AAIxBF;AAJwB,SAA1B;AAMAX,cAAMO,4CAAee,2BAAff,CAA2CQ,sBAA3CR,EAAmEY,iBAAnEZ,CAANP;AACAR,eAAOW,IAAPX,CAAY,mCAAZA;;AAEAA,eAAOW,IAAPX,CAAY,mBAAZA;AACA,cAAM+B,kBAAkBP,cAAKC,IAALD,CAAUQ,QAAVR,EAAqB,GAAEd,OAAQ,eAA/Bc,CAAxB;AACA,cAAMS,iBAAiB;AACrBC,mBAASH,eADY;AAErBI,mBAFqB;AAGrBC,uBAAaC,UAHQ;AAIrBvB,0BAJqB;AAKrBS,gCALqB;AAMrBX,mBANqB;AAOrB0B,sBAPqB;AAQrBjB;AARqB,SAAvB;AAUAb,cAAMO,4CAAewB,QAAfxB,CAAwBkB,cAAxBlB,EAAwCX,WAAxCW,EAAqDR,WAArDQ,CAANP;AACAR,eAAOW,IAAPX,CAAY,eAAZA;;AAEAA,eAAOW,IAAPX,CAAY,+BAAZA;AACA,cAAMwC,4BAA4BhB,cAAKC,IAALD,CAAUiB,MAAVjB,EAAkB,oCAAlBA,CAAlC;AACAhB,cAAMO,4CAAe2B,sBAAf3B,CAAsC;AAC1CyB,mCAD0C;AAE1C5B,mBAF0C;AAG1CwB,uBAAaC,UAH6B;AAI1CM;AAJ0C,SAAtC5B,CAANP;AAMAR,eAAOW,IAAPX,CAAY,2BAAZA;;AAEAA,eAAOW,IAAPX,CAAY,kBAAZA;AACAQ,cAAMO,4CAAe6B,SAAf7B,CACJ;AACED,0BADF;AAEE+B,4BAAkBL,yBAFpB;AAGElC,iCAHF;AAIEwC,yBAAef,eAJjB;AAKEgB,uBAAaC,UALf;AAMEV;AANF,SADIvB,EASJX,WATIW,CAANP;AAWAR,eAAOW,IAAPX,CAAY,cAAZA;AACF,OAlEA,SAkEU;AACRQ,cAAMyC,qCAAqCvC,OAArCuC,CAANzC;AACAR,eAAOW,IAAPX,CAAY,sDAAZA;AACF;AACF,KA3FoD;;AAAA,oBAerCkD,KAfqC;AAAA;AAAA;AAAA;;AAAA;AAAA,kCA6FpD7C,aAAyB;AACvB,UAAI;AACFG,cAAM2C,sCAAGC,MAAHD,CAAUE,2BAA2B3C,OAA3B2C,CAAVF,CAAN3C;AACF,OAFA,CAEE,OAAO8C,GAAP,EAAY;AACZtD,eAAOuD,KAAPvD,CAAa,mCAAbA,EAAkDsD,GAAlDtD;AACF;AACF,KAnGoD;;AAAA,oBA6FrCwD,OA7FqC;AAAA;AAAA;AAAA;;AAAA;AAAA,kCAqGpDnD,WAAgDC,uBAAhDD,EAAyEK,OAAzEL,EAAkF;AAChFG,YAAM2C,sCAAGM,MAAHN,CAAUO,+BAAVP,CAAN3C;AACA,YAAMmD,6BAA6BN,2BAA2B3C,OAA3B2C,CAAnC;AACA7C,YAAM2C,sCAAGS,IAAHT,CAAQ7C,uBAAR6C,EAAiCQ,0BAAjCR,CAAN3C;AACF,KAzGoD;;AAAA,oBAqGrCC,gCArGqC;AAAA;AAAA;AAAA;;AAAA;AAAA,kCA2GpDJ,WAAoDK,OAApDL,EAA6D;AAC3D,YAAMC,0BAA0B+C,2BAA2B3C,OAA3B2C,CAAhC;AACA7C,YAAM2C,sCAAGC,MAAHD,CAAU7C,uBAAV6C,CAAN3C;AACF,KA9GoD;;AAAA,oBA2GrCyC,oCA3GqC;AAAA;AAAA;AAAA;;AAAA;AAAA,kCAgHpD5C,WAA8BC,uBAA9BD,EAAuD;AACrD,YAAM,EAAEwD,MAAF,KAAarD,MAAMsD,oEACvB,UADuBA,EAEvB,CAAC,KAAD,EAAQ,IAAR,EAAc,IAAd,EAAoBxD,uBAApB,CAFuBwD,EAGvB;AACEC,eAAO;AADT,OAHuBD,CAAzB;AAOA,YAAME,WAAWH,OAAOpC,IAAPoC,CAAY,EAAZA,CAAjB;AACA,YAAMjD,YAAYqD,oCAAEC,OAAFD,CAAUE,kCAAMC,KAAhBH,EAAuBD,QAAvBC,CAAlB;AACA,UAAIA,oCAAEI,OAAFJ,CAAUrD,SAAVqD,CAAJ,EAA0B;AACxB,cAAM,IAAIK,KAAJ,CAAW,6BAA4B1D,UAAU2D,OAAQ,EAAzD,CAAN;AACF;AACA,aAAO3D,SAAP;AACF,KA9HoD;;AAAA,oBAgHrCC,cAhHqC;AAAA;AAAA;AAAA;;AACpD,QAAM,EAAEH,OAAF,EAAW4B,YAAX,EAAyBlB,gBAAzB,EAA2CD,MAA3C,EAAmDqD,UAAnD,EAA+D7B,QAA/D,KAA4EvC,WAAlF;AACA,QAAM+B,YAAYX,cAAKC,IAALD,CAChBgD,UADgBhD,EAEhB,oBAFgBA,EAGhB,KAHgBA,EAIhB,SAJgBA,EAKhB,wBALgBA,CAAlB;AAOA,QAAMiB,SAASjB,cAAKC,IAALD,CAAU,qBAAVA,EAAiCd,OAAjCc,CAAf;AACA,QAAMQ,WAAWR,cAAKC,IAALD,CAAUiB,MAAVjB,EAAkB,OAAlBA,CAAjB;AACA,QAAME,eAAeF,cAAKC,IAALD,CAAUiB,MAAVjB,EAAkB,cAAlBA,CAArB;AACA,QAAMa,aAAab,cAAKC,IAALD,CAAUiB,MAAVjB,EAAkB,mBAAlBA,CAAnB;AACA,QAAMwB,aAAaxB,cAAKC,IAALD,CAAUQ,QAAVR,EAAoB,aAApBA,CAAnB;;AAmHA,QAAMkC,gCAAgC,MACpClC,cAAKC,IAALD,CAAUiD,YAAGC,OAAHD,EAAVjD,EAAwB,4CAAxBA,CADF;;AAGA,QAAM6B,6BAA6B3C,WACjCc,cAAKC,IAALD,CAAUkC,+BAAVlC,EAA4C,GAAEd,OAAQ,kBAAtDc,CADF;;AAGA,SAAO,EAAE0B,KAAF,EAASM,OAAT,EAAP;AACF","file":"../../detach/IosIPABuilder.js","sourcesContent":["import _ from 'lodash';\nimport os from 'os';\nimport path from 'path';\nimport fs from 'fs-extra';\nimport plist from 'plist';\n\nimport _logger from './Logger';\nimport { spawnAsyncThrowError } from './ExponentTools';\nimport * as IosCodeSigning from './IosCodeSigning';\n\nconst logger = _logger.withFields({ buildPhase: 'building and signing IPA' });\n\nexport default function createIPABuilder(buildParams) {\n  const { appUUID, keychainPath, bundleIdentifier, teamID, workingDir, manifest } = buildParams;\n  const workspace = path.join(\n    workingDir,\n    'shellAppWorkspaces',\n    'ios',\n    'default',\n    'ExpoKitApp.xcworkspace'\n  );\n  const appDir = path.join('/private/tmp/turtle', appUUID);\n  const buildDir = path.join(appDir, 'build');\n  const provisionDir = path.join(appDir, 'provisioning');\n  const outputPath = path.join(appDir, 'archive.xcarchive');\n  const uploadPath = path.join(buildDir, 'archive.ipa');\n\n  async function build() {\n    const { provisioningProfilePath, clientBuild } = buildParams;\n\n    await copyProvisioningProfileToHomedir(provisioningProfilePath, appUUID);\n    logger.info('provisioning profile copied to home directory');\n\n    try {\n      const plistData = await readCMSMessage(provisioningProfilePath);\n      logger.info('done retrieving provisioning profile data');\n\n      logger.info('checking if teamID is present in keychain and that certificate is valid...');\n      const codeSignIdentity = await IosCodeSigning.ensureCertificateValid(buildParams);\n      logger.info('ensured certificate is valid');\n\n      logger.info('validating provisioning profile...');\n      IosCodeSigning.validateProvisioningProfile(plistData, {\n        distCertFingerprint: codeSignIdentity,\n        teamID,\n        bundleIdentifier,\n      });\n      logger.info('provisioning profile is valid');\n\n      logger.info('writing export-options.plist file...');\n      const exportMethod = IosCodeSigning.resolveExportMethod(plistData);\n      const exportOptionsPlistPath = path.join(provisionDir, 'export-options.plist');\n      const exportOptionsData = {\n        bundleIdentifier,\n        provisioningProfileUUID: plistData.UUID,\n        exportMethod,\n        teamID,\n      };\n      await IosCodeSigning.writeExportOptionsPlistFile(exportOptionsPlistPath, exportOptionsData);\n      logger.info('created export-options.plist file');\n\n      logger.info('generating IPA...');\n      const unsignedIpaPath = path.join(buildDir, `${appUUID}-unsigned.ipa`);\n      const ipaBuilderArgs = {\n        ipaPath: unsignedIpaPath,\n        workspace,\n        archivePath: outputPath,\n        codeSignIdentity,\n        exportOptionsPlistPath,\n        plistData,\n        keychainPath,\n        exportMethod,\n      };\n      await IosCodeSigning.buildIPA(ipaBuilderArgs, buildParams, clientBuild);\n      logger.info('generated IPA');\n\n      logger.info('creating entitlements file...');\n      const generatedEntitlementsPath = path.join(appDir, 'generatedEntitlements.entitlements');\n      await IosCodeSigning.createEntitlementsFile({\n        generatedEntitlementsPath,\n        plistData,\n        archivePath: outputPath,\n        manifest,\n      });\n      logger.info('created entitlements file');\n\n      logger.info('resigning IPA...');\n      await IosCodeSigning.resignIPA(\n        {\n          codeSignIdentity,\n          entitlementsPath: generatedEntitlementsPath,\n          provisioningProfilePath,\n          sourceIpaPath: unsignedIpaPath,\n          destIpaPath: uploadPath,\n          keychainPath,\n        },\n        buildParams\n      );\n      logger.info('resigned IPA');\n    } finally {\n      await removeProvisioningProfileFromHomedir(appUUID);\n      logger.info('removed provisioning profile from the home directory');\n    }\n  }\n\n  async function cleanup() {\n    try {\n      await fs.remove(getProvisioningProfilePath(appUUID));\n    } catch (err) {\n      logger.error('failed to perform cleanup, error:', err);\n    }\n  }\n\n  async function copyProvisioningProfileToHomedir(provisioningProfilePath, appUUID) {\n    await fs.mkdirp(getProvisioningProfileDirPath());\n    const newProvisioningProfilePath = getProvisioningProfilePath(appUUID);\n    await fs.copy(provisioningProfilePath, newProvisioningProfilePath);\n  }\n\n  async function removeProvisioningProfileFromHomedir(appUUID) {\n    const provisioningProfilePath = getProvisioningProfilePath(appUUID);\n    await fs.remove(provisioningProfilePath);\n  }\n\n  async function readCMSMessage(provisioningProfilePath) {\n    const { output } = await spawnAsyncThrowError(\n      'security',\n      ['cms', '-D', '-i', provisioningProfilePath],\n      {\n        stdio: 'pipe',\n      }\n    );\n    const plistRaw = output.join('');\n    const plistData = _.attempt(plist.parse, plistRaw);\n    if (_.isError(plistData)) {\n      throw new Error(`Error when parsing plist: ${plistData.message}`);\n    }\n    return plistData;\n  }\n\n  const getProvisioningProfileDirPath = () =>\n    path.join(os.homedir(), 'Library/MobileDevice/Provisioning Profiles');\n\n  const getProvisioningProfilePath = appUUID =>\n    path.join(getProvisioningProfileDirPath(), `${appUUID}.mobileprovision`);\n\n  return { build, cleanup };\n}\n"],"sourceRoot":"/xdl@52.0.12/src"}