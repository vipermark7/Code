{"version":3,"sources":["detach/IosCodeSigning.js"],"names":["async","certPath","certPassword","teamID","certData","await","fs","readFile","fingerprint","_genP12CertFingerprint","identities","_findIdentitiesByTeamID","isValid","indexOf","Error","ensureCertificateValid","output","spawnAsyncThrowError","stdio","join","plistPath","data","toWrite","createExportOptionsPlist","writeFile","writeExportOptionsPlistFile","ipaPath","workspace","archivePath","codeSignIdentity","exportOptionsPlistPath","plistData","keychainPath","exportMethod","credentials","client","path","Dir","env","process","CI","runFastlane","basename","dirname","buildPhase","buildIPA","generatedEntitlementsPath","manifest","decodedProvisioningProfileEntitlements","Entitlements","entitlementsPattern","entitlementsPaths","glob","length","archiveEntitlementsPath","archiveEntitlementsRaw","archiveEntitlementsData","_","attempt","plist","parse","String","isError","message","entitlements","entitlementTransferRules","forEach","rule","let","generatedEntitlements","omit","blacklistedEntitlementKeys","ios","usesIcloudStorage","blacklistedEntitlementKeysWithoutICloud","ubiquityKvKey","teamId","split","bundleIdentifier","associatedDomains","icloudContainerEnvKey","envs","filter","i","generatedEntitlementsPlistData","build","mode","plistDataReformatted","createEntitlementsFile","entitlementsPath","provisioningProfilePath","sourceIpaPath","destIpaPath","resignIPA","fastlaneArgs","loggerFields","fastlaneEnvVars","FASTLANE_SKIP_UPDATE_CHECK","FASTLANE_DISABLE_COLORS","FASTLANE_TEAM_ID","LC_ALL","pipeToLogger","dontShowStdout","p12Buffer","passwordRaw","_getCertData","certAsn1","forge","pki","certificateToAsn1","certDer","asn1","toDer","getBytes","md","sha1","create","update","digest","toHex","toUpperCase","findP12CertSerialNumber","serialNumber","replace","Buffer","isBuffer","toString","password","p12Der","util","decode64","p12Asn1","fromDer","p12","pkcs12","pkcs12FromAsn1","certBagType","oids","certBag","get","getBags","bagType","validateProvisioningProfile","distCertFingerprint","_ensureDeveloperCertificateIsValid","_ensureBundleIdentifierIsValid","devCertBase64","DeveloperCertificates","devCertFingerprint","_genDerCertFingerprint","certBase64","certBuffer","from","crypto","createHash","expectedBundleIdentifier","actualApplicationIdentifier","actualBundleIdentifier","exec","provisioningProfileUUID","resolveExportMethod","ProvisionedDevices","ProvisionsAllDevices"],"mappings":"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","file":"../../detach/IosCodeSigning.js","sourcesContent":["import forge from 'node-forge';\nimport _ from 'lodash';\nimport fs from 'fs-extra';\nimport path from 'path';\nimport glob from 'glob-promise';\nimport plist from 'plist';\nimport crypto from 'crypto';\n\nimport { spawnAsyncThrowError } from './ExponentTools';\n\nasync function ensureCertificateValid({ certPath, certPassword, teamID }) {\n  const certData = await fs.readFile(certPath);\n  const fingerprint = _genP12CertFingerprint(certData, certPassword);\n  const identities = await _findIdentitiesByTeamID(teamID);\n  const isValid = identities.indexOf(fingerprint) !== -1;\n  if (!isValid) {\n    throw new Error(`codesign ident not present in find-identity: ${fingerprint}\\n${identities}`);\n  }\n  return fingerprint;\n}\n\nfunction _genP12CertFingerprint(p12Buffer, passwordRaw) {\n  const certData = _getCertData(p12Buffer, passwordRaw);\n  const certAsn1 = forge.pki.certificateToAsn1(certData);\n  const certDer = forge.asn1.toDer(certAsn1).getBytes();\n  return forge.md.sha1\n    .create()\n    .update(certDer)\n    .digest()\n    .toHex()\n    .toUpperCase();\n}\n\nfunction findP12CertSerialNumber(p12Buffer, passwordRaw) {\n  const certData = _getCertData(p12Buffer, passwordRaw);\n  const { serialNumber } = certData;\n  return serialNumber ? certData.serialNumber.replace(/^0+/, '').toUpperCase() : null;\n}\n\nfunction _getCertData(p12Buffer, passwordRaw) {\n  if (Buffer.isBuffer(p12Buffer)) {\n    p12Buffer = p12Buffer.toString('base64');\n  } else if (typeof p12Buffer !== 'string') {\n    throw new Error('_getCertData only takes strings and buffers.');\n  }\n\n  const password = String(passwordRaw || '');\n  const p12Der = forge.util.decode64(p12Buffer);\n  const p12Asn1 = forge.asn1.fromDer(p12Der);\n  const p12 = forge.pkcs12.pkcs12FromAsn1(p12Asn1, password);\n  const certBagType = forge.pki.oids.certBag;\n  const certData = _.get(p12.getBags({ bagType: certBagType }), [certBagType, 0, 'cert']);\n  if (!certData) {\n    throw new Error(\"_getCertData: couldn't find cert bag\");\n  }\n  return certData;\n}\n\nasync function _findIdentitiesByTeamID(teamID) {\n  const { output } = await spawnAsyncThrowError(\n    'security',\n    ['find-identity', '-v', '-s', `(${teamID})`],\n    {\n      stdio: 'pipe',\n    }\n  );\n  return output.join('');\n}\n\nfunction validateProvisioningProfile(plistData, { distCertFingerprint, bundleIdentifier }) {\n  _ensureDeveloperCertificateIsValid(plistData, distCertFingerprint);\n  _ensureBundleIdentifierIsValid(plistData, bundleIdentifier);\n}\n\nfunction _ensureDeveloperCertificateIsValid(plistData, distCertFingerprint) {\n  const devCertBase64 = plistData.DeveloperCertificates[0];\n  const devCertFingerprint = _genDerCertFingerprint(devCertBase64);\n  if (devCertFingerprint !== distCertFingerprint) {\n    throw new Error(\n      'validateProvisioningProfile: provisioning profile is not associated with uploaded distribution certificate'\n    );\n  }\n}\n\nfunction _genDerCertFingerprint(certBase64) {\n  const certBuffer = Buffer.from(certBase64, 'base64');\n  return crypto\n    .createHash('sha1')\n    .update(certBuffer)\n    .digest('hex')\n    .toUpperCase();\n}\n\nfunction _ensureBundleIdentifierIsValid(plistData, expectedBundleIdentifier) {\n  const actualApplicationIdentifier = plistData.Entitlements['application-identifier'];\n  const actualBundleIdentifier = /\\.(.+)/.exec(actualApplicationIdentifier)[1];\n\n  if (expectedBundleIdentifier !== actualBundleIdentifier) {\n    throw new Error(\n      `validateProvisioningProfile: wrong bundleIdentifier found in provisioning profile; expected: ${expectedBundleIdentifier}, found (in provisioning profile): ${actualBundleIdentifier}`\n    );\n  }\n}\n\nasync function writeExportOptionsPlistFile(plistPath, data) {\n  const toWrite = createExportOptionsPlist(data);\n  await fs.writeFile(plistPath, toWrite);\n}\n\nconst createExportOptionsPlist = ({\n  bundleIdentifier,\n  provisioningProfileUUID,\n  exportMethod,\n  teamID,\n}) => `<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<!DOCTYPE plist PUBLIC \"-//Apple//DTD PLIST 1.0//EN\" \"http://www.apple.com/DTDs/PropertyList-1.0.dtd\">\n<plist version=\"1.0\">\n  <dict>\n    <key>method</key>\n    <string>${exportMethod}</string>\n    <key>teamID</key>\n    <string>${teamID}</string>\n    <key>provisioningProfiles</key>\n    <dict>\n      <key>${bundleIdentifier}</key>\n      <string>${provisioningProfileUUID}</string>\n    </dict>\n  </dict>\n</plist>`;\n\nasync function buildIPA(\n  {\n    ipaPath,\n    workspace,\n    archivePath,\n    codeSignIdentity,\n    exportOptionsPlistPath,\n    plistData,\n    keychainPath,\n    exportMethod,\n  },\n  credentials,\n  client = false\n) {\n  if (client) {\n    await spawnAsyncThrowError(\n      'xcodebuild',\n      [\n        '-exportArchive',\n        '-archivePath',\n        archivePath,\n        '-exportOptionsPlist',\n        exportOptionsPlistPath,\n        '-exportPath',\n        path.Dir(ipaPath),\n        `OTHER_CODE_SIGN_FLAGS=\"--keychain ${keychainPath}\"`,\n      ],\n      {\n        env: { ...process.env, CI: 1 },\n      }\n    );\n  } else {\n    await runFastlane(\n      credentials,\n      [\n        'gym',\n        '-n',\n        path.basename(ipaPath),\n        '--workspace',\n        workspace,\n        '--scheme',\n        'ExpoKitApp',\n        '--archive_path',\n        archivePath,\n        '--skip_build_archive',\n        'true',\n        '-i',\n        codeSignIdentity,\n        '--export_options',\n        exportOptionsPlistPath,\n        '--export_method',\n        exportMethod,\n        '--export_xcargs',\n        `OTHER_CODE_SIGN_FLAGS=\"--keychain ${keychainPath}\"`,\n        '-o',\n        path.dirname(ipaPath),\n        '--verbose',\n      ],\n      { buildPhase: 'building and signing IPA' }\n    );\n  }\n}\n\nconst resolveExportMethod = plistData => {\n  if (plistData.ProvisionedDevices) {\n    return 'ad-hoc';\n  } else if (plistData.ProvisionsAllDevices === true) {\n    return 'enterprise';\n  } else {\n    return 'app-store';\n  }\n};\n\nconst entitlementTransferRules = [\n  'com.apple.developer.associated-domains',\n  'com.apple.developer.healthkit',\n  'com.apple.developer.homekit',\n  'com.apple.developer.icloud-container-identifiers',\n  'com.apple.developer.icloud-services',\n  'com.apple.developer.in-app-payments',\n  'com.apple.developer.networking.vpn.api',\n  'com.apple.developer.ubiquity-container-identifiers',\n  'com.apple.developer.ubiquity-kvstore-identifier',\n  'com.apple.external-accessory.wireless-configuration',\n  'com.apple.security.application-groups',\n  'inter-app-audio',\n  'keychain-access-groups',\n];\n\nconst blacklistedEntitlementKeysWithoutICloud = [\n  'com.apple.developer.icloud-container-environment',\n  'com.apple.developer.icloud-container-identifiers',\n  'com.apple.developer.icloud-services',\n  'com.apple.developer.ubiquity-container-identifiers',\n  'com.apple.developer.ubiquity-kvstore-identifier',\n];\n\nconst blacklistedEntitlementKeys = [\n  'com.apple.developer.icloud-container-development-container-identifiers',\n  'com.apple.developer.restricted-resource-mode',\n  'inter-app-audio',\n  'com.apple.developer.homekit',\n  'com.apple.developer.healthkit',\n  'com.apple.developer.in-app-payments',\n  'com.apple.developer.maps',\n  'com.apple.external-accessory.wireless-configuration',\n];\n\nconst icloudContainerEnvKey = 'com.apple.developer.icloud-container-environment';\n\nasync function createEntitlementsFile({\n  generatedEntitlementsPath,\n  plistData,\n  archivePath,\n  manifest,\n}) {\n  const decodedProvisioningProfileEntitlements = plistData.Entitlements;\n\n  const entitlementsPattern = path.join(\n    archivePath,\n    'Products/Applications/ExpoKitApp.app/*.entitlements'\n  );\n  const entitlementsPaths = await glob(entitlementsPattern);\n  if (entitlementsPaths.length === 0) {\n    throw new Error(\"Didn't find any generated entitlements file in archive.\");\n  } else if (entitlementsPaths.length !== 1) {\n    throw new Error('Found more than one entitlements file.');\n  }\n  const archiveEntitlementsPath = entitlementsPaths[0];\n  const archiveEntitlementsRaw = await fs.readFile(archiveEntitlementsPath);\n  const archiveEntitlementsData = _.attempt(plist.parse, String(archiveEntitlementsRaw));\n  if (_.isError(archiveEntitlementsData)) {\n    throw new Error(`Error when parsing plist: ${archiveEntitlementsData.message}`);\n  }\n\n  const entitlements = { ...decodedProvisioningProfileEntitlements };\n\n  entitlementTransferRules.forEach(rule => {\n    if (rule in archiveEntitlementsData) {\n      entitlements[rule] = archiveEntitlementsData[rule];\n    }\n  });\n\n  let generatedEntitlements = _.omit(entitlements, blacklistedEntitlementKeys);\n\n  if (!manifest.ios.usesIcloudStorage) {\n    generatedEntitlements = _.omit(generatedEntitlements, blacklistedEntitlementKeysWithoutICloud);\n  } else {\n    const ubiquityKvKey = 'com.apple.developer.ubiquity-kvstore-identifier';\n    if (generatedEntitlements[ubiquityKvKey]) {\n      const teamId = generatedEntitlements[ubiquityKvKey].split('.')[0];\n      generatedEntitlements[ubiquityKvKey] = `${teamId}.${manifest.ios.bundleIdentifier}`;\n    }\n    generatedEntitlements['com.apple.developer.icloud-services'] = ['CloudDocuments'];\n  }\n  if (!manifest.ios.associatedDomains) {\n    generatedEntitlements = _.omit(generatedEntitlements, 'com.apple.developer.associated-domains');\n  }\n  if (generatedEntitlements[icloudContainerEnvKey]) {\n    const envs = generatedEntitlements[icloudContainerEnvKey].filter(i => i === 'Production');\n    generatedEntitlements[icloudContainerEnvKey] = envs;\n  }\n\n  const generatedEntitlementsPlistData = _.attempt(plist.build, generatedEntitlements);\n  await fs.writeFile(generatedEntitlementsPath, generatedEntitlementsPlistData, {\n    mode: 0o755,\n  });\n  const { output } = await spawnAsyncThrowError(\n    '/usr/libexec/PlistBuddy',\n    ['-x', '-c', 'Print', generatedEntitlementsPath],\n    {\n      stdio: 'pipe',\n    }\n  );\n  const plistDataReformatted = output.join('');\n  await fs.writeFile(generatedEntitlementsPath, plistDataReformatted, {\n    mode: 0o755,\n  });\n}\n\nasync function resignIPA(\n  {\n    codeSignIdentity,\n    entitlementsPath,\n    provisioningProfilePath,\n    sourceIpaPath,\n    destIpaPath,\n    keychainPath,\n  },\n  credentials\n) {\n  await spawnAsyncThrowError('cp', ['-rf', sourceIpaPath, destIpaPath]);\n  await runFastlane(\n    credentials,\n    [\n      'sigh',\n      'resign',\n      '--verbose',\n      '--entitlements',\n      entitlementsPath,\n      '--signing_identity',\n      codeSignIdentity,\n      '--keychain_path',\n      keychainPath,\n      '--provisioning_profile',\n      provisioningProfilePath,\n      destIpaPath,\n    ],\n    { buildPhase: 'building and signing IPA' }\n  );\n}\n\nasync function runFastlane({ teamID }, fastlaneArgs, loggerFields) {\n  const fastlaneEnvVars = {\n    FASTLANE_SKIP_UPDATE_CHECK: 1,\n    FASTLANE_DISABLE_COLORS: 1,\n    FASTLANE_TEAM_ID: teamID,\n    CI: 1,\n    LC_ALL: 'en_US.UTF-8',\n  };\n\n  await spawnAsyncThrowError('fastlane', fastlaneArgs, {\n    env: { ...process.env, ...fastlaneEnvVars },\n    pipeToLogger: true,\n    dontShowStdout: false,\n    loggerFields,\n  });\n}\n\nexport {\n  ensureCertificateValid,\n  findP12CertSerialNumber,\n  validateProvisioningProfile,\n  writeExportOptionsPlistFile,\n  buildIPA,\n  resolveExportMethod,\n  createEntitlementsFile,\n  resignIPA,\n};\n"],"sourceRoot":"/xdl@52.0.12/src"}