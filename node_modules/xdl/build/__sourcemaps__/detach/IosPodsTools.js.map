{"version":3,"sources":["detach/IosPodsTools.js"],"names":["async","templatesDirectory","versionedReactNativePath","expoSubspecs","shellAppSdkVersion","filterFn","createSdkFilterFn","let","result","await","_concatTemplateFilesInDirectoryAsync","path","join","map","subspec","replace","_renderVersionedReactNativeDependenciesAsync","_renderVersionedReactNativePostinstallsAsync","directory","templateFilenames","glob","sort","filteredTemplateFilenames","filter","templateStrings","fileIdx","nFiles","length","filename","templateString","fs","readFile","push","dependenciesConfigPath","options","dependencies","readAsync","type","isPodfile","noWarningsFlag","depsStrings","dependency","name","version","_renderPodDependenciesAsync","pathToTemplate","pathToOutput","moreSubstitutions","dirname","indentString","IOS_EXPONENT_CLIENT_VERSION","writeFile","renderExpoKitPodspecAsync","sdkVersion","reactNativePath","REACT_NATIVE_PATH","rnDependencyOptions","expoKitPath","EXPOKIT_PATH","expoKitTag","EXPOKIT_TAG","expoKitDependencyOptions","versionedRnPath","VERSIONED_REACT_NATIVE_PATH","rnExpoSubspecs","REACT_NATIVE_EXPO_SUBSPECS","versionedDependencies","versionedPostinstalls","podDependencies","universalModules","UNIVERSAL_MODULES","substitutions","EXPONENT_CLIENT_DEPS","EXPOKIT_DEPENDENCY","_renderExpoKitDependency","PODFILE_UNVERSIONED_EXPO_MODULES_DEPENDENCIES","_renderUnversionedUniversalModulesDependencies","PODFILE_UNVERSIONED_RN_DEPENDENCY","_renderUnversionedReactNativeDependency","PODFILE_UNVERSIONED_POSTINSTALL","_renderUnversionedPostinstall","PODFILE_DETACHED_POSTINSTALL","_renderDetachedPostinstall","PODFILE_DETACHED_SERVICE_POSTINSTALL","PODFILE_VERSIONED_RN_DEPENDENCIES","PODFILE_VERSIONED_POSTINSTALLS","PODFILE_TEST_TARGET","_renderTestTarget","_validatePodfileSubstitutions","key","hasOwnProperty","replacement","RegExp","renderPodfileAsync","validKeys","includes","Error","sdkMajorVersion","parseSdkMajorVersion","attributes","git","tag","branch","subspecs","process","env","EXPO_UNIVERSE_DIR","inhibit_warnings","_renderDependencyAttributes","_renderUnversionedReactDependency","_renderUnversionedYogaDependency","glogLibraryName","_renderUnversionedThirdPartyDependency","podName","podspecRelativePath","podspec","attributesStrings","Object","keys","value","JSON","stringify","String","toUpperCase","undefined","match","sdkVersionWithUnderscores","i","endsWith","isServiceContext","podsRootSub","maybeDetachedServiceDef","podsToChangeDeployTarget","podsToChangeRB","pod","deploymentTarget","moduleInfo","_renderUnversionedUniversalModuleDependency"],"mappings":"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","file":"../../detach/IosPodsTools.js","sourcesContent":["// Copyright 2015-present 650 Industries. All rights reserved.\n\n'use strict';\n\nimport fs from 'fs-extra';\nimport glob from 'glob-promise';\nimport indentString from 'indent-string';\nimport JsonFile from '@expo/json-file';\nimport path from 'path';\n\nimport { parseSdkMajorVersion } from './ExponentTools';\n\nfunction _validatePodfileSubstitutions(substitutions) {\n  const validKeys = [\n    // a pod dependency on ExpoKit (can be local or remote)\n    'EXPOKIT_DEPENDENCY',\n    // local path to ExpoKit dependency\n    'EXPOKIT_PATH',\n    // tag to use for ExpoKit dependency\n    'EXPOKIT_TAG',\n    // the contents of dependencies.json enumerated as deps in podfile format\n    'EXPONENT_CLIENT_DEPS',\n    // postinstall for detached projects (defines EX_DETACHED among other things)\n    'PODFILE_DETACHED_POSTINSTALL',\n    // same as previous but also defines EX_DETACHED_SERVICE\n    'PODFILE_DETACHED_SERVICE_POSTINSTALL',\n    // ExponentIntegrationTests\n    'PODFILE_TEST_TARGET',\n    // unversioned react native pod dependency, probably at the path given in\n    // REACT_NATIVE_PATH, with a bunch of subspecs.\n    'PODFILE_UNVERSIONED_RN_DEPENDENCY',\n    // postinstall hook for unversioned deps\n    'PODFILE_UNVERSIONED_POSTINSTALL',\n    // versioned rn dependencies (paths to versioned-react-native directories)\n    // read from template files\n    'PODFILE_VERSIONED_RN_DEPENDENCIES',\n    // versioned rn postinstall hooks read from template files\n    'PODFILE_VERSIONED_POSTINSTALLS',\n    // list of generated Expo subspecs to include under a versioned react native dependency\n    'REACT_NATIVE_EXPO_SUBSPECS',\n    // path to use for the unversioned react native dependency\n    'REACT_NATIVE_PATH',\n    // name of the main build target, e.g. Exponent\n    'TARGET_NAME',\n    // path from Podfile to versioned-react-native\n    'VERSIONED_REACT_NATIVE_PATH',\n    // Expo universal modules dependencies\n    'PODFILE_UNVERSIONED_EXPO_MODULES_DEPENDENCIES',\n    // Universal modules configurations to be included in the Podfile\n    'UNIVERSAL_MODULES',\n  ];\n\n  for (const key in substitutions) {\n    if (substitutions.hasOwnProperty(key)) {\n      if (!validKeys.includes(key)) {\n        throw new Error(`Unrecognized Podfile template key: ${key}`);\n      }\n    }\n  }\n  return true;\n}\n\nfunction _renderExpoKitDependency(options, sdkVersion) {\n  const sdkMajorVersion = parseSdkMajorVersion(sdkVersion);\n  let attributes;\n  if (options.expoKitPath) {\n    attributes = {\n      path: options.expoKitPath,\n    };\n  } else if (options.expoKitTag) {\n    attributes = {\n      git: 'http://github.com/expo/expo.git',\n      tag: options.expoKitTag,\n    };\n  } else {\n    attributes = {\n      git: 'http://github.com/expo/expo.git',\n      branch: 'master',\n    };\n  }\n\n  // GL subspec is available as of SDK 26\n  // but removed together with CPP subspec in SDK 29\n  if (sdkMajorVersion < 26) {\n    attributes.subspecs = ['Core', 'CPP'];\n  } else if (sdkMajorVersion < 29 && !process.env.EXPO_UNIVERSE_DIR) {\n    attributes.subspecs = ['Core', 'CPP', 'GL'];\n  } else {\n    attributes.subspecs = ['Core'];\n  }\n  attributes.inhibit_warnings = true;\n\n  let dependency = `pod 'ExpoKit',\n${indentString(_renderDependencyAttributes(attributes), 2)}`;\n\n  return indentString(dependency, 2);\n}\n\n/**\n * @param sdkVersion if specified, indicates which sdkVersion this project uses\n *  as 'UNVERSIONED', e.g. if we are detaching a sdk15 project, we render\n *  an unversioned dependency pointing at RN#sdk-15.\n */\nfunction _renderUnversionedReactNativeDependency(options, sdkVersion) {\n  let sdkMajorVersion = parseSdkMajorVersion(sdkVersion);\n  if (sdkMajorVersion < 21) {\n    return indentString(\n      `\n${_renderUnversionedReactDependency(options, sdkVersion)}\n${_renderUnversionedYogaDependency(options, sdkVersion)}\n`,\n      2\n    );\n  } else {\n    const glogLibraryName = sdkMajorVersion < 26 ? 'GLog' : 'glog';\n    return indentString(\n      `\n${_renderUnversionedReactDependency(options, sdkVersion)}\n${_renderUnversionedYogaDependency(options, sdkVersion)}\n${_renderUnversionedThirdPartyDependency(\n        'DoubleConversion',\n        path.join('third-party-podspecs', 'DoubleConversion.podspec'),\n        options\n      )}\n${_renderUnversionedThirdPartyDependency(\n        'Folly',\n        path.join('third-party-podspecs', 'Folly.podspec'),\n        options\n      )}\n${_renderUnversionedThirdPartyDependency(\n        glogLibraryName,\n        path.join('third-party-podspecs', `${glogLibraryName}.podspec`),\n        options\n      )}\n`,\n      2\n    );\n  }\n}\n\nfunction _renderUnversionedReactDependency(options, sdkVersion) {\n  let attributes;\n  if (options.reactNativePath) {\n    attributes = {\n      path: options.reactNativePath,\n      inhibit_warnings: true,\n    };\n  } else {\n    throw new Error(`Unsupported options for RN dependency: ${options}`);\n  }\n\n  attributes.subspecs = [\n    'Core',\n    'ART',\n    'RCTActionSheet',\n    'RCTAnimation',\n    'RCTCameraRoll',\n    'RCTGeolocation',\n    'RCTImage',\n    'RCTNetwork',\n    'RCTText',\n    'RCTVibration',\n    'RCTWebSocket',\n  ];\n\n  let sdkMajorVersion = parseSdkMajorVersion(sdkVersion);\n  if (!(sdkMajorVersion < 16)) {\n    attributes.subspecs.push('DevSupport');\n  }\n  if (!(sdkMajorVersion < 21)) {\n    attributes.subspecs.push('CxxBridge');\n  } else if (!(sdkMajorVersion < 18)) {\n    attributes.subspecs.push('BatchedBridge');\n  }\n\n  return `pod 'React',\n${indentString(_renderDependencyAttributes(attributes), 2)}`;\n}\n\nfunction _renderUnversionedYogaDependency(options, sdkVersion) {\n  let attributes;\n  let sdkMajorVersion = parseSdkMajorVersion(sdkVersion);\n  if (options.reactNativePath) {\n    attributes = {\n      path: path.join(\n        options.reactNativePath,\n        'ReactCommon',\n        sdkMajorVersion < 22 ? 'Yoga' : 'yoga'\n      ),\n      inhibit_warnings: true,\n    };\n  } else {\n    throw new Error(`Unsupported options for Yoga dependency: ${options}`);\n  }\n  return `pod '${sdkMajorVersion < 22 ? 'Yoga' : 'yoga'}',\n${indentString(_renderDependencyAttributes(attributes), 2)}`;\n}\n\nfunction _renderUnversionedThirdPartyDependency(podName, podspecRelativePath, options) {\n  let attributes;\n  if (options.reactNativePath) {\n    attributes = {\n      podspec: path.join(options.reactNativePath, podspecRelativePath),\n      inhibit_warnings: true,\n    };\n  } else {\n    throw new Error(`Unsupported options for ${podName} dependency: ${options}`);\n  }\n  return `pod '${podName}',\n${indentString(_renderDependencyAttributes(attributes), 2)}`;\n}\n\nfunction _renderDependencyAttributes(attributes) {\n  let attributesStrings = [];\n  for (let key of Object.keys(attributes)) {\n    let value = JSON.stringify(attributes[key], null, 2);\n    attributesStrings.push(`:${key} => ${value}`);\n  }\n  return attributesStrings.join(',\\n');\n}\n\nfunction createSdkFilterFn(sdkVersion) {\n  if (sdkVersion && String(sdkVersion).toUpperCase() === 'UNVERSIONED') {\n    return () => false;\n  }\n  if (sdkVersion === undefined || !sdkVersion.match(/^\\d+\\.\\d+.\\d+$/)) {\n    return;\n  }\n  const sdkVersionWithUnderscores = sdkVersion.replace(/\\./g, '_');\n  return i => i.endsWith(`/ReactABI${sdkVersionWithUnderscores}.rb`);\n}\n\nasync function _renderVersionedReactNativeDependenciesAsync(\n  templatesDirectory,\n  versionedReactNativePath,\n  expoSubspecs,\n  shellAppSdkVersion\n) {\n  const filterFn = createSdkFilterFn(shellAppSdkVersion);\n  let result = await _concatTemplateFilesInDirectoryAsync(\n    path.join(templatesDirectory, 'versioned-react-native', 'dependencies'),\n    filterFn\n  );\n  expoSubspecs = expoSubspecs.map(subspec => `'${subspec}'`).join(', ');\n  result = result.replace(/\\$\\{VERSIONED_REACT_NATIVE_PATH\\}/g, versionedReactNativePath);\n  result = result.replace(/\\$\\{REACT_NATIVE_EXPO_SUBSPECS\\}/g, expoSubspecs);\n  return result;\n}\n\nasync function _renderVersionedReactNativePostinstallsAsync(\n  templatesDirectory,\n  shellAppSdkVersion\n) {\n  const filterFn = createSdkFilterFn(shellAppSdkVersion);\n  return _concatTemplateFilesInDirectoryAsync(\n    path.join(templatesDirectory, 'versioned-react-native', 'postinstalls'),\n    filterFn\n  );\n}\n\nasync function _concatTemplateFilesInDirectoryAsync(directory, filterFn) {\n  let templateFilenames = (await glob(path.join(directory, '*.rb'))).sort();\n  let filteredTemplateFilenames = filterFn ? templateFilenames.filter(filterFn) : templateFilenames;\n  let templateStrings = [];\n  // perform this in series in order to get deterministic output\n  for (let fileIdx = 0, nFiles = filteredTemplateFilenames.length; fileIdx < nFiles; fileIdx++) {\n    const filename = filteredTemplateFilenames[fileIdx];\n    let templateString = await fs.readFile(filename, 'utf8');\n    if (templateString) {\n      templateStrings.push(templateString);\n    }\n  }\n  return templateStrings.join('\\n');\n}\n\nfunction _renderDetachedPostinstall(sdkVersion, isServiceContext) {\n  let podsRootSub = '${PODS_ROOT}';\n  const maybeDetachedServiceDef = isServiceContext\n    ? `config.build_settings['GCC_PREPROCESSOR_DEFINITIONS'] << 'EX_DETACHED_SERVICE=1'`\n    : '';\n  return `\n    if target.pod_name == 'ExpoKit'\n      target.native_target.build_configurations.each do |config|\n        config.build_settings['GCC_PREPROCESSOR_DEFINITIONS'] ||= ['$(inherited)']\n        config.build_settings['GCC_PREPROCESSOR_DEFINITIONS'] << 'EX_DETACHED=1'\n        ${maybeDetachedServiceDef}\n        # needed for GoogleMaps 2.x\n        config.build_settings['FRAMEWORK_SEARCH_PATHS'] ||= []\n        config.build_settings['FRAMEWORK_SEARCH_PATHS'] << '${podsRootSub}/GoogleMaps/Base/Frameworks'\n        config.build_settings['FRAMEWORK_SEARCH_PATHS'] << '${podsRootSub}/GoogleMaps/Maps/Frameworks'\n      end\n    end\n`;\n}\n\nfunction _renderUnversionedPostinstall(sdkVersion) {\n  // TODO: switch to `installer.pods_project.targets.each` in postinstall\n  // see: https://stackoverflow.com/questions/37160688/set-deployment-target-for-cocoapodss-pod\n  const podsToChangeDeployTarget = [\n    'Amplitude-iOS',\n    'Analytics',\n    'AppAuth',\n    'Branch',\n    'CocoaLumberjack',\n    'FBSDKCoreKit',\n    'FBSDKLoginKit',\n    'FBSDKShareKit',\n    'GPUImage',\n    'JKBigInteger2',\n  ];\n  const podsToChangeRB = `[${podsToChangeDeployTarget.map(pod => `'${pod}'`).join(',')}]`;\n  const sdkMajorVersion = parseSdkMajorVersion(sdkVersion);\n\n  // SDK31 drops support for iOS 9.0\n  const deploymentTarget = sdkMajorVersion > 30 ? '10.0' : '9.0';\n\n  return `\n    if ${podsToChangeRB}.include? target.pod_name\n      target.native_target.build_configurations.each do |config|\n        config.build_settings['IPHONEOS_DEPLOYMENT_TARGET'] = '${deploymentTarget}'\n      end\n    end\n    # Can't specify this in the React podspec because we need\n    # to use those podspecs for detached projects which don't reference ExponentCPP.\n    if target.pod_name.start_with?('React')\n      target.native_target.build_configurations.each do |config|\n        config.build_settings['IPHONEOS_DEPLOYMENT_TARGET'] = '${deploymentTarget}'\n        config.build_settings['HEADER_SEARCH_PATHS'] ||= ['$(inherited)']\n      end\n    end\n    # Build React Native with RCT_DEV enabled and RCT_ENABLE_INSPECTOR and\n    # RCT_ENABLE_PACKAGER_CONNECTION disabled\n    next unless target.pod_name == 'React'\n    target.native_target.build_configurations.each do |config|\n      config.build_settings['GCC_PREPROCESSOR_DEFINITIONS'] ||= ['$(inherited)']\n      config.build_settings['GCC_PREPROCESSOR_DEFINITIONS'] << 'RCT_DEV=1'\n      config.build_settings['GCC_PREPROCESSOR_DEFINITIONS'] << 'RCT_ENABLE_INSPECTOR=0'\n      config.build_settings['GCC_PREPROCESSOR_DEFINITIONS'] << 'ENABLE_PACKAGER_CONNECTION=0'\n    end\n`;\n}\n\nfunction _renderTestTarget(reactNativePath) {\n  return `\n  target 'ExponentIntegrationTests' do\n    inherit! :search_paths\n  end\n\n  target 'Tests' do\n    inherit! :search_paths\n  end\n`;\n}\n\nasync function _renderPodDependenciesAsync(dependenciesConfigPath, options) {\n  let dependencies = await new JsonFile(dependenciesConfigPath).readAsync();\n  const type = options.isPodfile ? 'pod' : 'ss.dependency';\n  const noWarningsFlag = options.isPodfile ? `, :inhibit_warnings => true` : '';\n  let depsStrings = dependencies.map(\n    dependency => `  ${type} '${dependency.name}', '${dependency.version}'${noWarningsFlag}`\n  );\n  return depsStrings.join('\\n');\n}\n\nasync function renderExpoKitPodspecAsync(pathToTemplate, pathToOutput, moreSubstitutions) {\n  let templatesDirectory = path.dirname(pathToTemplate);\n  let templateString = await fs.readFile(pathToTemplate, 'utf8');\n  let dependencies = await _renderPodDependenciesAsync(\n    path.join(templatesDirectory, 'dependencies.json'),\n    { isPodfile: false }\n  );\n  let result = templateString.replace(/\\$\\{IOS_EXPOKIT_DEPS\\}/g, indentString(dependencies, 2));\n  if (moreSubstitutions && moreSubstitutions.IOS_EXPONENT_CLIENT_VERSION) {\n    result = result.replace(\n      /\\$\\{IOS_EXPONENT_CLIENT_VERSION\\}/g,\n      moreSubstitutions.IOS_EXPONENT_CLIENT_VERSION\n    );\n  }\n\n  await fs.writeFile(pathToOutput, result);\n}\n\nfunction _renderUnversionedUniversalModulesDependencies(universalModules, sdkVersion) {\n  return indentString(\n    universalModules\n      .map(moduleInfo =>\n        _renderUnversionedUniversalModuleDependency(moduleInfo.podName, moduleInfo.path, sdkVersion)\n      )\n      .join('\\n'),\n    2\n  );\n}\n\nfunction _renderUnversionedUniversalModuleDependency(podName, path, sdkVersion) {\n  const attributes = {\n    path,\n  };\n  return `pod '${podName}',\n${indentString(_renderDependencyAttributes(attributes), 2)}`;\n}\n\n/**\n *  @param pathToTemplate path to template Podfile\n *  @param pathToOutput path to render final Podfile\n *  @param moreSubstitutions dictionary of additional substitution keys and values to replace\n *         in the template, such as: TARGET_NAME, REACT_NATIVE_PATH\n */\nasync function renderPodfileAsync(\n  pathToTemplate,\n  pathToOutput,\n  moreSubstitutions,\n  shellAppSdkVersion,\n  sdkVersion = 'UNVERSIONED'\n) {\n  if (!moreSubstitutions) {\n    moreSubstitutions = {};\n  }\n  let templatesDirectory = path.dirname(pathToTemplate);\n  let templateString = await fs.readFile(pathToTemplate, 'utf8');\n\n  let reactNativePath = moreSubstitutions.REACT_NATIVE_PATH;\n  let rnDependencyOptions;\n  if (reactNativePath) {\n    rnDependencyOptions = { reactNativePath };\n  } else {\n    rnDependencyOptions = {};\n  }\n\n  const expoKitPath = moreSubstitutions.EXPOKIT_PATH;\n  const expoKitTag = moreSubstitutions.EXPOKIT_TAG;\n  let expoKitDependencyOptions = {};\n  if (expoKitPath) {\n    expoKitDependencyOptions = { expoKitPath };\n  } else if (expoKitTag) {\n    expoKitDependencyOptions = { expoKitTag };\n  }\n\n  let versionedRnPath = moreSubstitutions.VERSIONED_REACT_NATIVE_PATH;\n  if (!versionedRnPath) {\n    versionedRnPath = './versioned-react-native';\n  }\n  let rnExpoSubspecs = moreSubstitutions.REACT_NATIVE_EXPO_SUBSPECS;\n  if (!rnExpoSubspecs) {\n    rnExpoSubspecs = ['Expo'];\n  }\n\n  let versionedDependencies = await _renderVersionedReactNativeDependenciesAsync(\n    templatesDirectory,\n    versionedRnPath,\n    rnExpoSubspecs,\n    shellAppSdkVersion\n  );\n  let versionedPostinstalls = await _renderVersionedReactNativePostinstallsAsync(\n    templatesDirectory,\n    shellAppSdkVersion\n  );\n  let podDependencies = await _renderPodDependenciesAsync(\n    path.join(templatesDirectory, 'dependencies.json'),\n    { isPodfile: true }\n  );\n\n  let universalModules = moreSubstitutions.UNIVERSAL_MODULES;\n  if (!universalModules) {\n    universalModules = [];\n  }\n\n  let substitutions = {\n    EXPONENT_CLIENT_DEPS: podDependencies,\n    EXPOKIT_DEPENDENCY: _renderExpoKitDependency(expoKitDependencyOptions, sdkVersion),\n    PODFILE_UNVERSIONED_EXPO_MODULES_DEPENDENCIES: _renderUnversionedUniversalModulesDependencies(\n      universalModules,\n      sdkVersion\n    ),\n    PODFILE_UNVERSIONED_RN_DEPENDENCY: _renderUnversionedReactNativeDependency(\n      rnDependencyOptions,\n      sdkVersion\n    ),\n    PODFILE_UNVERSIONED_POSTINSTALL: _renderUnversionedPostinstall(sdkVersion),\n    PODFILE_DETACHED_POSTINSTALL: _renderDetachedPostinstall(sdkVersion, false),\n    PODFILE_DETACHED_SERVICE_POSTINSTALL: _renderDetachedPostinstall(sdkVersion, true),\n    PODFILE_VERSIONED_RN_DEPENDENCIES: versionedDependencies,\n    PODFILE_VERSIONED_POSTINSTALLS: versionedPostinstalls,\n    PODFILE_TEST_TARGET: shellAppSdkVersion ? '' : _renderTestTarget(reactNativePath),\n    ...moreSubstitutions,\n  };\n  _validatePodfileSubstitutions(substitutions);\n\n  let result = templateString;\n  for (let key in substitutions) {\n    if (substitutions.hasOwnProperty(key)) {\n      let replacement = substitutions[key];\n      result = result.replace(new RegExp(`\\\\\\$\\\\\\{${key}\\\\\\}`, 'g'), replacement);\n    }\n  }\n\n  await fs.writeFile(pathToOutput, result);\n}\n\nexport { renderExpoKitPodspecAsync, renderPodfileAsync };\n"],"sourceRoot":"/xdl@52.0.12/src"}