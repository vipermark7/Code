{"version":3,"sources":["detach/IosKeychain.js"],"names":["async","appUUID","saveResultToFile","BUILD_PHASE","logger","_logger","withFields","buildPhase","spawn","createSpawner","name","uuidv1","password","path","getKeychainPath","info","await","runFastlane","stdoutOnly","keychainInfo","keychainInfoPath","getKeychainInfoPath","fs","writeFile","JSON","stringify","createKeychain","remove","deleteKeychain","keychainPath","certPath","certPassword","args","push","importIntoKeychain","stdout","keychainsListRaw","spawnAsyncThrowError","stdio","allKeychainsList","match","map","i","slice","length","turtleKeychainsList","let","shouldCleanSearchList","err","warn","newSearchList","_","difference","error","Error","cleanUpKeychains","fastlaneArgs","fastlaneEnvVars","FASTLANE_DISABLE_COLORS","FASTLANE_SKIP_UPDATE_CHECK","CI","LC_ALL","env","process"],"mappings":"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","file":"../../detach/IosKeychain.js","sourcesContent":["import uuidv1 from 'uuid/v1';\nimport _ from 'lodash';\nimport fs from 'fs-extra';\n\nimport _logger from './Logger';\nimport { spawnAsyncThrowError, createSpawner } from './ExponentTools';\n\nexport async function createKeychain(appUUID, saveResultToFile = true) {\n  const BUILD_PHASE = 'creating keychain';\n  const logger = _logger.withFields({ buildPhase: BUILD_PHASE });\n  const spawn = createSpawner(BUILD_PHASE, logger);\n\n  const name = uuidv1();\n  const password = uuidv1();\n  const path = getKeychainPath(name);\n\n  logger.info('creating new keychain...');\n  await runFastlane([\n    'run',\n    'create_keychain',\n    `path:${path}`,\n    `password:${password}`,\n    'unlock:true',\n    'timeout:360000',\n  ]);\n  await spawn('security', 'show-keychain-info', path, { stdoutOnly: true });\n\n  logger.info('created new keychain');\n  const keychainInfo = {\n    name,\n    path,\n    password,\n  };\n\n  if (saveResultToFile) {\n    const keychainInfoPath = getKeychainInfoPath(appUUID);\n    await fs.writeFile(keychainInfoPath, JSON.stringify(keychainInfo));\n    logger.info('saved keychain info to %s', keychainInfoPath);\n  }\n\n  return keychainInfo;\n}\n\nexport async function deleteKeychain({ path, appUUID }) {\n  const BUILD_PHASE = 'deleting keychain';\n  const logger = _logger.withFields({ buildPhase: BUILD_PHASE });\n\n  logger.info('deleting keychain...');\n  await runFastlane(['run', 'delete_keychain', `keychain_path:${path}`]);\n\n  if (appUUID) {\n    const keychainInfoPath = getKeychainInfoPath(appUUID);\n    await fs.remove(keychainInfoPath);\n  }\n}\n\nexport async function importIntoKeychain({ keychainPath, certPath, certPassword }) {\n  const BUILD_PHASE = 'importing certificate into keychain';\n  const logger = _logger.withFields({ buildPhase: BUILD_PHASE });\n  const spawn = createSpawner(BUILD_PHASE);\n\n  logger.info('importing certificate into keychain...');\n  const args = ['import', certPath, '-A', '-k', keychainPath, '-f', 'pkcs12'];\n  if (certPassword) {\n    logger.info('certificate has password');\n    args.push('-P', certPassword);\n  } else {\n    logger.info(\"certificate doesn't have password\");\n  }\n  await spawn('security', ...args);\n  logger.info('imported certificate into keychain');\n}\n\nexport async function cleanUpKeychains() {\n  try {\n    _logger.info('Cleaning up keychains...');\n    const { stdout: keychainsListRaw } = await spawnAsyncThrowError(\n      'security',\n      ['list-keychains'],\n      { stdio: 'pipe' }\n    );\n    const allKeychainsList = keychainsListRaw.match(/\"(.*)\"/g).map(i => i.slice(1, i.length - 1));\n    const turtleKeychainsList = keychainsListRaw.match(/\\/private\\/tmp\\/xdl\\/(.*).keychain/g);\n    let shouldCleanSearchList = false;\n    if (turtleKeychainsList) {\n      for (const keychainPath of turtleKeychainsList) {\n        try {\n          await deleteKeychain({ path: keychainPath });\n        } catch (err) {\n          _logger.warn(`Failed to delete keychain: ${keychainPath}`, err);\n          shouldCleanSearchList = true;\n        }\n      }\n\n      if (shouldCleanSearchList) {\n        const newSearchList = _.difference(allKeychainsList, turtleKeychainsList);\n        await spawnAsyncThrowError('security', ['list-keychains', '-s', ...newSearchList], {\n          stdio: 'pipe',\n        });\n      }\n    }\n    _logger.info('Cleaned up keychains');\n  } catch (err) {\n    _logger.error(err);\n    throw new Error('Failed to clean up keychains');\n  }\n}\n\nasync function runFastlane(fastlaneArgs) {\n  const fastlaneEnvVars = {\n    FASTLANE_DISABLE_COLORS: 1,\n    FASTLANE_SKIP_UPDATE_CHECK: 1,\n    CI: 1,\n    LC_ALL: 'en_US.UTF-8',\n  };\n  await spawnAsyncThrowError('fastlane', fastlaneArgs, {\n    env: { ...process.env, ...fastlaneEnvVars },\n  });\n}\n\nconst getKeychainPath = name => `/private/tmp/xdl/${name}.keychain`;\nconst getKeychainInfoPath = appUUID => `/private/tmp/${appUUID}-keychain-info.json`;\n"],"sourceRoot":"/xdl@52.0.12/src"}