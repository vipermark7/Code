{"version":3,"sources":["detach/AndroidIcons.js"],"names":["async","oldText","newText","resDirPath","folderPrefix","folderSuffix","fileName","Promise","all","Object","keys","iconScales","map","key","regexFileAsync","path","join","_regexFileInResSubfoldersAsync","context","resPath","prefix","mdpiSize","filename","url","isDetached","let","baseImagePath","await","saveImageToPathAsync","data","projectPath","saveUrlToPathAsync","e","Error","entries","iconScale","subdirectoryName","destinationPath","spawnAsyncThrowError","stdio","cwd","resizeImageAsync","_hasShownResizeErrorWindowsLinux","console","warn","dims","getImageDimensionsMacOSAsync","length","_resizeIconsAsync","manifest","config","iconUrl","android","notificationIconUrl","notification","icon","iconBackgroundUrl","iconBackgroundColor","iconForegroundUrl","adaptiveIcon","backgroundColor","foregroundImage","backgroundImage","foregroundImageUrl","backgroundImageUrl","globby","absolute","forEach","filePath","fs","removeSync","dot","rmdirSync","createAndWriteIconsToPathAsync","mdpi","hdpi","xhdpi","xxhdpi","xxxhdpi"],"mappings":"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","file":"../../detach/AndroidIcons.js","sourcesContent":["/**\n *  @flow\n */\nimport fs from 'fs-extra';\nimport path from 'path';\nimport globby from 'globby';\n\nimport {\n  regexFileAsync,\n  saveImageToPathAsync,\n  saveUrlToPathAsync,\n  spawnAsyncThrowError,\n} from './ExponentTools';\nimport StandaloneContext from './StandaloneContext';\nimport { getImageDimensionsMacOSAsync, resizeImageAsync } from '../tools/ImageUtils';\n\nconst iconScales = {\n  mdpi: 1,\n  hdpi: 1.5,\n  xhdpi: 2,\n  xxhdpi: 3,\n  xxxhdpi: 4,\n};\n\nasync function _regexFileInResSubfoldersAsync(\n  oldText: string,\n  newText: string,\n  resDirPath: string,\n  folderPrefix: string,\n  folderSuffix: string,\n  fileName: string\n) {\n  return Promise.all(\n    Object.keys(iconScales).map(async key => {\n      return regexFileAsync(\n        oldText,\n        newText,\n        path.join(resDirPath, `${folderPrefix}${key}${folderSuffix}`, fileName)\n      );\n    })\n  );\n}\n\nlet _hasShownResizeErrorWindowsLinux = false;\n\nasync function _resizeIconsAsync(\n  context: StandaloneContext,\n  resPath: string,\n  prefix: string,\n  mdpiSize: number,\n  filename: string,\n  url: string,\n  isDetached: boolean\n) {\n  let baseImagePath = path.join(resPath, filename);\n\n  try {\n    if (isDetached) {\n      await saveImageToPathAsync(context.data.projectPath, url, baseImagePath);\n    } else {\n      await saveUrlToPathAsync(url, baseImagePath);\n    }\n  } catch (e) {\n    throw new Error(`Failed to save icon file to disk. (${e})`);\n  }\n\n  await Promise.all(\n    Object.entries(iconScales).map(async ([folderSuffix, iconScale]) => {\n      // adaptive icons (mdpiSize 108) must be placed in a -v26 folder\n      let subdirectoryName = `${prefix}${folderSuffix}${mdpiSize === 108 ? '-v26' : ''}`;\n      let destinationPath = path.join(resPath, subdirectoryName);\n      await spawnAsyncThrowError('/bin/cp', [baseImagePath, filename], {\n        stdio: 'inherit',\n        cwd: destinationPath,\n      });\n\n      try {\n        await resizeImageAsync(mdpiSize * iconScale, filename, destinationPath);\n      } catch (e) {\n        // Turtle should be able to resize images, so if it fails we want it to throw.\n        // However, `sips` does not exist on Windows or Linux machines, so we expect\n        // resizing images to error on these OSes and want the detach process to continue anyway.\n        if (isDetached) {\n          if (!_hasShownResizeErrorWindowsLinux) {\n            console.warn(\n              'Failed to resize app icons. Your full size icon will be copied to all android/app/src/main/res directories. For best quality, we recommend providing downscaled versions.'\n            );\n            _hasShownResizeErrorWindowsLinux = true;\n          }\n        } else {\n          throw new Error(`Failed to resize image: ${filename}. ${e}`);\n        }\n      }\n\n      // reject non-square icons\n      const dims = await getImageDimensionsMacOSAsync(destinationPath, filename);\n      if (!dims || dims.length < 2 || dims[0] !== dims[1]) {\n        if (!dims) {\n          // Again, only throw this error on Turtle -- we expect that this will fail\n          // for some detach users but we don't want this to stop the whole process.\n          if (!isDetached) {\n            throw new Error(`Unable to read the dimensions of ${filename}`);\n          }\n        } else {\n          throw new Error(\n            `Android icons must be square, the dimensions of ${filename} are ${dims}`\n          );\n        }\n      }\n    })\n  );\n\n  await spawnAsyncThrowError('/bin/rm', [baseImagePath]);\n}\n\nasync function createAndWriteIconsToPathAsync(\n  context: StandaloneContext,\n  resPath: string,\n  isDetached: boolean\n) {\n  let manifest = context.config; // manifest or app.json\n  let iconUrl =\n    manifest.android && manifest.android.iconUrl ? manifest.android.iconUrl : manifest.iconUrl;\n  let notificationIconUrl = manifest.notification ? manifest.notification.iconUrl : null;\n\n  if (isDetached) {\n    // manifest is actually just app.json in this case, so iconUrl fields don't exist\n    iconUrl = manifest.android && manifest.android.icon ? manifest.android.icon : manifest.icon;\n    notificationIconUrl = manifest.notification ? manifest.notification.icon : null;\n  }\n\n  let iconBackgroundUrl;\n  let iconBackgroundColor;\n  let iconForegroundUrl;\n  if (manifest.android && manifest.android.adaptiveIcon) {\n    iconBackgroundColor = manifest.android.adaptiveIcon.backgroundColor;\n    if (isDetached) {\n      iconForegroundUrl = manifest.android.adaptiveIcon.foregroundImage;\n      iconBackgroundUrl = manifest.android.adaptiveIcon.backgroundImage;\n    } else {\n      iconForegroundUrl = manifest.android.adaptiveIcon.foregroundImageUrl;\n      iconBackgroundUrl = manifest.android.adaptiveIcon.backgroundImageUrl;\n    }\n  }\n\n  if (iconUrl || iconForegroundUrl) {\n    // Android 7 and below icon\n    if (iconUrl) {\n      (await globby(['**/ic_launcher.png'], {\n        cwd: resPath,\n        absolute: true,\n      })).forEach(filePath => {\n        fs.removeSync(filePath);\n      });\n\n      await _resizeIconsAsync(\n        context,\n        resPath,\n        'mipmap-',\n        48,\n        'ic_launcher.png',\n        iconUrl,\n        isDetached\n      );\n    }\n\n    // Adaptive icon foreground image\n    if (iconForegroundUrl) {\n      (await globby(['**/ic_foreground.png'], {\n        cwd: resPath,\n        absolute: true,\n      })).forEach(filePath => {\n        fs.removeSync(filePath);\n      });\n\n      await _resizeIconsAsync(\n        context,\n        resPath,\n        'mipmap-',\n        108,\n        'ic_foreground.png',\n        iconForegroundUrl,\n        isDetached\n      );\n    } else {\n      // the OS's default method of coercing normal app icons to adaptive\n      // makes them look quite different from using an actual adaptive icon (with xml)\n      // so we need to support falling back to the old version on Android 8\n      (await globby(['**/mipmap-*-v26/*'], {\n        cwd: resPath,\n        absolute: true,\n        dot: true,\n      })).forEach(filePath => {\n        fs.removeSync(filePath);\n      });\n\n      try {\n        (await globby(['**/mipmap-*-v26'], {\n          cwd: resPath,\n          absolute: true,\n        })).forEach(filePath => {\n          fs.rmdirSync(filePath);\n        });\n      } catch (e) {\n        // we don't want the entire detach script to fail if node\n        // can't remove the directories for whatever reason.\n        // people can remove the directories themselves if they need\n        // so just fail silently here\n      }\n    }\n  }\n\n  // Adaptive icon background image or color\n  if (iconBackgroundUrl) {\n    await _resizeIconsAsync(\n      context,\n      resPath,\n      'mipmap-',\n      108,\n      'ic_background.png',\n      iconBackgroundUrl,\n      isDetached\n    );\n\n    await _regexFileInResSubfoldersAsync(\n      '@color/iconBackground',\n      '@mipmap/ic_background',\n      resPath,\n      'mipmap-',\n      '-v26',\n      'ic_launcher.xml'\n    );\n  } else if (iconBackgroundColor) {\n    await regexFileAsync(\n      '\"iconBackground\">#FFFFFF',\n      `\"iconBackground\">${iconBackgroundColor}`,\n      path.join(resPath, 'values', 'colors.xml')\n    );\n  }\n\n  // Notification icon\n  if (notificationIconUrl) {\n    (await globby(['**/shell_notification_icon.png'], {\n      cwd: resPath,\n      absolute: true,\n    })).forEach(filePath => {\n      fs.removeSync(filePath);\n    });\n\n    await _resizeIconsAsync(\n      context,\n      resPath,\n      'drawable-',\n      24,\n      'shell_notification_icon.png',\n      notificationIconUrl,\n      isDetached\n    );\n  }\n}\n\nexport { createAndWriteIconsToPathAsync };\n"],"sourceRoot":"/xdl@52.0.12/src"}