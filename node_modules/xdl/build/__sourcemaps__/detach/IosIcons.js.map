{"version":3,"sources":["detach/IosIcons.js"],"names":["async","context","path","type","data","exp","icon","await","saveImageToPathAsync","projectPath","Error","manifest","ios","iconUrl","saveUrlToPathAsync","_saveDefaultIconToPathAsync","destinationIconPath","let","defaultIconFilename","join","e","logger","warn","message","iconSizes","Promise","all","map","iconSize","iconResolutions","iconResolution","iconQualifier","_getAppleIconQualifier","iconKey","rawIconFilename","usesDefault","hasOwnProperty","iconFilename","iconSizePx","spawnAsyncThrowError","stdio","cwd","resizeImageAsync","dims","getImageDimensionsMacOSAsync","length","createAndWriteIconsToPathAsync"],"mappings":"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","file":"../../detach/IosIcons.js","sourcesContent":["/**\n *  @flow\n */\nimport path from 'path';\n\nimport { saveImageToPathAsync, saveUrlToPathAsync, spawnAsyncThrowError } from './ExponentTools';\nimport StandaloneContext from './StandaloneContext';\nimport { getImageDimensionsMacOSAsync, resizeImageAsync } from '../tools/ImageUtils';\nimport logger from './Logger';\n\nfunction _getAppleIconQualifier(iconSize: number, iconResolution: number): string {\n  let iconQualifier;\n  if (iconResolution !== 1) {\n    // e.g. \"29x29@3x\"\n    iconQualifier = `${iconSize}x${iconSize}@${iconResolution}x`;\n  } else {\n    iconQualifier = `${iconSize}x${iconSize}`;\n  }\n  if (iconSize === 76 || iconSize === 83.5) {\n    // ipad sizes require ~ipad at the end\n    iconQualifier = `${iconQualifier}~ipad`;\n  }\n  return iconQualifier;\n}\n\nasync function _saveDefaultIconToPathAsync(context: StandaloneContext, path: string) {\n  if (context.type === 'user') {\n    if (context.data.exp.icon) {\n      await saveImageToPathAsync(context.data.projectPath, context.data.exp.icon, path);\n    } else {\n      throw new Error('Cannot save icon because app.json has no exp.icon key.');\n    }\n  } else {\n    if (context.data.manifest.ios && context.data.manifest.ios.iconUrl) {\n      await saveUrlToPathAsync(context.data.manifest.ios.iconUrl, path);\n    } else if (context.data.manifest.iconUrl) {\n      await saveUrlToPathAsync(context.data.manifest.iconUrl, path);\n    } else {\n      throw new Error('Cannot save icon because manifest has no iconUrl or ios.iconUrl key.');\n    }\n  }\n}\n\n/**\n * Based on keys in the given context.config,\n * ensure that the proper iOS icon images exist -- assuming Info.plist already\n * points at them under CFBundleIcons.CFBundlePrimaryIcon.CFBundleIconFiles.\n *\n * This only works on MacOS (as far as I know) because it uses the sips utility.\n */\nasync function createAndWriteIconsToPathAsync(\n  context: StandaloneContext,\n  destinationIconPath: string\n) {\n  let defaultIconFilename = 'exp-icon.png';\n  try {\n    await _saveDefaultIconToPathAsync(context, path.join(destinationIconPath, defaultIconFilename));\n  } catch (e) {\n    defaultIconFilename = null;\n    logger.warn(e.message);\n  }\n\n  const iconSizes = [1024, 20, 29, 40, 60, 76, 83.5];\n\n  await Promise.all(\n    iconSizes.map(async iconSize => {\n      let iconResolutions;\n      if (iconSize === 76) {\n        // iPad has 1x and 2x icons for this size only\n        iconResolutions = [1, 2];\n      } else if (iconSize == 1024) {\n        // marketing icon is weird\n        iconResolutions = [1];\n      } else if (iconSize === 83.5) {\n        iconResolutions = [2];\n      } else {\n        iconResolutions = [2, 3];\n      }\n\n      // We need to wait for all of these to finish!\n      await Promise.all(\n        iconResolutions.map(async iconResolution => {\n          let iconQualifier = _getAppleIconQualifier(iconSize, iconResolution);\n          let iconKey = `iconUrl${iconQualifier}`;\n          let rawIconFilename;\n          let usesDefault = false;\n          if (context.type === 'service') {\n            // TODO(nikki): Support local paths for these icons\n            const manifest = context.data.manifest;\n            if (manifest.ios && manifest.ios.hasOwnProperty(iconKey)) {\n              // manifest specifies an image just for this size/resolution, use that\n              rawIconFilename = `exp-icon${iconQualifier}.png`;\n              await saveUrlToPathAsync(\n                manifest.ios[iconKey],\n                `${destinationIconPath}/${rawIconFilename}`\n              );\n            }\n          }\n          if (!rawIconFilename) {\n            // use default iconUrl\n            usesDefault = true;\n            if (defaultIconFilename) {\n              rawIconFilename = defaultIconFilename;\n            } else {\n              logger.warn(\n                `Project does not specify ios.${iconKey} nor a default iconUrl. Bundle will use the Expo logo.`\n              );\n              return;\n            }\n          }\n\n          let iconFilename = `AppIcon${iconQualifier}.png`;\n          let iconSizePx = iconSize * iconResolution;\n          await spawnAsyncThrowError('/bin/cp', [rawIconFilename, iconFilename], {\n            stdio: 'inherit',\n            cwd: destinationIconPath,\n          });\n          try {\n            await resizeImageAsync(iconSizePx, iconFilename, destinationIconPath);\n          } catch (e) {\n            throw new Error(`Failed to resize image: ${iconFilename}. (${e})`);\n          }\n\n          // reject non-square icons (because Apple will if we don't)\n          const dims = await getImageDimensionsMacOSAsync(destinationIconPath, iconFilename);\n          if (!dims || dims.length < 2 || dims[0] !== dims[1]) {\n            if (!dims) {\n              throw new Error(`Unable to read the dimensions of ${iconFilename}`);\n            } else {\n              throw new Error(\n                `iOS icons must be square, the dimensions of ${iconFilename} are ${dims}`\n              );\n            }\n          }\n\n          if (!usesDefault) {\n            // non-default icon used, clean up the downloaded version\n            await spawnAsyncThrowError('/bin/rm', [\n              path.join(destinationIconPath, rawIconFilename),\n            ]);\n          }\n        })\n      );\n    })\n  );\n\n  // clean up default icon\n  if (defaultIconFilename) {\n    await spawnAsyncThrowError('/bin/rm', [path.join(destinationIconPath, defaultIconFilename)]);\n  }\n}\n\nexport { createAndWriteIconsToPathAsync };\n"],"sourceRoot":"/xdl@52.0.12/src"}