{"version":3,"sources":["detach/Logger.js"],"names":["pipeOutputToLogger","PRINT_JSON_LOGS","process","env","JSON_LOGS","LOGGER_NAME","LEVELS","logger","init","levels","loggerObj","bunyan","createLogger","name","console","configured","selfConfigured","extraFields","forEach","level","args","logLine","configure","withFields","Object","assign","argsToLog","extraFieldsFromArgsExist","_","isPlainObject","first","extraFieldsFromArgs","shift","isEmpty","unshift","stdout","stderr","stdoutOnly","dontShowStdout","stdoutExtraFields","on","line","logMultiline","source","data","lines","String","split","shouldntLogMessage","info"],"mappings":"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","file":"../../detach/Logger.js","sourcesContent":["import bunyan from '@expo/bunyan';\nimport _ from 'lodash';\n\nconst PRINT_JSON_LOGS = process.env.JSON_LOGS === '1';\nconst LOGGER_NAME = 'xdl-detach';\nconst LEVELS = ['trace', 'debug', 'info', 'warn', 'error', 'fatal'];\n\nconst logger = {\n  init(levels) {\n    this.loggerObj = PRINT_JSON_LOGS ? bunyan.createLogger({ name: LOGGER_NAME }) : console;\n    this.configured = PRINT_JSON_LOGS;\n    this.selfConfigured = this.configured && true;\n    this.extraFields = {};\n    levels.forEach(level => {\n      this[level] = function(...args) {\n        this.logLine(level, ...args);\n      };\n    });\n  },\n  configure(loggerObj) {\n    this.loggerObj = loggerObj;\n    this.configured = true;\n    this.selfConfigured = false;\n  },\n  withFields(extraFields) {\n    return Object.assign({}, this, { extraFields: { ...this.extraFields, ...extraFields } });\n  },\n  logLine(level, ...args) {\n    const argsToLog = [...args];\n    const extraFieldsFromArgsExist = _.isPlainObject(_.first(args));\n    const extraFieldsFromArgs = extraFieldsFromArgsExist ? args[0] : {};\n    if (extraFieldsFromArgsExist) {\n      argsToLog.shift();\n    }\n    const extraFields = { ...extraFieldsFromArgs, ...this.extraFields };\n    if (!_.isEmpty(extraFields)) {\n      argsToLog.unshift(extraFields);\n    }\n    this.loggerObj[level](...argsToLog);\n  },\n};\n\nlogger.init(LEVELS);\n\nexport default logger;\n\nexport function pipeOutputToLogger(\n  { stdout, stderr } = {},\n  extraFields = {},\n  { stdoutOnly = false, dontShowStdout = false } = {}\n) {\n  if (stdout) {\n    const stdoutExtraFields = { ...extraFields };\n    if (dontShowStdout) {\n      stdoutExtraFields.dontShowStdout = true;\n    }\n    stdout.on('data', line => logMultiline(line, { ...stdoutExtraFields, source: 'stdout' }));\n  }\n  if (stderr) {\n    const source = stdoutOnly ? 'stdout' : 'stderr';\n    stderr.on('data', line => logMultiline(line, { ...extraFields, source }));\n  }\n}\n\nfunction logMultiline(data, extraFields) {\n  if (!data) {\n    return;\n  }\n  const lines = String(data).split('\\n');\n  lines.forEach(line => {\n    if (line) {\n      const args = [line];\n      if (logger.configured) {\n        args.unshift(extraFields);\n      }\n      const shouldntLogMessage =\n        extraFields.source === 'stdout' &&\n        extraFields.dontShowStdout &&\n        logger.configured &&\n        !logger.selfConfigured;\n      if (!shouldntLogMessage) {\n        logger.info(...args);\n      }\n    }\n  });\n}\n"],"sourceRoot":"/xdl@52.0.12/src"}