{"version":3,"sources":["detach/OldAndroidDetach.js"],"names":["async","filename","regex","replace","let","file","await","fs","readFile","fileString","toString","writeFile","regexFileAsync","directory","originalPkg","destPkg","originalSplitPackage","split","originalDeepDirectory","i","length","path","join","tmpDirectory","mkdirpSync","Utils","ncpAsync","rimraf","sync","newSplitPackage","newDeepDirectory","renamePackageAsync","projectRoot","expoDirectory","sdkVersion","experienceUrl","manifest","expoViewUrl","tmpExpoDirectory","process","env","EXPO_VIEW_DIR","logger","info","Api","downloadAsync","extract","androidProjectDirectory","appBuildGradle","androidManifest","detach","scheme","mainActivity","packageName","android","package","ANDROID_TEMPLATE_PKG","packageNameMatches","glob","oldPkgRegex","RegExp","appName","name","resolve","ANDROID_TEMPLATE_NAME","icon","iconMatches","unlink","saveImageToPathAsync","rimrafDontThrow","detachAndroidAsync"],"mappings":"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","file":"../../detach/OldAndroidDetach.js","sourcesContent":["// Copyright 2015-present 650 Industries. All rights reserved.\n/**\n * @flow\n */\n\n'use strict';\n\n// Set EXPO_VIEW_DIR to universe/exponent to test locally\n\nimport fs from 'fs-extra';\nimport path from 'path';\nimport rimraf from 'rimraf';\nimport glob from 'glob-promise';\n\nimport { saveImageToPathAsync, rimrafDontThrow } from './ExponentTools';\nimport logger from './Logger';\n\nimport Api from '../Api';\nimport * as Utils from '../Utils';\n\nconst ANDROID_TEMPLATE_PKG = 'detach.app.template.pkg.name';\nconst ANDROID_TEMPLATE_NAME = 'DetachAppTemplate';\n\nasync function regexFileAsync(filename, regex, replace) {\n  let file = await fs.readFile(filename);\n  let fileString = file.toString();\n  await fs.writeFile(filename, fileString.replace(regex, replace));\n}\n\nasync function renamePackageAsync(directory, originalPkg, destPkg) {\n  let originalSplitPackage = originalPkg.split('.');\n  let originalDeepDirectory = directory;\n  for (let i = 0; i < originalSplitPackage.length; i++) {\n    originalDeepDirectory = path.join(originalDeepDirectory, originalSplitPackage[i]);\n  }\n\n  // copy files into temp directory\n  let tmpDirectory = path.join(directory, 'tmp-exponent-directory');\n  fs.mkdirpSync(tmpDirectory);\n  await Utils.ncpAsync(originalDeepDirectory, tmpDirectory);\n\n  // delete old package\n  rimraf.sync(path.join(directory, originalSplitPackage[0]));\n\n  // make new package\n  let newSplitPackage = destPkg.split('.');\n  let newDeepDirectory = directory;\n  for (let i = 0; i < newSplitPackage.length; i++) {\n    newDeepDirectory = path.join(newDeepDirectory, newSplitPackage[i]);\n    fs.mkdirpSync(newDeepDirectory);\n  }\n\n  // copy from temp to new package\n  await Utils.ncpAsync(tmpDirectory, newDeepDirectory);\n\n  // delete temp\n  rimraf.sync(tmpDirectory);\n}\n\nexport async function detachAndroidAsync(\n  projectRoot,\n  expoDirectory,\n  sdkVersion,\n  experienceUrl,\n  manifest,\n  expoViewUrl: string\n) {\n  let tmpExpoDirectory;\n  if (process.env.EXPO_VIEW_DIR) {\n    // Only for testing\n    tmpExpoDirectory = process.env.EXPO_VIEW_DIR;\n  } else {\n    tmpExpoDirectory = path.join(projectRoot, 'temp-android-directory');\n    fs.mkdirpSync(tmpExpoDirectory);\n    logger.info('Downloading Android code...');\n    await Api.downloadAsync(expoViewUrl, tmpExpoDirectory, { extract: true });\n  }\n\n  let androidProjectDirectory = path.join(projectRoot, 'android');\n\n  logger.info('Moving Android project files...');\n\n  await Utils.ncpAsync(\n    path.join(tmpExpoDirectory, 'android', 'maven'),\n    path.join(expoDirectory, 'maven')\n  );\n  await Utils.ncpAsync(\n    path.join(tmpExpoDirectory, 'android', 'detach-scripts'),\n    path.join(expoDirectory, 'detach-scripts')\n  );\n  await Utils.ncpAsync(\n    path.join(tmpExpoDirectory, 'exponent-view-template', 'android'),\n    androidProjectDirectory\n  );\n  if (process.env.EXPO_VIEW_DIR) {\n    rimraf.sync(path.join(androidProjectDirectory, 'build'));\n    rimraf.sync(path.join(androidProjectDirectory, 'app', 'build'));\n  }\n\n  // Fix up app/build.gradle\n  logger.info('Configuring Android project...');\n  let appBuildGradle = path.join(androidProjectDirectory, 'app', 'build.gradle');\n  await regexFileAsync(appBuildGradle, /\\/\\* UNCOMMENT WHEN DISTRIBUTING/g, '');\n  await regexFileAsync(appBuildGradle, /END UNCOMMENT WHEN DISTRIBUTING \\*\\//g, '');\n  await regexFileAsync(appBuildGradle, `compile project(':expoview')`, '');\n\n  // Fix AndroidManifest\n  let androidManifest = path.join(\n    androidProjectDirectory,\n    'app',\n    'src',\n    'main',\n    'AndroidManifest.xml'\n  );\n  await regexFileAsync(androidManifest, 'PLACEHOLDER_DETACH_SCHEME', manifest.detach.scheme);\n\n  // Fix MainActivity\n  let mainActivity = path.join(\n    androidProjectDirectory,\n    'app',\n    'src',\n    'main',\n    'java',\n    'detach',\n    'app',\n    'template',\n    'pkg',\n    'name',\n    'MainActivity.java'\n  );\n  await regexFileAsync(mainActivity, 'TEMPLATE_INITIAL_URL', experienceUrl);\n\n  // Fix package name\n  let packageName = manifest.android.package;\n  await renamePackageAsync(\n    path.join(androidProjectDirectory, 'app', 'src', 'main', 'java'),\n    ANDROID_TEMPLATE_PKG,\n    packageName\n  );\n  await renamePackageAsync(\n    path.join(androidProjectDirectory, 'app', 'src', 'test', 'java'),\n    ANDROID_TEMPLATE_PKG,\n    packageName\n  );\n  await renamePackageAsync(\n    path.join(androidProjectDirectory, 'app', 'src', 'androidTest', 'java'),\n    ANDROID_TEMPLATE_PKG,\n    packageName\n  );\n\n  let packageNameMatches = await glob(androidProjectDirectory + '/**/*.@(java|gradle|xml)');\n  if (packageNameMatches) {\n    let oldPkgRegex = new RegExp(`${ANDROID_TEMPLATE_PKG.replace(/\\./g, '\\\\.')}`, 'g');\n    for (let i = 0; i < packageNameMatches.length; i++) {\n      await regexFileAsync(packageNameMatches[i], oldPkgRegex, packageName);\n    }\n  }\n\n  // Fix app name\n  logger.info('Naming Android project...');\n  let appName = manifest.name;\n  await regexFileAsync(\n    path.resolve(androidProjectDirectory, 'app', 'src', 'main', 'res', 'values', 'strings.xml'),\n    ANDROID_TEMPLATE_NAME,\n    appName\n  );\n\n  // Fix image\n  let icon = manifest.android && manifest.android.icon ? manifest.android.icon : manifest.icon;\n  if (icon) {\n    let iconMatches = await glob(\n      path.join(androidProjectDirectory, 'app', 'src', 'main', 'res') + '/**/ic_launcher.png'\n    );\n    if (iconMatches) {\n      for (let i = 0; i < iconMatches.length; i++) {\n        await fs.unlink(iconMatches[i]);\n        // TODO: make more efficient\n        await saveImageToPathAsync(projectRoot, icon, iconMatches[i]);\n      }\n    }\n  }\n\n  // Clean up\n  logger.info('Cleaning up Android...');\n  if (!process.env.EXPO_VIEW_DIR) {\n    rimrafDontThrow(tmpExpoDirectory);\n  }\n  logger.info('Android detach is complete!\\n');\n}\n"],"sourceRoot":"/xdl@52.0.12/src"}