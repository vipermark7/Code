{"version":3,"sources":["__integration_tests__/UserSessions-test.js"],"names":["XDL_TEST_CLIENT_ID","_makeShortId","salt","minLength","hashIds","encode","Date","now","describe","let","userForTest","userForTestPassword","beforeAll","async","process","env","__UNSAFE_EXPO_HOME_DIRECTORY","path","join","uuid","v1","UserManager","_newTestUserManager","username","password","newUser","await","registerAsync","email","givenName","familyName","logoutAsync","afterAll","fs","removeSync","api","ApiV2Client","clientForUser","postAsync","e","console","error","it","loginAsync","testSession","user","getCurrentUserAsync","expect","not","toBeNull","toBe","sessionSecret","undefined","UserSettings","getAsync","formData","append","response","Api","callMethodAsync","status","initialize"],"mappings":"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","file":"../../__integration_tests__/UserSessions-test.js","sourcesContent":["/**\n * @flow\n */\n\nimport fs from 'fs-extra';\nimport path from 'path';\nimport HashIds from 'hashids';\nimport uuid from 'uuid';\nimport ApiV2Client from '../ApiV2';\nimport Api from '../Api';\nimport { UserManagerInstance } from '../User';\nimport UserSettings from '../UserSettings';\nimport FormData from '../tools/FormData';\n\nconst XDL_TEST_CLIENT_ID = 'o0YygTgKhOTdoWj10Yl9nY2P0SMTw38Y';\n\nconst _makeShortId = (salt: string, minLength: number = 10): string => {\n  const hashIds = new HashIds(salt, minLength);\n  return hashIds.encode(Date.now());\n};\n\ndescribe('User Sessions', () => {\n  let userForTest;\n  let userForTestPassword;\n\n  beforeAll(async () => {\n    process.env.__UNSAFE_EXPO_HOME_DIRECTORY = path.join(\n      '/',\n      'tmp',\n      `.expo-${_makeShortId(uuid.v1())}`\n    );\n\n    const UserManager = _newTestUserManager();\n\n    const username = `xdl-test-${_makeShortId(uuid.v1())}`;\n    const password = uuid.v1();\n\n    // Register a new user that we can use for this test run\n    const newUser = await UserManager.registerAsync({\n      username,\n      password,\n      email: `adam+${username}@getexponent.com`,\n      givenName: 'XDL',\n      familyName: 'Test User',\n    });\n\n    userForTest = newUser;\n    userForTestPassword = password; // save password so we can use it to login\n\n    await UserManager.logoutAsync(); // log us out so we're in a clean state for these tests\n  });\n\n  afterAll(async () => {\n    if (process.env.__UNSAFE_EXPO_HOME_DIRECTORY) {\n      fs.removeSync(process.env.__UNSAFE_EXPO_HOME_DIRECTORY);\n    }\n\n    const api = ApiV2Client.clientForUser(userForTest);\n    try {\n      await api.postAsync('auth/deleteUser');\n    } catch (e) {\n      console.error(e);\n    }\n  });\n\n  it('should login successfully, and persist a session token upon login', async () => {\n    const UserManager = _newTestUserManager();\n    await UserManager.loginAsync('user-pass', {\n      username: userForTest.username,\n      password: userForTestPassword,\n      testSession: true,\n    });\n\n    const user = await UserManager.getCurrentUserAsync();\n    expect(user).not.toBeNull();\n    if (!user) {\n      return;\n    }\n    // expect session to be cached\n    expect(user.username).toBe(userForTest.username);\n    expect(user.sessionSecret).not.toBe(undefined);\n\n    // expect session to be in state.json\n    let { sessionSecret } = await UserSettings.getAsync('auth', {});\n    expect(sessionSecret).not.toBe(undefined);\n  });\n  it('should remove a session token upon logout', async () => {\n    const UserManager = _newTestUserManager();\n    await UserManager.loginAsync('user-pass', {\n      username: userForTest.username,\n      password: userForTestPassword,\n    });\n\n    await UserManager.logoutAsync();\n\n    // expect session to be removed\n    let { sessionSecret } = await UserSettings.getAsync('auth', {});\n    expect(sessionSecret).toBe(undefined);\n  });\n\n  it('should use the token in apiv1', async () => {\n    const UserManager = _newTestUserManager();\n    await UserManager.loginAsync('user-pass', {\n      username: userForTest.username,\n      password: userForTestPassword,\n    });\n\n    let formData = new FormData();\n    formData.append('queryType', 'history');\n    formData.append('slug', 'foobar');\n\n    let response = await Api.callMethodAsync(\n      'publishInfo',\n      [],\n      'post',\n      null,\n      {\n        formData,\n      },\n      true\n    );\n    expect(response.status).toBe(200);\n  });\n\n  it('should use the token in apiv2', async () => {\n    const UserManager = _newTestUserManager();\n    await UserManager.loginAsync('user-pass', {\n      username: userForTest.username,\n      password: userForTestPassword,\n    });\n\n    const user = await UserManager.getCurrentUserAsync();\n    const api = ApiV2Client.clientForUser(user);\n    const response = await api.getAsync('auth/intercomUserHash', {}, {}, true);\n    expect(response.status).toBe(200);\n  });\n});\n\nfunction _newTestUserManager() {\n  const UserManager = new UserManagerInstance();\n  UserManager.initialize();\n  return UserManager;\n}\n"],"sourceRoot":"/xdl@52.0.12/src"}