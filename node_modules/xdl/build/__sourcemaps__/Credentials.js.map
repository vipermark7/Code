{"version":3,"sources":["Credentials.js"],"names":["async","metadata","creds","await","fetchCredentials","credentialsExistForPlatformAsync","getEncryptedCredentialsForPlatformAsync","getCredentialsForPlatform","username","experienceName","bundleIdentifier","platform","decrypt","err","credentials","Api","callMethodAsync","Error","newCredentials","updateCredentialsForPlatform","removeCredentialsForPlatform","appleTeamId","certs","map","usedByApps","certP12","certPassword","rest","serialNumber","undefined","IosCodeSigning","findP12CertSerialNumber","split","getExistingDistCerts","outputPath","log","logger","info","bind","logSecrets","credentialMetadata","keystore","keystorePassword","keystoreAlias","keyAlias","keyPassword","storeBuf","Buffer","from","fs","writeFileSync","chalk","bold","backupExistingAndroidCredentials"],"mappings":"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","file":"../Credentials.js","sourcesContent":["/**\n * @flow\n */\n\nimport chalk from 'chalk';\nimport fs from 'fs-extra';\n\nimport Api from './Api';\nimport logger from './Logger';\nimport * as IosCodeSigning from './detach/IosCodeSigning';\n\nexport type AndroidCredentials = {\n  keystore: string,\n  keystoreAlias: string,\n  keystorePassword: string,\n  keyPassword: string,\n};\n\nexport type IOSCredentials = {\n  appleId?: string,\n  password?: string,\n  teamId?: string,\n  certP12?: string,\n  certPassword?: string,\n  pushP12?: string,\n  pushPassword?: string,\n  provisioningProfile?: string,\n  enterpriseAccount?: string,\n  // These are ids on the spaceship object (implementation detail), Spaceship::Portal::Certificate\n  certId?: string,\n  pushId?: string,\n  provisioningProfileId?: string,\n};\n\nexport type Credentials = IOSCredentials | AndroidCredentials;\n\nexport type CredentialMetadata = {\n  username: string,\n  experienceName: string,\n  bundleIdentifier: string,\n  platform: string,\n};\n\nexport type CertObject = {\n  userCredentialId: number,\n  certId: string,\n};\n\nexport type CertsList = Array<CertObject>;\n\nexport async function credentialsExistForPlatformAsync(\n  metadata: CredentialMetadata\n): Promise<?Credentials> {\n  const creds = await fetchCredentials(metadata, false);\n  return !!creds; // !! performed on awaited creds\n}\n\nexport async function getEncryptedCredentialsForPlatformAsync(\n  metadata: CredentialMetadata\n): Promise<?Credentials> {\n  return fetchCredentials(metadata, false);\n}\n\nexport async function getCredentialsForPlatform(\n  metadata: CredentialMetadata\n): Promise<?Credentials> {\n  return fetchCredentials(metadata, true);\n}\n\nasync function fetchCredentials(\n  { username, experienceName, bundleIdentifier, platform }: CredentialMetadata,\n  decrypt: boolean\n): Promise<?Credentials> {\n  // this doesn't hit our mac rpc channel, so it needs significantly less debugging\n  const { err, credentials } = await Api.callMethodAsync('getCredentials', [], 'post', {\n    username,\n    experienceName,\n    bundleIdentifier,\n    platform,\n    decrypt,\n  });\n\n  if (err) {\n    throw new Error('Error fetching credentials.');\n  }\n\n  return credentials;\n}\n\nexport async function updateCredentialsForPlatform(\n  platform: string,\n  newCredentials: Credentials,\n  metadata: CredentialMetadata\n): Promise<void> {\n  // this doesn't go through the mac rpc, no request id needed\n  const { err, credentials } = await Api.callMethodAsync('updateCredentials', [], 'post', {\n    credentials: newCredentials,\n    platform,\n    ...metadata,\n  });\n\n  if (err || !credentials) {\n    throw new Error('Error updating credentials.');\n  }\n}\n\nexport async function removeCredentialsForPlatform(\n  platform: string,\n  metadata: CredentialMetadata\n): Promise<void> {\n  // doesn't go through mac rpc, no request id needed\n  const { err } = await Api.callMethodAsync('deleteCredentials', [], 'post', {\n    platform,\n    ...metadata,\n  });\n\n  if (err) {\n    throw new Error('Error deleting credentials.');\n  }\n}\n\nexport async function getExistingDistCerts(\n  username: string,\n  appleTeamId: string\n): Promise<?CertsList> {\n  const { err, certs } = await Api.callMethodAsync('getExistingDistCerts', [], 'post', {\n    username,\n    appleTeamId,\n  });\n\n  if (err) {\n    throw new Error('Error getting existing distribution certificates.');\n  }\n\n  return certs.map(({ usedByApps, certP12, certPassword, ...rest }) => {\n    const serialNumber =\n      certP12 !== undefined && certPassword !== undefined\n        ? IosCodeSigning.findP12CertSerialNumber(certP12, certPassword)\n        : null;\n    return {\n      usedByApps: usedByApps && usedByApps.split(';'),\n      serialNumber,\n      ...rest,\n    };\n  });\n}\n\nexport async function backupExistingAndroidCredentials({\n  outputPath,\n  username,\n  experienceName,\n  log = logger.info.bind(logger),\n  logSecrets = true,\n}) {\n  const credentialMetadata = { username, experienceName, platform: 'android' };\n\n  log(`Retreiving Android keystore for ${experienceName}`);\n\n  const credentials = await getCredentialsForPlatform(credentialMetadata);\n  if (!credentials) {\n    throw new Error('Unable to fetch credentials for this project. Are you sure they exist?');\n  }\n  const { keystore, keystorePassword, keystoreAlias: keyAlias, keyPassword } = credentials;\n\n  const storeBuf = Buffer.from(keystore, 'base64');\n  log(`Writing keystore to ${outputPath}...`);\n  fs.writeFileSync(outputPath, storeBuf);\n  if (logSecrets) {\n    log('Done writing keystore to disk.');\n    log(`Save these important values as well:\n\n  Keystore password: ${chalk.bold(keystorePassword)}\n  Key alias:         ${chalk.bold(keyAlias)}\n  Key password:      ${chalk.bold(keyPassword)}\n  `);\n    log('All done!');\n  }\n  return {\n    keystorePassword,\n    keyAlias,\n    keyPassword,\n  };\n}\n"],"sourceRoot":"/xdl@52.0.12/src"}