{"version":3,"sources":["User.js"],"names":["ANONYMOUS_USERNAME","UserManagerInstance","loginServer","refreshSessionThreshold","_currentUser","_getSessionLock","static","getGlobalInstance","__globalInstance","initialize","loginAsync","async","loginType","loginArgs","Error","apiAnonymous","ApiV2Client","clientForUser","loginResp","await","postAsync","username","password","error","ErrorCode","INVALID_USERNAME_PASSWORD","_getProfileAsync","currentConnection","sessionSecret","registerAsync","userData","user","getCurrentUserAsync","logoutAsync","let","registeredUser","createOrUpdateUserAsync","connection","email","givenName","familyName","e","console","REGISTRATION_ERROR","message","ensureLoggedInAsync","Config","offline","_interactiveAuthenticationCallbackAsync","NOT_LOGGED_IN","setInteractiveAuthenticationCallback","callback","_readUserData","auth","UserSettings","getAsync","isEmpty","acquire","Logger","global","warn","release","getCurrentUsernameAsync","data","getSessionAsync","currentUser","api","updatedUser","_prepareAuth0Profile","_parseAuth0Profile","kind","err","code","details","Analytics","logEvent","deleteKeyAsync","forgotPasswordAsync","usernameOrEmail","mergeAsync","userId","setUserProperties","rawProfile","Object","keys","reduce","p","key","_","camelCase","niceProfile","snakeCase"],"mappings":"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","file":"../User.js","sourcesContent":["/**\n * @flow\n */\n\nimport _ from 'lodash';\nimport isEmpty from 'lodash/isEmpty';\nimport freeportAsync from 'freeport-async';\nimport http from 'http';\nimport qs from 'querystring';\n\nimport ApiV2Client, { ApiV2Error } from './ApiV2';\nimport * as Analytics from './Analytics';\nimport Config from './Config';\nimport ErrorCode from './ErrorCode';\nimport XDLError from './XDLError';\nimport Logger from './Logger';\n\nimport UserSettings from './UserSettings';\n\nimport { Semaphore } from './Utils';\nimport { isNode } from './tools/EnvironmentHelper';\n\nexport type User = {\n  kind: 'user',\n  // required\n  name: string,\n  username: string,\n  nickname: string,\n  userId: string,\n  picture: string,\n  // optional\n  email?: string,\n  emailVerified?: boolean,\n  givenName?: string,\n  familyName?: string,\n  loginsCount?: number,\n  intercomUserHash: string,\n  userMetadata: {\n    onboarded: boolean,\n    legacy?: boolean,\n  },\n  identities: Array<{\n    connection: ConnectionType,\n    isSocial: boolean,\n    provider: string,\n    userId: string,\n  }>,\n  currentConnection: ConnectionType,\n  sessionSecret: string,\n};\n\nexport type LegacyUser = {\n  kind: 'legacyUser',\n  username: string,\n  userMetadata: {\n    legacy: boolean,\n    needsPasswordMigration: boolean,\n  },\n};\n\nexport type UserOrLegacyUser = User | LegacyUser;\n\ntype ConnectionType = 'Username-Password-Authentication' | 'facebook' | 'google-oauth2' | 'github';\n\ntype LoginOptions = {\n  connection: ConnectionType,\n  device: string,\n  responseType: string,\n  responseMode: string,\n  username?: string,\n  password?: string,\n};\n\nexport type RegistrationData = {\n  username: string,\n  password: string,\n  email?: string,\n  givenName?: string,\n  familyName?: string,\n};\n\nexport type LoginType = 'user-pass' | 'facebook' | 'google' | 'github';\n\nexport const ANONYMOUS_USERNAME = 'anonymous';\n\nexport class UserManagerInstance {\n  loginServer = null;\n  refreshSessionThreshold = 60 * 60; // 1 hour\n  _currentUser: ?User = null;\n  _getSessionLock = new Semaphore();\n\n  static getGlobalInstance() {\n    if (!__globalInstance) {\n      __globalInstance = new UserManagerInstance();\n    }\n    return __globalInstance;\n  }\n\n  initialize() {\n    this.loginServer = null;\n    this._currentUser = null;\n    this._getSessionLock = new Semaphore();\n  }\n\n  /**\n   * Logs in a user for a given login type.\n   *\n   * Valid login types are:\n   *  - \"user-pass\": Username and password authentication\n   *\n   * If the login type is \"user-pass\", we directly make the request to www\n   * to login a user.\n   */\n  async loginAsync(\n    loginType: LoginType,\n    loginArgs?: { username: string, password: string }\n  ): Promise<User> {\n    if (loginType === 'user-pass') {\n      if (!loginArgs) {\n        throw new Error(`The 'user-pass' login type requires a username and password.`);\n      }\n      const apiAnonymous = ApiV2Client.clientForUser();\n      const loginResp = await apiAnonymous.postAsync('auth/loginAsync', {\n        username: loginArgs.username,\n        password: loginArgs.password,\n      });\n      if (loginResp.error) {\n        throw new XDLError(ErrorCode.INVALID_USERNAME_PASSWORD, loginResp['error_description']);\n      }\n      return this._getProfileAsync({\n        currentConnection: 'Username-Password-Authentication',\n        sessionSecret: loginResp.sessionSecret,\n      });\n    } else {\n      throw new Error(`Invalid login type provided. Must be 'user-pass'.`);\n    }\n  }\n\n  async registerAsync(userData: RegistrationData, user: ?UserOrLegacyUser): Promise<User> {\n    if (!user) {\n      user = await this.getCurrentUserAsync();\n    }\n\n    if (user) {\n      await this.logoutAsync();\n      user = null;\n    }\n\n    try {\n      // Create or update the profile\n      let registeredUser = await this.createOrUpdateUserAsync({\n        connection: 'Username-Password-Authentication', // Always create/update username password\n        email: userData.email,\n        givenName: userData.givenName,\n        familyName: userData.familyName,\n        username: userData.username,\n        password: userData.password,\n      });\n\n      registeredUser = await this.loginAsync('user-pass', {\n        username: userData.username,\n        password: userData.password,\n      });\n\n      return registeredUser;\n    } catch (e) {\n      console.error(e);\n      throw new XDLError(ErrorCode.REGISTRATION_ERROR, 'Error registering user: ' + e.message);\n    }\n  }\n\n  /**\n   * Ensure user is logged in and has a valid token.\n   *\n   * If there are any issues with the login, this method throws.\n   */\n  async ensureLoggedInAsync(): Promise<?User> {\n    if (Config.offline) {\n      return null;\n    }\n\n    let user = await this.getCurrentUserAsync();\n    if (!user && this._interactiveAuthenticationCallbackAsync) {\n      user = await this._interactiveAuthenticationCallbackAsync();\n    }\n    if (!user) {\n      throw new XDLError(ErrorCode.NOT_LOGGED_IN, 'Not logged in');\n    }\n    return user;\n  }\n\n  setInteractiveAuthenticationCallback(callback) {\n    this._interactiveAuthenticationCallbackAsync = callback;\n  }\n\n  async _readUserData() {\n    let auth = await UserSettings.getAsync('auth', {});\n    if (isEmpty(auth)) {\n      // XXX(ville):\n      // We sometimes read an empty string from ~/.expo/state.json,\n      // even though it has valid credentials in it.\n      // We don't know why.\n      // An empty string can't be parsed as JSON, so an empty default object is returned.\n      // In this case, retrying usually helps.\n      auth = await UserSettings.getAsync('auth', {});\n    }\n    return auth;\n  }\n\n  /**\n   * Get the current user based on the available token.\n   * If there is no current token, returns null.\n   */\n  async getCurrentUserAsync(): Promise<?User> {\n    await this._getSessionLock.acquire();\n\n    try {\n      // If user is cached and there is a sessionSecret, return the user\n      if (this._currentUser && this._currentUser.sessionSecret) {\n        return this._currentUser;\n      }\n\n      if (Config.offline) {\n        return null;\n      }\n\n      let { currentConnection, sessionSecret } = await this._readUserData();\n\n      // No session, no current user. Need to login\n      if (!sessionSecret) {\n        return null;\n      }\n\n      try {\n        return await this._getProfileAsync({\n          currentConnection,\n          sessionSecret,\n        });\n      } catch (e) {\n        Logger.global.warn('Fetching the user profile failed');\n        Logger.global.warn(e);\n        return null;\n      }\n    } finally {\n      this._getSessionLock.release();\n    }\n  }\n\n  async getCurrentUsernameAsync(): Promise<?string> {\n    let data = await this._readUserData();\n    if (!data.username) {\n      return null;\n    }\n    return data.username;\n  }\n\n  async getSessionAsync(): Promise<?string> {\n    let data = await this._readUserData();\n    if (!data.sessionSecret) {\n      return null;\n    }\n    return { sessionSecret: data.sessionSecret };\n  }\n\n  /**\n   * Create or update a user.\n   */\n  async createOrUpdateUserAsync(userData: Object): Promise<User> {\n    let currentUser = this._currentUser;\n    if (!currentUser) {\n      // attempt to get the current user\n      currentUser = await this.getCurrentUserAsync();\n    }\n\n    try {\n      const api = ApiV2Client.clientForUser(currentUser);\n\n      const { user: updatedUser } = await api.postAsync('auth/createOrUpdateUser', {\n        userData: _prepareAuth0Profile(userData),\n      });\n\n      this._currentUser = {\n        ...(this._currentUser || {}),\n        ..._parseAuth0Profile(updatedUser),\n      };\n      return {\n        kind: 'user',\n        ...this._currentUser,\n      };\n    } catch (e) {\n      const err: ApiV2Error = (e: any);\n      if (err.code === 'AUTHENTICATION_ERROR') {\n        throw new Error(err.details.message);\n      }\n      throw e;\n    }\n  }\n\n  /**\n   * Logout\n   */\n  async logoutAsync(): Promise<void> {\n    if (this._currentUser) {\n      Analytics.logEvent('Logout', {\n        username: this._currentUser.username,\n      });\n    }\n\n    this._currentUser = null;\n\n    // Delete saved auth info\n    await UserSettings.deleteKeyAsync('auth');\n  }\n\n  /**\n   * Forgot Password\n   */\n  async forgotPasswordAsync(usernameOrEmail: string): Promise<void> {\n    const apiAnonymous = ApiV2Client.clientForUser();\n    return apiAnonymous.postAsync('auth/forgotPasswordAsync', {\n      usernameOrEmail,\n    });\n  }\n\n  /**\n   * Get profile given token data. Errors if token is not valid or if no\n   * user profile is returned.\n   *\n   * This method is called by all public authentication methods of `UserManager`\n   * except `logoutAsync`. Therefore, we use this method as a way to:\n   *  - update the UserSettings store with the current token and user id\n   *  - update UserManager._currentUser\n   *  - Fire login analytics events\n   *\n   * Also updates UserManager._currentUser.\n   *\n   * @private\n   */\n  async _getProfileAsync({\n    currentConnection,\n    sessionSecret,\n  }: {\n    currentConnection: ConnectionType,\n    sessionSecret: string,\n  }): Promise<User> {\n    let user;\n    let api = ApiV2Client.clientForUser({\n      sessionSecret,\n    });\n\n    user = await api.postAsync('auth/userProfileAsync');\n\n    if (!user) {\n      throw new Error('Unable to fetch user.');\n    }\n\n    user = {\n      ..._parseAuth0Profile(user),\n      kind: 'user',\n      currentConnection,\n      sessionSecret,\n    };\n\n    await UserSettings.mergeAsync({\n      auth: {\n        userId: user.userId,\n        username: user.username,\n        currentConnection,\n        sessionSecret,\n      },\n    });\n\n    // If no currentUser, or currentUser.id differs from profiles\n    // user id, that means we have a new login\n    if (\n      (!this._currentUser || this._currentUser.userId !== user.userId) &&\n      user.username &&\n      user.username !== ''\n    ) {\n      Analytics.logEvent('Login', {\n        userId: user.userId,\n        currentConnection: user.currentConnection,\n        username: user.username,\n      });\n\n      Analytics.setUserProperties(user.username, {\n        userId: user.userId,\n        currentConnection: user.currentConnection,\n        username: user.username,\n      });\n    }\n\n    this._currentUser = user;\n\n    return user;\n  }\n}\n\nlet __globalInstance;\nexport default UserManagerInstance.getGlobalInstance();\n\n/** Private Methods **/\nfunction _parseAuth0Profile(rawProfile: any): User {\n  if (!rawProfile || typeof rawProfile !== 'object') {\n    return rawProfile;\n  }\n  return ((Object.keys(rawProfile).reduce((p, key) => {\n    p[_.camelCase(key)] = _parseAuth0Profile(rawProfile[key]);\n    return p;\n  }, {}): any): User);\n}\n\nfunction _prepareAuth0Profile(niceProfile: any): Object {\n  if (typeof niceProfile !== 'object') {\n    return niceProfile;\n  }\n\n  return ((Object.keys(niceProfile).reduce((p, key) => {\n    p[_.snakeCase(key)] = _prepareAuth0Profile(niceProfile[key]);\n    return p;\n  }, {}): any): User);\n}\n"],"sourceRoot":"/xdl@52.0.12/src"}