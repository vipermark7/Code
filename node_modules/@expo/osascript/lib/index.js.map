{"version":3,"sources":["../src/index.js"],"names":["script","opts","osascriptArgs","Object","assign","stdio","osascriptExecAsync","osascriptSpawnAsync","appName","JSON","stringify","zeroMeansNo","trim","isAppRunningAsync","safeIdOfAppAsync","dir","activate","openFinderToFolderAsync","pth","cmd","path","resolve","openInAppAsync","listOfAppNames","runningAwaitables","appIdAwaitables","push","Promise","all","running","appIds","i","length","chooseAppAsync","preferredEditor","appId","console","warn","editorsToTry","chooseEditorAppAsync","chooseTerminalAppAsync","log","openInEditorAsync","util","inspect","openItermToSpecificFolderAsync","inTab","openTerminalToSpecificFolderAsync","program","openFolderInTerminalAppAsync","isArray","args","line","module","exports","execAsync","spawnAsync"],"mappings":"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","file":"index.js","sourcesContent":["/**\n * Utilities for working with `osascript` which runs AppleScript on Macs\n */\n'use strict';\n\nimport execAsync from 'exec-async';\nimport path from 'path';\nimport spawnAsync from '@expo/spawn-async';\nimport util from 'util';\n\nfunction osascriptArgs(script) {\n  if (!util.isArray(script)) {\n    script = [script];\n  }\n\n  let args = [];\n  for (let line of script) {\n    args.push('-e');\n    args.push(line);\n  }\n\n  return args;\n}\n\nasync function osascriptExecAsync(script, opts) {\n  return await execAsync(\n    'osascript',\n    osascriptArgs(script),\n    Object.assign({ stdio: 'inherit' }, opts)\n  );\n}\n\nasync function osascriptSpawnAsync(script, opts) {\n  return await spawnAsync('osascript', osascriptArgs(script), opts);\n}\n\nasync function isAppRunningAsync(appName) {\n  let zeroMeansNo = (await osascriptExecAsync(\n    'tell app \"System Events\" to count processes whose name is ' + JSON.stringify(appName)\n  )).trim();\n  return zeroMeansNo !== '0';\n}\n\nasync function safeIdOfAppAsync(appName) {\n  try {\n    return (await osascriptExecAsync('id of app ' + JSON.stringify(appName))).trim();\n  } catch (e) {\n    return null;\n  }\n}\n\nasync function openFinderToFolderAsync(dir, activate = true) {\n  await osascriptSpawnAsync([\n    'tell application \"Finder\"',\n    'open POSIX file ' + JSON.stringify(dir),\n    (activate && 'activate') || '',\n    'end tell',\n  ]);\n}\n\nasync function openInAppAsync(appName, pth) {\n  let cmd = 'tell app ' + JSON.stringify(appName) + ' to open ' + JSON.stringify(path.resolve(pth));\n  // console.log(\"cmd=\", cmd);\n  return await osascriptSpawnAsync(cmd);\n}\n\nasync function chooseAppAsync(listOfAppNames) {\n  let runningAwaitables = [];\n  let appIdAwaitables = [];\n  for (let appName of listOfAppNames) {\n    runningAwaitables.push(isAppRunningAsync(appName));\n    appIdAwaitables.push(safeIdOfAppAsync(appName));\n  }\n  let running = await Promise.all(runningAwaitables);\n  let appIds = await Promise.all(appIdAwaitables);\n\n  let i;\n  for (i = 0; i < listOfAppNames.length; i++) {\n    if (running[i]) {\n      return listOfAppNames[i];\n    }\n  }\n\n  for (i = 0; i < listOfAppNames.length; i++) {\n    if (!!appIds[i]) {\n      return listOfAppNames[i];\n    }\n  }\n\n  return null;\n}\n\nasync function chooseEditorAppAsync(preferredEditor) {\n  if (preferredEditor) {\n    // Make sure this editor exists\n    let appId = await safeIdOfAppAsync(preferredEditor);\n    if (appId) {\n      return preferredEditor;\n    } else {\n      console.warn(`Your preferred editor (${preferredEditor}) isn't installed on this computer.`);\n    }\n  }\n\n  let editorsToTry = [\n    'Visual Studio Code',\n    'Atom',\n    'Sublime Text',\n    'TextMate',\n    'TextWrangler',\n    'Visual Studio Code',\n    'Brackets',\n    'SubEthaEdit',\n    'BBEdit',\n    'Textastic',\n    'UltraEdit',\n    'MacVim',\n    'CodeRunner 2',\n    'CodeRunner',\n    'TextEdit',\n  ];\n\n  return await chooseAppAsync(editorsToTry);\n}\n\nasync function chooseTerminalAppAsync() {\n  return await chooseAppAsync([\n    'iTerm 3',\n    'iTerm 2',\n    'iTerm',\n    'HyperTerm',\n    // 'Cathode',\n    // 'Terminator',\n    // 'MacTerm',\n    'Terminal',\n  ]);\n}\n\nasync function openInEditorAsync(pth, preferredEditor) {\n  let appName = await chooseEditorAppAsync(preferredEditor);\n  console.log('Will open in ' + appName + ' -- ' + pth);\n  return await openInAppAsync(appName, pth);\n}\n\nasync function openItermToSpecificFolderAsync(dir) {\n  return await osascriptSpawnAsync([\n    'tell application \"iTerm\"',\n    'make new terminal',\n    'tell the first terminal',\n    'activate current session',\n    'launch session \"Default Session\"',\n    'tell the last session',\n    'write text \"cd ' + util.inspect(dir) + ' && clear\"',\n    // 'write text \"clear\"',\n    'end tell',\n    'end tell',\n    'end tell',\n  ]);\n  // exec(\"osascript -e 'tell application \\\"iTerm\\\"' -e 'make new terminal' -e 'tell the first terminal' -e 'activate current session' -e 'launch session \\\"Default Session\\\"' -e 'tell the last session' -e 'write text \\\"cd #{value}\\\"' -e 'write text \\\"clear\\\"' -e 'end tell' -e 'end tell' -e 'end tell' > /dev/null 2>&1\")\n}\n\nasync function openTerminalToSpecificFolderAsync(dir, inTab = false) {\n  if (inTab) {\n    return await osascriptSpawnAsync([\n      'tell application \"terminal\"',\n      'tell application \"System Events\" to tell process \"terminal\" to keystroke \"t\" using command down',\n      'do script with command \"cd ' +\n        util.inspect(dir) +\n        ' && clear\" in selected tab of the front window',\n      'end tell',\n    ]);\n  } else {\n    return await osascriptSpawnAsync([\n      'tell application \"terminal\"',\n      'do script \"cd ' + util.inspect(dir) + ' && clear\"',\n      'end tell',\n      'tell application \"terminal\" to activate',\n    ]);\n  }\n}\n\nasync function openFolderInTerminalAppAsync(dir, inTab = false) {\n  let program = await chooseTerminalAppAsync();\n\n  switch (program) {\n    case 'iTerm':\n      return await openItermToSpecificFolderAsync(dir, inTab);\n      break;\n\n    case 'Terminal':\n    default:\n      return await openTerminalToSpecificFolderAsync(dir, inTab);\n      break;\n  }\n}\n\nmodule.exports = {\n  chooseAppAsync,\n  chooseEditorAppAsync,\n  chooseTerminalAppAsync,\n  execAsync: osascriptExecAsync,\n  isAppRunningAsync,\n  openFinderToFolderAsync,\n  openFolderInTerminalAppAsync,\n  openInAppAsync,\n  openInEditorAsync,\n  openItermToSpecificFolderAsync,\n  openTerminalToSpecificFolderAsync,\n  safeIdOfAppAsync,\n  spawnAsync: osascriptSpawnAsync,\n};\n"]}