{"version":3,"file":"index.js","sourceRoot":"","sources":["../src/index.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * Utilities for working with `osascript` which runs AppleScript on Macs\n */\n'use strict';\n\nimport execAsync, { ExecAsyncOptions } from 'exec-async';\nimport path from 'path';\nimport spawnAsync, { SpawnOptions, SpawnResult } from '@expo/spawn-async';\nimport util from 'util';\n\nfunction osascriptArgs(script: string | string[]): string[] {\n  if (!util.isArray(script)) {\n    script = [script];\n  }\n\n  let args = [];\n  for (let line of script) {\n    args.push('-e');\n    args.push(line);\n  }\n\n  return args;\n}\n\nasync function osascriptExecAsync(\n  script: string | string[],\n  opts?: ExecAsyncOptions\n): Promise<string> {\n  return await execAsync(\n    'osascript',\n    osascriptArgs(script),\n    Object.assign({ stdio: 'inherit' }, opts)\n  );\n}\n\nasync function osascriptSpawnAsync(\n  script: string | string[],\n  opts?: SpawnOptions\n): Promise<SpawnResult> {\n  return await spawnAsync('osascript', osascriptArgs(script), opts);\n}\n\nasync function isAppRunningAsync(appName: string): Promise<boolean> {\n  let zeroMeansNo = (await osascriptExecAsync(\n    'tell app \"System Events\" to count processes whose name is ' + JSON.stringify(appName)\n  )).trim();\n  return zeroMeansNo !== '0';\n}\n\nasync function safeIdOfAppAsync(appName: string): Promise<string | null> {\n  try {\n    return (await osascriptExecAsync('id of app ' + JSON.stringify(appName))).trim();\n  } catch (e) {\n    return null;\n  }\n}\n\nasync function openFinderToFolderAsync(dir: string, activate = true): Promise<void> {\n  await osascriptSpawnAsync([\n    'tell application \"Finder\"',\n    'open POSIX file ' + JSON.stringify(dir),\n    (activate && 'activate') || '',\n    'end tell',\n  ]);\n}\n\nasync function openInAppAsync(appName: string, pth: string): Promise<SpawnResult> {\n  let cmd = 'tell app ' + JSON.stringify(appName) + ' to open ' + JSON.stringify(path.resolve(pth));\n  // console.log(\"cmd=\", cmd);\n  return await osascriptSpawnAsync(cmd);\n}\n\nasync function chooseAppAsync(listOfAppNames: string[]): Promise<string | null> {\n  let runningAwaitables = [];\n  let appIdAwaitables = [];\n  for (let appName of listOfAppNames) {\n    runningAwaitables.push(isAppRunningAsync(appName));\n    appIdAwaitables.push(safeIdOfAppAsync(appName));\n  }\n  let running = await Promise.all(runningAwaitables);\n  let appIds = await Promise.all(appIdAwaitables);\n\n  let i;\n  for (i = 0; i < listOfAppNames.length; i++) {\n    if (running[i]) {\n      return listOfAppNames[i];\n    }\n  }\n\n  for (i = 0; i < listOfAppNames.length; i++) {\n    if (appIds[i]) {\n      return listOfAppNames[i];\n    }\n  }\n\n  return null;\n}\n\nasync function chooseEditorAppAsync(preferredEditor?: string): Promise<string | null> {\n  if (preferredEditor) {\n    // Make sure this editor exists\n    let appId = await safeIdOfAppAsync(preferredEditor);\n    if (appId) {\n      return preferredEditor;\n    } else {\n      console.warn(`Your preferred editor (${preferredEditor}) isn't installed on this computer.`);\n    }\n  }\n\n  let editorsToTry = [\n    'Visual Studio Code',\n    'Atom',\n    'Sublime Text',\n    'TextMate',\n    'TextWrangler',\n    'Visual Studio Code',\n    'Brackets',\n    'SubEthaEdit',\n    'BBEdit',\n    'Textastic',\n    'UltraEdit',\n    'MacVim',\n    'CodeRunner 2',\n    'CodeRunner',\n    'TextEdit',\n  ];\n\n  return await chooseAppAsync(editorsToTry);\n}\n\nasync function chooseTerminalAppAsync(): Promise<string | null> {\n  return await chooseAppAsync([\n    'iTerm 3',\n    'iTerm 2',\n    'iTerm',\n    'HyperTerm',\n    // 'Cathode',\n    // 'Terminator',\n    // 'MacTerm',\n    'Terminal',\n  ]);\n}\n\nasync function openInEditorAsync(pth: string, preferredEditor?: string): Promise<SpawnResult> {\n  let appName = await chooseEditorAppAsync(preferredEditor);\n  if (!appName) {\n    throw new Error('No editor found.');\n  }\n  console.log('Will open in ' + appName + ' -- ' + pth);\n  return await openInAppAsync(appName, pth);\n}\n\nasync function openItermToSpecificFolderAsync(dir: string): Promise<SpawnResult> {\n  return await osascriptSpawnAsync([\n    'tell application \"iTerm\"',\n    'make new terminal',\n    'tell the first terminal',\n    'activate current session',\n    'launch session \"Default Session\"',\n    'tell the last session',\n    'write text \"cd ' + util.inspect(dir) + ' && clear\"',\n    // 'write text \"clear\"',\n    'end tell',\n    'end tell',\n    'end tell',\n  ]);\n  // exec(\"osascript -e 'tell application \\\"iTerm\\\"' -e 'make new terminal' -e 'tell the first terminal' -e 'activate current session' -e 'launch session \\\"Default Session\\\"' -e 'tell the last session' -e 'write text \\\"cd #{value}\\\"' -e 'write text \\\"clear\\\"' -e 'end tell' -e 'end tell' -e 'end tell' > /dev/null 2>&1\")\n}\n\nasync function openTerminalToSpecificFolderAsync(dir: string, inTab = false): Promise<SpawnResult> {\n  if (inTab) {\n    return await osascriptSpawnAsync([\n      'tell application \"terminal\"',\n      'tell application \"System Events\" to tell process \"terminal\" to keystroke \"t\" using command down',\n      'do script with command \"cd ' +\n        util.inspect(dir) +\n        ' && clear\" in selected tab of the front window',\n      'end tell',\n    ]);\n  } else {\n    return await osascriptSpawnAsync([\n      'tell application \"terminal\"',\n      'do script \"cd ' + util.inspect(dir) + ' && clear\"',\n      'end tell',\n      'tell application \"terminal\" to activate',\n    ]);\n  }\n}\n\nasync function openFolderInTerminalAppAsync(dir: string, inTab = false): Promise<SpawnResult> {\n  let program = await chooseTerminalAppAsync();\n\n  switch (program) {\n    case 'iTerm':\n      return await openItermToSpecificFolderAsync(dir);\n\n    case 'Terminal':\n    default:\n      return await openTerminalToSpecificFolderAsync(dir, inTab);\n  }\n}\n\nexport {\n  chooseAppAsync,\n  chooseEditorAppAsync,\n  chooseTerminalAppAsync,\n  osascriptExecAsync as execAsync,\n  isAppRunningAsync,\n  openFinderToFolderAsync,\n  openFolderInTerminalAppAsync,\n  openInAppAsync,\n  openInEditorAsync,\n  openItermToSpecificFolderAsync,\n  openTerminalToSpecificFolderAsync,\n  safeIdOfAppAsync,\n  osascriptSpawnAsync as spawnAsync,\n};\n"]}