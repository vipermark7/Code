"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.readAsync = readAsync;
exports.setAsync = setAsync;
exports.readPackagerInfoAsync = readPackagerInfoAsync;
exports.setPackagerInfoAsync = setPackagerInfoAsync;
exports.dotExpoProjectDirectory = dotExpoProjectDirectory;
exports.dotExpoProjectDirectoryExists = dotExpoProjectDirectoryExists;
exports.getPackagerOptsAsync = getPackagerOptsAsync;

var _defaults = _interopRequireDefault(require("lodash/defaults"));

var _jsonFile = _interopRequireDefault(require("@expo/json-file"));

var _fsExtra = _interopRequireDefault(require("fs-extra"));

var _path = _interopRequireDefault(require("path"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

let projectSettingsFile = 'settings.json';
let projectSettingsDefaults = {
  hostType: 'lan',
  lanType: 'ip',
  dev: true,
  minify: false,
  urlRandomness: null
};
let packagerInfoFile = 'packager-info.json';

function projectSettingsJsonFile(projectRoot, filename) {
  return new _jsonFile.default(_path.default.join(dotExpoProjectDirectory(projectRoot), filename));
}

async function readAsync(projectRoot) {
  let projectSettings;

  try {
    projectSettings = await projectSettingsJsonFile(projectRoot, projectSettingsFile).readAsync();
  } catch (e) {
    projectSettings = await projectSettingsJsonFile(projectRoot, projectSettingsFile).writeAsync(projectSettingsDefaults);
  }

  if (projectSettings.hostType === 'ngrok') {
    // 'ngrok' is deprecated
    projectSettings.hostType = 'tunnel';
  }

  if (projectSettings.urlType) {
    // urlType is deprecated as a project setting
    delete projectSettings.urlType;
  }

  if ('strict' in projectSettings) {
    // strict mode is not supported at the moment
    delete projectSettings.strict;
  } // Set defaults for any missing fields


  (0, _defaults.default)(projectSettings, projectSettingsDefaults);
  return projectSettings;
}

async function setAsync(projectRoot, json) {
  try {
    return await projectSettingsJsonFile(projectRoot, projectSettingsFile).mergeAsync(json, {
      cantReadFileDefault: projectSettingsDefaults
    });
  } catch (e) {
    return await projectSettingsJsonFile(projectRoot, projectSettingsFile).writeAsync((0, _defaults.default)(json, projectSettingsDefaults));
  }
}

async function readPackagerInfoAsync(projectRoot) {
  try {
    return await projectSettingsJsonFile(projectRoot, packagerInfoFile).readAsync({
      cantReadFileDefault: {}
    });
  } catch (e) {
    return await projectSettingsJsonFile(projectRoot, packagerInfoFile).writeAsync({});
  }
}

async function setPackagerInfoAsync(projectRoot, json) {
  try {
    return await projectSettingsJsonFile(projectRoot, packagerInfoFile).mergeAsync(json, {
      cantReadFileDefault: {}
    });
  } catch (e) {
    return await projectSettingsJsonFile(projectRoot, packagerInfoFile).writeAsync(json);
  }
}

function dotExpoProjectDirectory(projectRoot) {
  let dirPath = _path.default.join(projectRoot, '.expo');

  try {
    // move .exponent to .expo
    let oldDirPath = _path.default.join(projectRoot, '.exponent');

    if (_fsExtra.default.statSync(oldDirPath).isDirectory()) {
      _fsExtra.default.renameSync(oldDirPath, dirPath);
    }
  } catch (e) {// no old directory, continue
  }

  _fsExtra.default.mkdirpSync(dirPath);

  return dirPath;
}

function dotExpoProjectDirectoryExists(projectRoot) {
  let dirPath = _path.default.join(projectRoot, '.expo');

  try {
    if (_fsExtra.default.statSync(dirPath).isDirectory()) {
      return true;
    }
  } catch (e) {// file doesn't exist
  }

  return false;
}

async function getPackagerOptsAsync(projectRoot) {
  let projectSettings = await readAsync(projectRoot);
  return projectSettings;
}
//# sourceMappingURL=__sourcemaps__/ProjectSettings.js.map
