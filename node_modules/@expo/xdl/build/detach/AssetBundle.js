"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.bundleAsync = bundleAsync;

var _lodash = _interopRequireDefault(require("lodash"));

var _fsExtra = _interopRequireDefault(require("fs-extra"));

var _path = _interopRequireDefault(require("path"));

var _url = _interopRequireDefault(require("url"));

var _ExponentTools = require("./ExponentTools");

var _StandaloneContext = _interopRequireDefault(require("./StandaloneContext"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// Copyright 2015-present 650 Industries. All rights reserved.
const EXPO_DOMAINS = ['expo.io', 'exp.host', 'expo.test', 'localhost'];
const ASSETS_DIR_DEFAULT_URL = 'https://d1wp6m56sqw74a.cloudfront.net/~assets';

async function bundleAsync(context, assets, dest, oldFormat = false) {
  if (!assets) {
    return;
  } // Compat with exp 46.x.x, can remove when this version is phasing out.


  if (typeof assets[0] === 'object') {
    assets = assets.reduce((res, cur) => res.concat(cur.fileHashes.map(h => 'asset_' + h + (cur.type ? '.' + cur.type : ''))), []);
  }

  await _fsExtra.default.ensureDir(dest);
  const urlResolver = createAssetsUrlResolver(context);

  const batches = _lodash.default.chunk(assets, 5);

  for (const batch of batches) {
    await Promise.all(batch.map(async asset => {
      const extensionIndex = asset.lastIndexOf('.');
      const prefixLength = 'asset_'.length;
      const hash = extensionIndex >= 0 ? asset.substring(prefixLength, extensionIndex) : asset.substring(prefixLength);
      await (0, _ExponentTools.saveUrlToPathAsync)(urlResolver(hash), // For sdk24 the runtime expects only the hash as the filename.
      _path.default.join(dest, oldFormat ? hash : asset));
    }));
  }
}

function createAssetsUrlResolver(context) {
  let assetsDirUrl = ASSETS_DIR_DEFAULT_URL;

  if (context) {
    const {
      assetUrlOverride = './assets'
    } = context.config;
    const publishedUrl = context.published.url;

    const {
      hostname
    } = _url.default.parse(publishedUrl);

    const maybeExpoDomain = _lodash.default.takeRight(hostname.split('.'), 2).join('.');

    if (!_lodash.default.includes(EXPO_DOMAINS, maybeExpoDomain)) {
      assetsDirUrl = _url.default.resolve(publishedUrl, assetUrlOverride);
    }
  }

  return hash => `${assetsDirUrl}/${hash}`;
}
//# sourceMappingURL=../__sourcemaps__/detach/AssetBundle.js.map
