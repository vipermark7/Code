"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.credentialsExistForPlatformAsync = credentialsExistForPlatformAsync;
exports.getEncryptedCredentialsForPlatformAsync = getEncryptedCredentialsForPlatformAsync;
exports.getCredentialsForPlatform = getCredentialsForPlatform;
exports.updateCredentialsForPlatform = updateCredentialsForPlatform;
exports.removeCredentialsForPlatform = removeCredentialsForPlatform;
exports.Ios = exports.Android = void 0;

var _Api = _interopRequireDefault(require("../Api"));

var Android = _interopRequireWildcard(require("./AndroidCredentials"));

exports.Android = Android;

var Ios = _interopRequireWildcard(require("./IosCredentials"));

exports.Ios = Ios;

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {}; if (desc.get || desc.set) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } } newObj.default = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

async function credentialsExistForPlatformAsync(metadata) {
  const creds = await fetchCredentials(metadata, false);
  return !!creds; // !! performed on awaited creds
}

async function getEncryptedCredentialsForPlatformAsync(metadata) {
  return fetchCredentials(metadata, false);
}

async function getCredentialsForPlatform(metadata) {
  return fetchCredentials(metadata, true);
}

async function fetchCredentials({
  username,
  experienceName,
  bundleIdentifier,
  platform
}, decrypt) {
  // this doesn't hit our mac rpc channel, so it needs significantly less debugging
  const {
    err,
    credentials
  } = await _Api.default.callMethodAsync('getCredentials', [], 'post', {
    username,
    experienceName,
    bundleIdentifier,
    platform,
    decrypt
  });

  if (err) {
    throw new Error('Error fetching credentials.');
  }

  return credentials;
}

async function updateCredentialsForPlatform(platform, newCredentials, userCredentialsIds, metadata) {
  const {
    err,
    credentials
  } = await _Api.default.callMethodAsync('updateCredentials', [], 'post', {
    credentials: newCredentials,
    userCredentialsIds,
    platform,
    ...metadata
  });

  if (err || !credentials) {
    throw new Error('Error updating credentials.');
  }
}

async function removeCredentialsForPlatform(platform, metadata) {
  // doesn't go through mac rpc, no request id needed
  const {
    err
  } = await _Api.default.callMethodAsync('deleteCredentials', [], 'post', {
    platform,
    ...metadata
  });

  if (err) {
    throw new Error('Error deleting credentials.');
  }
}
//# sourceMappingURL=../__sourcemaps__/credentials/Credentials.js.map
