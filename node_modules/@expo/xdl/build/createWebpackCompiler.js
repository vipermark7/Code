"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.printPreviewNotice = printPreviewNotice;
exports.default = createWebpackCompiler;

var _chalk = _interopRequireDefault(require("chalk"));

var _clearConsole = _interopRequireDefault(require("react-dev-utils/clearConsole"));

var _formatWebpackMessages = _interopRequireDefault(require("react-dev-utils/formatWebpackMessages"));

var ProjectUtils = _interopRequireWildcard(require("./project/ProjectUtils"));

var _Web = require("./Web");

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {}; if (desc.get || desc.set) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } } newObj.default = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * Copyright (c) 2015-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
const CONSOLE_TAG = 'expo';
const SHOULD_CLEAR_CONSOLE = (0, _Web.shouldWebpackClearLogs)();

function log(projectRoot, message, showInDevtools = true) {
  if (showInDevtools) {
    ProjectUtils.logInfo(projectRoot, CONSOLE_TAG, message);
  } else {
    console.log(message);
  }
}

function logWarning(projectRoot, message) {
  ProjectUtils.logWarning(projectRoot, CONSOLE_TAG, message);
}

function logError(projectRoot, message) {
  ProjectUtils.logError(projectRoot, CONSOLE_TAG, message);
}

function printInstructions(projectRoot, appName, urls, showInDevtools) {
  let message = `You can now view ${_chalk.default.bold(appName)} in the browser.\n\n`;

  if (urls.lanUrlForTerminal) {
    message += `  ${_chalk.default.bold('Local:')}            ${urls.localUrlForTerminal}\n`;
    message += `  ${_chalk.default.bold('On Your Network:')}  ${urls.lanUrlForTerminal}\n`;
  } else {
    message += `  ${urls.localUrlForTerminal}\n`;
  }

  message += `\nNote that the development build is not optimized. To create a production build, use ${_chalk.default.bold(`expo build:web`)}.`;
  log(projectRoot, message, showInDevtools);
}

function printPreviewNotice(projectRoot, showInDevtools) {
  log(projectRoot, _chalk.default.underline.yellow('\nWeb support in Expo is experimental and subject to breaking changes. Do not use this in production yet.'), showInDevtools);
}

function createWebpackCompiler({
  projectRoot,
  appName,
  config,
  urls,
  nonInteractive,
  useYarn,
  webpack,
  onFinished
}) {
  // "Compiler" is a low-level interface to Webpack.
  // It lets us listen to some events and provide our own custom messages.
  let compiler;

  try {
    compiler = webpack(config);
  } catch (err) {
    logError(projectRoot, '\nFailed to compile\n' + err.message || err);
    process.exit(1);
  } // "invalid" event fires when you have changed a file, and Webpack is
  // recompiling a bundle. WebpackDevServer takes care to pause serving the
  // bundle, so if you refresh, it'll wait instead of serving the old one.
  // "invalid" is short for "bundle invalidated", it doesn't imply any errors.


  compiler.hooks.invalid.tap('invalid', () => {
    if (SHOULD_CLEAR_CONSOLE && !nonInteractive) {
      (0, _clearConsole.default)();
    }

    log(projectRoot, '\nCompiling...');
  });
  let isFirstCompile = true; // "done" event fires when Webpack has finished recompiling the bundle.
  // Whether or not you have warnings or errors, you will get this event.

  compiler.hooks.done.tap('done', async stats => {
    if (SHOULD_CLEAR_CONSOLE && !nonInteractive) {
      (0, _clearConsole.default)();
    } // We have switched off the default Webpack output in WebpackDevServer
    // options so we are going to "massage" the warnings and errors and present
    // them in a readable focused way.
    // We only construct the warnings and errors for speed:
    // https://github.com/facebook/create-react-app/issues/4492#issuecomment-421959548


    const statsData = stats.toJson({
      all: false,
      warnings: true,
      errors: true
    });
    const messages = (0, _formatWebpackMessages.default)(statsData);
    const isSuccessful = !messages.errors.length && !messages.warnings.length;

    if (isSuccessful) {
      log(projectRoot, _chalk.default.bold.cyan(`Compiled successfully!`));
      printPreviewNotice(projectRoot, isFirstCompile);
      (0, _Web.logEnvironmentInfo)(projectRoot, CONSOLE_TAG, config);
    }

    if (isSuccessful && (!nonInteractive || isFirstCompile)) {
      printInstructions(projectRoot, appName, urls, isFirstCompile);
    }

    if (!isFirstCompile) {
      log(projectRoot, `Press ${_chalk.default.bold('?')} to show a list of all available commands.\n`, false);
    }

    onFinished();
    isFirstCompile = false; // If errors exist, only show errors.

    if (messages.errors.length) {
      // Only keep the first error. Others are often indicative
      // of the same problem, but confuse the reader with noise.
      if (messages.errors.length > 1) {
        messages.errors.length = 1;
      }

      logError(projectRoot, _chalk.default.red('Failed to compile.\n') + messages.errors.join('\n\n'));
      return;
    } // Show warnings if no errors were found.


    if (messages.warnings.length) {
      logWarning(projectRoot, _chalk.default.yellow('Compiled with warnings.\n') + messages.warnings.join('\n\n'));
    }
  });
  return compiler;
}
//# sourceMappingURL=__sourcemaps__/createWebpackCompiler.js.map
