"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.openFolderName = openFolderName;
exports.openConsoleName = openConsoleName;
exports.openFolderAsync = openFolderAsync;
exports.openConsoleAsync = openConsoleAsync;
exports.openFileInEditorAsync = openFileInEditorAsync;
exports.openProjectInEditorAsync = openProjectInEditorAsync;

var _child_process = _interopRequireDefault(require("child_process"));

var _spawnAsync = _interopRequireDefault(require("@expo/spawn-async"));

var Binaries = _interopRequireWildcard(require("./Binaries"));

var _XDLError = _interopRequireDefault(require("./XDLError"));

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {}; if (desc.get || desc.set) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } } newObj.default = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

let osascript;

if (process.platform === 'darwin') {
  osascript = require('@expo/osascript');
}

function openFolderName() {
  if (process.platform === 'darwin') {
    return 'Show in Finder';
  } else if (process.platform === 'win32') {
    return 'Show in File Explorer';
  }
}

function openConsoleName() {
  if (process.platform === 'darwin') {
    return 'Open in Terminal';
  } else if (process.platform === 'win32') {
    return 'Open in Cmd';
  }
}

async function openFolderAsync(dir) {
  if (process.platform === 'darwin') {
    return await osascript.openFinderToFolderAsync(dir);
  } else if (process.platform === 'win32') {
    return await (0, _spawnAsync.default)('explorer', [dir]);
  }
}

async function openConsoleAsync(dir) {
  if (process.platform === 'darwin') {
    return await osascript.openFolderInTerminalAppAsync(dir);
  } else if (process.platform === 'win32') {
    _child_process.default.exec(`start cmd /K "cd /d ${dir}"`);
  }
}

async function openFileInEditorAsync(path) {
  if (process.platform === 'darwin') {
    // This will use the ENV var $EXPO_EDITOR if set, or else will try various
    // popular editors, looking for one that is open, or if none are, one that is installed
    return await osascript.openInEditorAsync(path, process.env.EXPO_EDITOR);
  } else if (process.platform === 'win32') {
    throw new _XDLError.default('PLATFORM_NOT_SUPPORTED', 'openFileInEditorAsync not supported');
  }
}

async function openProjectInEditorAsync(dir) {
  if (process.platform === 'darwin') {
    // This will use the ENV var $EXPO_EDITOR if set, or else will try various
    // popular editors, looking for one that is open, or if none are, one that is installed
    return await osascript.openInEditorAsync(dir, process.env.EXPO_EDITOR);
  } else if (process.platform === 'win32') {
    throw new _XDLError.default('PLATFORM_NOT_SUPPORTED', 'openProjectInEditorAsync not supported');
  }
}
//# sourceMappingURL=__sourcemaps__/FileSystem.js.map
