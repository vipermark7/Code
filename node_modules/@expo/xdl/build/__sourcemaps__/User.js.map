{"version":3,"sources":["User.ts"],"names":["ANONYMOUS_USERNAME","UserManagerInstance","Semaphore","getGlobalInstance","__globalInstance","initialize","_currentUser","_getSessionLock","loginAsync","loginType","loginArgs","Error","apiAnonymous","ApiV2Client","clientForUser","loginResp","postAsync","username","password","error","XDLError","_getProfileAsync","currentConnection","sessionSecret","registerAsync","userData","user","getCurrentUserAsync","logoutAsync","registeredUser","createOrUpdateUserAsync","connection","email","givenName","familyName","e","console","message","ensureLoggedInAsync","Config","offline","_interactiveAuthenticationCallbackAsync","setInteractiveAuthenticationCallback","callback","_readUserData","auth","UserSettings","getAsync","acquire","data","Logger","global","warn","release","getCurrentUsernameAsync","getSessionAsync","currentUser","api","updatedUser","_prepareAuth0Profile","_parseAuth0Profile","kind","Analytics","logEvent","deleteKeyAsync","forgotPasswordAsync","usernameOrEmail","setAsync","userId","setUserProperties","rawProfile","Object","keys","reduce","p","key","niceProfile"],"mappings":"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","sourcesContent":["import isEmpty from 'lodash/isEmpty';\nimport camelCase from 'lodash/camelCase';\nimport snakeCase from 'lodash/snakeCase';\n\nimport ApiV2Client, { ApiV2Error } from './ApiV2';\nimport * as Analytics from './Analytics';\nimport Config from './Config';\nimport XDLError from './XDLError';\nimport Logger from './Logger';\nimport idx from 'idx';\nimport UserSettings, { UserSettingsData, UserData } from './UserSettings';\n\nimport { Semaphore } from './Utils';\n\nexport type User = {\n  kind: 'user';\n  // required\n  username: string;\n  nickname: string;\n  userId: string;\n  picture: string;\n  // optional\n  email?: string;\n  emailVerified?: boolean;\n  givenName?: string;\n  familyName?: string;\n  userMetadata: {\n    onboarded: boolean;\n    legacy?: boolean;\n  };\n  currentConnection: ConnectionType;\n  sessionSecret: string;\n};\n\nexport type LegacyUser = {\n  kind: 'legacyUser';\n  username: string;\n  userMetadata: {\n    legacy: boolean;\n    needsPasswordMigration: boolean;\n  };\n};\n\nexport type UserOrLegacyUser = User | LegacyUser;\n\nexport type ConnectionType =\n  | 'Username-Password-Authentication'\n  | 'facebook'\n  | 'google-oauth2'\n  | 'github';\n\nexport type RegistrationData = {\n  username: string;\n  password: string;\n  email?: string;\n  givenName?: string;\n  familyName?: string;\n};\n\nexport type LoginType = 'user-pass' | 'facebook' | 'google' | 'github';\n\nexport const ANONYMOUS_USERNAME = 'anonymous';\n\nexport class UserManagerInstance {\n  _currentUser: User | null = null;\n  _getSessionLock = new Semaphore();\n  _interactiveAuthenticationCallbackAsync?: () => Promise<User>;\n\n  static getGlobalInstance() {\n    if (!__globalInstance) {\n      __globalInstance = new UserManagerInstance();\n    }\n    return __globalInstance;\n  }\n\n  initialize() {\n    this._currentUser = null;\n    this._getSessionLock = new Semaphore();\n  }\n\n  /**\n   * Logs in a user for a given login type.\n   *\n   * Valid login types are:\n   *  - \"user-pass\": Username and password authentication\n   *\n   * If the login type is \"user-pass\", we directly make the request to www\n   * to login a user.\n   */\n  async loginAsync(\n    loginType: LoginType,\n    loginArgs?: { username: string; password: string }\n  ): Promise<User> {\n    if (loginType === 'user-pass') {\n      if (!loginArgs) {\n        throw new Error(`The 'user-pass' login type requires a username and password.`);\n      }\n      const apiAnonymous = ApiV2Client.clientForUser();\n      const loginResp = await apiAnonymous.postAsync('auth/loginAsync', {\n        username: loginArgs.username,\n        password: loginArgs.password,\n      });\n      if (loginResp.error) {\n        throw new XDLError('INVALID_USERNAME_PASSWORD', loginResp['error_description']);\n      }\n      return this._getProfileAsync({\n        currentConnection: 'Username-Password-Authentication',\n        sessionSecret: loginResp.sessionSecret,\n      });\n    } else {\n      throw new Error(`Invalid login type provided. Must be 'user-pass'.`);\n    }\n  }\n\n  async registerAsync(userData: RegistrationData, user: UserOrLegacyUser | null): Promise<User> {\n    if (!user) {\n      user = await this.getCurrentUserAsync();\n    }\n\n    if (user) {\n      await this.logoutAsync();\n      user = null;\n    }\n\n    try {\n      // Create or update the profile\n      let registeredUser = await this.createOrUpdateUserAsync({\n        connection: 'Username-Password-Authentication', // Always create/update username password\n        email: userData.email,\n        givenName: userData.givenName,\n        familyName: userData.familyName,\n        username: userData.username,\n        password: userData.password,\n      });\n\n      registeredUser = await this.loginAsync('user-pass', {\n        username: userData.username,\n        password: userData.password,\n      });\n\n      return registeredUser;\n    } catch (e) {\n      console.error(e);\n      throw new XDLError('REGISTRATION_ERROR', 'Error registering user: ' + e.message);\n    }\n  }\n\n  /**\n   * Ensure user is logged in and has a valid token.\n   *\n   * If there are any issues with the login, this method throws.\n   */\n  async ensureLoggedInAsync(): Promise<User | null> {\n    if (Config.offline) {\n      return null;\n    }\n\n    let user = await this.getCurrentUserAsync();\n    if (!user && this._interactiveAuthenticationCallbackAsync) {\n      user = await this._interactiveAuthenticationCallbackAsync();\n    }\n    if (!user) {\n      throw new XDLError('NOT_LOGGED_IN', 'Not logged in');\n    }\n    return user;\n  }\n\n  setInteractiveAuthenticationCallback(callback: () => Promise<User>) {\n    this._interactiveAuthenticationCallbackAsync = callback;\n  }\n\n  async _readUserData(): Promise<UserData | null> {\n    let auth = await UserSettings.getAsync('auth', null);\n    if (isEmpty(auth)) {\n      // XXX(ville):\n      // We sometimes read an empty string from ~/.expo/state.json,\n      // even though it has valid credentials in it.\n      // We don't know why.\n      // An empty string can't be parsed as JSON, so an empty default object is returned.\n      // In this case, retrying usually helps.\n      auth = await UserSettings.getAsync('auth', null);\n    }\n    if (typeof auth === 'undefined') {\n      return null;\n    }\n    return auth;\n  }\n\n  /**\n   * Get the current user based on the available token.\n   * If there is no current token, returns null.\n   */\n  async getCurrentUserAsync(): Promise<User | null> {\n    await this._getSessionLock.acquire();\n\n    try {\n      // If user is cached and there is a sessionSecret, return the user\n      if (this._currentUser && this._currentUser.sessionSecret) {\n        return this._currentUser;\n      }\n\n      if (Config.offline) {\n        return null;\n      }\n\n      const data = await this._readUserData();\n\n      // No session, no current user. Need to login\n      if (!data || !data.sessionSecret) {\n        return null;\n      }\n\n      try {\n        return await this._getProfileAsync({\n          currentConnection: data.currentConnection,\n          sessionSecret: data.sessionSecret,\n        });\n      } catch (e) {\n        Logger.global.warn('Fetching the user profile failed');\n        Logger.global.warn(e);\n        return null;\n      }\n    } finally {\n      this._getSessionLock.release();\n    }\n  }\n\n  async getCurrentUsernameAsync(): Promise<string | null> {\n    const data = await this._readUserData();\n    if (!data || !data.username) {\n      return null;\n    }\n    return data.username;\n  }\n\n  async getSessionAsync(): Promise<{ sessionSecret: string } | null> {\n    const data = await this._readUserData();\n    if (!data || !data.sessionSecret) {\n      return null;\n    }\n    return { sessionSecret: data.sessionSecret };\n  }\n\n  /**\n   * Create or update a user.\n   */\n  async createOrUpdateUserAsync(userData: object): Promise<User | null> {\n    let currentUser = this._currentUser;\n    if (!currentUser) {\n      // attempt to get the current user\n      currentUser = await this.getCurrentUserAsync();\n    }\n\n    const api = ApiV2Client.clientForUser(currentUser);\n\n    const { user: updatedUser } = await api.postAsync('auth/createOrUpdateUser', {\n      userData: _prepareAuth0Profile(userData),\n    });\n\n    this._currentUser = {\n      ...this._currentUser,\n      ..._parseAuth0Profile(updatedUser),\n      kind: 'user',\n    };\n    return this._currentUser;\n  }\n\n  /**\n   * Logout\n   */\n  async logoutAsync(): Promise<void> {\n    if (this._currentUser) {\n      Analytics.logEvent('Logout', {\n        username: this._currentUser.username,\n      });\n    }\n\n    this._currentUser = null;\n\n    // Delete saved auth info\n    await UserSettings.deleteKeyAsync('auth');\n  }\n\n  /**\n   * Forgot Password\n   */\n  async forgotPasswordAsync(usernameOrEmail: string): Promise<void> {\n    const apiAnonymous = ApiV2Client.clientForUser();\n    return apiAnonymous.postAsync('auth/forgotPasswordAsync', {\n      usernameOrEmail,\n    });\n  }\n\n  /**\n   * Get profile given token data. Errors if token is not valid or if no\n   * user profile is returned.\n   *\n   * This method is called by all public authentication methods of `UserManager`\n   * except `logoutAsync`. Therefore, we use this method as a way to:\n   *  - update the UserSettings store with the current token and user id\n   *  - update UserManager._currentUser\n   *  - Fire login analytics events\n   *\n   * Also updates UserManager._currentUser.\n   *\n   * @private\n   */\n  async _getProfileAsync({\n    currentConnection,\n    sessionSecret,\n  }: {\n    currentConnection?: ConnectionType;\n    sessionSecret: string;\n  }): Promise<User> {\n    let user;\n    let api = ApiV2Client.clientForUser({\n      sessionSecret,\n    });\n\n    user = await api.postAsync('auth/userProfileAsync');\n\n    if (!user) {\n      throw new Error('Unable to fetch user.');\n    }\n\n    user = {\n      ..._parseAuth0Profile(user),\n      kind: 'user',\n      currentConnection,\n      sessionSecret,\n    };\n\n    await UserSettings.setAsync('auth', {\n      userId: user.userId,\n      username: user.username,\n      currentConnection,\n      sessionSecret,\n    });\n\n    // If no currentUser, or currentUser.id differs from profiles\n    // user id, that means we have a new login\n    if (\n      (!this._currentUser || this._currentUser.userId !== user.userId) &&\n      user.username &&\n      user.username !== ''\n    ) {\n      Analytics.logEvent('Login', {\n        userId: user.userId,\n        currentConnection: user.currentConnection,\n        username: user.username,\n      });\n\n      Analytics.setUserProperties(user.username, {\n        userId: user.userId,\n        currentConnection: user.currentConnection,\n        username: user.username,\n      });\n    }\n\n    this._currentUser = user;\n\n    return user;\n  }\n}\n\nlet __globalInstance: UserManagerInstance | undefined;\nexport default UserManagerInstance.getGlobalInstance();\n\n/** Private Methods **/\nfunction _parseAuth0Profile(rawProfile: any) {\n  if (!rawProfile || typeof rawProfile !== 'object') {\n    return rawProfile;\n  }\n  return Object.keys(rawProfile).reduce(\n    (p, key) => {\n      p[camelCase(key)] = _parseAuth0Profile(rawProfile[key]);\n      return p;\n    },\n    {} as any\n  );\n}\n\nfunction _prepareAuth0Profile(niceProfile: any) {\n  if (typeof niceProfile !== 'object') {\n    return niceProfile;\n  }\n\n  return Object.keys(niceProfile).reduce(\n    (p, key) => {\n      p[snakeCase(key)] = _prepareAuth0Profile(niceProfile[key]);\n      return p;\n    },\n    {} as any\n  );\n}\n"],"file":"../User.js","sourceRoot":"/@expo/xdl@55.0.14/src"}