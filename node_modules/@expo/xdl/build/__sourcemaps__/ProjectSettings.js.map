{"version":3,"sources":["ProjectSettings.ts"],"names":["projectSettingsFile","projectSettingsDefaults","hostType","lanType","dev","minify","urlRandomness","packagerInfoFile","projectSettingsJsonFile","projectRoot","filename","JsonFile","path","join","dotExpoProjectDirectory","readAsync","projectSettings","e","writeAsync","urlType","strict","setAsync","json","mergeAsync","cantReadFileDefault","readPackagerInfoAsync","setPackagerInfoAsync","dirPath","oldDirPath","fs","statSync","isDirectory","renameSync","mkdirpSync","dotExpoProjectDirectoryExists","getPackagerOptsAsync"],"mappings":"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","sourcesContent":["import defaults from 'lodash/defaults';\nimport JsonFile from '@expo/json-file';\nimport fs from 'fs-extra';\nimport path from 'path';\n\nlet projectSettingsFile = 'settings.json';\nlet projectSettingsDefaults = {\n  hostType: 'lan',\n  lanType: 'ip',\n  dev: true,\n  minify: false,\n  urlRandomness: null,\n};\nlet packagerInfoFile = 'packager-info.json';\n\nfunction projectSettingsJsonFile(projectRoot: string, filename: string) {\n  return new JsonFile(path.join(dotExpoProjectDirectory(projectRoot), filename));\n}\n\nexport async function readAsync(projectRoot: string) {\n  let projectSettings;\n  try {\n    projectSettings = await projectSettingsJsonFile(projectRoot, projectSettingsFile).readAsync();\n  } catch (e) {\n    projectSettings = await projectSettingsJsonFile(projectRoot, projectSettingsFile).writeAsync(\n      projectSettingsDefaults\n    );\n  }\n\n  if (projectSettings.hostType === 'ngrok') {\n    // 'ngrok' is deprecated\n    projectSettings.hostType = 'tunnel';\n  }\n\n  if (projectSettings.urlType) {\n    // urlType is deprecated as a project setting\n    delete projectSettings.urlType;\n  }\n\n  if ('strict' in projectSettings) {\n    // strict mode is not supported at the moment\n    delete projectSettings.strict;\n  }\n\n  // Set defaults for any missing fields\n  defaults(projectSettings, projectSettingsDefaults);\n  return projectSettings;\n}\n\nexport async function setAsync(projectRoot: string, json: any) {\n  try {\n    return await projectSettingsJsonFile(projectRoot, projectSettingsFile).mergeAsync(json, {\n      cantReadFileDefault: projectSettingsDefaults,\n    });\n  } catch (e) {\n    return await projectSettingsJsonFile(projectRoot, projectSettingsFile).writeAsync(\n      defaults(json, projectSettingsDefaults)\n    );\n  }\n}\n\nexport async function readPackagerInfoAsync(projectRoot: string) {\n  try {\n    return await projectSettingsJsonFile(projectRoot, packagerInfoFile).readAsync({\n      cantReadFileDefault: {},\n    });\n  } catch (e) {\n    return await projectSettingsJsonFile(projectRoot, packagerInfoFile).writeAsync({});\n  }\n}\n\nexport async function setPackagerInfoAsync(projectRoot: string, json: any) {\n  try {\n    return await projectSettingsJsonFile(projectRoot, packagerInfoFile).mergeAsync(json, {\n      cantReadFileDefault: {},\n    });\n  } catch (e) {\n    return await projectSettingsJsonFile(projectRoot, packagerInfoFile).writeAsync(json);\n  }\n}\n\nexport function dotExpoProjectDirectory(projectRoot: string) {\n  let dirPath = path.join(projectRoot, '.expo');\n  try {\n    // move .exponent to .expo\n    let oldDirPath = path.join(projectRoot, '.exponent');\n    if (fs.statSync(oldDirPath).isDirectory()) {\n      fs.renameSync(oldDirPath, dirPath);\n    }\n  } catch (e) {\n    // no old directory, continue\n  }\n\n  fs.mkdirpSync(dirPath);\n  return dirPath;\n}\n\nexport function dotExpoProjectDirectoryExists(projectRoot: string) {\n  let dirPath = path.join(projectRoot, '.expo');\n  try {\n    if (fs.statSync(dirPath).isDirectory()) {\n      return true;\n    }\n  } catch (e) {\n    // file doesn't exist\n  }\n\n  return false;\n}\n\nexport async function getPackagerOptsAsync(projectRoot: string) {\n  let projectSettings = await readAsync(projectRoot);\n  return projectSettings;\n}\n"],"file":"../ProjectSettings.js","sourceRoot":"/@expo/xdl@55.0.14/src"}