{"version":3,"sources":["AssetUtils.js"],"names":["toReadableValue","bytes","sizes","index","Math","floor","log","reduced","pow","toFixed","calculateHash","file","contents","fs","readFileSync","crypto","createHash","update","digest","optimizeImageAsync","async","inputPath","quality","logger","global","info","outputPath","temporary","directory","await","sharpAsync","input","output","path","join","basename","hasUnoptimizedAssetsAsync","projectDir","options","existsSync","selectedFiles","getAssetFilesAsync","assetInfo","readAssetJsonAsync","hash","exp","readConfigJsonAsync","assetBundlePatterns","globOptions","cwd","ignore","allFiles","patterns","forEach","pattern","push","glob","sync","included","include","toExclude","Set","exclude","add","excluded","filter","has","filtered","filterImages","files","regex","withDirectory","map","replace","allImages","test","toLowerCase","dirPath","mkdirSync","assetJson","JsonFile","message","chalk","italic","writeAsync","readAsync","createNewFilename","image","dir","name","ext","parse"],"mappings":"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","file":"../AssetUtils.js","sourcesContent":["import fs from 'fs-extra';\nimport path from 'path';\nimport crypto from 'crypto';\nimport chalk from 'chalk';\nimport glob from 'glob';\nimport { sharpAsync } from '@expo/image-utils';\nimport JsonFile from '@expo/json-file';\nimport temporary from 'tempy';\n\nimport logger from './Logger';\nimport { readConfigJsonAsync } from './project/ProjectUtils';\n\n/*\n * Converts a raw number of bytes into a human readable value\n */\nexport const toReadableValue = bytes => {\n  const sizes = ['Bytes', 'KB', 'MB', 'GB'];\n  const index = Math.floor(Math.log(bytes) / Math.log(1024));\n  const reduced = (bytes / Math.pow(1024, index)).toFixed(2) * 1;\n\n  return `${reduced} ${sizes[index]}`;\n};\n\n/*\n * Calculate SHA256 Checksum value of a file based on its contents\n */\nexport const calculateHash = file => {\n  const contents = fs.readFileSync(file);\n  return crypto\n    .createHash('sha256')\n    .update(contents)\n    .digest('hex');\n};\n\n/*\n * Compress an inputted jpg or png\n */\nexport const optimizeImageAsync = async (inputPath, quality) => {\n  logger.global.info(`Optimizing ${inputPath}`);\n  const outputPath = temporary.directory();\n  await sharpAsync({\n    input: inputPath,\n    output: outputPath,\n    quality,\n  });\n  return path.join(outputPath, path.basename(inputPath));\n};\n\n/*\n * Returns a boolean indicating whether or not there are assets to optimize\n */\nexport const hasUnoptimizedAssetsAsync = async (projectDir, options) => {\n  if (!fs.existsSync(path.join(projectDir, '.expo-shared/assets.json'))) {\n    return true;\n  }\n  const { selectedFiles } = await getAssetFilesAsync(projectDir, options);\n  const { assetInfo } = await readAssetJsonAsync(projectDir);\n\n  for (const file of selectedFiles) {\n    const hash = calculateHash(file);\n    if (!assetInfo[hash]) {\n      return true;\n    }\n  }\n\n  return false;\n};\n\n/*\n * Find all project assets under assetBundlePatterns in app.json excluding node_modules.\n * If --include of --exclude flags were passed in those results are filtered out.\n */\nexport const getAssetFilesAsync = async (projectDir, options) => {\n  const { exp } = await readConfigJsonAsync(projectDir);\n  const { assetBundlePatterns } = exp;\n  const globOptions = {\n    cwd: projectDir,\n    ignore: ['**/node_modules/**', '**/ios/**', '**/android/**'],\n  };\n\n  // All files must be returned even if flags are passed in to properly update assets.json\n  const allFiles = [];\n  const patterns = assetBundlePatterns || ['**/*'];\n  patterns.forEach(pattern => {\n    allFiles.push(...glob.sync(pattern, globOptions));\n  });\n  // If --include is passed in, only return files matching that pattern\n  const included =\n    options && options.include ? [...glob.sync(options.include, globOptions)] : allFiles;\n  const toExclude = new Set();\n  if (options && options.exclude) {\n    glob.sync(options.exclude, globOptions).forEach(file => toExclude.add(file));\n  }\n  // If --exclude is passed in, filter out files matching that pattern\n  const excluded = included.filter(file => !toExclude.has(file));\n  const filtered = options && options.exclude ? excluded : included;\n  return {\n    allFiles: filterImages(allFiles, projectDir),\n    selectedFiles: filterImages(filtered, projectDir),\n  };\n};\n\n/*\n * Formats an array of files to include the project directory and filters out PNGs and JPGs.\n */\nconst filterImages = (files, projectDir) => {\n  const regex = /\\.(png|jpg|jpeg)$/;\n  const withDirectory = files.map(file => `${projectDir}/${file}`.replace('//', '/'));\n  const allImages = withDirectory.filter(file => regex.test(file.toLowerCase()));\n  return allImages;\n};\n\n/*\n * Read the contents of assets.json under .expo-shared folder. Create the file/directory if they don't exist.\n */\nexport const readAssetJsonAsync = async projectDir => {\n  const dirPath = path.join(projectDir, '.expo-shared');\n  if (!fs.existsSync(dirPath)) {\n    fs.mkdirSync(dirPath);\n  }\n\n  const assetJson = new JsonFile(path.join(dirPath, 'assets.json'));\n  if (!fs.existsSync(assetJson.file)) {\n    const message =\n      `Creating ${chalk.italic('.expo-shared/assets.json')} in the project's root directory.\\n` +\n      `This file is autogenerated and should not be edited directly.\\n` +\n      'You should commit this to git so that asset state is shared between collaborators.';\n\n    logger.global.info(message);\n\n    await assetJson.writeAsync({});\n  }\n  const assetInfo = await assetJson.readAsync();\n  return { assetJson, assetInfo };\n};\n\n/*\n * Add .orig extension to a filename in a path string\n */\nexport const createNewFilename = image => {\n  const { dir, name, ext } = path.parse(image);\n  return path.join(dir, name + '.orig' + ext);\n};\n"],"sourceRoot":"/@expo/xdl@55.0.14/src"}