{"version":3,"sources":["Web.js"],"names":["isDebugModeEnabled","getenv","boolish","isInfoEnabled","shouldWebpackClearLogs","logEnvironmentInfo","projectRoot","tag","config","mode","logWarning","chalk","bold","async","invokePossibleFunctionAsync","objectOrMethod","args","await","applyEnvironmentVariables","output","pathinfo","optimization","minimize","invokeWebpackConfigAsync","env","argv","projectWebpackConfig","path","resolve","let","fs","existsSync","webpackConfig","require","createExpoWebpackConfigAsync","openProjectAsync","Doctor","validateWebSupportAsync","url","UrlUtils","constructWebAppUrlAsync","openBrowser","success","e","Logger","global","error","message","onlySupportsWebAsync","exp","readConfigJsonAsync","Array","isArray","platforms","length"],"mappings":"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","file":"../Web.js","sourcesContent":["import fs from 'fs-extra';\nimport path from 'path';\nimport openBrowser from 'react-dev-utils/openBrowser';\n\nimport getenv from 'getenv';\nimport chalk from 'chalk';\nimport Logger from './Logger';\nimport * as Doctor from './project/Doctor';\nimport { readConfigJsonAsync, logWarning } from './project/ProjectUtils';\nimport * as UrlUtils from './UrlUtils';\n\n// When you have errors in the production build that aren't present in the development build you can use `EXPO_WEB_DEBUG=true expo start --no-dev` to debug those errors.\n// - Prevent the production build from being minified\n// - Include file path info comments in the bundle\nexport function isDebugModeEnabled() {\n  return getenv.boolish('EXPO_WEB_DEBUG', false);\n}\n\nexport function isInfoEnabled() {\n  return getenv.boolish('EXPO_WEB_INFO', false);\n}\n\nexport function shouldWebpackClearLogs() {\n  return !isInfoEnabled() && !getenv.boolish('EXPO_DEBUG', false);\n}\n\nexport function logEnvironmentInfo(projectRoot, tag, config) {\n  if (isDebugModeEnabled() && config.mode === 'production') {\n    logWarning(\n      projectRoot,\n      tag,\n      `Webpack is bundling your project in \\`production\\` mode with the ${chalk.bold(\n        '`EXPO_WEB_DEBUG`'\n      )} environment variable enabled. You should toggle it off before building for production.`\n    );\n  }\n}\n\nasync function invokePossibleFunctionAsync(objectOrMethod, ...args) {\n  if (typeof objectOrMethod === 'function') {\n    return await objectOrMethod(...args);\n  } else {\n    return objectOrMethod;\n  }\n}\n\nfunction applyEnvironmentVariables(config) {\n  // Use EXPO_DEBUG_WEB=true to enable debugging features for cases where the prod build\n  // has errors that aren't caught in development mode.\n  // Related: https://github.com/expo/expo-cli/issues/614\n  if (isDebugModeEnabled() && config.mode === 'production') {\n    // TODO: Bacon: Should this throw if not running in prod mode?\n\n    // Add comments that describe the file import/exports.\n    // This will make it easier to debug.\n    config.output.pathinfo = true;\n    // Prevent minimizing when running in debug mode.\n    config.optimization.minimize = false;\n  }\n\n  return config;\n}\n\nexport async function invokeWebpackConfigAsync(env, argv) {\n  // Check if the project has a webpack.config.js in the root.\n  const projectWebpackConfig = path.resolve(env.projectRoot, 'webpack.config.js');\n  let config;\n  if (fs.existsSync(projectWebpackConfig)) {\n    const webpackConfig = require(projectWebpackConfig);\n    config = await invokePossibleFunctionAsync(webpackConfig, env, argv);\n  } else {\n    // Fallback to the default expo webpack config.\n    const createExpoWebpackConfigAsync = require('@expo/webpack-config');\n    config = await createExpoWebpackConfigAsync(env, argv);\n  }\n  return applyEnvironmentVariables(config);\n}\n\nexport async function openProjectAsync(projectRoot) {\n  await Doctor.validateWebSupportAsync(projectRoot);\n\n  try {\n    let url = await UrlUtils.constructWebAppUrlAsync(projectRoot);\n    openBrowser(url);\n    return { success: true, url };\n  } catch (e) {\n    Logger.global.error(`Couldn't start project on web: ${e.message}`);\n    return { success: false, error: e };\n  }\n}\n\n// If platforms only contains the \"web\" field\nexport async function onlySupportsWebAsync(projectRoot) {\n  const { exp } = await readConfigJsonAsync(projectRoot);\n  if (Array.isArray(exp.platforms) && exp.platforms.length === 1) {\n    return exp.platforms[0] === 'web';\n  }\n  return false;\n}\n"],"sourceRoot":"/@expo/xdl@55.0.14/src"}