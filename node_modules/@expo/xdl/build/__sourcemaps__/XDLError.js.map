{"version":3,"sources":["XDLError.ts"],"names":["ERROR_PREFIX","XDLError","ExtendableError","constructor","code","message","options","noTrack","startsWith","substring","length","isXDLError"],"mappings":";;;;;;;AAAA;;;;AAIA,MAAMA,YAAY,GAAG,SAArB;;AAEe,MAAMC,QAAN,SAAuBC,iBAAvB,CAAuC;AAIpDC,EAAAA,WAAW,CACTC,IADS,EAETC,OAFS,EAGTC,OAA6B,GAAG;AAAEC,IAAAA,OAAO,EAAE;AAAX,GAHvB,EAIT;AACA;AACA;AACA,QAAIF,OAAO,CAACG,UAAR,CAAmBR,YAAnB,CAAJ,EAAsC;AACpCK,MAAAA,OAAO,GAAGA,OAAO,CAACI,SAAR,CAAkBT,YAAY,CAACU,MAA/B,CAAV;AACD;;AAED,UAAML,OAAN;AAEA,SAAKD,IAAL,GAAYA,IAAZ;AACA,SAAKO,UAAL,GAAkB,IAAlB;AACD;;AAnBmD","sourcesContent":["import ExtendableError from 'es6-error';\n\nimport ErrorCode from './ErrorCode';\n\nconst ERROR_PREFIX = 'Error: ';\n\nexport default class XDLError extends ExtendableError {\n  code: string;\n  isXDLError: true;\n\n  constructor(\n    code: ErrorCode,\n    message: string,\n    options: { noTrack: boolean } = { noTrack: false }\n  ) {\n    // If e.toString() was called to get `message` we don't want it to look\n    // like \"Error: Error:\".\n    if (message.startsWith(ERROR_PREFIX)) {\n      message = message.substring(ERROR_PREFIX.length);\n    }\n\n    super(message);\n\n    this.code = code;\n    this.isXDLError = true;\n  }\n}\n"],"file":"../XDLError.js","sourceRoot":"/@expo/xdl@55.0.14/src"}