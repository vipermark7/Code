{"version":3,"sources":["UserSettings.ts"],"names":["SETTINGS_FILE_NAME","userSettingsFile","dir","dotExpoHomeDirectory","file","path","join","oldFile","fs","statSync","isFile","renameSync","e","userSettingsJsonFile","JsonFile","jsonParseErrorDefault","cantReadFileDefault","recentExpsJsonFile","mkdirped","dirPath","process","env","__UNSAFE_EXPO_HOME_DIRECTORY","home","Env","Error","EXPO_STAGING","EXPO_LOCAL","oldDirPath","isDirectory","mkdirpSync","anonymousIdentifier","settings","id","getAsync","uuid","v4","setAsync","UserSettings","Object","assign"],"mappings":"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","sourcesContent":["import fs from 'fs-extra';\nimport uuid from 'uuid';\nimport JsonFile, { JSONArray } from '@expo/json-file';\nimport path from 'path';\n\nimport { ConnectionType } from './User';\n\nimport * as Env from './Env';\n\nexport type UserSettingsData = {\n  auth?: UserData | null;\n  ignoreBundledBinaries?: string[];\n  openDevToolsAtStartup?: boolean;\n  PATH?: string;\n  sendTo?: string;\n  uuid?: string;\n};\n\nexport type UserData = {\n  userId?: string;\n  username?: string;\n  currentConnection?: ConnectionType;\n  sessionSecret?: string;\n};\n\nconst SETTINGS_FILE_NAME = 'state.json';\n\nfunction userSettingsFile(): string {\n  let dir = dotExpoHomeDirectory();\n  let file = path.join(dir, SETTINGS_FILE_NAME);\n  try {\n    // move exponent.json to state.json\n    let oldFile = path.join(dir, 'exponent.json');\n    if (fs.statSync(oldFile).isFile()) {\n      fs.renameSync(oldFile, file);\n    }\n  } catch (e) {\n    // no old directory, continue\n  }\n  return file;\n}\n\nfunction userSettingsJsonFile(): JsonFile<UserSettingsData> {\n  return new JsonFile<UserSettingsData>(userSettingsFile(), {\n    jsonParseErrorDefault: {},\n    cantReadFileDefault: {},\n  });\n}\n\nfunction recentExpsJsonFile() {\n  // TODO(ville): Add array support to JsonFile.\n  // @ts-ignore JsonFile doesn't officially support arrays, only objects\n  return new JsonFile<JSONArray>(path.join(dotExpoHomeDirectory(), 'xde-recent-exps.json'), {\n    jsonParseErrorDefault: [],\n    cantReadFileDefault: [],\n  });\n}\n\nvar mkdirped = false;\nfunction dotExpoHomeDirectory() {\n  let dirPath;\n  if (process.env.__UNSAFE_EXPO_HOME_DIRECTORY) {\n    dirPath = process.env.__UNSAFE_EXPO_HOME_DIRECTORY;\n  } else {\n    const home = Env.home();\n    if (!home) {\n      throw new Error(\n        \"Can't determine your home directory; make sure your $HOME environment variable is set.\"\n      );\n    }\n\n    if (process.env.EXPO_STAGING) {\n      dirPath = path.join(home, '.expo-staging');\n    } else if (process.env.EXPO_LOCAL) {\n      dirPath = path.join(home, '.expo-local');\n    } else {\n      dirPath = path.join(home, '.expo');\n    }\n\n    try {\n      // move .exponent to .expo\n      let oldDirPath = path.join(home, '.exponent');\n      if (fs.statSync(oldDirPath).isDirectory()) {\n        fs.renameSync(oldDirPath, dirPath);\n      }\n    } catch (e) {\n      // no old directory, continue\n    }\n  }\n  if (!mkdirped) {\n    fs.mkdirpSync(dirPath);\n    mkdirped = true;\n  }\n  return dirPath;\n}\n\n// returns an anonymous, unique identifier for a user on the current computer\nasync function anonymousIdentifier(): Promise<string> {\n  const settings = await userSettingsJsonFile();\n  let id = await settings.getAsync('uuid', null);\n\n  if (!id) {\n    id = uuid.v4();\n    await settings.setAsync('uuid', id);\n  }\n\n  return id;\n}\n\nconst UserSettings = Object.assign(userSettingsJsonFile(), {\n  dotExpoHomeDirectory,\n  recentExpsJsonFile,\n  userSettingsFile,\n  userSettingsJsonFile,\n  anonymousIdentifier,\n  SETTINGS_FILE_NAME,\n});\n\nexport default UserSettings;\n"],"file":"../UserSettings.js","sourceRoot":"/@expo/xdl@55.0.14/src"}