{"version":3,"sources":["credentials/AndroidCredentials.js"],"names":["NEWLINE","process","platform","javaExecutable","async","backupExistingCredentials","outputPath","username","experienceName","log","any","logger","info","bind","logSecrets","boolean","credentialMetadata","credentials","await","getCredentialsForPlatform","Error","keystore","keystorePassword","keystoreAlias","keyAlias","keyPassword","storeBuf","Buffer","from","fs","writeFileSync","chalk","yellow","bold","exportCertBinary","keystorePath","certFile","spawnAsync","exportCertBase64","exportPrivateKey","encryptionKey","let","nodePty","ptyTmpDir","require","err","mkdirp","cwd","stdio","cyan","ptySpawn","spawn","encryptToolPath","path","join","UserSettings","dotExpoHomeDirectory","existsSync","downloadUrl","file","createWriteStream","response","axios","url","method","responseType","bar","ProgressBar","complete","incomplete","width","total","parseInt","headers","data","pipe","on","chunk","tick","length","Promise","resolve","reject","res","rej","child","name","cols","rows","env","exitCode","write","error","remove","logKeystoreHashes","readFileSync","googleHash","crypto","createHash","update","digest","toUpperCase","googleHash256","fbHash","replace","code","warn","stdout","stderr","unlinkSync","logKeystoreCredentials","title","string","createKeystore","androidPackage","generateUploadKeystore","uploadKeystorePath","keystoreData","uuidv4","toString"],"mappings":";;;;;;;;;;;;;;AAEA;;AAEA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AAEA;;AACA;;AACA;;;;AAEA,MAAMA,OAAAA,GAAUC,OAAO,CAACC,QAARD,KAAqB,OAArBA,GAA+B,MAA/BA,GAAwC,IAAxD;AACA,MAAME,cAAAA,GAAiBF,OAAO,CAACC,QAARD,KAAqB,OAArBA,GAA+B,UAA/BA,GAA4C,MAAnE;;AASOG,eAAeC,yBAAfD,CACL;AAAEE,EAAAA,UAAF;AAAcC,EAAAA,QAAd;AAAwBC,EAAAA;AAAxB,CADKJ,EAELK,GAAKC,GAAMC,gBAAOC,IAAPD,CAAYE,IAAZF,CAAiBA,eAAjBA,CAFNP,EAGLU,UAAYC,GAAU,IAHjBX,EAIL;AACA,QAAMY,kBAAAA,GAAqB;AAAET,IAAAA,QAAF;AAAYC,IAAAA,cAAZ;AAA4BN,IAAAA,QAAQ,EAAE;AAAtC,GAA3B;AAEAO,EAAAA,GAAG,CAAE,mCAAkCD,cAAe,EAAnD,CAAHC;AAEA,QAAMQ,WAAAA,GAAeC,MAAMC,4CAA0BH,kBAA1BG,CAA3B;;AACA,MAAI,CAACF,WAAL,EAAkB;AAChB,UAAM,IAAIG,KAAJ,CAAU,wEAAV,CAAN;AACF;;AACA,QAAM;AAAEC,IAAAA,QAAF;AAAYC,IAAAA,gBAAZ;AAA8BC,IAAAA,aAAa,EAAEC,QAA7C;AAAuDC,IAAAA;AAAvD,MAAuER,WAA7E;AAEA,QAAMS,QAAAA,GAAWC,MAAM,CAACC,IAAPD,CAAYN,QAAZM,EAAsB,QAAtBA,CAAjB;AACAlB,EAAAA,GAAG,CAAE,uBAAsBH,UAAW,KAAnC,CAAHG;;AACAoB,mBAAGC,aAAHD,CAAiBvB,UAAjBuB,EAA6BH,QAA7BG;;AACA,MAAIf,UAAJ,EAAgB;AACdL,IAAAA,GAAG,CAAC,gCAAD,CAAHA;AACAA,IAAAA,GAAG,CAAE,GAAEsB,eAAMC,MAAND,CAAa,sCAAbA,CAAqD;;uBAEzCA,eAAME,IAANF,CAAWT,gBAAXS,CAA6B;uBAC7BA,eAAME,IAANF,CAAWP,QAAXO,CAAqB;uBACrBA,eAAME,IAANF,CAAWN,WAAXM,CAAwB;GAJxC,CAAHtB;AAMF;;AACA,SAAO;AACLa,IAAAA,gBADK;AAELE,IAAAA,QAFK;AAGLC,IAAAA;AAHK,GAAP;AAKF;;AAEOrB,eAAe8B,gBAAf9B,CACL+B,YADK/B,EAELkB,gBAFKlB,EAGLoB,QAHKpB,EAILgC,QAJKhC,EAKL;AACA,SAAOiC,yBAAW,SAAXA,EAAsB,CAC3B,aAD2B,EAE3B,WAF2B,EAG3BF,YAH2B,EAI3B,YAJ2B,EAK3Bb,gBAL2B,EAM3B,QAN2B,EAO3BE,QAP2B,EAQ3B,OAR2B,EAS3BY,QAT2B,EAU3B,WAV2B,EAW3B,YAX2B,EAY3B,KAZ2B,CAAtBC,CAAP;AAcF;;AAEOjC,eAAekC,gBAAflC,CACL+B,YADK/B,EAELkB,gBAFKlB,EAGLoB,QAHKpB,EAILgC,QAJKhC,EAKL;AACA,SAAOiC,yBAAW,SAAXA,EAAsB,CAC3B,SAD2B,EAE3B,MAF2B,EAG3B,WAH2B,EAI3BF,YAJ2B,EAK3B,YAL2B,EAM3Bb,gBAN2B,EAO3B,QAP2B,EAQ3BE,QAR2B,EAS3B,OAT2B,EAU3BY,QAV2B,EAW3B,WAX2B,EAY3B,YAZ2B,EAa3B,KAb2B,CAAtBC,CAAP;AAeF;;AAEOjC,eAAemC,gBAAfnC,CACL;AAAE+B,EAAAA,YAAF;AAAgBb,EAAAA,gBAAhB;AAAkCE,EAAAA,QAAlC;AAA4CC,EAAAA;AAA5C,CADKrB,EAELoC,aAFKpC,EAGLE,UAHKF,EAILK,GAAKC,GAAMC,gBAAOC,IAAPD,CAAYE,IAAZF,CAAiBA,eAAjBA,CAJNP,EAKL;AACAqC,MAAIC,OAAJD;AACA,QAAME,SAAAA,GAAY,sBAAlB;;AACA,MAAI;AACF;AACA;AACAD,IAAAA,OAAAA,GAAUE,OAAO,CAAC,mBAAD,CAAjBF;AACF,GAJA,CAIE,OAAOG,GAAP,EAAY;AACZ,QAAI;AACFpC,MAAAA,GAAG,CAAC,qDAAD,CAAHA;AACAS,YAAMW,iBAAGiB,MAAHjB,CAAUc,SAAVd,CAANX;AACAA,YAAMmB,yBAAW,KAAXA,EAAkB,CAAC,MAAD,EAAS,OAAT,CAAlBA,EAAqC;AAAEU,QAAAA,GAAG,EAAEJ;AAAP,OAArCN,CAANnB;AACAA,YAAMmB,yBAAW,KAAXA,EAAkB,CAAC,SAAD,EAAY,mBAAZ,CAAlBA,EAAoD;AACxDU,QAAAA,GAAG,EAAEJ,SADmD;AAExDK,QAAAA,KAAK,EAAE,CAAC,MAAD,EAAS,CAAT,EAAY,CAAZ;AAFiD,OAApDX,CAANnB;AAIAwB,MAAAA,OAAAA,GAAUE,OAAO,CAAE,GAAED,SAAU,iCAAd,CAAjBD;AACF,KATA,CASE,OAAOG,GAAP,EAAY;AACZpC,MAAAA,GAAG,CAAE,OAAMsB,eAAMkB,IAANlB,CAAW,kCAAXA,CAA+C,sBAAvD,CAAHtB;AACA,YAAM,IAAIW,KAAJ,CAAU,wDAAV,CAAN;AACF;AACF;;AACA,QAAM8B,QAAAA,GAAWR,OAAO,CAACS,KAAzB;;AACA,QAAMC,eAAAA,GAAkBC,cAAKC,IAALD,CAAUE,sBAAaC,oBAAbD,EAAVF,EAA+C,wBAA/CA,CAAxB;;AACA,MAAI,CAACxB,iBAAG4B,UAAH5B,CAAcuB,eAAdvB,CAAL,EAAqC;AACnCpB,IAAAA,GAAG,CAAE,6CAA4C2C,eAAgB,EAA9D,CAAH3C;AACA,UAAMiD,WAAAA,GACJ,8EADF;;AAEA,UAAMC,IAAAA,GAAO9B,iBAAG+B,iBAAH/B,CAAqBuB,eAArBvB,CAAb;;AACA,UAAMgC,QAAAA,GAAW3C,MAAM4C,oBAAM;AAAEC,MAAAA,GAAG,EAAEL,WAAP;AAAoBM,MAAAA,MAAM,EAAE,KAA5B;AAAmCC,MAAAA,YAAY,EAAE;AAAjD,KAANH,CAAvB;AACA,UAAMI,GAAAA,GAAM,IAAIC,iBAAJ,CAAgB,yDAAhB,EAA2E;AACrFC,MAAAA,QAAQ,EAAE,GAD2E;AAErFC,MAAAA,UAAU,EAAE,GAFyE;AAGrFC,MAAAA,KAAK,EAAE,EAH8E;AAIrFC,MAAAA,KAAK,EAAEC,QAAQ,CAACX,QAAQ,CAACY,OAATZ,CAAiB,gBAAjBA,CAAD,EAAqC,EAArC;AAJsE,KAA3E,CAAZ;AAMAA,IAAAA,QAAQ,CAACa,IAATb,CAAcc,IAAdd,CAAmBF,IAAnBE;AACAA,IAAAA,QAAQ,CAACa,IAATb,CAAce,EAAdf,CAAiB,MAAjBA,EAAyBgB,KAAAA,IAASX,GAAG,CAACY,IAAJZ,CAASW,KAAK,CAACE,MAAfb,CAAlCL;AACA3C,UAAM,IAAI8D,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;AACrCvB,MAAAA,IAAI,CAACiB,EAALjB,CAAQ,QAARA,EAAkBsB,OAAlBtB;AACAA,MAAAA,IAAI,CAACiB,EAALjB,CAAQ,OAARA,EAAiBuB,MAAjBvB;AACD,KAHK,CAANzC;AAIF;;AACA,MAAI;AACFA,UAAM,IAAI8D,OAAJ,CAAY,CAACG,GAAD,EAAMC,GAAN,KAAc;AAC9B,YAAMC,KAAAA,GAAQnC,QAAQ,CACpB/C,cADoB,EAEpB,CACE,MADF,EAEEiD,eAFF,EAGE,YAHF,EAIEjB,YAJF,EAKE,SALF,EAMEX,QANF,EAOE,UAPF,EAQElB,UARF,EASE,iBATF,EAUEkC,aAVF,CAFoB,EAcpB;AACE8C,QAAAA,IAAI,EAAE,WADR;AAEEC,QAAAA,IAAI,EAAE,EAFR;AAGEC,QAAAA,IAAI,EAAE,EAHR;AAIEzC,QAAAA,GAAG,EAAE9C,OAAO,CAAC8C,GAAR9C,EAJP;AAKEwF,QAAAA,GAAG,EAAExF,OAAO,CAACwF;AALf,OAdoB,CAAtB;AAsBAJ,MAAAA,KAAK,CAACT,EAANS,CAAS,OAATA,EAAkBxC,GAAAA,IAAO;AACvBpC,QAAAA,GAAG,CAAC,OAAD,EAAUoC,GAAV,CAAHpC;AACA2E,QAAAA,GAAG,CAACvC,GAAD,CAAHuC;AACD,OAHDC;AAIAA,MAAAA,KAAK,CAACT,EAANS,CAAS,MAATA,EAAiBK,QAAAA,IAAY;AAC3B,YAAIA,QAAAA,KAAa,CAAjB,EAAoB;AAClBN,UAAAA,GAAG,CAACM,QAAD,CAAHN;AACF,SAFA,MAEO;AACLD,UAAAA,GAAG;AACL;AACD,OANDE;AAOAA,MAAAA,KAAK,CAACM,KAANN,CAAY/D,gBAAAA,GAAmBtB,OAA/BqF;AACAA,MAAAA,KAAK,CAACM,KAANN,CAAY5D,WAAAA,GAAczB,OAA1BqF;AACD,KApCK,CAANnE;AAqCAT,IAAAA,GAAG,CAAE,0DAAyDH,UAAW,EAAtE,CAAHG;AACF,GAvCA,CAuCE,OAAOmF,KAAP,EAAc;AACd,UAAM,IAAIxE,KAAJ,CAAW,qCAAoCwE,KAAM,EAArD,CAAN;AACF,GAzCA,SAyCU;AACR/D,qBAAGgE,MAAHhE,CAAUc,SAAVd;AACF;AACF;;AAEOzB,eAAe0F,iBAAf1F,CACL;AAAE+B,EAAAA,YAAF;AAAgBb,EAAAA,gBAAhB;AAAkCE,EAAAA;AAAlC,CADKpB,EAELK,GAAKC,GAAMC,gBAAOC,IAAPD,CAAYE,IAAZF,CAAiBA,eAAjBA,CAFNP,EAGL;AACA,QAAMgC,QAAAA,GAAY,GAAED,YAAa,MAAjC;;AACA,MAAI;AACFjB,UAAMgB,gBAAgB,CAACC,YAAD,EAAeb,gBAAf,EAAiCE,QAAjC,EAA2CY,QAA3C,CAAtBlB;;AACA,UAAMwD,IAAAA,GAAO7C,iBAAGkE,YAAHlE,CAAgBO,QAAhBP,CAAb;;AACA,UAAMmE,UAAAA,GAAaC,gBAChBC,UADgBD,CACL,MADKA,EAEhBE,MAFgBF,CAETvB,IAFSuB,EAGhBG,MAHgBH,CAGT,KAHSA,EAIhBI,WAJgBJ,EAAnB;;AAKA,UAAMK,aAAAA,GAAgBL,gBACnBC,UADmBD,CACR,QADQA,EAEnBE,MAFmBF,CAEZvB,IAFYuB,EAGnBG,MAHmBH,CAGZ,KAHYA,EAInBI,WAJmBJ,EAAtB;;AAKA,UAAMM,MAAAA,GAASN,gBACZC,UADYD,CACD,MADCA,EAEZE,MAFYF,CAELvB,IAFKuB,EAGZG,MAHYH,CAGL,QAHKA,CAAf;;AAIAxF,IAAAA,GAAG,CAAE,uCAAsCuF,UAAU,CAACQ,OAAXR,CAAmB,cAAnBA,EAAmC,KAAnCA,CAA0C,EAAlF,CAAHvF;AACAA,IAAAA,GAAG,CAAE,uCAAsCuF,UAAW,EAAnD,CAAHvF;AACAA,IAAAA,GAAG,CAAE,uCAAsC6F,aAAc,EAAtD,CAAH7F;AACAA,IAAAA,GAAG,CAAE,uCAAsC8F,MAAO,EAA/C,CAAH9F;AACF,GArBA,CAqBE,OAAOoC,GAAP,EAAY;AACZ,QAAIA,GAAG,CAAC4D,IAAJ5D,KAAa,QAAjB,EAA2B;AACzBpC,MAAAA,GAAG,CAACiG,IAAJjG,CAAS,0CAATA;AACAA,MAAAA,GAAG,CAAC,uDAAD,CAAHA;AACAA,MAAAA,GAAG,CAAC,iEAAD,CAAHA;AACF;;AACA,QAAIoC,GAAG,CAAC8D,MAAR,EAAgB;AACdlG,MAAAA,GAAG,CAACoC,GAAG,CAAC8D,MAAL,CAAHlG;AACF;;AACA,QAAIoC,GAAG,CAAC+D,MAAR,EAAgB;AACdnG,MAAAA,GAAG,CAACmF,KAAJnF,CAAUoC,GAAG,CAAC+D,MAAdnG;AACF;;AACA,UAAMoC,GAAN;AACF,GAlCA,SAkCU;AACR,QAAI;AACFhB,uBAAGgF,UAAHhF,CAAcO,QAAdP;AACF,KAFA,CAEE,OAAOgB,GAAP,EAAY;AACZ,UAAIA,GAAG,CAAC4D,IAAJ5D,KAAa,QAAjB,EAA2B;AACzBpC,QAAAA,GAAG,CAACmF,KAAJnF,CAAUoC,GAAVpC;AACF;AACF;AACF;AACF;;AAEO,SAASqG,sBAAT,CACL;AAAExF,EAAAA,gBAAF;AAAoBE,EAAAA,QAApB;AAA8BC,EAAAA;AAA9B,CADK,EAELsF,KAAOC,GAAS,sBAFX,EAGLvG,GAAKC,GAAMC,gBAAOC,IAAPD,CAAYE,IAAZF,CAAiBA,eAAjBA,CAHN,EAIL;AACAF,EAAAA,GAAG,CAAE,GAAEsG,KAAM;yBACUhF,eAAME,IAANF,CAAWT,gBAAXS,CAA6B;yBAC7BA,eAAME,IAANF,CAAWP,QAAXO,CAAqB;yBACrBA,eAAME,IAANF,CAAWN,WAAXM,CAAwB;GAH5C,CAAHtB;AAKF;;AAEOL,eAAe6G,cAAf7G,CACL;AAAE+B,EAAAA,YAAF;AAAgBb,EAAAA,gBAAhB;AAAkCE,EAAAA,QAAlC;AAA4CC,EAAAA;AAA5C,CADKrB,EAEL8G,cAFK9G,EAGM;AACX,SAAOiC,yBAAW,SAAXA,EAAsB,CAC3B,SAD2B,EAE3B,IAF2B,EAG3B,YAH2B,EAI3Bf,gBAJ2B,EAK3B,UAL2B,EAM3BG,WAN2B,EAO3B,WAP2B,EAQ3BU,YAR2B,EAS3B,QAT2B,EAU3BX,QAV2B,EAW3B,SAX2B,EAY3B,KAZ2B,EAa3B,UAb2B,EAc3B,MAd2B,EAe3B,WAf2B,EAgB3B,OAhB2B,EAiB3B,QAjB2B,EAkB1B,MAAK0F,cAAe,oBAlBM,CAAtB7E,CAAP;AAoBF;;AAEOjC,eAAe+G,sBAAf/G,CACLgH,kBADKhH,EAEL8G,cAFK9G,EAGLI,cAHKJ,EAIY;AACjB,QAAMiH,YAAAA,GAAe;AACnB/F,IAAAA,gBAAgB,EAAEgG,kBAASd,OAATc,CAAiB,IAAjBA,EAAuB,EAAvBA,CADC;AAEnB7F,IAAAA,WAAW,EAAE6F,kBAASd,OAATc,CAAiB,IAAjBA,EAAuB,EAAvBA,CAFM;AAGnB9F,IAAAA,QAAQ,EAAEG,MAAM,CAACC,IAAPD,CAAYnB,cAAZmB,EAA4B4F,QAA5B5F,CAAqC,QAArCA;AAHS,GAArB;AAKAT,QAAM+F,cAAc,CAAC;AAAE9E,IAAAA,YAAY,EAAEiF,kBAAhB;AAAoC,OAAGC;AAAvC,GAAD,EAAwDH,cAAxD,CAApBhG;AACA,SAAOmG,YAAP;AACF","file":"../../credentials/AndroidCredentials.js","sourcesContent":["/* @flow */\n\nimport path from 'path';\n\nimport fs from 'fs-extra';\nimport chalk from 'chalk';\nimport crypto from 'crypto';\nimport uuidv4 from 'uuid/v4';\nimport spawnAsync from '@expo/spawn-async';\nimport axios from 'axios';\nimport ProgressBar from 'progress';\n\nimport { getCredentialsForPlatform } from './Credentials';\nimport logger from '../Logger';\nimport UserSettings from '../UserSettings';\n\nconst NEWLINE = process.platform === 'win32' ? '\\r\\n' : '\\n';\nconst javaExecutable = process.platform === 'win32' ? 'java.exe' : 'java';\n\nexport type Credentials = {\n  keystore: string,\n  keystorePassword: string,\n  keyPassword: string,\n  keystoreAlias: string,\n};\n\nexport async function backupExistingCredentials(\n  { outputPath, username, experienceName }: Object,\n  log: any = logger.info.bind(logger),\n  logSecrets: boolean = true\n) {\n  const credentialMetadata = { username, experienceName, platform: 'android' };\n\n  log(`Retreiving Android keystore for ${experienceName}`);\n\n  const credentials = (await getCredentialsForPlatform(credentialMetadata): any);\n  if (!credentials) {\n    throw new Error('Unable to fetch credentials for this project. Are you sure they exist?');\n  }\n  const { keystore, keystorePassword, keystoreAlias: keyAlias, keyPassword } = credentials;\n\n  const storeBuf = Buffer.from(keystore, 'base64');\n  log(`Writing keystore to ${outputPath}...`);\n  fs.writeFileSync(outputPath, storeBuf);\n  if (logSecrets) {\n    log('Done writing keystore to disk.');\n    log(`${chalk.yellow('Save these important values as well:')}\n\n  Keystore password: ${chalk.bold(keystorePassword)}\n  Key alias:         ${chalk.bold(keyAlias)}\n  Key password:      ${chalk.bold(keyPassword)}\n  `);\n  }\n  return {\n    keystorePassword,\n    keyAlias,\n    keyPassword,\n  };\n}\n\nexport async function exportCertBinary(\n  keystorePath: string,\n  keystorePassword: string,\n  keyAlias: string,\n  certFile: string\n) {\n  return spawnAsync('keytool', [\n    '-exportcert',\n    '-keystore',\n    keystorePath,\n    '-storepass',\n    keystorePassword,\n    '-alias',\n    keyAlias,\n    '-file',\n    certFile,\n    '-noprompt',\n    '-storetype',\n    'JKS',\n  ]);\n}\n\nexport async function exportCertBase64(\n  keystorePath: string,\n  keystorePassword: string,\n  keyAlias: string,\n  certFile: string\n) {\n  return spawnAsync('keytool', [\n    '-export',\n    '-rfc',\n    '-keystore',\n    keystorePath,\n    '-storepass',\n    keystorePassword,\n    '-alias',\n    keyAlias,\n    '-file',\n    certFile,\n    '-noprompt',\n    '-storetype',\n    'JKS',\n  ]);\n}\n\nexport async function exportPrivateKey(\n  { keystorePath, keystorePassword, keyAlias, keyPassword }: Object,\n  encryptionKey: string,\n  outputPath: string,\n  log: any = logger.info.bind(logger)\n) {\n  let nodePty;\n  const ptyTmpDir = '/tmp/pty-tmp-install';\n  try {\n    // it's not very pretty solution, but we decided to use it because it's affecting only people using\n    // this command and if node-pty is supported on that system instalation process will be invisble for user.\n    nodePty = require('node-pty-prebuilt');\n  } catch (err) {\n    try {\n      log('Installing node-pty-prebuilt in temporary directory');\n      await fs.mkdirp(ptyTmpDir);\n      await spawnAsync('npm', ['init', '--yes'], { cwd: ptyTmpDir });\n      await spawnAsync('npm', ['install', 'node-pty-prebuilt'], {\n        cwd: ptyTmpDir,\n        stdio: ['pipe', 1, 2],\n      });\n      nodePty = require(`${ptyTmpDir}/node_modules/node-pty-prebuilt`);\n    } catch (err) {\n      log(`Run ${chalk.cyan('npm -g install node-pty-prebuilt')} to install node pty`);\n      throw new Error('Package node-pty-prebuilt is required to use PEPK tool');\n    }\n  }\n  const ptySpawn = nodePty.spawn;\n  const encryptToolPath = path.join(UserSettings.dotExpoHomeDirectory(), 'android_tools_pepk.jar');\n  if (!fs.existsSync(encryptToolPath)) {\n    log(`Downloading PEPK tool from Google Play to ${encryptToolPath}`);\n    const downloadUrl =\n      'https://www.gstatic.com/play-apps-publisher-rapid/signing-tool/prod/pepk.jar';\n    const file = fs.createWriteStream(encryptToolPath);\n    const response = await axios({ url: downloadUrl, method: 'GET', responseType: 'stream' });\n    const bar = new ProgressBar('  downloading pepk tool [:bar] :rate/bps :percent :etas', {\n      complete: '=',\n      incomplete: ' ',\n      width: 40,\n      total: parseInt(response.headers['content-length'], 10),\n    });\n    response.data.pipe(file);\n    response.data.on('data', chunk => bar.tick(chunk.length));\n    await new Promise((resolve, reject) => {\n      file.on('finish', resolve);\n      file.on('error', reject);\n    });\n  }\n  try {\n    await new Promise((res, rej) => {\n      const child = ptySpawn(\n        javaExecutable,\n        [\n          '-jar',\n          encryptToolPath,\n          '--keystore',\n          keystorePath,\n          '--alias',\n          keyAlias,\n          '--output',\n          outputPath,\n          '--encryptionkey',\n          encryptionKey,\n        ],\n        {\n          name: 'pepk tool',\n          cols: 80,\n          rows: 30,\n          cwd: process.cwd(),\n          env: process.env,\n        }\n      );\n      child.on('error', err => {\n        log('error', err);\n        rej(err);\n      });\n      child.on('exit', exitCode => {\n        if (exitCode !== 0) {\n          rej(exitCode);\n        } else {\n          res();\n        }\n      });\n      child.write(keystorePassword + NEWLINE);\n      child.write(keyPassword + NEWLINE);\n    });\n    log(`Exported and encrypted private app signing key to file ${outputPath}`);\n  } catch (error) {\n    throw new Error(`PEPK tool failed with return code ${error}`);\n  } finally {\n    fs.remove(ptyTmpDir);\n  }\n}\n\nexport async function logKeystoreHashes(\n  { keystorePath, keystorePassword, keyAlias }: Object,\n  log: any = logger.info.bind(logger)\n) {\n  const certFile = `${keystorePath}.cer`;\n  try {\n    await exportCertBinary(keystorePath, keystorePassword, keyAlias, certFile);\n    const data = fs.readFileSync(certFile);\n    const googleHash = crypto\n      .createHash('sha1')\n      .update(data)\n      .digest('hex')\n      .toUpperCase();\n    const googleHash256 = crypto\n      .createHash('sha256')\n      .update(data)\n      .digest('hex')\n      .toUpperCase();\n    const fbHash = crypto\n      .createHash('sha1')\n      .update(data)\n      .digest('base64');\n    log(`Google Certificate Fingerprint:     ${googleHash.replace(/(.{2}(?!$))/g, '$1:')}`);\n    log(`Google Certificate Hash (SHA-1):    ${googleHash}`);\n    log(`Google Certificate Hash (SHA-256):  ${googleHash256}`);\n    log(`Facebook Key Hash:                  ${fbHash}`);\n  } catch (err) {\n    if (err.code === 'ENOENT') {\n      log.warn('Are you sure you have keytool installed?');\n      log('keytool is part of OpenJDK: https://openjdk.java.net/');\n      log('Also make sure that keytool is in your PATH after installation.');\n    }\n    if (err.stdout) {\n      log(err.stdout);\n    }\n    if (err.stderr) {\n      log.error(err.stderr);\n    }\n    throw err;\n  } finally {\n    try {\n      fs.unlinkSync(certFile);\n    } catch (err) {\n      if (err.code !== 'ENOENT') {\n        log.error(err);\n      }\n    }\n  }\n}\n\nexport function logKeystoreCredentials(\n  { keystorePassword, keyAlias, keyPassword }: Object,\n  title: string = 'Keystore credentials',\n  log: any = logger.info.bind(logger)\n) {\n  log(`${title}\n    Keystore password: ${chalk.bold(keystorePassword)}\n    Key alias:         ${chalk.bold(keyAlias)}\n    Key password:      ${chalk.bold(keyPassword)}\n  `);\n}\n\nexport async function createKeystore(\n  { keystorePath, keystorePassword, keyAlias, keyPassword }: Object,\n  androidPackage: string\n): Promise<> {\n  return spawnAsync('keytool', [\n    '-genkey',\n    '-v',\n    '-storepass',\n    keystorePassword,\n    '-keypass',\n    keyPassword,\n    '-keystore',\n    keystorePath,\n    '-alias',\n    keyAlias,\n    '-keyalg',\n    'RSA',\n    '-keysize',\n    '2048',\n    '-validity',\n    '10000',\n    '-dname',\n    `CN=${androidPackage},OU=,O=,L=,S=,C=US`,\n  ]);\n}\n\nexport async function generateUploadKeystore(\n  uploadKeystorePath: string,\n  androidPackage: string,\n  experienceName: string\n): Promise<Object> {\n  const keystoreData = {\n    keystorePassword: uuidv4().replace(/-/g, ''),\n    keyPassword: uuidv4().replace(/-/g, ''),\n    keyAlias: Buffer.from(experienceName).toString('base64'),\n  };\n  await createKeystore({ keystorePath: uploadKeystorePath, ...keystoreData }, androidPackage);\n  return keystoreData;\n}\n"],"sourceRoot":"/@expo/xdl@55.0.14/src"}