{"version":3,"sources":["credentials/IosCredentials.js"],"names":["async","getExistingDistCerts","username","appleTeamId","options","distCerts","await","getExistingUserCredentials","formatDistCerts","map","usedByApps","userCredentialsId","certId","certP12","certPassword","serialNumber","IosCodeSigning","findP12CertSerialNumber","let","name","join","value","distCertSerialNumber","provideFullCertificate","String","getExistingPushKeys","pushKeys","formatPushKeys","apnsKeyId","apnsKeyP8","provideFullPushKey","short","type","err","certs","Api","callMethodAsync","Error","rest","split"],"mappings":"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","file":"../../credentials/IosCredentials.js","sourcesContent":["/* @flow */\n\nimport Api from '../Api';\nimport * as IosCodeSigning from '../detach/IosCodeSigning';\n\nexport type Credentials = {\n  appleId?: string,\n  password?: string,\n  teamId?: string,\n  certP12?: string,\n  certPassword?: string,\n  pushP12?: string,\n  pushPassword?: string,\n  provisioningProfile?: string,\n  enterpriseAccount?: string,\n  // These are ids on the spaceship object (implementation detail), Spaceship::Portal::Certificate\n  certId?: string,\n  pushId?: string,\n  provisioningProfileId?: string,\n};\n\nexport type CredObject = {\n  name: string,\n  value: {\n    userCredentialsId?: string,\n    serialNumber?: string,\n  },\n};\n\nexport type CredsList = Array<CredObject>;\n\nexport async function getExistingDistCerts(\n  username: string,\n  appleTeamId: string,\n  options: { provideFullCertificate?: boolean } = {}\n): Promise<?CredsList> {\n  const distCerts = await getExistingUserCredentials(username, appleTeamId, 'dist-cert');\n  return formatDistCerts(distCerts, options);\n}\n\nexport function formatDistCerts(distCerts, options) {\n  return distCerts.map(({ usedByApps, userCredentialsId, certId, certP12, certPassword }) => {\n    const serialNumber = IosCodeSigning.findP12CertSerialNumber(certP12, certPassword);\n    let name = `Serial number: ${serialNumber}`;\n    if (certId) {\n      name = `${name}, Certificate ID: ${certId}`;\n    }\n    if (usedByApps) {\n      name = `Used in apps: ${usedByApps.join(', ')} (${name})`;\n    }\n    return {\n      value: {\n        distCertSerialNumber: serialNumber,\n        ...(options.provideFullCertificate\n          ? { certP12, certId, certPassword }\n          : { userCredentialsId: String(userCredentialsId) }),\n      },\n      name,\n    };\n  });\n}\n\nexport async function getExistingPushKeys(\n  username: string,\n  appleTeamId: string,\n  options: { provideFullPushKey?: boolean } = {}\n): Promise<?CredsList> {\n  const pushKeys = await getExistingUserCredentials(username, appleTeamId, 'push-key');\n  return formatPushKeys(pushKeys, options);\n}\n\nexport function formatPushKeys(pushKeys, options) {\n  return pushKeys.map(({ usedByApps, userCredentialsId, apnsKeyId, apnsKeyP8 }) => {\n    let name = `Key ID: ${apnsKeyId}`;\n    if (usedByApps) {\n      name = `Used in apps: ${usedByApps.join(', ')} (${name})`;\n    }\n    return {\n      value: {\n        ...(options.provideFullPushKey\n          ? { apnsKeyId, apnsKeyP8 }\n          : { userCredentialsId: String(userCredentialsId) }),\n      },\n      name,\n      short: apnsKeyId,\n    };\n  });\n}\n\nasync function getExistingUserCredentials(\n  username: string,\n  appleTeamId: string,\n  type: string\n): Promise<?CredsList> {\n  const { err, certs } = await Api.callMethodAsync('getExistingUserCredentials', [], 'post', {\n    username,\n    appleTeamId,\n    type,\n  });\n\n  if (err) {\n    throw new Error('Error getting existing distribution certificates.');\n  } else {\n    return certs.map(({ usedByApps, userCredentialsId, ...rest }) => ({\n      usedByApps: usedByApps && usedByApps.split(';'),\n      userCredentialsId: String(userCredentialsId),\n      ...rest,\n    }));\n  }\n}\n"],"sourceRoot":"/@expo/xdl@55.0.14/src"}