{"version":3,"sources":["credentials/Credentials.js"],"names":["async","credentialsExistForPlatformAsync","metadata","creds","await","fetchCredentials","getEncryptedCredentialsForPlatformAsync","getCredentialsForPlatform","username","experienceName","bundleIdentifier","platform","decrypt","err","credentials","Api","callMethodAsync","Error","updateCredentialsForPlatform","newCredentials","userCredentialsIds","removeCredentialsForPlatform"],"mappings":";;;;;;;;;;;;AAEA;;AACA;;;;AACA;;;;;;;;AAaOA,eAAeC,gCAAfD,CACLE,QADKF,EAEkB;AACvB,QAAMG,KAAAA,GAAQC,MAAMC,gBAAgB,CAACH,QAAD,EAAW,KAAX,CAApC;AACA,SAAO,CAAC,CAAEC,KAAV,CAFuB,CAEF;AACvB;;AAEOH,eAAeM,uCAAfN,CACLE,QADKF,EAEkB;AACvB,SAAOK,gBAAgB,CAACH,QAAD,EAAW,KAAX,CAAvB;AACF;;AAEOF,eAAeO,yBAAfP,CACLE,QADKF,EAEkB;AACvB,SAAOK,gBAAgB,CAACH,QAAD,EAAW,IAAX,CAAvB;AACF;;AAEAF,eAAeK,gBAAfL,CACE;AAAEQ,EAAAA,QAAF;AAAYC,EAAAA,cAAZ;AAA4BC,EAAAA,gBAA5B;AAA8CC,EAAAA;AAA9C,CADFX,EAEEY,OAFFZ,EAGyB;AACvB;AACA,QAAM;AAAEa,IAAAA,GAAF;AAAOC,IAAAA;AAAP,MAAuBV,MAAMW,aAAIC,eAAJD,CAAoB,gBAApBA,EAAsC,EAAtCA,EAA0C,MAA1CA,EAAkD;AACnFP,IAAAA,QADmF;AAEnFC,IAAAA,cAFmF;AAGnFC,IAAAA,gBAHmF;AAInFC,IAAAA,QAJmF;AAKnFC,IAAAA;AALmF,GAAlDG,CAAnC;;AAQA,MAAIF,GAAJ,EAAS;AACP,UAAM,IAAII,KAAJ,CAAU,6BAAV,CAAN;AACF;;AAEA,SAAOH,WAAP;AACF;;AAEOd,eAAekB,4BAAflB,CACLW,QADKX,EAELmB,cAFKnB,EAGLoB,kBAHKpB,EAILE,QAJKF,EAKU;AACf,QAAM;AAAEa,IAAAA,GAAF;AAAOC,IAAAA;AAAP,MAAuBV,MAAMW,aAAIC,eAAJD,CAAoB,mBAApBA,EAAyC,EAAzCA,EAA6C,MAA7CA,EAAqD;AACtFD,IAAAA,WAAW,EAAEK,cADyE;AAEtFC,IAAAA,kBAFsF;AAGtFT,IAAAA,QAHsF;AAItF,OAAGT;AAJmF,GAArDa,CAAnC;;AAOA,MAAIF,GAAAA,IAAO,CAACC,WAAZ,EAAyB;AACvB,UAAM,IAAIG,KAAJ,CAAU,6BAAV,CAAN;AACF;AACF;;AAEOjB,eAAeqB,4BAAfrB,CACLW,QADKX,EAELE,QAFKF,EAGU;AACf;AACA,QAAM;AAAEa,IAAAA;AAAF,MAAUT,MAAMW,aAAIC,eAAJD,CAAoB,mBAApBA,EAAyC,EAAzCA,EAA6C,MAA7CA,EAAqD;AACzEJ,IAAAA,QADyE;AAEzE,OAAGT;AAFsE,GAArDa,CAAtB;;AAKA,MAAIF,GAAJ,EAAS;AACP,UAAM,IAAII,KAAJ,CAAU,6BAAV,CAAN;AACF;AACF","file":"../../credentials/Credentials.js","sourcesContent":["/* @flow */\n\nimport Api from '../Api';\nimport * as Android from './AndroidCredentials';\nimport * as Ios from './IosCredentials';\n\nexport type Credentials = Ios.Credentials | Android.Credentials;\n\nexport type CredentialMetadata = {\n  username: string,\n  experienceName: string,\n  bundleIdentifier?: string,\n  platform: string,\n};\n\nexport { Android, Ios };\n\nexport async function credentialsExistForPlatformAsync(\n  metadata: CredentialMetadata\n): Promise<?Credentials> {\n  const creds = await fetchCredentials(metadata, false);\n  return !!(creds: any); // !! performed on awaited creds\n}\n\nexport async function getEncryptedCredentialsForPlatformAsync(\n  metadata: CredentialMetadata\n): Promise<?Credentials> {\n  return fetchCredentials(metadata, false);\n}\n\nexport async function getCredentialsForPlatform(\n  metadata: CredentialMetadata\n): Promise<?Credentials> {\n  return fetchCredentials(metadata, true);\n}\n\nasync function fetchCredentials(\n  { username, experienceName, bundleIdentifier, platform }: CredentialMetadata,\n  decrypt: boolean\n): Promise<?Credentials> {\n  // this doesn't hit our mac rpc channel, so it needs significantly less debugging\n  const { err, credentials } = await Api.callMethodAsync('getCredentials', [], 'post', {\n    username,\n    experienceName,\n    bundleIdentifier,\n    platform,\n    decrypt,\n  });\n\n  if (err) {\n    throw new Error('Error fetching credentials.');\n  }\n\n  return credentials;\n}\n\nexport async function updateCredentialsForPlatform(\n  platform: string,\n  newCredentials: Credentials,\n  userCredentialsIds: Array<number>,\n  metadata: CredentialMetadata\n): Promise<void> {\n  const { err, credentials } = await Api.callMethodAsync('updateCredentials', [], 'post', {\n    credentials: newCredentials,\n    userCredentialsIds,\n    platform,\n    ...metadata,\n  });\n\n  if (err || !credentials) {\n    throw new Error('Error updating credentials.');\n  }\n}\n\nexport async function removeCredentialsForPlatform(\n  platform: string,\n  metadata: CredentialMetadata\n): Promise<void> {\n  // doesn't go through mac rpc, no request id needed\n  const { err } = await Api.callMethodAsync('deleteCredentials', [], 'post', {\n    platform,\n    ...metadata,\n  });\n\n  if (err) {\n    throw new Error('Error deleting credentials.');\n  }\n}\n"],"sourceRoot":"/@expo/xdl@55.0.14/src"}