{"version":3,"sources":["Project.js"],"names":["EXPO_CDN","MINIMUM_BUNDLE_SIZE","TUNNEL_TIMEOUT","treekillAsync","promisify","treekill","ngrokConnectAsync","ngrok","connect","ngrokKillAsync","kill","let","_cachedSignedManifest","CachedSignedManifest","manifestString","signedManifest","async","currentStatus","projectDir","packagerPort","expoServerPort","await","ProjectSettings","readPackagerInfoAsync","getManifestUrlWithFallbackAsync","projectRoot","url","UrlUtils","constructManifestUrlAsync","isUrlFallback","_assertValidProjectRoot","XDLError","_getFreePortAsync","rangeStart","port","freeportAsync","_getForPlatformAsync","platform","errorCode","minLength","getPlatformSpecificBundleUrl","fullUrl","response","axios","get","responseType","transformResponse","data","proxy","validateStatus","status","headers","error","body","JSON","parse","e","ProjectUtils","logError","message","length","_resolveGoogleServicesFile","manifest","android","googleServicesFile","contents","fs","readFile","path","resolve","_resolveManifestAssets","resolver","strict","assetSchemas","ExpSchema","getAssetSchemasAsync","sdkVersion","filter","fieldPath","urls","Promise","all","map","pathOrURL","match","existsSync","err","Error","localAssetPath","manifestField","forEach","index","set","logMethod","logWarning","_requireFromProject","modulePath","exp","fullPath","ConfigUtils","resolveModule","decache","require","getSlugAsync","options","Object","pkg","readConfigJsonAsync","configName","configFilenameAsync","slug","name","getLatestReleaseAsync","formData","FormData","append","releaseChannel","queryResult","Api","callMethodAsync","mergeAppDistributions","sourceDirs","outputDir","assetPathToWrite","ensureDir","bundlesPathToWrite","androidIndexes","iosIndexes","sourceDir","promises","sourceAssetDir","outputAssetDir","assetPromise","copy","push","sourceBundleDir","outputBundleDir","bundlePromise","putJsonInMemory","indexPath","accumulator","JsonFile","readAsync","Array","isArray","androidIndexPath","iosIndexPath","getSortedIndex","indexes","sort","index1","index2","semver","eq","logger","global","gte","sortedAndroidIndexes","sortedIosIndexes","_writeArtifactSafelyAsync","join","stringify","exportForAppHosting","publicUrl","assetUrl","_validatePackagerReadyAsync","packagerOpts","dev","isDev","minify","iosBundle","androidBundle","_buildPublishBundlesAsync","iosBundleHash","crypto","createHash","update","digest","iosBundleUrl","iosJsPath","androidBundleHash","androidBundleUrl","androidJsPath","info","publishOptions","_getPublishExpConfigAsync","assets","_fetchAndSaveAssetsAsync","dumpAssetmap","assetmap","asset","hash","hooks","assetUrlOverride","publishedTime","Date","toISOString","commitTime","hashIds","HashIds","uuid","v1","revisionId","encode","now","developer","tool","username","UserManager","getCurrentUsernameAsync","ANONYMOUS_USERNAME","id","bundleUrl","urljoin","dependencies","keys","dumpSourcemap","iosSourceMap","androidSourceMap","_maybeBuildSourceMapsAsync","force","iosMapName","iosMapPath","androidMapName","androidMapPath","truncateLastNLines","appendFile","debugHtml","filePath","n","lines","readLastLines","read","to_vanquish","size","stat","truncate","_saveAssetAsync","paths","files","fileHashes","keyChunks","chunk","key","logDebug","quiet","assetPath","p","findReusableBuildAsync","user","getCurrentUserAsync","buildReuseStatus","ApiV2","clientForUser","postAsync","publishAsync","ensureLoggedInAsync","Analytics","logEvent","developerTool","Config","validationStatus","Doctor","validateWithNetworkAsync","ERROR","FATAL","validPostPublishHooks","postPublish","hook","file","fn","_fn","_fetchAndUploadAssetsAsync","_uploadArtifactsAsync","serverError","Sentry","captureException","_maybeWriteArtifactsToDiskAsync","ios","publishManifestPath","androidManifest","iosManifest","ExponentTools","getManifestAsync","Accept","hookOptions","log","msg","result","config","then","warn","stack","context","StandaloneContext","createUserContext","supportingDirectory","IosWorkspace","getPaths","IosPlist","modifyAsync","shellPlist","publishBundlePath","fullManifestUrl","replace","constantsPath","deleteLinesInFileAsync","regexFileAsync","isKernel","_handleKernelPublishedAsync","packagerInfo","startReactNativeServerAsync","reset","schema","joi","object","string","validate","toString","version","process","env","locales","getResolvedLocalesAsync","opts","entryPoint","Exp","determineEntryPointAsync","publishUrl","constructPublishUrlAsync","sourceMapUrl","constructSourceMapUrlAsync","_collectAssets","hostedAssetPrefix","assetsUrl","constructAssetsUrlAsync","iosAssetsJson","androidAssetsJson","manifestAssets","absolutePath","md5hex","iosAssets","androidAssets","concat","_configureExpForAssets","assetBundlePatterns","fullPatterns","bundledAssets","Set","shouldBundle","__packager_asset","some","minimatch","add","type","assetCdnPath","uploadAssetsAsync","hostedUrl","keyName","artifactPath","artifact","pathToWrite","dirname","errorMsg","writeFile","publishSourceMapPath","kernelBundleUrl","api","scheme","host","kernel","androidManifestPath","iosManifestPath","metas","metadata","missing","exists","relativePath","createReadStream","getConfigAsync","configPrefix","ThirdParty","getManifest","buildAsync","current","boolean","mode","any","valid","expIds","array","regex","bundleIdentifier","package","_waitForRunningAsync","retries","test","delayAsync","_logPackagerOutput","level","output","_isIgnorableDuplicateModuleWarning","logInfo","startsWith","reactNativeNodeModulesPath","reactNativeNodeModulesPattern","escapeRegExp","reactNativeNodeModulesCollisionRegex","RegExp","_isIgnorableBugReportingExtraData","_isAppRegistryStartupMessage","_handleDeviceLogs","deviceId","deviceName","logs","i","DEBUG","obj","logWithLevel","tag","groupDepth","shouldHide","includesStack","verbose","stopReactNativeServerAsync","Watchman","addToPathAsync","unblockAndGetVersionAsync","customLogReporterPath","assetExts","nonPersistent","Versions","gteSdkVersion","assetPlugins","maxWorkers","userPackagerOpts","uniq","undefined","cliOpts","reduce","val","defaultCliPath","cliPath","rnCliPath","nodePath","_nodePathForProjectRoot","packagerProcess","child_process","fork","cwd","REACT_NATIVE_APP_ROOT","NODE_PATH","ELECTRON_RUN_AS_NODE","silent","setPackagerInfoAsync","packagerPid","pid","on","stdout","setEncoding","stderr","pipe","split","exitPromise","reject","once","code","packagerUrl","constructBundleUrlAsync","urlType","hostType","race","directory","parentDirectory","delimiter","blacklistedEnvironmentVariables","shouldExposeEnvironmentVariableInManifest","has","toUpperCase","startExpoServerAsync","stopExpoServerAsync","app","express","use","json","limit","urlencoded","extended","manifestHandler","req","res","getPackagerOptsAsync","bundleUrlPackagerOpts","xde","mainModuleName","guessMainModulePath","queryParams","constructBundleQueryParamsAsync","hostname","encodeURI","encodeURIComponent","debuggerHost","constructDebuggerHostAsync","logUrl","constructLogUrlAsync","hostUri","constructHostUriAsync","hostUUID","UserSettings","anonymousIdentifier","currentSession","getSessionAsync","offline","unsignedManifest","signature","publishInfo","getPublishInfoAsync","args","hostInfo","server","serverVersion","serverDriver","serverOS","os","serverOSVersion","release","send","post","close","expRc","readExpRcAsync","manifestPort","listen","address","saveRecentExpRootAsync","_connectToNgrokAsync","hostnameAsync","ngrokPid","attempts","number","configPath","dotExpoHomeDirectory","error_code","resetProjectRandomnessAsync","startTunnelsAsync","stopTunnelsAsync","Android","startAdbReverseAsync","packageShortName","base","startedTunnelsSuccessfully","expoServerNgrokUrl","authtoken","authToken","proto","randomness","manifestTunnelRandomness","getProjectRandomnessAsync","domainify","domain","packagerNgrokUrl","_expoEventType","addListener","ngrokProcess","ngrokProcessPid","removeAllListeners","stopAdbReverseAsync","setOptionsAsync","integer","getUrlAsync","optimizeAsync","chalk","green","assetJson","assetInfo","readAssetJsonAsync","outdated","fileHash","totalSaved","allFiles","selectedFiles","getAssetFilesAsync","hashes","image","calculateHash","delete","outdatedHash","quality","include","exclude","save","images","prevSize","statSync","newName","createNewFilename","optimizedImage","optimizeImageAsync","newSize","amountSaved","move","gray","newHash","unlinkSync","toReadableValue","writeAsync","startAsync","webOnly","Webpack","DevSession","startSession","_stopInternalAsync","stopSession","hasWebSupport","hasWebSupportAsync","stopAsync","setTimeout","webpackServerPort"],"mappings":"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","file":"../Project.js","sourcesContent":["/**\n * @flow\n */\nimport axios from 'axios';\nimport chalk from 'chalk';\nimport child_process from 'child_process';\nimport crypto from 'crypto';\nimport delayAsync from 'delay-async';\nimport decache from 'decache';\nimport express from 'express';\nimport freeportAsync from 'freeport-async';\nimport fs from 'fs-extra';\nimport HashIds from 'hashids';\nimport joi from 'joi';\nimport JsonFile from '@expo/json-file';\nimport promisify from 'util.promisify';\nimport chunk from 'lodash/chunk';\nimport escapeRegExp from 'lodash/escapeRegExp';\nimport get from 'lodash/get';\nimport reduce from 'lodash/reduce';\nimport set from 'lodash/set';\nimport uniq from 'lodash/uniq';\nimport minimatch from 'minimatch';\nimport ngrok from '@expo/ngrok';\nimport os from 'os';\nimport path from 'path';\nimport semver from 'semver';\nimport split from 'split';\nimport treekill from 'tree-kill';\nimport md5hex from 'md5hex';\nimport urljoin from 'url-join';\nimport uuid from 'uuid';\nimport readLastLines from 'read-last-lines';\n\nimport * as ConfigUtils from '@expo/config';\nimport * as Analytics from './Analytics';\nimport * as Android from './Android';\nimport Api from './Api';\nimport ApiV2 from './ApiV2';\nimport {\n  readAssetJsonAsync,\n  getAssetFilesAsync,\n  optimizeImageAsync,\n  calculateHash,\n  createNewFilename,\n  toReadableValue,\n} from './AssetUtils';\nimport Config from './Config';\nimport * as Doctor from './project/Doctor';\nimport * as DevSession from './DevSession';\nimport logger from './Logger';\nimport * as ExponentTools from './detach/ExponentTools';\nimport * as Exp from './Exp';\nimport * as ExpSchema from './project/ExpSchema';\nimport FormData from './tools/FormData';\nimport * as IosPlist from './detach/IosPlist';\nimport * as IosWorkspace from './detach/IosWorkspace';\nimport * as ProjectSettings from './ProjectSettings';\nimport * as ProjectUtils from './project/ProjectUtils';\nimport * as Sentry from './Sentry';\nimport StandaloneContext from './detach/StandaloneContext';\nimport * as ThirdParty from './ThirdParty';\nimport * as UrlUtils from './UrlUtils';\nimport UserManager, { ANONYMOUS_USERNAME } from './User';\nimport UserSettings from './UserSettings';\nimport * as Versions from './Versions';\nimport * as Watchman from './Watchman';\nimport XDLError from './XDLError';\nimport type { User as ExpUser } from './User'; //eslint-disable-line\nimport * as Webpack from './Webpack';\nconst EXPO_CDN = 'https://d1wp6m56sqw74a.cloudfront.net';\nconst MINIMUM_BUNDLE_SIZE = 500;\nconst TUNNEL_TIMEOUT = 10 * 1000;\n\nconst treekillAsync = promisify(treekill);\nconst ngrokConnectAsync = promisify(ngrok.connect);\nconst ngrokKillAsync = promisify(ngrok.kill);\n\ntype CachedSignedManifest = {\n  manifestString: ?string,\n  signedManifest: ?string,\n};\n\nlet _cachedSignedManifest: CachedSignedManifest = {\n  manifestString: null,\n  signedManifest: null,\n};\n\nexport type ProjectStatus = 'running' | 'ill' | 'exited';\n\nexport async function currentStatus(projectDir: string): Promise<ProjectStatus> {\n  const { packagerPort, expoServerPort } = await ProjectSettings.readPackagerInfoAsync(projectDir);\n  if (packagerPort && expoServerPort) {\n    return 'running';\n  } else if (packagerPort || expoServerPort) {\n    return 'ill';\n  } else {\n    return 'exited';\n  }\n}\n\n// DECPRECATED: use UrlUtils.constructManifestUrlAsync\nexport async function getManifestUrlWithFallbackAsync(projectRoot: string) {\n  return {\n    url: await UrlUtils.constructManifestUrlAsync(projectRoot),\n    isUrlFallback: false,\n  };\n}\n\nasync function _assertValidProjectRoot(projectRoot) {\n  if (!projectRoot) {\n    throw new XDLError('NO_PROJECT_ROOT', 'No project root specified');\n  }\n}\n\nasync function _getFreePortAsync(rangeStart) {\n  let port = await freeportAsync(rangeStart);\n  if (!port) {\n    throw new XDLError('NO_PORT_FOUND', 'No available port found');\n  }\n\n  return port;\n}\n\nasync function _getForPlatformAsync(projectRoot, url, platform, { errorCode, minLength }) {\n  url = UrlUtils.getPlatformSpecificBundleUrl(url, platform);\n\n  let fullUrl = `${url}&platform=${platform}`;\n  let response;\n\n  try {\n    response = await axios.get(fullUrl, {\n      responseType: 'text',\n      // Workaround for https://github.com/axios/axios/issues/907.\n      // Without transformResponse, axios will parse the body as JSON regardless of the responseType/\n      transformResponse: [data => data],\n      proxy: false,\n      validateStatus: status => status === 200,\n      headers: {\n        'Exponent-Platform': platform,\n      },\n    });\n  } catch (error) {\n    if (error.response) {\n      if (error.response.data) {\n        let body;\n        try {\n          body = JSON.parse(error.response.data);\n        } catch (e) {\n          ProjectUtils.logError(projectRoot, 'expo', response.data);\n        }\n\n        if (body) {\n          if (body.message) {\n            ProjectUtils.logError(projectRoot, 'expo', body.message);\n          } else {\n            ProjectUtils.logError(projectRoot, 'expo', response.data);\n          }\n        }\n      }\n      throw new XDLError(\n        errorCode,\n        `Packager URL ${fullUrl} returned unexpected code ${response.status}. ` +\n          'Please open your project in the Expo app and see if there are any errors. ' +\n          'Also scroll up and make sure there were no errors or warnings when opening your project.'\n      );\n    } else {\n      throw error;\n    }\n  }\n\n  if (!response.data || (minLength && response.data.length < minLength)) {\n    throw new XDLError(errorCode, `Body is: ${response.data}`);\n  }\n\n  return response.data;\n}\n\nasync function _resolveGoogleServicesFile(projectRoot, manifest) {\n  if (manifest.android && manifest.android.googleServicesFile) {\n    const contents = await fs.readFile(\n      path.resolve(projectRoot, manifest.android.googleServicesFile),\n      'utf8'\n    );\n    manifest.android.googleServicesFile = contents;\n  }\n}\n\nasync function _resolveManifestAssets(projectRoot, manifest, resolver, strict = false) {\n  try {\n    // Asset fields that the user has set\n    const assetSchemas = (await ExpSchema.getAssetSchemasAsync(manifest.sdkVersion)).filter(\n      ({ fieldPath }) => get(manifest, fieldPath)\n    );\n\n    // Get the URLs\n    const urls = await Promise.all(\n      assetSchemas.map(async ({ fieldPath }) => {\n        const pathOrURL = get(manifest, fieldPath);\n        if (pathOrURL.match(/^https?:\\/\\/(.*)$/)) {\n          // It's a remote URL\n          return pathOrURL;\n        } else if (fs.existsSync(path.resolve(projectRoot, pathOrURL))) {\n          return await resolver(pathOrURL);\n        } else {\n          const err = new Error('Could not resolve local asset.');\n          // $FlowFixMe\n          err.localAssetPath = pathOrURL;\n          // $FlowFixMe\n          err.manifestField = fieldPath;\n          throw err;\n        }\n      })\n    );\n\n    // Set the corresponding URL fields\n    assetSchemas.forEach(({ fieldPath }, index) => set(manifest, fieldPath + 'Url', urls[index]));\n  } catch (e) {\n    let logMethod = ProjectUtils.logWarning;\n    if (strict) {\n      logMethod = ProjectUtils.logError;\n    }\n    if (e.localAssetPath) {\n      logMethod(\n        projectRoot,\n        'expo',\n        `Unable to resolve asset \"${e.localAssetPath}\" from \"${\n          e.manifestField\n        }\" in your app/exp.json.`\n      );\n    } else {\n      logMethod(\n        projectRoot,\n        'expo',\n        `Warning: Unable to resolve manifest assets. Icons might not work. ${e.message}.`\n      );\n    }\n\n    if (strict) {\n      throw new Error('Resolving assets failed.');\n    }\n  }\n}\n\nfunction _requireFromProject(modulePath, projectRoot, exp) {\n  try {\n    let fullPath = ConfigUtils.resolveModule(modulePath, projectRoot, exp);\n    // Clear the require cache for this module so get a fresh version of it\n    // without requiring the user to restart Expo CLI\n    decache(fullPath);\n    // $FlowIssue: doesn't work with dynamic requires\n    return require(fullPath);\n  } catch (e) {\n    return null;\n  }\n}\n\nexport async function getSlugAsync(projectRoot: string, options: Object = {}) {\n  // Verify that exp/app.json exist\n  let { exp, pkg } = await ProjectUtils.readConfigJsonAsync(projectRoot);\n  if (!exp || !pkg) {\n    const configName = await ConfigUtils.configFilenameAsync(projectRoot);\n    throw new XDLError(\n      'NO_PACKAGE_JSON',\n      `Couldn't read ${configName} file in project at ${projectRoot}`\n    );\n  }\n\n  if (!exp.slug && pkg.name) {\n    exp.slug = pkg.name;\n  } else if (!exp.slug) {\n    const configName = await ConfigUtils.configFilenameAsync(projectRoot);\n    throw new XDLError(\n      'INVALID_MANIFEST',\n      `${configName} in ${projectRoot} must contain the slug field`\n    );\n  }\n  return exp.slug;\n}\n\nexport async function getLatestReleaseAsync(\n  projectRoot: string,\n  options: {\n    releaseChannel: string,\n    platform: string,\n  }\n) {\n  // TODO(ville): move request from multipart/form-data to JSON once supported by the endpoint.\n  let formData = new FormData();\n  formData.append('queryType', 'history');\n  formData.append('slug', await getSlugAsync(projectRoot));\n  formData.append('version', '2');\n  formData.append('count', '1');\n  formData.append('releaseChannel', options.releaseChannel);\n  formData.append('platform', options.platform);\n  const { queryResult } = await Api.callMethodAsync('publishInfo', [], 'post', null, {\n    formData,\n  });\n  if (queryResult && queryResult.length > 0) {\n    return queryResult[0];\n  } else {\n    return null;\n  }\n}\n\n// Takes multiple exported apps in sourceDirs and coalesces them to one app in outputDir\nexport async function mergeAppDistributions(\n  projectRoot: string,\n  sourceDirs: Array<string>,\n  outputDir: string\n) {\n  const assetPathToWrite = path.resolve(projectRoot, outputDir, 'assets');\n  await fs.ensureDir(assetPathToWrite);\n  const bundlesPathToWrite = path.resolve(projectRoot, outputDir, 'bundles');\n  await fs.ensureDir(bundlesPathToWrite);\n\n  // merge files from bundles and assets\n  const androidIndexes = [];\n  const iosIndexes = [];\n\n  for (let sourceDir of sourceDirs) {\n    const promises = [];\n\n    // copy over assets/bundles from other src dirs to the output dir\n    if (sourceDir !== outputDir) {\n      // copy file over to assetPath\n      const sourceAssetDir = path.resolve(projectRoot, sourceDir, 'assets');\n      const outputAssetDir = path.resolve(projectRoot, outputDir, 'assets');\n      const assetPromise = fs.copy(sourceAssetDir, outputAssetDir);\n      promises.push(assetPromise);\n\n      // copy files over to bundlePath\n      const sourceBundleDir = path.resolve(projectRoot, sourceDir, 'bundles');\n      const outputBundleDir = path.resolve(projectRoot, outputDir, 'bundles');\n      const bundlePromise = fs.copy(sourceBundleDir, outputBundleDir);\n      promises.push(bundlePromise);\n\n      await Promise.all(promises);\n    }\n\n    // put index.jsons into memory\n    const putJsonInMemory = async (indexPath, accumulator) => {\n      const index = await JsonFile.readAsync(indexPath);\n      if (!index.sdkVersion) {\n        throw new XDLError(\n          'INVALID_MANIFEST',\n          `Invalid index.json, must specify an sdkVersion at ${indexPath}`\n        );\n      }\n      if (Array.isArray(index)) {\n        // index.json could also be an array\n        accumulator.push(...index);\n      } else {\n        accumulator.push(index);\n      }\n    };\n\n    const androidIndexPath = path.resolve(projectRoot, sourceDir, 'android-index.json');\n    await putJsonInMemory(androidIndexPath, androidIndexes);\n\n    const iosIndexPath = path.resolve(projectRoot, sourceDir, 'ios-index.json');\n    await putJsonInMemory(iosIndexPath, iosIndexes);\n  }\n\n  // sort indexes by descending sdk value\n  const getSortedIndex = indexes => {\n    return indexes.sort((index1, index2) => {\n      if (semver.eq(index1.sdkVersion, index2.sdkVersion)) {\n        logger.global.error(\n          `Encountered multiple index.json with the same SDK version ${\n            index1.sdkVersion\n          }. This could result in undefined behavior.`\n        );\n      }\n      return semver.gte(index1.sdkVersion, index2.sdkVersion) ? -1 : 1;\n    });\n  };\n\n  const sortedAndroidIndexes = getSortedIndex(androidIndexes);\n  const sortedIosIndexes = getSortedIndex(iosIndexes);\n\n  // Save the json arrays to disk\n  await _writeArtifactSafelyAsync(\n    projectRoot,\n    null,\n    path.join(outputDir, 'android-index.json'),\n    JSON.stringify(sortedAndroidIndexes)\n  );\n\n  await _writeArtifactSafelyAsync(\n    projectRoot,\n    null,\n    path.join(outputDir, 'ios-index.json'),\n    JSON.stringify(sortedIosIndexes)\n  );\n}\n\n/**\n * Apps exporting for self hosting will have the files created in the project directory the following way:\n.\n├── android-index.json\n├── ios-index.json\n├── assets\n│   └── 1eccbc4c41d49fd81840aef3eaabe862\n└── bundles\n      ├── android-01ee6e3ab3e8c16a4d926c91808d5320.js\n      └── ios-ee8206cc754d3f7aa9123b7f909d94ea.js\n */\nexport async function exportForAppHosting(\n  projectRoot: string,\n  publicUrl: string,\n  assetUrl: string,\n  outputDir: string,\n  options: {} = {}\n) {\n  await _validatePackagerReadyAsync(projectRoot);\n\n  // build the bundles\n  let packagerOpts = {\n    dev: !!options.isDev,\n    minify: true,\n  };\n  // make output dirs if not exists\n  const assetPathToWrite = path.resolve(projectRoot, path.join(outputDir, 'assets'));\n  await fs.ensureDir(assetPathToWrite);\n  const bundlesPathToWrite = path.resolve(projectRoot, path.join(outputDir, 'bundles'));\n  await fs.ensureDir(bundlesPathToWrite);\n\n  const { iosBundle, androidBundle } = await _buildPublishBundlesAsync(projectRoot, packagerOpts);\n  const iosBundleHash = crypto\n    .createHash('md5')\n    .update(iosBundle)\n    .digest('hex');\n  const iosBundleUrl = `ios-${iosBundleHash}.js`;\n  const iosJsPath = path.join(outputDir, 'bundles', iosBundleUrl);\n\n  const androidBundleHash = crypto\n    .createHash('md5')\n    .update(androidBundle)\n    .digest('hex');\n  const androidBundleUrl = `android-${androidBundleHash}.js`;\n  const androidJsPath = path.join(outputDir, 'bundles', androidBundleUrl);\n\n  await _writeArtifactSafelyAsync(projectRoot, null, iosJsPath, iosBundle);\n  await _writeArtifactSafelyAsync(projectRoot, null, androidJsPath, androidBundle);\n  logger.global.info('Finished saving JS Bundles.');\n\n  // save the assets\n  // Get project config\n  const publishOptions = options.publishOptions || {};\n  const { exp, pkg } = await _getPublishExpConfigAsync(projectRoot, publishOptions);\n  const { assets } = await _fetchAndSaveAssetsAsync(projectRoot, exp, publicUrl, outputDir);\n\n  if (options.dumpAssetmap) {\n    logger.global.info('Dumping asset map.');\n    const assetmap = {};\n    assets.forEach(asset => {\n      assetmap[asset.hash] = asset;\n    });\n    await _writeArtifactSafelyAsync(\n      projectRoot,\n      null,\n      path.join(outputDir, 'assetmap.json'),\n      JSON.stringify(assetmap)\n    );\n  }\n\n  // Delete keys that are normally deleted in the publish process\n  delete exp.hooks;\n\n  // Add assetUrl to manifest\n  exp.assetUrlOverride = assetUrl;\n\n  exp.publishedTime = new Date().toISOString();\n  exp.commitTime = new Date().toISOString();\n\n  // generate revisionId and id the same way www does\n  const hashIds = new HashIds(uuid.v1(), 10);\n  exp.revisionId = hashIds.encode(Date.now());\n\n  if (options.isDev) {\n    exp.developer = {\n      tool: 'exp',\n    };\n  }\n\n  if (!exp.slug) {\n    throw new XDLError('INVALID_MANIFEST', 'Must provide a slug field in the app.json manifest.');\n  }\n  let username = await UserManager.getCurrentUsernameAsync();\n  if (!username) {\n    username = ANONYMOUS_USERNAME;\n  }\n  exp.id = `@${username}/${exp.slug}`;\n\n  // save the android manifest\n  exp.bundleUrl = urljoin(publicUrl, 'bundles', androidBundleUrl);\n  exp.platform = 'android';\n  await _writeArtifactSafelyAsync(\n    projectRoot,\n    null,\n    path.join(outputDir, 'android-index.json'),\n    JSON.stringify({ ...exp, dependencies: Object.keys(pkg.dependencies) })\n  );\n\n  // save the ios manifest\n  exp.bundleUrl = urljoin(publicUrl, 'bundles', iosBundleUrl);\n  exp.platform = 'ios';\n  await _writeArtifactSafelyAsync(\n    projectRoot,\n    null,\n    path.join(outputDir, 'ios-index.json'),\n    JSON.stringify(exp)\n  );\n\n  // build source maps\n  if (options.dumpSourcemap) {\n    const { iosSourceMap, androidSourceMap } = await _maybeBuildSourceMapsAsync(projectRoot, exp, {\n      force: true,\n    });\n    // write the sourcemap files\n    const iosMapName = `ios-${iosBundleHash}.map`;\n    const iosMapPath = path.join(outputDir, 'bundles', iosMapName);\n    await _writeArtifactSafelyAsync(projectRoot, null, iosMapPath, iosSourceMap);\n\n    const androidMapName = `android-${androidBundleHash}.map`;\n    const androidMapPath = path.join(outputDir, 'bundles', androidMapName);\n    await _writeArtifactSafelyAsync(projectRoot, null, androidMapPath, androidSourceMap);\n\n    // Remove original mapping to incorrect sourcemap paths\n    logger.global.info('Configuring sourcemaps');\n    await truncateLastNLines(iosJsPath, 1);\n    await truncateLastNLines(androidJsPath, 1);\n\n    // Add correct mapping to sourcemap paths\n    await fs.appendFile(iosJsPath, `\\n//# sourceMappingURL=${iosMapName}`);\n    await fs.appendFile(androidJsPath, `\\n//# sourceMappingURL=${androidMapName}`);\n\n    // Make a debug html so user can debug their bundles\n    logger.global.info('Preparing additional debugging files');\n    const debugHtml = `\n    <script src=\"${urljoin('bundles', iosBundleUrl)}\"></script>\n    <script src=\"${urljoin('bundles', androidBundleUrl)}\"></script>\n    Open up this file in Chrome. In the Javascript developer console, navigate to the Source tab.\n    You can see a red coloured folder containing the original source code from your bundle.\n    `;\n    await _writeArtifactSafelyAsync(\n      projectRoot,\n      null,\n      path.join(outputDir, 'debug.html'),\n      debugHtml\n    );\n  }\n}\n\n// truncate the last n lines in a file\nasync function truncateLastNLines(filePath: string, n: number) {\n  const lines = await readLastLines.read(filePath, n);\n  const to_vanquish = lines.length;\n  const { size } = await fs.stat(filePath);\n  await fs.truncate(filePath, size - to_vanquish);\n}\n\nasync function _saveAssetAsync(projectRoot, assets, outputDir) {\n  // Collect paths by key, also effectively handles duplicates in the array\n  const paths = {};\n  assets.forEach(asset => {\n    asset.files.forEach((path, index) => {\n      paths[asset.fileHashes[index]] = path;\n    });\n  });\n\n  // save files one chunk at a time\n  const keyChunks = chunk(Object.keys(paths), 5);\n  for (const keys of keyChunks) {\n    const promises = [];\n    for (const key of keys) {\n      ProjectUtils.logDebug(projectRoot, 'expo', `uploading ${paths[key]}`);\n\n      logger.global.info({ quiet: true }, `Saving ${paths[key]}`);\n\n      let assetPath = path.resolve(outputDir, 'assets', key);\n\n      // copy file over to assetPath\n      const p = fs.copy(paths[key], assetPath);\n      promises.push(p);\n    }\n    await Promise.all(promises);\n  }\n  logger.global.info('Files successfully saved.');\n}\n\nexport async function findReusableBuildAsync(\n  releaseChannel: string,\n  platform: string,\n  sdkVersion: string,\n  slug: string\n): Promise<{ downloadUrl?: string, canReuse: boolean }> {\n  const user = await UserManager.getCurrentUserAsync();\n\n  const buildReuseStatus = await ApiV2.clientForUser(user).postAsync('standalone-build/reuse', {\n    releaseChannel,\n    platform,\n    sdkVersion,\n    slug,\n  });\n\n  return buildReuseStatus;\n}\n\nexport async function publishAsync(\n  projectRoot: string,\n  options: Object = {}\n): Promise<{ url: string, ids: string[], err: ?string }> {\n  const user = await UserManager.ensureLoggedInAsync();\n  await _validatePackagerReadyAsync(projectRoot);\n  Analytics.logEvent('Publish', {\n    projectRoot,\n    developerTool: Config.developerTool,\n  });\n\n  const validationStatus = await Doctor.validateWithNetworkAsync(projectRoot);\n  if (validationStatus === Doctor.ERROR || validationStatus === Doctor.FATAL) {\n    throw new XDLError(\n      'PUBLISH_VALIDATION_ERROR',\n      \"Couldn't publish because errors were found. (See logs above.) Please fix the errors and try again.\"\n    );\n  }\n\n  // Get project config\n  let { exp, pkg } = await _getPublishExpConfigAsync(projectRoot, options);\n\n  // TODO: refactor this out to a function, throw error if length doesn't match\n  let { hooks } = exp;\n  delete exp.hooks;\n  let validPostPublishHooks = [];\n  if (hooks && hooks.postPublish) {\n    hooks.postPublish.forEach(hook => {\n      let { file } = hook;\n      let fn = _requireFromProject(file, projectRoot, exp);\n      if (typeof fn !== 'function') {\n        logger.global.error(\n          `Unable to load postPublishHook: '${file}'. The module does not export a function.`\n        );\n      } else {\n        hook._fn = fn;\n        validPostPublishHooks.push(hook);\n      }\n    });\n\n    if (validPostPublishHooks.length !== hooks.postPublish.length) {\n      logger.global.error();\n\n      throw new XDLError(\n        'HOOK_INITIALIZATION_ERROR',\n        'Please fix your postPublish hook configuration.'\n      );\n    }\n  }\n\n  let { iosBundle, androidBundle } = await _buildPublishBundlesAsync(projectRoot);\n\n  await _fetchAndUploadAssetsAsync(projectRoot, exp);\n\n  let { iosSourceMap, androidSourceMap } = await _maybeBuildSourceMapsAsync(projectRoot, exp, {\n    force: validPostPublishHooks.length,\n  });\n\n  let response;\n  try {\n    response = await _uploadArtifactsAsync({\n      pkg,\n      exp,\n      iosBundle,\n      androidBundle,\n      options,\n    });\n  } catch (e) {\n    if (e.serverError === 'SCHEMA_VALIDATION_ERROR') {\n      throw new Error(\n        `There was an error validating your project schema. Check for any warnings about the contents of your app/exp.json.`\n      );\n    }\n    Sentry.captureException(e);\n    throw e;\n  }\n\n  await _maybeWriteArtifactsToDiskAsync({\n    exp,\n    projectRoot,\n    iosBundle,\n    androidBundle,\n    iosSourceMap,\n    androidSourceMap,\n  });\n\n  if (\n    validPostPublishHooks.length ||\n    (exp.ios && exp.ios.publishManifestPath) ||\n    (exp.android && exp.android.publishManifestPath)\n  ) {\n    let [androidManifest, iosManifest] = await Promise.all([\n      ExponentTools.getManifestAsync(response.url, {\n        'Exponent-SDK-Version': exp.sdkVersion,\n        'Exponent-Platform': 'android',\n        'Expo-Release-Channel': options.releaseChannel,\n        Accept: 'application/expo+json,application/json',\n      }),\n      ExponentTools.getManifestAsync(response.url, {\n        'Exponent-SDK-Version': exp.sdkVersion,\n        'Exponent-Platform': 'ios',\n        'Expo-Release-Channel': options.releaseChannel,\n        Accept: 'application/expo+json,application/json',\n      }),\n    ]);\n\n    const hookOptions = {\n      url: response.url,\n      exp,\n      iosBundle,\n      iosSourceMap,\n      iosManifest,\n      androidBundle,\n      androidSourceMap,\n      androidManifest,\n      projectRoot,\n      log: msg => {\n        logger.global.info({ quiet: true }, msg);\n      },\n    };\n\n    for (let hook of validPostPublishHooks) {\n      logger.global.info(`Running postPublish hook: ${hook.file}`);\n      try {\n        let result = hook._fn({\n          config: hook.config,\n          ...hookOptions,\n        });\n\n        // If it's a promise, wait for it to resolve\n        if (result && result.then) {\n          result = await result;\n        }\n\n        if (result) {\n          logger.global.info({ quiet: true }, result);\n        }\n      } catch (e) {\n        logger.global.warn(`Warning: postPublish hook '${hook.file}' failed: ${e.stack}`);\n      }\n    }\n\n    if (exp.ios && exp.ios.publishManifestPath) {\n      await _writeArtifactSafelyAsync(\n        projectRoot,\n        'ios.publishManifestPath',\n        exp.ios.publishManifestPath,\n        JSON.stringify(iosManifest)\n      );\n      const context = StandaloneContext.createUserContext(projectRoot, exp);\n      const { supportingDirectory } = IosWorkspace.getPaths(context);\n      await IosPlist.modifyAsync(supportingDirectory, 'EXShell', shellPlist => {\n        shellPlist.releaseChannel = options.releaseChannel;\n        return shellPlist;\n      });\n    }\n\n    if (exp.android && exp.android.publishManifestPath) {\n      await _writeArtifactSafelyAsync(\n        projectRoot,\n        'android.publishManifestPath',\n        exp.android.publishManifestPath,\n        JSON.stringify(androidManifest)\n      );\n    }\n\n    // We need to add EmbeddedResponse instances on Android to tell the runtime\n    // that the shell app manifest and bundle is packaged.\n    if (exp.android && exp.android.publishManifestPath && exp.android.publishBundlePath) {\n      let fullManifestUrl = response.url.replace('exp://', 'https://');\n      let constantsPath = path.join(\n        projectRoot,\n        'android',\n        'app',\n        'src',\n        'main',\n        'java',\n        'host',\n        'exp',\n        'exponent',\n        'generated',\n        'AppConstants.java'\n      );\n      await ExponentTools.deleteLinesInFileAsync(\n        `START EMBEDDED RESPONSES`,\n        `END EMBEDDED RESPONSES`,\n        constantsPath\n      );\n      await ExponentTools.regexFileAsync(\n        '// ADD EMBEDDED RESPONSES HERE',\n        `\n        // ADD EMBEDDED RESPONSES HERE\n        // START EMBEDDED RESPONSES\n        embeddedResponses.add(new Constants.EmbeddedResponse(\"${fullManifestUrl}\", \"assets://shell-app-manifest.json\", \"application/json\"));\n        embeddedResponses.add(new Constants.EmbeddedResponse(\"${\n          androidManifest.bundleUrl\n        }\", \"assets://shell-app.bundle\", \"application/javascript\"));\n        // END EMBEDDED RESPONSES`,\n        constantsPath\n      );\n      await ExponentTools.regexFileAsync(\n        /RELEASE_CHANNEL = \"[^\"]*\"/,\n        `RELEASE_CHANNEL = \"${options.releaseChannel}\"`,\n        constantsPath\n      );\n    }\n  }\n\n  // TODO: move to postPublish hook\n  if (exp.isKernel) {\n    await _handleKernelPublishedAsync({\n      user,\n      exp,\n      projectRoot,\n      url: response.url,\n    });\n  }\n\n  return {\n    ...response,\n    url:\n      options.releaseChannel && options.releaseChannel !== 'default'\n        ? `${response.url}?release-channel=${options.releaseChannel}`\n        : response.url,\n  };\n}\n\nasync function _uploadArtifactsAsync({ exp, iosBundle, androidBundle, options, pkg }) {\n  logger.global.info('Uploading JavaScript bundles');\n  let formData = new FormData();\n\n  formData.append('expJson', JSON.stringify(exp));\n  formData.append('packageJson', JSON.stringify(pkg));\n  formData.append('iosBundle', iosBundle, 'iosBundle');\n  formData.append('androidBundle', androidBundle, 'androidBundle');\n  formData.append('options', JSON.stringify(options));\n  let response = await Api.callMethodAsync('publish', null, 'put', null, {\n    formData,\n  });\n  return response;\n}\n\nasync function _validatePackagerReadyAsync(projectRoot) {\n  _assertValidProjectRoot(projectRoot);\n\n  // Ensure the packager is started\n  let packagerInfo = await ProjectSettings.readPackagerInfoAsync(projectRoot);\n  if (!packagerInfo.packagerPort) {\n    ProjectUtils.logWarning(\n      projectRoot,\n      'expo',\n      'Metro Bundler is not running. Trying to restart it...'\n    );\n    await startReactNativeServerAsync(projectRoot, { reset: true });\n  }\n}\n\nasync function _getPublishExpConfigAsync(projectRoot, options) {\n  let schema = joi.object().keys({\n    releaseChannel: joi.string(),\n  });\n\n  // Validate schema\n  const { error } = joi.validate(options, schema);\n  if (error) {\n    throw new XDLError('INVALID_OPTIONS', error.toString());\n  }\n  options.releaseChannel = options.releaseChannel || 'default'; // joi default not enforcing this :/\n\n  // Verify that exp/app.json and package.json exist\n  let { exp, pkg } = await ProjectUtils.readConfigJsonAsync(projectRoot);\n  if (!exp || !pkg) {\n    const configName = await ConfigUtils.configFilenameAsync(projectRoot);\n    throw new XDLError(\n      'NO_PACKAGE_JSON',\n      `Couldn't read ${configName} file in project at ${projectRoot}`\n    );\n  }\n\n  // Support version and name being specified in package.json for legacy\n  // support pre: exp.json\n  if (!exp.version && pkg.version) {\n    exp.version = pkg.version;\n  }\n\n  if (!exp.slug && pkg.name) {\n    exp.slug = pkg.name;\n  }\n\n  if (exp.android && exp.android.config) {\n    delete exp.android.config;\n  }\n\n  if (exp.ios && exp.ios.config) {\n    delete exp.ios.config;\n  }\n\n  // Only allow projects to be published with UNVERSIONED if a correct token is set in env\n  if (exp.sdkVersion === 'UNVERSIONED' && !process.env['EXPO_SKIP_MANIFEST_VALIDATION_TOKEN']) {\n    throw new XDLError('INVALID_OPTIONS', 'Cannot publish with sdkVersion UNVERSIONED.');\n  }\n  exp.locales = await ExponentTools.getResolvedLocalesAsync(exp);\n  return { exp, pkg };\n}\n\n// Fetch iOS and Android bundles for publishing\nasync function _buildPublishBundlesAsync(projectRoot, opts?: Object) {\n  let entryPoint = await Exp.determineEntryPointAsync(projectRoot);\n  let publishUrl = await UrlUtils.constructPublishUrlAsync(projectRoot, entryPoint, null, opts);\n\n  logger.global.info('Building iOS bundle');\n  let iosBundle = await _getForPlatformAsync(projectRoot, publishUrl, 'ios', {\n    errorCode: 'INVALID_BUNDLE',\n    minLength: MINIMUM_BUNDLE_SIZE,\n  });\n\n  logger.global.info('Building Android bundle');\n  let androidBundle = await _getForPlatformAsync(projectRoot, publishUrl, 'android', {\n    errorCode: 'INVALID_BUNDLE',\n    minLength: MINIMUM_BUNDLE_SIZE,\n  });\n\n  return { iosBundle, androidBundle };\n}\n\n// note(brentvatne): currently we build source map anytime there is a\n// postPublish hook -- we may have an option in the future to manually\n// enable sourcemap building, but for now it's very fast, most apps in\n// production should use sourcemaps for error reporting, and in the worst\n// case, adding a few seconds to a postPublish hook isn't too annoying\nasync function _maybeBuildSourceMapsAsync(projectRoot, exp, options = {}) {\n  if (!options.force) {\n    return { iosSourceMap: null, androidSourceMap: null };\n  }\n\n  let entryPoint = await Exp.determineEntryPointAsync(projectRoot);\n  let sourceMapUrl = await UrlUtils.constructSourceMapUrlAsync(projectRoot, entryPoint);\n\n  logger.global.info('Building sourcemaps');\n  let iosSourceMap = await _getForPlatformAsync(projectRoot, sourceMapUrl, 'ios', {\n    errorCode: 'INVALID_BUNDLE',\n    minLength: MINIMUM_BUNDLE_SIZE,\n  });\n\n  let androidSourceMap = await _getForPlatformAsync(projectRoot, sourceMapUrl, 'android', {\n    errorCode: 'INVALID_BUNDLE',\n    minLength: MINIMUM_BUNDLE_SIZE,\n  });\n\n  return { iosSourceMap, androidSourceMap };\n}\n\n/**\n * Collects all the assets declared in the android app, ios app and manifest\n *\n * @param {string} hostedAssetPrefix\n *    The path where assets are hosted (ie) http://xxx.cloudfront.com/assets/\n *\n * @modifies {exp} Replaces relative asset paths in the manifest with hosted URLS\n *\n */\nasync function _collectAssets(projectRoot, exp, hostedAssetPrefix) {\n  let entryPoint = await Exp.determineEntryPointAsync(projectRoot);\n  let assetsUrl = await UrlUtils.constructAssetsUrlAsync(projectRoot, entryPoint);\n\n  let iosAssetsJson = await _getForPlatformAsync(projectRoot, assetsUrl, 'ios', {\n    errorCode: 'INVALID_ASSETS',\n  });\n\n  let androidAssetsJson = await _getForPlatformAsync(projectRoot, assetsUrl, 'android', {\n    errorCode: 'INVALID_ASSETS',\n  });\n\n  // Resolve manifest assets to their hosted URL and add them to the list of assets to\n  // be uploaded. Modifies exp.\n  const manifestAssets = [];\n  await _resolveManifestAssets(\n    projectRoot,\n    exp,\n    async assetPath => {\n      const absolutePath = path.resolve(projectRoot, assetPath);\n      const contents = await fs.readFile(absolutePath);\n      const hash = md5hex(contents);\n      manifestAssets.push({ files: [absolutePath], fileHashes: [hash], hash });\n      return urljoin(hostedAssetPrefix, hash);\n    },\n    true\n  );\n\n  // Upload asset files\n  const iosAssets = JSON.parse(iosAssetsJson);\n  const androidAssets = JSON.parse(androidAssetsJson);\n  return iosAssets.concat(androidAssets).concat(manifestAssets);\n}\n\n/**\n * Configures exp, preparing it for asset export\n *\n * @modifies {exp}\n *\n */\nasync function _configureExpForAssets(projectRoot, exp, assets) {\n  // Add google services file if it exists\n  await _resolveGoogleServicesFile(projectRoot, exp);\n\n  // Convert asset patterns to a list of asset strings that match them.\n  // Assets strings are formatted as `asset_<hash>.<type>` and represent\n  // the name that the file will have in the app bundle. The `asset_` prefix is\n  // needed because android doesn't support assets that start with numbers.\n  if (exp.assetBundlePatterns) {\n    const fullPatterns = exp.assetBundlePatterns.map(p => path.join(projectRoot, p));\n    logger.global.info('Processing asset bundle patterns:');\n    fullPatterns.forEach(p => logger.global.info('- ' + p));\n    // The assets returned by the RN packager has duplicates so make sure we\n    // only bundle each once.\n    const bundledAssets = new Set();\n    for (const asset of assets) {\n      const file = asset.files && asset.files[0];\n      const shouldBundle =\n        asset.__packager_asset && file && fullPatterns.some(p => minimatch(file, p));\n      ProjectUtils.logDebug(\n        projectRoot,\n        'expo',\n        `${shouldBundle ? 'Include' : 'Exclude'} asset ${file}`\n      );\n      if (shouldBundle) {\n        asset.fileHashes.forEach(hash =>\n          bundledAssets.add('asset_' + hash + (asset.type ? '.' + asset.type : ''))\n        );\n      }\n    }\n    exp.bundledAssets = [...bundledAssets];\n    delete exp.assetBundlePatterns;\n  }\n\n  return exp;\n}\n\nasync function _fetchAndUploadAssetsAsync(projectRoot, exp) {\n  logger.global.info('Analyzing assets');\n\n  const assetCdnPath = urljoin(EXPO_CDN, '~assets');\n  const assets = await _collectAssets(projectRoot, exp, assetCdnPath);\n\n  logger.global.info('Uploading assets');\n\n  if (assets.length > 0 && assets[0].fileHashes) {\n    await uploadAssetsAsync(projectRoot, assets);\n  } else {\n    logger.global.info({ quiet: true }, 'No assets to upload, skipped.');\n  }\n\n  // Updates the manifest to reflect additional asset bundling + configs\n  await _configureExpForAssets(projectRoot, exp, assets);\n\n  return exp;\n}\n\nasync function _fetchAndSaveAssetsAsync(projectRoot, exp, hostedUrl, outputDir) {\n  logger.global.info('Analyzing assets');\n\n  const assetCdnPath = urljoin(hostedUrl, 'assets');\n  const assets = await _collectAssets(projectRoot, exp, assetCdnPath);\n\n  logger.global.info('Saving assets');\n\n  if (assets.length > 0 && assets[0].fileHashes) {\n    await _saveAssetAsync(projectRoot, assets, outputDir);\n  } else {\n    logger.global.info({ quiet: true }, 'No assets to upload, skipped.');\n  }\n\n  // Updates the manifest to reflect additional asset bundling + configs\n  await _configureExpForAssets(projectRoot, exp, assets);\n\n  return { exp, assets };\n}\n\nasync function _writeArtifactSafelyAsync(projectRoot, keyName, artifactPath, artifact) {\n  const pathToWrite = path.resolve(projectRoot, artifactPath);\n  if (!fs.existsSync(path.dirname(pathToWrite))) {\n    const errorMsg = keyName\n      ? `app.json specifies: ${pathToWrite}, but that directory does not exist.`\n      : `app.json specifies ${keyName}: ${pathToWrite}, but that directory does not exist.`;\n    logger.global.warn(errorMsg);\n  } else {\n    await fs.writeFile(pathToWrite, artifact);\n  }\n}\n\nasync function _maybeWriteArtifactsToDiskAsync({\n  exp,\n  projectRoot,\n  iosBundle,\n  androidBundle,\n  iosSourceMap,\n  androidSourceMap,\n}) {\n  if (exp.android && exp.android.publishBundlePath) {\n    await _writeArtifactSafelyAsync(\n      projectRoot,\n      'android.publishBundlePath',\n      exp.android.publishBundlePath,\n      androidBundle\n    );\n  }\n\n  if (exp.ios && exp.ios.publishBundlePath) {\n    await _writeArtifactSafelyAsync(\n      projectRoot,\n      'ios.publishBundlePath',\n      exp.ios.publishBundlePath,\n      iosBundle\n    );\n  }\n\n  if (exp.android && exp.android.publishSourceMapPath) {\n    await _writeArtifactSafelyAsync(\n      projectRoot,\n      'android.publishSourceMapPath',\n      exp.android.publishSourceMapPath,\n      androidSourceMap\n    );\n  }\n\n  if (exp.ios && exp.ios.publishSourceMapPath) {\n    await _writeArtifactSafelyAsync(\n      projectRoot,\n      'ios.publishSourceMapPath',\n      exp.ios.publishSourceMapPath,\n      iosSourceMap\n    );\n  }\n}\n\nasync function _handleKernelPublishedAsync({ projectRoot, user, exp, url }) {\n  let kernelBundleUrl = `${Config.api.scheme}://${Config.api.host}`;\n  if (Config.api.port) {\n    kernelBundleUrl = `${kernelBundleUrl}:${Config.api.port}`;\n  }\n  kernelBundleUrl = `${kernelBundleUrl}/@${user.username}/${exp.slug}/bundle`;\n\n  if (exp.kernel.androidManifestPath) {\n    let manifest = await ExponentTools.getManifestAsync(url, {\n      'Exponent-SDK-Version': exp.sdkVersion,\n      'Exponent-Platform': 'android',\n      Accept: 'application/expo+json,application/json',\n    });\n    manifest.bundleUrl = kernelBundleUrl;\n    manifest.sdkVersion = 'UNVERSIONED';\n    await fs.writeFile(\n      path.resolve(projectRoot, exp.kernel.androidManifestPath),\n      JSON.stringify(manifest)\n    );\n  }\n\n  if (exp.kernel.iosManifestPath) {\n    let manifest = await ExponentTools.getManifestAsync(url, {\n      'Exponent-SDK-Version': exp.sdkVersion,\n      'Exponent-Platform': 'ios',\n      Accept: 'application/expo+json,application/json',\n    });\n    manifest.bundleUrl = kernelBundleUrl;\n    manifest.sdkVersion = 'UNVERSIONED';\n    await fs.writeFile(\n      path.resolve(projectRoot, exp.kernel.iosManifestPath),\n      JSON.stringify(manifest)\n    );\n  }\n}\n\n// TODO(jesse): Add analytics for upload\nasync function uploadAssetsAsync(projectRoot, assets) {\n  // Collect paths by key, also effectively handles duplicates in the array\n  const paths = {};\n  assets.forEach(asset => {\n    asset.files.forEach((path, index) => {\n      paths[asset.fileHashes[index]] = path;\n    });\n  });\n\n  // Collect list of assets missing on host\n  const metas = (await Api.callMethodAsync('assetsMetadata', [], 'post', {\n    keys: Object.keys(paths),\n  })).metadata;\n  const missing = Object.keys(paths).filter(key => !metas[key].exists);\n\n  if (missing.length === 0) {\n    logger.global.info({ quiet: true }, `No assets changed, skipped.`);\n  }\n\n  // Upload them!\n  await Promise.all(\n    chunk(missing, 5).map(async keys => {\n      let formData = new FormData();\n      for (const key of keys) {\n        ProjectUtils.logDebug(projectRoot, 'expo', `uploading ${paths[key]}`);\n\n        let relativePath = paths[key].replace(projectRoot, '');\n        logger.global.info({ quiet: true }, `Uploading ${relativePath}`);\n\n        formData.append(key, fs.createReadStream(paths[key]), paths[key]);\n      }\n      await Api.callMethodAsync('uploadAssets', [], 'put', null, { formData });\n    })\n  );\n}\n\nasync function getConfigAsync(\n  projectRoot: string,\n  options: {\n    current?: boolean,\n    mode?: string,\n    platform?: string,\n    expIds?: Array<string>,\n    type?: string,\n    releaseChannel?: string,\n    bundleIdentifier?: string,\n    publicUrl?: string,\n  } = {}\n) {\n  if (!options.publicUrl) {\n    // get the manifest from the project directory\n    const { exp, pkg } = await ProjectUtils.readConfigJsonAsync(projectRoot);\n    const configName = await ConfigUtils.configFilenameAsync(projectRoot);\n    return {\n      exp,\n      pkg,\n      configName: await ConfigUtils.configFilenameAsync(projectRoot),\n      configPrefix: configName === 'app.json' ? 'expo.' : '',\n    };\n  } else {\n    // get the externally hosted manifest\n    return {\n      exp: await ThirdParty.getManifest(options.publicUrl, options),\n      configName: options.publicUrl,\n      configPrefix: '',\n      pkg: {},\n    };\n  }\n}\n\nexport async function buildAsync(\n  projectRoot: string,\n  options: {\n    current?: boolean,\n    mode?: string,\n    platform?: string,\n    expIds?: Array<string>,\n    type?: string,\n    releaseChannel?: string,\n    bundleIdentifier?: string,\n    publicUrl?: string,\n    sdkVersion?: string,\n  } = {}\n) {\n  await UserManager.ensureLoggedInAsync();\n  _assertValidProjectRoot(projectRoot);\n\n  Analytics.logEvent('Build Shell App', {\n    projectRoot,\n    developerTool: Config.developerTool,\n    platform: options.platform,\n  });\n\n  const schema = joi.object().keys({\n    current: joi.boolean(),\n    mode: joi.string(),\n    platform: joi.any().valid('ios', 'android', 'all'),\n    expIds: joi.array(),\n    type: joi.any().valid('archive', 'simulator', 'client', 'app-bundle', 'apk'),\n    releaseChannel: joi.string().regex(/[a-z\\d][a-z\\d._-]*/),\n    bundleIdentifier: joi.string().regex(/^[a-zA-Z][a-zA-Z0-9\\-.]+$/),\n    publicUrl: joi.string(),\n    sdkVersion: joi.strict(),\n  });\n\n  const { error } = joi.validate(options, schema);\n  if (error) {\n    throw new XDLError('INVALID_OPTIONS', error.toString());\n  }\n\n  const { exp, pkg, configName, configPrefix } = await getConfigAsync(projectRoot, options);\n\n  if (!exp || !pkg) {\n    throw new XDLError(\n      'NO_PACKAGE_JSON',\n      `Couldn't read ${configName} file in project at ${projectRoot}`\n    );\n  }\n\n  // Support version and name being specified in package.json for legacy\n  // support pre: exp.json\n  if (!exp.version && pkg.version) {\n    exp.version = pkg.version;\n  }\n  if (!exp.slug && pkg.name) {\n    exp.slug = pkg.name;\n  }\n\n  if (options.mode !== 'status' && (options.platform === 'ios' || options.platform === 'all')) {\n    if (!exp.ios || !exp.ios.bundleIdentifier) {\n      throw new XDLError(\n        'INVALID_MANIFEST',\n        `Must specify a bundle identifier in order to build this experience for iOS. ` +\n          `Please specify one in ${configName} at \"${configPrefix}ios.bundleIdentifier\"`\n      );\n    }\n  }\n\n  if (options.mode !== 'status' && (options.platform === 'android' || options.platform === 'all')) {\n    if (!exp.android || !exp.android.package) {\n      throw new XDLError(\n        'INVALID_MANIFEST',\n        `Must specify a java package in order to build this experience for Android. ` +\n          `Please specify one in ${configName} at \"${configPrefix}android.package\"`\n      );\n    }\n  }\n\n  return await Api.callMethodAsync('build', [], 'put', {\n    manifest: exp,\n    options,\n  });\n}\n\nasync function _waitForRunningAsync(projectRoot, url, retries = 300) {\n  try {\n    let response = await axios.get(url, {\n      responseType: 'text',\n      proxy: false,\n    });\n    if (/packager-status:running/.test(response.data)) {\n      return true;\n    } else if (retries === 0) {\n      ProjectUtils.logError(\n        projectRoot,\n        'expo',\n        `Could not get status from Metro bundler. Server response: ${response.data}`\n      );\n    }\n  } catch (e) {\n    if (retries === 0) {\n      ProjectUtils.logError(\n        projectRoot,\n        'expo',\n        `Could not get status from Metro bundler. ${e.message}`\n      );\n    }\n  }\n\n  if (retries <= 0) {\n    throw new Error('Connecting to Metro bundler failed.');\n  } else {\n    await delayAsync(100);\n    return _waitForRunningAsync(projectRoot, url, retries - 1);\n  }\n}\n\nfunction _logPackagerOutput(projectRoot: string, level: string, data: Object) {\n  let output = data.toString();\n  if (!output) {\n    return;\n  }\n  // Temporarily hide warnings about duplicate providesModule declarations\n  // under react-native\n  if (_isIgnorableDuplicateModuleWarning(projectRoot, level, output)) {\n    ProjectUtils.logDebug(\n      projectRoot,\n      'expo',\n      `Suppressing @providesModule warning: ${output}`,\n      'project-suppress-providesmodule-warning'\n    );\n    return;\n  }\n  if (/^Scanning folders for symlinks in /.test(output)) {\n    ProjectUtils.logDebug(projectRoot, 'metro', output);\n    return;\n  }\n  if (level === 'info') {\n    ProjectUtils.logInfo(projectRoot, 'metro', output);\n  } else {\n    ProjectUtils.logError(projectRoot, 'metro', output);\n  }\n}\n\nfunction _isIgnorableDuplicateModuleWarning(\n  projectRoot: string,\n  level: string,\n  output: string\n): boolean {\n  if (\n    level !== 'error' ||\n    !output.startsWith('jest-haste-map: @providesModule naming collision:')\n  ) {\n    return false;\n  }\n\n  let reactNativeNodeModulesPath = path.join(\n    projectRoot,\n    'node_modules',\n    'react-native',\n    'node_modules'\n  );\n  let reactNativeNodeModulesPattern = escapeRegExp(reactNativeNodeModulesPath);\n  let reactNativeNodeModulesCollisionRegex = new RegExp(\n    `Paths: ${reactNativeNodeModulesPattern}.+ collides with ${reactNativeNodeModulesPattern}.+`\n  );\n  return reactNativeNodeModulesCollisionRegex.test(output);\n}\n\nfunction _isIgnorableBugReportingExtraData(body) {\n  return body.length === 2 && body[0] === 'BugReporting extraData:';\n}\n\nfunction _isAppRegistryStartupMessage(body) {\n  return body.length === 1 && /^Running application \"main\" with appParams:/.test(body[0]);\n}\n\nfunction _handleDeviceLogs(projectRoot: string, deviceId: string, deviceName: string, logs: any) {\n  for (let i = 0; i < logs.length; i++) {\n    let log = logs[i];\n    let body = typeof log.body === 'string' ? [log.body] : log.body;\n    let { level } = log;\n\n    if (_isIgnorableBugReportingExtraData(body)) {\n      level = logger.DEBUG;\n    }\n    if (_isAppRegistryStartupMessage(body)) {\n      body = [`Running application on ${deviceName}.`];\n    }\n\n    let string = body\n      .map(obj => {\n        if (typeof obj === 'undefined') {\n          return 'undefined';\n        }\n        if (obj === 'null') {\n          return 'null';\n        }\n        if (typeof obj === 'string' || typeof obj === 'number' || typeof obj === 'boolean') {\n          return obj;\n        }\n        try {\n          return JSON.stringify(obj);\n        } catch (e) {\n          return obj.toString();\n        }\n      })\n      .join(' ');\n\n    ProjectUtils.logWithLevel(\n      projectRoot,\n      level,\n      {\n        tag: 'device',\n        deviceId,\n        deviceName,\n        groupDepth: log.groupDepth,\n        shouldHide: log.shouldHide,\n        includesStack: log.includesStack,\n      },\n      string\n    );\n  }\n}\nexport async function startReactNativeServerAsync(\n  projectRoot: string,\n  options: Object = {},\n  verbose: boolean = true\n) {\n  _assertValidProjectRoot(projectRoot);\n  await stopReactNativeServerAsync(projectRoot);\n  await Watchman.addToPathAsync(); // Attempt to fix watchman if it's hanging\n  await Watchman.unblockAndGetVersionAsync(projectRoot);\n\n  let { exp } = await ProjectUtils.readConfigJsonAsync(projectRoot);\n\n  let packagerPort = await _getFreePortAsync(19001); // Create packager options\n\n  let packagerOpts = {\n    port: packagerPort,\n    customLogReporterPath: ConfigUtils.resolveModule('expo/tools/LogReporter', projectRoot, exp),\n    assetExts: ['ttf'],\n    nonPersistent: !!options.nonPersistent,\n  };\n\n  if (Versions.gteSdkVersion(exp, '33.0.0')) {\n    packagerOpts.assetPlugins = ConfigUtils.resolveModule(\n      'expo/tools/hashAssetFiles',\n      projectRoot,\n      exp\n    );\n  }\n\n  if (options.maxWorkers) {\n    packagerOpts['max-workers'] = options.maxWorkers;\n  }\n\n  if (!Versions.gteSdkVersion(exp, '16.0.0')) {\n    delete packagerOpts.customLogReporterPath;\n  }\n  const userPackagerOpts = exp.packagerOpts;\n  if (userPackagerOpts) {\n    // The RN CLI expects rn-cli.config.js's path to be absolute. We use the\n    // project root to resolve relative paths since that was the original\n    // behavior of the RN CLI.\n    if (userPackagerOpts.config) {\n      userPackagerOpts.config = path.resolve(projectRoot, userPackagerOpts.config);\n    }\n\n    packagerOpts = {\n      ...packagerOpts,\n      ...userPackagerOpts,\n      ...(userPackagerOpts.assetExts\n        ? {\n            assetExts: uniq([...packagerOpts.assetExts, ...userPackagerOpts.assetExts]),\n          }\n        : {}),\n    };\n\n    if (userPackagerOpts.port !== undefined && userPackagerOpts.port !== null) {\n      packagerPort = userPackagerOpts.port;\n    }\n  }\n  let cliOpts = reduce(\n    packagerOpts,\n    (opts, val, key) => {\n      // If the packager opt value is boolean, don't set\n      // --[opt] [value], just set '--opt'\n      if (val && typeof val === 'boolean') {\n        opts.push(`--${key}`);\n      } else if (val) {\n        opts.push(`--${key}`, val);\n      }\n      return opts;\n    },\n    ['start']\n  );\n\n  if (options.reset) {\n    cliOpts.push('--reset-cache');\n  } // Get custom CLI path from project package.json, but fall back to node_module path\n  let defaultCliPath = ConfigUtils.resolveModule('react-native/local-cli/cli.js', projectRoot, exp);\n  const cliPath = exp.rnCliPath || defaultCliPath;\n  let nodePath;\n  // When using a custom path for the RN CLI, we want it to use the project\n  // root to look up config files and Node modules\n  if (exp.rnCliPath) {\n    nodePath = _nodePathForProjectRoot(projectRoot);\n  } else {\n    nodePath = null;\n  }\n  // Run the copy of Node that's embedded in Electron by setting the\n  // ELECTRON_RUN_AS_NODE environment variable\n  // Note: the CLI script sets up graceful-fs and sets ulimit to 4096 in the\n  // child process\n  let packagerProcess = child_process.fork(cliPath, cliOpts, {\n    cwd: projectRoot,\n    env: {\n      ...process.env,\n      REACT_NATIVE_APP_ROOT: projectRoot,\n      NODE_PATH: nodePath,\n      ELECTRON_RUN_AS_NODE: 1,\n    },\n    silent: true,\n  });\n  await ProjectSettings.setPackagerInfoAsync(projectRoot, {\n    packagerPort,\n    packagerPid: packagerProcess.pid,\n  }); // TODO: do we need this? don't know if it's ever called\n  process.on('exit', () => {\n    treekill(packagerProcess.pid);\n  });\n  packagerProcess.stdout.setEncoding('utf8');\n  packagerProcess.stderr.setEncoding('utf8');\n  packagerProcess.stdout.pipe(split()).on('data', data => {\n    if (verbose) {\n      _logPackagerOutput(projectRoot, 'info', data);\n    }\n  });\n  packagerProcess.stderr.on('data', data => {\n    if (verbose) {\n      _logPackagerOutput(projectRoot, 'error', data);\n    }\n  });\n  let exitPromise = new Promise((resolve, reject) => {\n    packagerProcess.once('exit', async code => {\n      ProjectUtils.logDebug(projectRoot, 'expo', `Metro Bundler process exited with code ${code}`);\n      if (code) {\n        reject(new Error(`Metro Bundler process exited with code ${code}`));\n      } else {\n        resolve();\n      }\n      try {\n        await ProjectSettings.setPackagerInfoAsync(projectRoot, {\n          packagerPort: null,\n          packagerPid: null,\n        });\n      } catch (e) {}\n    });\n  });\n  let packagerUrl = await UrlUtils.constructBundleUrlAsync(projectRoot, {\n    urlType: 'http',\n    hostType: 'localhost',\n  });\n  await Promise.race([_waitForRunningAsync(projectRoot, `${packagerUrl}/status`), exitPromise]);\n}\n\n// Simulate the node_modules resolution\n// If you project dir is /Jesse/Expo/Universe/BubbleBounce, returns\n// \"/Jesse/node_modules:/Jesse/Expo/node_modules:/Jesse/Expo/Universe/node_modules:/Jesse/Expo/Universe/BubbleBounce/node_modules\"\nfunction _nodePathForProjectRoot(projectRoot: string): string {\n  let paths = [];\n  let directory = path.resolve(projectRoot);\n  while (true) {\n    paths.push(path.join(directory, 'node_modules'));\n    let parentDirectory = path.dirname(directory);\n    if (directory === parentDirectory) {\n      break;\n    }\n    directory = parentDirectory;\n  }\n  return paths.join(path.delimiter);\n}\nexport async function stopReactNativeServerAsync(projectRoot: string) {\n  _assertValidProjectRoot(projectRoot);\n  let packagerInfo = await ProjectSettings.readPackagerInfoAsync(projectRoot);\n  if (!packagerInfo.packagerPort || !packagerInfo.packagerPid) {\n    ProjectUtils.logDebug(projectRoot, 'expo', `No packager found for project at ${projectRoot}.`);\n    return;\n  }\n  ProjectUtils.logDebug(\n    projectRoot,\n    'expo',\n    `Killing packager process tree: ${packagerInfo.packagerPid}`\n  );\n  try {\n    await treekillAsync(packagerInfo.packagerPid, 'SIGKILL');\n  } catch (e) {\n    ProjectUtils.logDebug(projectRoot, 'expo', `Error stopping packager process: ${e.toString()}`);\n  }\n  await ProjectSettings.setPackagerInfoAsync(projectRoot, {\n    packagerPort: null,\n    packagerPid: null,\n  });\n}\n\nlet blacklistedEnvironmentVariables = new Set([\n  'EXPO_APPLE_PASSWORD',\n  'EXPO_ANDROID_KEY_PASSWORD',\n  'EXPO_ANDROID_KEYSTORE_PASSWORD',\n  'EXPO_IOS_DIST_P12_PASSWORD',\n  'EXPO_IOS_PUSH_P12_PASSWORD',\n  'EXPO_CLI_PASSWORD',\n]);\n\nfunction shouldExposeEnvironmentVariableInManifest(key) {\n  if (blacklistedEnvironmentVariables.has(key.toUpperCase())) {\n    return false;\n  }\n  return key.startsWith('REACT_NATIVE_') || key.startsWith('EXPO_');\n}\n\nexport async function startExpoServerAsync(projectRoot: string) {\n  _assertValidProjectRoot(projectRoot);\n  await stopExpoServerAsync(projectRoot);\n  let app = express();\n  app.use(\n    express.json({\n      limit: '10mb',\n    })\n  );\n  app.use(\n    express.urlencoded({\n      limit: '10mb',\n      extended: true,\n    })\n  );\n  if ((await Doctor.validateWithNetworkAsync(projectRoot)) === Doctor.FATAL) {\n    throw new Error(`Couldn't start project. Please fix the errors and restart the project.`);\n  } // Serve the manifest.\n  let manifestHandler = async (req, res) => {\n    try {\n      // We intentionally don't `await`. We want to continue trying even\n      // if there is a potential error in the package.json and don't want to slow\n      // down the request\n      Doctor.validateWithNetworkAsync(projectRoot);\n      let { exp: manifest } = await ProjectUtils.readConfigJsonAsync(projectRoot);\n      if (!manifest) {\n        const configName = await ConfigUtils.configFilenameAsync(projectRoot);\n        throw new Error(`No ${configName} file found`);\n      } // Get packager opts and then copy into bundleUrlPackagerOpts\n      let packagerOpts = await ProjectSettings.getPackagerOptsAsync(projectRoot);\n      let bundleUrlPackagerOpts = JSON.parse(JSON.stringify(packagerOpts));\n      bundleUrlPackagerOpts.urlType = 'http';\n      if (bundleUrlPackagerOpts.hostType === 'redirect') {\n        bundleUrlPackagerOpts.hostType = 'tunnel';\n      }\n      manifest.xde = true; // deprecated\n      manifest.developer = {\n        tool: Config.developerTool,\n        projectRoot,\n      };\n      manifest.packagerOpts = packagerOpts;\n      manifest.env = {};\n      for (let key of Object.keys(process.env)) {\n        if (shouldExposeEnvironmentVariableInManifest(key)) {\n          manifest.env[key] = process.env[key];\n        }\n      }\n      let entryPoint = await Exp.determineEntryPointAsync(projectRoot);\n      let platform = req.headers['exponent-platform'] || 'ios';\n      entryPoint = UrlUtils.getPlatformSpecificBundleUrl(entryPoint, platform);\n      let mainModuleName = UrlUtils.guessMainModulePath(entryPoint);\n      let queryParams = await UrlUtils.constructBundleQueryParamsAsync(\n        projectRoot,\n        packagerOpts,\n        req.hostname\n      );\n      let path = `/${encodeURI(mainModuleName)}.bundle?platform=${encodeURIComponent(\n        platform\n      )}&${queryParams}`;\n      manifest.bundleUrl =\n        (await UrlUtils.constructBundleUrlAsync(projectRoot, bundleUrlPackagerOpts, req.hostname)) +\n        path;\n      manifest.debuggerHost = await UrlUtils.constructDebuggerHostAsync(projectRoot, req.hostname);\n      manifest.mainModuleName = mainModuleName;\n      manifest.logUrl = await UrlUtils.constructLogUrlAsync(projectRoot, req.hostname);\n      manifest.hostUri = await UrlUtils.constructHostUriAsync(projectRoot, req.hostname);\n      await _resolveManifestAssets(\n        projectRoot,\n        manifest,\n        async path => manifest.bundleUrl.match(/^https?:\\/\\/.*?\\//)[0] + 'assets/' + path\n      ); // the server normally inserts this but if we're offline we'll do it here\n      await _resolveGoogleServicesFile(projectRoot, manifest);\n      const hostUUID = await UserSettings.anonymousIdentifier();\n      let currentSession = await UserManager.getSessionAsync();\n      if (!currentSession || Config.offline) {\n        manifest.id = `@${ANONYMOUS_USERNAME}/${manifest.slug}-${hostUUID}`;\n      }\n      let manifestString = JSON.stringify(manifest);\n      if (req.headers['exponent-accept-signature']) {\n        if (_cachedSignedManifest.manifestString === manifestString) {\n          manifestString = _cachedSignedManifest.signedManifest;\n        } else {\n          if (!currentSession || Config.offline) {\n            const unsignedManifest = {\n              manifestString,\n              signature: 'UNSIGNED',\n            };\n            _cachedSignedManifest.manifestString = manifestString;\n            manifestString = JSON.stringify(unsignedManifest);\n            _cachedSignedManifest.signedManifest = manifestString;\n          } else {\n            let publishInfo = await Exp.getPublishInfoAsync(projectRoot);\n            let signedManifest = await Api.callMethodAsync(\n              'signManifest',\n              [publishInfo.args],\n              'post',\n              manifest\n            );\n            _cachedSignedManifest.manifestString = manifestString;\n            _cachedSignedManifest.signedManifest = signedManifest.response;\n            manifestString = signedManifest.response;\n          }\n        }\n      }\n      const hostInfo = {\n        host: hostUUID,\n        server: 'xdl',\n        serverVersion: require('../package.json').version,\n        serverDriver: Config.developerTool,\n        serverOS: os.platform(),\n        serverOSVersion: os.release(),\n      };\n      res.append('Exponent-Server', JSON.stringify(hostInfo));\n      res.send(manifestString);\n      Analytics.logEvent('Serve Manifest', {\n        projectRoot,\n        developerTool: Config.developerTool,\n      });\n    } catch (e) {\n      ProjectUtils.logDebug(projectRoot, 'expo', `Error in manifestHandler: ${e} ${e.stack}`);\n      // 5xx = Server Error HTTP code\n      res.status(520).send({\n        error: e.toString(),\n      });\n    }\n  };\n  app.get('/', manifestHandler);\n  app.get('/manifest', manifestHandler);\n  app.get('/index.exp', manifestHandler);\n  app.post('/logs', async (req, res) => {\n    try {\n      let deviceId = req.get('Device-Id');\n      let deviceName = req.get('Device-Name');\n      if (deviceId && deviceName && req.body) {\n        _handleDeviceLogs(projectRoot, deviceId, deviceName, req.body);\n      }\n    } catch (e) {\n      ProjectUtils.logError(projectRoot, 'expo', `Error getting device logs: ${e} ${e.stack}`);\n    }\n    res.send('Success');\n  });\n  app.post('/shutdown', async (req, res) => {\n    server.close();\n    res.send('Success');\n  });\n  let expRc = await ProjectUtils.readExpRcAsync(projectRoot);\n  let expoServerPort = expRc.manifestPort ? expRc.manifestPort : await _getFreePortAsync(19000);\n  await ProjectSettings.setPackagerInfoAsync(projectRoot, {\n    expoServerPort,\n  });\n  let server = app.listen(expoServerPort, () => {\n    let host = server.address().address;\n    let port = server.address().port;\n    ProjectUtils.logDebug(projectRoot, 'expo', `Local server listening at http://${host}:${port}`);\n  });\n  await Exp.saveRecentExpRootAsync(projectRoot);\n}\n\nexport async function stopExpoServerAsync(projectRoot: string) {\n  _assertValidProjectRoot(projectRoot);\n  let packagerInfo = await ProjectSettings.readPackagerInfoAsync(projectRoot);\n  if (packagerInfo && packagerInfo.expoServerPort) {\n    try {\n      await axios.post(`http://127.0.0.1:${packagerInfo.expoServerPort}/shutdown`);\n    } catch (e) {}\n  }\n  await ProjectSettings.setPackagerInfoAsync(projectRoot, {\n    expoServerPort: null,\n  });\n}\n\nasync function _connectToNgrokAsync(\n  projectRoot: string,\n  args: mixed,\n  hostnameAsync: Function,\n  ngrokPid: ?number,\n  attempts: number = 0\n) {\n  try {\n    let configPath = path.join(UserSettings.dotExpoHomeDirectory(), 'ngrok.yml');\n    let hostname = await hostnameAsync();\n    let url = await ngrokConnectAsync({\n      hostname,\n      configPath,\n      ...args,\n    });\n    return url;\n  } catch (e) {\n    // Attempt to connect 3 times\n    if (attempts >= 2) {\n      if (e.message) {\n        throw new XDLError('NGROK_ERROR', e.toString());\n      } else {\n        throw new XDLError('NGROK_ERROR', JSON.stringify(e));\n      }\n    }\n    if (!attempts) {\n      attempts = 0;\n    } // Attempt to fix the issue\n    if (e.error_code && e.error_code === 103) {\n      if (attempts === 0) {\n        // Failed to start tunnel. Might be because url already bound to another session.\n        if (ngrokPid) {\n          try {\n            process.kill(ngrokPid, 'SIGKILL');\n          } catch (e) {\n            ProjectUtils.logDebug(projectRoot, 'expo', `Couldn't kill ngrok with PID ${ngrokPid}`);\n          }\n        } else {\n          await ngrokKillAsync();\n        }\n      } else {\n        // Change randomness to avoid conflict if killing ngrok didn't help\n        await Exp.resetProjectRandomnessAsync(projectRoot);\n      }\n    } // Wait 100ms and then try again\n    await delayAsync(100);\n    return _connectToNgrokAsync(projectRoot, args, hostnameAsync, null, attempts + 1);\n  }\n}\n\nexport async function startTunnelsAsync(projectRoot: string) {\n  let username = await UserManager.getCurrentUsernameAsync();\n  if (!username) {\n    username = ANONYMOUS_USERNAME;\n  }\n  _assertValidProjectRoot(projectRoot);\n  let packagerInfo = await ProjectSettings.readPackagerInfoAsync(projectRoot);\n  if (!packagerInfo.packagerPort) {\n    throw new XDLError('NO_PACKAGER_PORT', `No packager found for project at ${projectRoot}.`);\n  }\n  if (!packagerInfo.expoServerPort) {\n    throw new XDLError(\n      'NO_EXPO_SERVER_PORT',\n      `No Expo server found for project at ${projectRoot}.`\n    );\n  }\n  await stopTunnelsAsync(projectRoot);\n  if (await Android.startAdbReverseAsync(projectRoot)) {\n    ProjectUtils.logInfo(\n      projectRoot,\n      'expo',\n      'Successfully ran `adb reverse`. Localhost URLs should work on the connected Android device.'\n    );\n  }\n  let packageShortName = path.parse(projectRoot).base;\n  let expRc = await ConfigUtils.readExpRcAsync(projectRoot);\n\n  let startedTunnelsSuccessfully = false;\n\n  // Some issues with ngrok cause it to hang indefinitely. After\n  // TUNNEL_TIMEOUTms we just throw an error.\n  await Promise.race([\n    (async () => {\n      await delayAsync(TUNNEL_TIMEOUT);\n      if (!startedTunnelsSuccessfully) {\n        throw new Error('Starting tunnels timed out');\n      }\n    })(),\n    (async () => {\n      let expoServerNgrokUrl = await _connectToNgrokAsync(\n        projectRoot,\n        {\n          authtoken: Config.ngrok.authToken,\n          port: packagerInfo.expoServerPort,\n          proto: 'http',\n        },\n        async () => {\n          let randomness = expRc.manifestTunnelRandomness\n            ? expRc.manifestTunnelRandomness\n            : await Exp.getProjectRandomnessAsync(projectRoot);\n          return [\n            randomness,\n            UrlUtils.domainify(username),\n            UrlUtils.domainify(packageShortName),\n            Config.ngrok.domain,\n          ].join('.');\n        },\n        packagerInfo.ngrokPid\n      );\n      let packagerNgrokUrl = await _connectToNgrokAsync(\n        projectRoot,\n        {\n          authtoken: Config.ngrok.authToken,\n          port: packagerInfo.packagerPort,\n          proto: 'http',\n        },\n        async () => {\n          let randomness = expRc.manifestTunnelRandomness\n            ? expRc.manifestTunnelRandomness\n            : await Exp.getProjectRandomnessAsync(projectRoot);\n          return [\n            'packager',\n            randomness,\n            UrlUtils.domainify(username),\n            UrlUtils.domainify(packageShortName),\n            Config.ngrok.domain,\n          ].join('.');\n        },\n        packagerInfo.ngrokPid\n      );\n      await ProjectSettings.setPackagerInfoAsync(projectRoot, {\n        expoServerNgrokUrl,\n        packagerNgrokUrl,\n        ngrokPid: ngrok.process().pid,\n      });\n\n      startedTunnelsSuccessfully = true;\n\n      ProjectUtils.logWithLevel(\n        projectRoot,\n        'info',\n        {\n          tag: 'expo',\n          _expoEventType: 'TUNNEL_READY',\n        },\n        'Tunnel ready.'\n      );\n\n      ngrok.addListener('statuschange', status => {\n        if (status === 'reconnecting') {\n          ProjectUtils.logError(\n            projectRoot,\n            'expo',\n            'We noticed your tunnel is having issues. ' +\n              'This may be due to intermittent problems with our tunnel provider. ' +\n              'If you have trouble connecting to your app, try to Restart the project, ' +\n              'or switch Host to LAN.'\n          );\n        } else if (status === 'online') {\n          ProjectUtils.logInfo(projectRoot, 'expo', 'Tunnel connected.');\n        }\n      });\n    })(),\n  ]);\n}\n\nexport async function stopTunnelsAsync(projectRoot: string) {\n  _assertValidProjectRoot(projectRoot);\n  // This will kill all ngrok tunnels in the process.\n  // We'll need to change this if we ever support more than one project\n  // open at a time in XDE.\n  let packagerInfo = await ProjectSettings.readPackagerInfoAsync(projectRoot);\n  let ngrokProcess = ngrok.process();\n  let ngrokProcessPid = ngrokProcess ? ngrokProcess.pid : null;\n  ngrok.removeAllListeners('statuschange');\n  if (packagerInfo.ngrokPid && packagerInfo.ngrokPid !== ngrokProcessPid) {\n    // Ngrok is running in some other process. Kill at the os level.\n    try {\n      process.kill(packagerInfo.ngrokPid);\n    } catch (e) {\n      ProjectUtils.logDebug(\n        projectRoot,\n        'expo',\n        `Couldn't kill ngrok with PID ${packagerInfo.ngrokPid}`\n      );\n    }\n  } else {\n    // Ngrok is running from the current process. Kill using ngrok api.\n    await ngrokKillAsync();\n  }\n  await ProjectSettings.setPackagerInfoAsync(projectRoot, {\n    expoServerNgrokUrl: null,\n    packagerNgrokUrl: null,\n    ngrokPid: null,\n  });\n  await Android.stopAdbReverseAsync(projectRoot);\n}\n\nexport async function setOptionsAsync(\n  projectRoot: string,\n  options: {\n    packagerPort?: number,\n  }\n) {\n  _assertValidProjectRoot(projectRoot); // Check to make sure all options are valid\n  let schema = joi.object().keys({\n    packagerPort: joi.number().integer(),\n  });\n  const { error } = joi.validate(options, schema);\n  if (error) {\n    throw new XDLError('INVALID_OPTIONS', error.toString());\n  }\n  await ProjectSettings.setPackagerInfoAsync(projectRoot, options);\n}\nexport async function getUrlAsync(projectRoot: string, options: Object = {}) {\n  _assertValidProjectRoot(projectRoot);\n  return await UrlUtils.constructManifestUrlAsync(projectRoot, options);\n}\n\nexport async function optimizeAsync(projectRoot: string = './', options: Object = {}) {\n  logger.global.info(chalk.green('Optimizing assets...'));\n\n  const { assetJson, assetInfo } = await readAssetJsonAsync(projectRoot);\n  // Keep track of which hash values in assets.json are no longer in use\n  const outdated = new Set();\n  for (const fileHash in assetInfo) outdated.add(fileHash);\n\n  let totalSaved = 0;\n  const { allFiles, selectedFiles } = await getAssetFilesAsync(projectRoot, options);\n  const hashes = {};\n  // Remove assets that have been deleted/modified from assets.json\n  allFiles.forEach(image => {\n    const hash = calculateHash(image);\n    if (assetInfo[hash]) {\n      outdated.delete(hash);\n    }\n    hashes[image] = hash;\n  });\n  outdated.forEach(outdatedHash => {\n    delete assetInfo[outdatedHash];\n  });\n\n  const { quality, include, exclude, save } = options;\n\n  const images = include || exclude ? selectedFiles : allFiles;\n  for (const image of images) {\n    const hash = hashes[image];\n    if (assetInfo[hash]) {\n      continue;\n    }\n    const { size: prevSize } = fs.statSync(image);\n\n    const newName = createNewFilename(image);\n    const optimizedImage = await optimizeImageAsync(image, quality);\n\n    const { size: newSize } = fs.statSync(optimizedImage);\n    const amountSaved = prevSize - newSize;\n    if (amountSaved > 0) {\n      await fs.move(image, newName);\n      await fs.move(optimizedImage, image);\n    } else {\n      assetInfo[hash] = true;\n      logger.global.info(\n        chalk.gray(\n          amountSaved === 0\n            ? `Compressed version of ${image} same size as original. Using original instead.`\n            : `Compressed version of ${image} was larger than original. Using original instead.`\n        )\n      );\n      continue;\n    }\n    // Recalculate hash since the image has changed\n    const newHash = calculateHash(image);\n    assetInfo[newHash] = true;\n\n    if (save) {\n      if (hash === newHash) {\n        logger.global.info(\n          chalk.gray(\n            `Compressed asset ${image} is identical to the original. Using original instead.`\n          )\n        );\n        fs.unlinkSync(newName);\n      } else {\n        logger.global.info(chalk.gray(`Saving original asset to ${newName}`));\n        // Save the old hash to prevent reoptimizing\n        assetInfo[hash] = true;\n      }\n    } else {\n      // Delete the renamed original asset\n      fs.unlinkSync(newName);\n    }\n    if (amountSaved) {\n      totalSaved += amountSaved;\n      logger.global.info(`Saved ${toReadableValue(amountSaved)}`);\n    } else {\n      logger.global.info(chalk.gray(`Nothing to compress.`));\n    }\n  }\n  if (totalSaved === 0) {\n    logger.global.info('No assets optimized. Everything is fully compressed!');\n  } else {\n    logger.global.info(\n      `Finished compressing assets. ${chalk.green(toReadableValue(totalSaved))} saved.`\n    );\n  }\n  assetJson.writeAsync(assetInfo);\n}\n\nexport async function startAsync(\n  projectRoot: string,\n  options: Object = {},\n  verbose: boolean = true\n): Promise<any> {\n  _assertValidProjectRoot(projectRoot);\n  Analytics.logEvent('Start Project', {\n    projectRoot,\n    developerTool: Config.developerTool,\n  });\n\n  let { exp } = await ProjectUtils.readConfigJsonAsync(projectRoot);\n  if (options.webOnly) {\n    await Webpack.startAsync(projectRoot, options, verbose);\n    DevSession.startSession(projectRoot, exp, 'web');\n  } else {\n    await startExpoServerAsync(projectRoot);\n    await startReactNativeServerAsync(projectRoot, options, verbose);\n    DevSession.startSession(projectRoot, exp, 'native');\n  }\n\n  if (!Config.offline) {\n    try {\n      await startTunnelsAsync(projectRoot);\n    } catch (e) {\n      ProjectUtils.logDebug(projectRoot, 'expo', `Error starting tunnel ${e.message}`);\n    }\n  }\n  return exp;\n}\n\nasync function _stopInternalAsync(projectRoot: string): Promise<void> {\n  DevSession.stopSession();\n  await stopExpoServerAsync(projectRoot);\n  await stopReactNativeServerAsync(projectRoot);\n  const hasWebSupport = await Doctor.hasWebSupportAsync(projectRoot);\n  if (hasWebSupport) {\n    await Webpack.stopAsync(projectRoot);\n  }\n  if (!Config.offline) {\n    try {\n      await stopTunnelsAsync(projectRoot);\n    } catch (e) {\n      ProjectUtils.logDebug(projectRoot, 'expo', `Error stopping ngrok ${e.message}`);\n    }\n  }\n}\n\nexport async function stopAsync(projectDir: string): Promise<void> {\n  const result = await Promise.race([\n    _stopInternalAsync(projectDir),\n    new Promise((resolve, reject) => setTimeout(resolve, 2000, 'stopFailed')),\n  ]);\n  if (result === 'stopFailed') {\n    // find RN packager and ngrok pids, attempt to kill them manually\n    const { packagerPid, ngrokPid } = await ProjectSettings.readPackagerInfoAsync(projectDir);\n    if (packagerPid) {\n      try {\n        process.kill(packagerPid);\n      } catch (e) {}\n    }\n    if (ngrokPid) {\n      try {\n        process.kill(ngrokPid);\n      } catch (e) {}\n    }\n    await ProjectSettings.setPackagerInfoAsync(projectDir, {\n      expoServerPort: null,\n      packagerPort: null,\n      packagerPid: null,\n      expoServerNgrokUrl: null,\n      packagerNgrokUrl: null,\n      ngrokPid: null,\n      webpackServerPort: null,\n    });\n  }\n}\n"],"sourceRoot":"/@expo/xdl@55.0.14/src"}