{"version":3,"sources":["Extract.js"],"names":["async","_extractWindowsAsync","archive","dir","let","dotExpoHomeDirectory","UserSettings","tmpDir","path","join","uuid","v4","fs","mkdirpSync","binary","Binaries","getBinariesPath","await","spawnAsync","files","readdirSync","outputFile","resolve","e","console","error","message","stderr","rimraf","sync","extractAsync","process","platform","stdio","cwd","__dirname","tar","extract","file"],"mappings":";;;;;;;AAIA;;AACA;;AACA;;AACA;;AACA;;AACA;;AAEA;;AACA;;;;;;AAEAA,eAAeC,oBAAfD,CAAoCE,OAApCF,EAAqDG,GAArDH,EAAkE;AAChEI,MAAIC,oBAAAA,GAAuBC,sBAAaD,oBAAbC,EAA3BF;;AACAA,MAAIG,MAAAA,GAASC,cAAKC,IAALD,CAAUH,oBAAVG,EAAgC,KAAhCA,EAAuCE,cAAKC,EAALD,EAAvCF,CAAbJ;;AACAQ,mBAAGC,UAAHD,CAAcL,MAAdK;;AACAR,MAAIU,MAAAA,GAASN,cAAKC,IAALD,CAAUO,QAAQ,CAACC,eAATD,EAAVP,EAAsC,cAAtCA,EAAsD,KAAtDA,CAAbJ;;AACA,MAAI;AACFa,UAAMC,yBAAWJ,MAAXI,EAAmB,CAAC,GAAD,EAAMhB,OAAN,EAAe,MAAf,EAAwB,KAAIK,MAAO,EAAnC,CAAnBW,CAAND,CADE,CAEF;AACA;AACA;;AACAb,QAAIe,KAAAA,GAAQP,iBAAGQ,WAAHR,CAAeL,MAAfK,CAAZR;;AACAA,QAAIiB,UAAAA,GAAab,cAAKc,OAALd,CAAaD,MAAbC,EAAqBW,KAAK,CAAC,CAAD,CAA1BX,CAAjBJ;;AACAa,UAAMC,yBAAWJ,MAAXI,EAAmB,CAAC,GAAD,EAAMG,UAAN,EAAkB,MAAlB,EAA2B,KAAIlB,GAAI,EAAnC,CAAnBe,CAAND;AACF,GARA,CAQE,OAAOM,CAAP,EAAU;AACVC,IAAAA,OAAO,CAACC,KAARD,CAAcD,CAAC,CAACG,OAAhBF;AACAA,IAAAA,OAAO,CAACC,KAARD,CAAcD,CAAC,CAACI,MAAhBH;AACA,UAAMD,CAAN;AACF,GAZA,SAYU;AACRK,oBAAOC,IAAPD,CAAYrB,MAAZqB;AACF;AACF;;AAEO5B,eAAe8B,YAAf9B,CAA4BE,OAA5BF,EAA6CG,GAA7CH,EAA0D;AAC/D,MAAI;AACF,QAAI+B,OAAO,CAACC,QAARD,KAAqB,OAAzB,EAAkC;AAChCd,YAAMhB,oBAAoB,CAACC,OAAD,EAAUC,GAAV,CAA1Bc;AACF,KAFA,MAEO;AACLA,YAAMC,yBAAW,KAAXA,EAAkB,CAAC,KAAD,EAAQhB,OAAR,EAAiB,IAAjB,EAAuBC,GAAvB,CAAlBe,EAA+C;AACnDe,QAAAA,KAAK,EAAE,SAD4C;AAEnDC,QAAAA,GAAG,EAAEC;AAF8C,OAA/CjB,CAAND;AAIF;AACF,GATA,CASE,OAAOM,CAAP,EAAU;AACV;AACA;AACAC,IAAAA,OAAO,CAACC,KAARD,CAAcD,CAAC,CAACG,OAAhBF;AACAP,UAAMmB,aAAIC,OAAJD,CAAY;AAAEE,MAAAA,IAAI,EAAEpC,OAAR;AAAiBgC,MAAAA,GAAG,EAAE/B;AAAtB,KAAZiC,CAANnB;AACF;AACF","file":"../Extract.js","sourcesContent":["/**\n * @flow\n */\n\nimport fs from 'fs-extra';\nimport tar from 'tar';\nimport path from 'path';\nimport spawnAsync from '@expo/spawn-async';\nimport rimraf from 'rimraf';\nimport uuid from 'uuid';\n\nimport * as Binaries from './Binaries';\nimport UserSettings from './UserSettings';\n\nasync function _extractWindowsAsync(archive: string, dir: string) {\n  let dotExpoHomeDirectory = UserSettings.dotExpoHomeDirectory();\n  let tmpDir = path.join(dotExpoHomeDirectory, 'tmp', uuid.v4());\n  fs.mkdirpSync(tmpDir);\n  let binary = path.join(Binaries.getBinariesPath(), '7z1602-extra', '7za');\n  try {\n    await spawnAsync(binary, ['x', archive, '-aoa', `-o${tmpDir}`]);\n    // We don't know the resulting filename after this step, so\n    // just assume the only file in the directory is our .tar file.\n    // This should be fine since we created the directory with a random name.\n    let files = fs.readdirSync(tmpDir);\n    let outputFile = path.resolve(tmpDir, files[0]);\n    await spawnAsync(binary, ['x', outputFile, '-aoa', `-o${dir}`]);\n  } catch (e) {\n    console.error(e.message);\n    console.error(e.stderr);\n    throw e;\n  } finally {\n    rimraf.sync(tmpDir);\n  }\n}\n\nexport async function extractAsync(archive: string, dir: string) {\n  try {\n    if (process.platform === 'win32') {\n      await _extractWindowsAsync(archive, dir);\n    } else {\n      await spawnAsync('tar', ['-xf', archive, '-C', dir], {\n        stdio: 'inherit',\n        cwd: __dirname,\n      });\n    }\n  } catch (e) {\n    // tar node module has previously had problems with big files, and seems to\n    // be slower, so only use it as a backup.\n    console.error(e.message);\n    await tar.extract({ file: archive, cwd: dir });\n  }\n}\n"],"sourceRoot":"/@expo/xdl@55.0.14/src"}