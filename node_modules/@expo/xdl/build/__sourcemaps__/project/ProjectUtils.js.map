{"version":3,"sources":["project/ProjectUtils.ts"],"names":["MAX_MESSAGE_LENGTH","_projectRootToLogger","_getLogger","projectRoot","logger","Logger","child","type","project","path","resolve","logWithLevel","level","fields","msg","id","issueId","debug","info","warn","error","logDebug","tag","message","toString","logInfo","logError","truncatedMessage","length","substring","logWarning","Analytics","logEvent","clearNotification","issueCleared","attachLoggerStream","stream","addStream","readExpRcAsync","ConfigUtils","e","readConfigJsonAsync","exp","pkg"],"mappings":"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","sourcesContent":["import * as ConfigUtils from '@expo/config';\nimport path from 'path';\n\nimport * as Analytics from '../Analytics';\nimport Logger, { LogStream, Log } from '../Logger';\n\nconst MAX_MESSAGE_LENGTH = 200;\nlet _projectRootToLogger: { [projectRoot: string]: Log } = {};\n\nfunction _getLogger(projectRoot: string): Log {\n  let logger = _projectRootToLogger[projectRoot];\n  if (!logger) {\n    logger = Logger.child({\n      type: 'project',\n      project: path.resolve(projectRoot),\n    });\n    _projectRootToLogger[projectRoot] = logger;\n  }\n\n  return logger;\n}\n\nexport type LogTag = 'expo' | 'metro' | 'device';\nexport type LogFields = {\n  tag: LogTag;\n  issueId?: string;\n  issueCleared?: boolean;\n};\n\nexport function logWithLevel(\n  projectRoot: string,\n  level: string,\n  fields: LogFields,\n  msg: string,\n  id?: string\n) {\n  if (id) {\n    fields.issueId = id;\n  }\n\n  let logger = _getLogger(projectRoot);\n  switch (level) {\n    case 'debug':\n      logger.debug(fields, msg);\n      break;\n    case 'info':\n      logger.info(fields, msg);\n      break;\n    case 'warn':\n      logger.warn(fields, msg);\n      break;\n    case 'error':\n      logger.error(fields, msg);\n      break;\n    default:\n      logger.debug(fields, msg);\n      break;\n  }\n}\n\nexport function logDebug(projectRoot: string, tag: LogTag, message: string, id?: string) {\n  _getLogger(projectRoot).debug({ tag }, message.toString());\n}\n\nexport function logInfo(projectRoot: string, tag: LogTag, message: string, id?: string) {\n  const fields: LogFields = { tag };\n  if (id) {\n    fields.issueId = id;\n  }\n  _getLogger(projectRoot).info(fields, message.toString());\n}\n\nexport function logError(projectRoot: string, tag: LogTag, message: string, id?: string) {\n  const fields: LogFields = { tag };\n  if (id) {\n    fields.issueId = id;\n  }\n  _getLogger(projectRoot).error(fields, message.toString());\n\n  let truncatedMessage = message.toString();\n  if (truncatedMessage.length > MAX_MESSAGE_LENGTH) {\n    truncatedMessage = truncatedMessage.substring(0, MAX_MESSAGE_LENGTH);\n  }\n\n  // temporarily remove sentry until we can trim events\n  // send error to Sentry\n  // Sentry.logError(message.toString(), {\n  //   tags: { tag },\n  // });\n}\n\nexport function logWarning(projectRoot: string, tag: LogTag, message: string, id?: string) {\n  const fields: LogFields = { tag };\n  if (id) {\n    fields.issueId = id;\n  }\n  _getLogger(projectRoot).warn(fields, message.toString());\n\n  let truncatedMessage = message.toString();\n  if (truncatedMessage.length > MAX_MESSAGE_LENGTH) {\n    truncatedMessage = truncatedMessage.substring(0, MAX_MESSAGE_LENGTH);\n  }\n  Analytics.logEvent('Project Warning', {\n    projectRoot,\n    tag,\n    message: truncatedMessage,\n  });\n}\n\nexport function clearNotification(projectRoot: string, id: string) {\n  _getLogger(projectRoot).info(\n    {\n      tag: 'expo',\n      issueCleared: true,\n      issueId: id,\n    },\n    `No issue with ${id}`\n  );\n}\n\nexport function attachLoggerStream(projectRoot: string, stream: LogStream) {\n  _getLogger(projectRoot).addStream(stream as LogStream);\n}\n\n// Wrap with logger\n\nexport async function readExpRcAsync(projectRoot: string): Promise<any> {\n  try {\n    return await ConfigUtils.readExpRcAsync(projectRoot);\n  } catch (e) {\n    logError(projectRoot, 'expo', e.message);\n    return {};\n  }\n}\n\nexport async function readConfigJsonAsync(\n  projectRoot: string\n): Promise<ConfigUtils.ProjectConfig | { exp: null; pkg: null }> {\n  try {\n    return await ConfigUtils.readConfigJsonAsync(projectRoot);\n  } catch (error) {\n    logError(projectRoot, 'expo', error.message);\n    return { exp: null, pkg: null };\n  }\n}\n"],"file":"../../project/ProjectUtils.js","sourceRoot":"/@expo/xdl@55.0.14/src"}