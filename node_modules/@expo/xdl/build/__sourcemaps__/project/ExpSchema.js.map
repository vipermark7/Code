{"version":3,"sources":["project/ExpSchema.js"],"names":["let","_xdlSchemaJson","async","validatorFromProjectRoot","projectRoot","exp","await","ProjectUtils","readConfigJsonAsync","Error","schema","getSchemaAsync","sdkVersion","validator","Schemer","json","_getSchemaJSONAsync","getAssetSchemasAsync","assetSchemas","visit","node","fieldPath","meta","asset","push","properties","Object","keys","forEach","property","length","process","env","LOCAL_XDL_SCHEMA","EXPONENT_UNIVERSE_DIR","JSON","parse","fs","readFileSync","path","join","toString","Api","xdlSchemaAsync","e","code"],"mappings":";;;;;;;;;AAIA;;AACA;;AACA;;AACA;;AACA;;;;;;AAEAA,IAAIC,cAAAA,GAAiB,EAArBD;;AAEOE,eAAeC,wBAAfD,CAAwCE,WAAxCF,EAAsE;AAC3E,QAAM;AAAEG,IAAAA;AAAF,MAAUC,MAAMC,YAAY,CAACC,mBAAbD,CAAiCH,WAAjCG,CAAtB;AACA,MAAI,CAACF,GAAL,EAAU,MAAM,IAAII,KAAJ,CAAW,8BAAX,CAAN;AACV,QAAMC,MAAAA,GAASJ,MAAMK,cAAc,CAACN,GAAG,CAACO,UAAL,CAAnC;AACA,QAAMC,SAAAA,GAAY,IAAIC,gBAAJ,CAAYJ,MAAZ,CAAlB;AACA,SAAOG,SAAP;AACF;;AAEOX,eAAeS,cAAfT,CAA8BU,UAA9BV,EAAkD;AACvDF,MAAIe,IAAAA,GAAOT,MAAMU,mBAAmB,CAACJ,UAAD,CAApCZ;AACA,SAAOe,IAAI,CAACL,MAAZ;AACF,C,CAEA;AACA;;;AACOR,eAAee,oBAAff,CAAoCU,UAApCV,EAAwD;AAC7D,QAAMQ,MAAAA,GAASJ,MAAMK,cAAc,CAACC,UAAD,CAAnC;AACA,QAAMM,YAAAA,GAAe,EAArB;;AACA,QAAMC,KAAAA,GAAQ,CAACC,IAAD,EAAOC,SAAP,KAAqB;AACjC,QAAID,IAAI,CAACE,IAALF,IAAaA,IAAI,CAACE,IAALF,CAAUG,KAA3B,EAAkC;AAChCL,MAAAA,YAAY,CAACM,IAAbN,CAAkB;AAAER,QAAAA,MAAM,EAAEU,IAAV;AAAgBC,QAAAA;AAAhB,OAAlBH;AACF;;AACA,UAAMO,UAAAA,GAAaL,IAAI,CAACK,UAAxB;;AACA,QAAIA,UAAJ,EAAgB;AACdC,MAAAA,MAAM,CAACC,IAAPD,CAAYD,UAAZC,EAAwBE,OAAxBF,CAAgCG,QAAAA,IAC9BV,KAAK,CAACM,UAAU,CAACI,QAAD,CAAX,EAAwB,GAAER,SAAU,GAAEA,SAAS,CAACS,MAAVT,GAAmB,CAAnBA,GAAuB,GAAvBA,GAA6B,EAAG,GAAEQ,QAAS,EAAjF,CADPH;AAGF;AACD,GAVD;;AAWAP,EAAAA,KAAK,CAACT,MAAD,EAAS,EAAT,CAALS;AACA,SAAOD,YAAP;AACF;;AAEAhB,eAAec,mBAAfd,CAAmCU,UAAnCV,EAA+C;AAC7C,MAAI6B,OAAO,CAACC,GAARD,CAAYE,gBAAhB,EAAkC;AAChC,QAAIF,OAAO,CAACC,GAARD,CAAYG,qBAAhB,EAAuC;AACrC,aAAOC,IAAI,CAACC,KAALD,CACLE,YACGC,YADHD,CAEIE,cAAKC,IAALD,CACER,OAAO,CAACC,GAARD,CAAYG,qBADdK,EAEE,QAFFA,EAGE,KAHFA,EAIE,aAJFA,EAKE,yBALFA,CAFJF,EAUGI,QAVHJ,EADKF,CAAP;AAaF,KAdA,MAcO;AACL,YAAM,IAAI1B,KAAJ,CAAW,2DAAX,CAAN;AACF;AACF;;AAEA,MAAI,CAACR,cAAc,CAACW,UAAD,CAAnB,EAAiC;AAC/B,QAAI;AACFX,MAAAA,cAAc,CAACW,UAAD,CAAdX,GAA6BK,MAAMoC,aAAIC,cAAJD,CAAmB9B,UAAnB8B,CAAnCzC;AACF,KAFA,CAEE,OAAO2C,CAAP,EAAU;AACV,UAAIA,CAAC,CAACC,IAAFD,IAAUA,CAAC,CAACC,IAAFD,KAAW,cAAzB,EAAyC;AACvC,cAAM,IAAInC,KAAJ,CAAW,kCAAX,CAAN;AACF,OAFA,MAEO;AACL,cAAMmC,CAAN;AACF;AACF;AACF;;AAEA,SAAO3C,cAAc,CAACW,UAAD,CAArB;AACF","file":"../../project/ExpSchema.js","sourcesContent":["/**\n * @flow\n */\n\nimport fs from 'fs';\nimport path from 'path';\nimport Schemer from '@expo/schemer';\nimport Api from '../Api';\nimport * as ProjectUtils from './ProjectUtils';\n\nlet _xdlSchemaJson = {};\n\nexport async function validatorFromProjectRoot(projectRoot: string): Schemer {\n  const { exp } = await ProjectUtils.readConfigJsonAsync(projectRoot);\n  if (!exp) throw new Error(`Couldn't read local manifest`);\n  const schema = await getSchemaAsync(exp.sdkVersion);\n  const validator = new Schemer(schema);\n  return validator;\n}\n\nexport async function getSchemaAsync(sdkVersion: string) {\n  let json = await _getSchemaJSONAsync(sdkVersion);\n  return json.schema;\n}\n\n// Array of schema nodes that refer to assets along with their field\n// path (eg. 'notification.icon')\nexport async function getAssetSchemasAsync(sdkVersion: string) {\n  const schema = await getSchemaAsync(sdkVersion);\n  const assetSchemas = [];\n  const visit = (node, fieldPath) => {\n    if (node.meta && node.meta.asset) {\n      assetSchemas.push({ schema: node, fieldPath });\n    }\n    const properties = node.properties;\n    if (properties) {\n      Object.keys(properties).forEach(property =>\n        visit(properties[property], `${fieldPath}${fieldPath.length > 0 ? '.' : ''}${property}`)\n      );\n    }\n  };\n  visit(schema, '');\n  return assetSchemas;\n}\n\nasync function _getSchemaJSONAsync(sdkVersion) {\n  if (process.env.LOCAL_XDL_SCHEMA) {\n    if (process.env.EXPONENT_UNIVERSE_DIR) {\n      return JSON.parse(\n        fs\n          .readFileSync(\n            path.join(\n              process.env.EXPONENT_UNIVERSE_DIR,\n              'server',\n              'www',\n              'xdl-schemas',\n              'UNVERSIONED-schema.json'\n            )\n          )\n          .toString()\n      );\n    } else {\n      throw new Error(`LOCAL_XDL_SCHEMA is set but EXPONENT_UNIVERSE_DIR is not.`);\n    }\n  }\n\n  if (!_xdlSchemaJson[sdkVersion]) {\n    try {\n      _xdlSchemaJson[sdkVersion] = await Api.xdlSchemaAsync(sdkVersion);\n    } catch (e) {\n      if (e.code && e.code === 'INVALID_JSON') {\n        throw new Error(`Couldn't read schema from server`);\n      } else {\n        throw e;\n      }\n    }\n  }\n\n  return _xdlSchemaJson[sdkVersion];\n}\n"],"sourceRoot":"/@expo/xdl@55.0.14/src"}