{"version":3,"sources":["Simulator.js"],"names":["let","_lastUrl","SUGGESTED_XCODE_VERSION","XCODE_NOT_INSTALLED_ERROR","isPlatformSupported","process","platform","_isLicenseOutOfDate","text","lower","toLowerCase","includes","async","_xcrunAsync","args","await","spawnAsync","e","stdout","stderr","XDLError","Logger","global","error","join","_isSimulatorInstalledAsync","result","osascript","execAsync","trim","console","warn","matches","match","length","version","semver","valid","lt","isXDLError","toString","_openSimulatorAsync","_isSimulatorRunningAsync","info","_waitForSimulatorRunningAsync","zeroMeansNo","bootedDevice","_bootedSimulatorDeviceAsync","_bootDefaultSimulatorDeviceAsync","defaultDeviceUDID","_getDefaultSimulatorDeviceUDIDAsync","_getFirstAvailableDeviceAsync","udid","delayAsync","simulatorDeviceInfo","_listSimulatorDevicesAsync","runtime","devices","i","device","isAvailable","name","infoJson","JSON","parse","state","_dirForSimulatorDevice","path","resolve","homeDir","_quitSimulatorAsync","_isExpoAppInstalledOnCurrentBootedSimulatorAsync","simDir","glob","cwd","_waitForExpoAppInstalledOnCurrentBootedSimulatorAsync","_expoVersionOnCurrentBootedSimulatorAsync","regex","regexMatch","exec","_checkExpoUpToDateAsync","versions","Versions","versionsAsync","installedVersion","iosVersion","notifications","code","NotificationCode","OLD_IOS_APP_VERSION","_downloadSimulatorAppAsync","url","dir","_simulatorCacheDirectory","Api","downloadAsync","extract","fs","exists","filesInDir","readdir","rimraf","sync","mkdirpSync","iosUrl","_installExpoOnSimulatorAsync","START_LOADING","STOP_LOADING","_uninstallExpoAppFromSimulatorAsync","message","dotExpoHomeDirectory","UserSettings","upgradeExpoAsync","installResult","status","_openUrlInSimulatorAsync","openUrlInSimulatorSafeAsync","isDetached","boolean","success","msg","Analytics","logEvent","openProjectAsync","projectRoot","projectUrl","UrlUtils","constructManifestUrlAsync","hostType","exp","ProjectUtils","readConfigJsonAsync"],"mappings":"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","file":"../Simulator.js","sourcesContent":["/**\n * @flow\n */\n\nimport delayAsync from 'delay-async';\nimport glob from 'glob-promise';\nimport homeDir from 'home-dir';\nimport * as osascript from '@expo/osascript';\nimport path from 'path';\nimport semver from 'semver';\nimport spawnAsync from '@expo/spawn-async';\nimport rimraf from 'rimraf';\nimport fs from 'fs-extra';\n\nimport * as Analytics from './Analytics';\nimport Api from './Api';\nimport Logger from './Logger';\nimport NotificationCode from './NotificationCode';\nimport * as ProjectUtils from './project/ProjectUtils';\nimport UserSettings from './UserSettings';\nimport * as Versions from './Versions';\nimport XDLError from './XDLError';\nimport * as UrlUtils from './UrlUtils';\n\nlet _lastUrl = null;\n\nconst SUGGESTED_XCODE_VERSION = `8.2.0`;\nconst XCODE_NOT_INSTALLED_ERROR =\n  'Simulator not installed. Please visit https://developer.apple.com/xcode/download/ to download Xcode and the iOS simulator. If you already have the latest version of Xcode installed, you may have to run the command `sudo xcode-select -s /Applications/Xcode.app`.';\n\nexport function isPlatformSupported() {\n  return process.platform === 'darwin';\n}\n\nfunction _isLicenseOutOfDate(text) {\n  if (!text) {\n    return false;\n  }\n\n  let lower = text.toLowerCase();\n  return lower.includes('xcode') && lower.includes('license');\n}\n\nasync function _xcrunAsync(args) {\n  try {\n    return await spawnAsync('xcrun', args);\n  } catch (e) {\n    if (_isLicenseOutOfDate(e.stdout) || _isLicenseOutOfDate(e.stderr)) {\n      throw new XDLError(\n        'XCODE_LICENSE_NOT_ACCEPTED',\n        'Xcode license is not accepted. Please run `sudo xcodebuild -license`.'\n      );\n    } else {\n      Logger.global.error(`Error running \\`xcrun ${args.join(' ')}\\`: ${e.stderr}`);\n      throw e;\n    }\n  }\n}\n\n// Simulator installed\nexport async function _isSimulatorInstalledAsync() {\n  let result;\n  try {\n    result = (await osascript.execAsync('id of app \"Simulator\"')).trim();\n  } catch (e) {\n    console.error(\n      \"Can't determine id of Simulator app; the Simulator is most likely not installed on this machine\",\n      e\n    );\n    Logger.global.error(XCODE_NOT_INSTALLED_ERROR);\n    return false;\n  }\n  if (\n    result !== 'com.apple.iphonesimulator' &&\n    result !== 'com.apple.CoreSimulator.SimulatorTrampoline'\n  ) {\n    console.warn(\n      \"Simulator is installed but is identified as '\" + result + \"'; don't know what that is.\"\n    );\n    Logger.global.error(XCODE_NOT_INSTALLED_ERROR);\n    return false;\n  }\n\n  // check xcode version\n  try {\n    const { stdout } = await spawnAsync('xcodebuild', ['-version']);\n\n    // find something that looks like a dot separated version number\n    let matches = stdout.match(/[\\d]{1,2}\\.[\\d]{1,3}/);\n    if (matches.length === 0) {\n      // very unlikely\n      console.error('No version number found from `xcodebuild -version`.');\n      Logger.global.error(\n        'Unable to check Xcode version. Command ran successfully but no version number was found.'\n      );\n      return false;\n    }\n\n    // we're cheating to use the semver lib, but it expects a proper patch version which xcode doesn't have\n    const version = matches[0] + '.0';\n\n    if (!semver.valid(version)) {\n      console.error('Invalid version number found: ' + matches[0]);\n      return false;\n    }\n\n    if (semver.lt(version, SUGGESTED_XCODE_VERSION)) {\n      console.warn(\n        `Found Xcode ${version}, which is older than the recommended Xcode ${SUGGESTED_XCODE_VERSION}.`\n      );\n    }\n  } catch (e) {\n    // how would this happen? presumably if Simulator id is found then xcodebuild is installed\n    console.error(`Unable to check Xcode version: ${e}`);\n    Logger.global.error(XCODE_NOT_INSTALLED_ERROR);\n    return false;\n  }\n\n  // make sure we can run simctl\n  try {\n    await _xcrunAsync(['simctl', 'help']);\n  } catch (e) {\n    if (e.isXDLError) {\n      Logger.global.error(e.toString());\n    } else {\n      console.warn(`Unable to run simctl: ${e.toString()}`);\n      Logger.global.error(\n        'xcrun may not be configured correctly. Try running `sudo xcode-select --reset` and running this again.'\n      );\n    }\n    return false;\n  }\n\n  return true;\n}\n\n// Simulator opened\nexport async function _openSimulatorAsync() {\n  if (!(await _isSimulatorRunningAsync())) {\n    Logger.global.info('Opening iOS simulator');\n    await spawnAsync('open', ['-a', 'Simulator']);\n    await _waitForSimulatorRunningAsync();\n  }\n}\n\nexport async function _isSimulatorRunningAsync() {\n  let zeroMeansNo = (await osascript.execAsync(\n    'tell app \"System Events\" to count processes whose name is \"Simulator\"'\n  )).trim();\n  if (zeroMeansNo === '0') {\n    return false;\n  }\n\n  let bootedDevice = await _bootedSimulatorDeviceAsync();\n\n  if (!bootedDevice) {\n    return await _bootDefaultSimulatorDeviceAsync();\n  }\n\n  return !!bootedDevice;\n}\n\nasync function _bootDefaultSimulatorDeviceAsync() {\n  Logger.global.info(`Booting device in iOS simulator...`);\n  try {\n    let defaultDeviceUDID = await _getDefaultSimulatorDeviceUDIDAsync();\n    if (!defaultDeviceUDID) {\n      defaultDeviceUDID = (await _getFirstAvailableDeviceAsync()).udid;\n    }\n    return await _xcrunAsync(['simctl', 'boot', defaultDeviceUDID]);\n  } catch (e) {\n    Logger.global.error(\n      `There was a problem booting a device in iOS Simulator. Quit Simulator, and try again.`\n    );\n    throw e;\n  }\n}\n\nasync function _getDefaultSimulatorDeviceUDIDAsync() {\n  try {\n    const { stdout: defaultDeviceUDID } = await spawnAsync('defaults', [\n      'read',\n      'com.apple.iphonesimulator',\n      'CurrentDeviceUDID',\n    ]);\n    return defaultDeviceUDID.trim();\n  } catch (e) {\n    return null;\n  }\n}\n\nasync function _waitForSimulatorRunningAsync() {\n  if (await _isSimulatorRunningAsync()) {\n    return true;\n  } else {\n    await delayAsync(100);\n    return await _waitForSimulatorRunningAsync();\n  }\n}\n\nasync function _getFirstAvailableDeviceAsync() {\n  let simulatorDeviceInfo = await _listSimulatorDevicesAsync();\n  for (let runtime in simulatorDeviceInfo.devices) {\n    let devices = simulatorDeviceInfo.devices[runtime];\n    for (let i = 0; i < devices.length; i++) {\n      let device = devices[i];\n      if (device.isAvailable && device.name.includes('iPhone')) {\n        return device;\n      }\n    }\n  }\n  Logger.global.warn('No iPhone devices available in Simulator.');\n  return null;\n}\n\nasync function _listSimulatorDevicesAsync() {\n  let infoJson = await _xcrunAsync(['simctl', 'list', 'devices', '--json']);\n  let info = JSON.parse(infoJson.stdout);\n  return info;\n}\n\nasync function _bootedSimulatorDeviceAsync() {\n  let simulatorDeviceInfo = await _listSimulatorDevicesAsync();\n  for (let runtime in simulatorDeviceInfo.devices) {\n    let devices = simulatorDeviceInfo.devices[runtime];\n    for (let i = 0; i < devices.length; i++) {\n      let device = devices[i];\n      if (device.state === 'Booted') {\n        return device;\n      }\n    }\n  }\n  return null;\n}\n\nexport function _dirForSimulatorDevice(udid: string) {\n  return path.resolve(homeDir(), 'Library/Developer/CoreSimulator/Devices', udid);\n}\n\nexport async function _quitSimulatorAsync() {\n  return await osascript.execAsync('tell application \"Simulator\" to quit');\n}\n\n// Expo installed\nexport async function _isExpoAppInstalledOnCurrentBootedSimulatorAsync() {\n  let device = await _bootedSimulatorDeviceAsync();\n  if (!device) {\n    return false;\n  }\n  let simDir = await _dirForSimulatorDevice(device.udid);\n  let matches = await glob(\n    './data/Containers/Data/Application/*/Library/Caches/Snapshots/host.exp.Exponent',\n    { cwd: simDir }\n  );\n\n  return matches.length > 0;\n}\n\nexport async function _waitForExpoAppInstalledOnCurrentBootedSimulatorAsync() {\n  if (await _isExpoAppInstalledOnCurrentBootedSimulatorAsync()) {\n    return true;\n  } else {\n    await delayAsync(100);\n    return await _waitForExpoAppInstalledOnCurrentBootedSimulatorAsync();\n  }\n}\n\nexport async function _expoVersionOnCurrentBootedSimulatorAsync() {\n  let device = await _bootedSimulatorDeviceAsync();\n  if (!device) {\n    return null;\n  }\n  let simDir = await _dirForSimulatorDevice(device.udid);\n  let matches = await glob('./data/Containers/Bundle/Application/*/Exponent-*.app', {\n    cwd: simDir,\n  });\n\n  if (matches.length === 0) {\n    return null;\n  }\n\n  let regex = /Exponent-([0-9.]+)\\.app/;\n  let regexMatch = regex.exec(matches[0]);\n  if (regexMatch.length < 2) {\n    return null;\n  }\n\n  return regexMatch[1];\n}\n\nexport async function _checkExpoUpToDateAsync() {\n  let versions = await Versions.versionsAsync();\n  let installedVersion = await _expoVersionOnCurrentBootedSimulatorAsync();\n\n  if (!installedVersion || semver.lt(installedVersion, versions.iosVersion)) {\n    Logger.notifications.warn(\n      { code: NotificationCode.OLD_IOS_APP_VERSION },\n      'This version of the Expo app is out of date. Uninstall the app and run again to upgrade.'\n    );\n  }\n}\n\nexport async function _downloadSimulatorAppAsync(url) {\n  // If specific URL given just always download it and don't use cache\n  if (url) {\n    let dir = path.join(_simulatorCacheDirectory(), `Exponent-tmp.app`);\n    await Api.downloadAsync(url, dir, { extract: true });\n    return dir;\n  }\n\n  let versions = await Versions.versionsAsync();\n  let dir = path.join(_simulatorCacheDirectory(), `Exponent-${versions.iosVersion}.app`);\n\n  if (await fs.exists(dir)) {\n    let filesInDir = await fs.readdir(dir);\n    if (filesInDir.length > 0) {\n      return dir;\n    } else {\n      rimraf.sync(dir);\n    }\n  }\n\n  fs.mkdirpSync(dir);\n  try {\n    await Api.downloadAsync(versions.iosUrl, dir, { extract: true });\n  } catch (e) {\n    rimraf.sync(dir);\n    throw e;\n  }\n\n  return dir;\n}\n\n// url: Optional URL of Exponent.app tarball to download\nexport async function _installExpoOnSimulatorAsync(url) {\n  Logger.global.info(`Downloading the latest version of Expo client app`);\n  Logger.notifications.info({ code: NotificationCode.START_LOADING });\n  let dir = await _downloadSimulatorAppAsync(url);\n  Logger.notifications.info({ code: NotificationCode.STOP_LOADING });\n  Logger.global.info('Installing Expo client on iOS simulator');\n  Logger.notifications.info({ code: NotificationCode.START_LOADING });\n  let result = await _xcrunAsync(['simctl', 'install', 'booted', dir]);\n  Logger.notifications.info({ code: NotificationCode.STOP_LOADING });\n  return result;\n}\n\nexport async function _uninstallExpoAppFromSimulatorAsync() {\n  try {\n    Logger.global.info('Uninstalling Expo client from iOS simulator.');\n    await _xcrunAsync(['simctl', 'uninstall', 'booted', 'host.exp.Exponent']);\n  } catch (e) {\n    if (e.message && e.message.includes('No devices are booted.')) {\n      return null;\n    } else {\n      console.error(e);\n      throw e;\n    }\n  }\n}\n\nexport function _simulatorCacheDirectory() {\n  let dotExpoHomeDirectory = UserSettings.dotExpoHomeDirectory();\n  let dir = path.join(dotExpoHomeDirectory, 'ios-simulator-app-cache');\n  fs.mkdirpSync(dir);\n  return dir;\n}\n\nexport async function upgradeExpoAsync(): Promise<boolean> {\n  if (!(await _isSimulatorInstalledAsync())) {\n    return false;\n  }\n\n  await _openSimulatorAsync();\n  await _uninstallExpoAppFromSimulatorAsync();\n  let installResult = await _installExpoOnSimulatorAsync();\n  if (installResult.status !== 0) {\n    return false;\n  }\n\n  if (_lastUrl) {\n    Logger.global.info(`Opening ${_lastUrl} in Expo.`);\n    await _xcrunAsync(['simctl', 'openurl', 'booted', _lastUrl]);\n    _lastUrl = null;\n  }\n\n  return true;\n}\n\n// Open Url\nexport async function _openUrlInSimulatorAsync(url: string) {\n  return await _xcrunAsync(['simctl', 'openurl', 'booted', url]);\n}\n\nexport async function openUrlInSimulatorSafeAsync(\n  url: string,\n  isDetached: boolean = false\n): Promise<{ success: true } | { success: false, msg: string }> {\n  if (!(await _isSimulatorInstalledAsync())) {\n    return {\n      success: false,\n      msg: 'Unable to verify Xcode and Simulator installation.',\n    };\n  }\n\n  try {\n    await _openSimulatorAsync();\n\n    if (!isDetached && !(await _isExpoAppInstalledOnCurrentBootedSimulatorAsync())) {\n      await _installExpoOnSimulatorAsync();\n      await _waitForExpoAppInstalledOnCurrentBootedSimulatorAsync();\n    }\n\n    if (!isDetached) {\n      _lastUrl = url;\n      _checkExpoUpToDateAsync(); // let this run in background\n    }\n\n    Logger.global.info(`Opening ${url} in iOS simulator`);\n    await _openUrlInSimulatorAsync(url);\n  } catch (e) {\n    if (e.isXDLError) {\n      // Hit some internal error, don't try again.\n      // This includes Xcode license errors\n      Logger.global.error(e.message);\n      return {\n        success: false,\n        msg: `${e.toString()}`,\n      };\n    }\n\n    if (isDetached) {\n      Logger.global.error(\n        `Error running app. Have you installed the app already using Xcode? Since you are detached you must build manually. ${e.toString()}`\n      );\n    } else {\n      Logger.global.error(`Error installing or running app. ${e.toString()}`);\n    }\n\n    return {\n      success: false,\n      msg: `${e.toString()}`,\n    };\n  }\n\n  Analytics.logEvent('Open Url on Device', {\n    platform: 'ios',\n  });\n\n  return {\n    success: true,\n  };\n}\n\nexport async function openProjectAsync(\n  projectRoot: string\n): Promise<{ success: true, url: string } | { success: false, error: string }> {\n  let projectUrl = await UrlUtils.constructManifestUrlAsync(projectRoot, {\n    hostType: 'localhost',\n  });\n\n  let { exp } = await ProjectUtils.readConfigJsonAsync(projectRoot);\n\n  let result = await openUrlInSimulatorSafeAsync(projectUrl, !!exp.isDetached);\n  if (result.success) {\n    return { success: true, url: projectUrl };\n  } else {\n    return { success: result.success, error: result.msg };\n  }\n}\n"],"sourceRoot":"/@expo/xdl@55.0.14/src"}