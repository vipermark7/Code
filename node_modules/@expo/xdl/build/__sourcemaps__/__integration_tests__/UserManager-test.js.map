{"version":3,"sources":["__integration_tests__/UserManager-test.js"],"names":["_makeShortId","salt","minLength","number","hashIds","HashIds","encode","Date","now","describe","let","userForTest","userForTestPassword","beforeAll","async","process","env","__UNSAFE_EXPO_HOME_DIRECTORY","path","join","uuid","v1","UserManager","_newTestUserManager","username","password","newUser","await","registerAsync","email","givenName","familyName","logoutAsync","afterAll","fs","removeSync","api","ApiV2Client","clientForUser","postAsync","e","console","error","it","default","require","expect","toBeDefined","initialize","ensureLoggedInAsync","message","toEqual","loginAsync","user","getCurrentUserAsync","not","toBeNull","toBe","sessionSecret","toBeFalsy","_getProfileSpy","jest","fn","_getProfileAsync","toHaveBeenCalled","_currentUser","users","Promise","all","toHaveBeenCalledTimes","UserManagerInstance"],"mappings":"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","file":"../../__integration_tests__/UserManager-test.js","sourcesContent":["/**\n * @flow\n */\n\nimport fs from 'fs-extra';\nimport path from 'path';\nimport HashIds from 'hashids';\nimport uuid from 'uuid';\nimport ApiV2Client from '../ApiV2';\nimport { UserManagerInstance } from '../User';\n\nimport type { User } from '../User';\n\nconst _makeShortId = (salt: string, minLength: number = 10): string => {\n  const hashIds = new HashIds(salt, minLength);\n  return hashIds.encode(Date.now());\n};\n\ndescribe('UserManager', () => {\n  let userForTest;\n  let userForTestPassword;\n\n  beforeAll(async () => {\n    process.env.__UNSAFE_EXPO_HOME_DIRECTORY = path.join(\n      '/',\n      'tmp',\n      `.expo-${_makeShortId(uuid.v1())}`\n    );\n\n    const UserManager = _newTestUserManager();\n\n    const username = `xdl-test-${_makeShortId(uuid.v1())}`;\n    const password = uuid.v1();\n\n    // Register a new user that we can use for this test run\n    const newUser = await UserManager.registerAsync({\n      username,\n      password,\n      email: `adam+${username}@getexponent.com`,\n      givenName: 'XDL',\n      familyName: 'Test User',\n    });\n\n    userForTest = newUser;\n    userForTestPassword = password; // save password so we can use it to login\n\n    await UserManager.logoutAsync(); // log us out so we're in a clean state for these tests\n  });\n\n  afterAll(async () => {\n    if (process.env.__UNSAFE_EXPO_HOME_DIRECTORY) {\n      fs.removeSync(process.env.__UNSAFE_EXPO_HOME_DIRECTORY);\n    }\n\n    const api = ApiV2Client.clientForUser(userForTest);\n    try {\n      await api.postAsync('auth/deleteUser');\n    } catch (e) {\n      console.error(e);\n    }\n  });\n\n  it('should make available a global, shared UserManager singleton', () => {\n    const { default: UserManager } = require('../User');\n    expect(UserManager).toBeDefined();\n    expect(UserManager.initialize).toBeDefined();\n  });\n\n  it('should not have a currently logged in user', async () => {\n    const UserManager = _newTestUserManager();\n    try {\n      await UserManager.ensureLoggedInAsync();\n    } catch (e) {\n      expect(e.message).toEqual('Not logged in');\n    }\n  });\n\n  it('should login successfully', async () => {\n    const UserManager = _newTestUserManager();\n    await UserManager.loginAsync('user-pass', {\n      username: userForTest.username,\n      password: userForTestPassword,\n    });\n\n    const user = await UserManager.getCurrentUserAsync();\n    expect(user).not.toBeNull();\n    if (!user) {\n      return;\n    }\n    expect(user.username).toBe(userForTest.username);\n    expect(user.sessionSecret).not.toBeFalsy();\n  });\n\n  it('should use cached user after first run of getCurrentUserAsync() instead of making call to www', async () => {\n    const UserManager = _newTestUserManager();\n    await UserManager.loginAsync('user-pass', {\n      username: userForTest.username,\n      password: userForTestPassword,\n    });\n\n    // Spy on getProfileAsync\n    const _getProfileSpy = jest.fn(UserManager._getProfileAsync);\n    // $FlowFixMe\n    UserManager._getProfileAsync = _getProfileSpy;\n\n    await UserManager.getCurrentUserAsync();\n\n    expect(_getProfileSpy).not.toHaveBeenCalled();\n  });\n\n  it('should correctly use lock to prevent getting session twice, simulatenously', async () => {\n    const UserManager = _newTestUserManager();\n    await UserManager.loginAsync('user-pass', {\n      username: userForTest.username,\n      password: userForTestPassword,\n    });\n\n    UserManager._currentUser = null;\n\n    // Spy on getProfileAsync\n    const _getProfileSpy = jest.fn(UserManager._getProfileAsync);\n    // $FlowFixMe\n    UserManager._getProfileAsync = _getProfileSpy;\n\n    const users = ((await Promise.all([\n      UserManager.getCurrentUserAsync(),\n      UserManager.getCurrentUserAsync(),\n    ]): any): Array<User>);\n\n    expect(_getProfileSpy).toHaveBeenCalledTimes(1);\n\n    // This shouldn't have changed, but just double check it\n    expect(users[0].sessionSecret).toEqual(users[1].sessionSecret);\n  });\n});\n\nfunction _newTestUserManager() {\n  const UserManager = new UserManagerInstance();\n  UserManager.initialize();\n  return UserManager;\n}\n"],"sourceRoot":"/@expo/xdl@55.0.14/src"}