{"version":3,"sources":["__integration_tests__/UserSessions-test.js"],"names":["_makeShortId","salt","minLength","number","hashIds","HashIds","encode","Date","now","describe","let","userForTest","userForTestPassword","beforeAll","async","process","env","__UNSAFE_EXPO_HOME_DIRECTORY","path","join","uuid","v1","UserManager","_newTestUserManager","username","password","newUser","await","registerAsync","email","givenName","familyName","logoutAsync","afterAll","fs","removeSync","api","ApiV2Client","clientForUser","postAsync","e","console","error","it","loginAsync","testSession","user","getCurrentUserAsync","expect","not","toBeNull","toBe","sessionSecret","undefined","UserSettings","getAsync","formData","FormData","append","response","Api","callMethodAsync","status","UserManagerInstance","initialize"],"mappings":"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","file":"../../__integration_tests__/UserSessions-test.js","sourcesContent":["/**\n * @flow\n */\n\nimport fs from 'fs-extra';\nimport path from 'path';\nimport HashIds from 'hashids';\nimport uuid from 'uuid';\nimport ApiV2Client from '../ApiV2';\nimport Api from '../Api';\nimport { UserManagerInstance } from '../User';\nimport UserSettings from '../UserSettings';\nimport FormData from '../tools/FormData';\n\nconst _makeShortId = (salt: string, minLength: number = 10): string => {\n  const hashIds = new HashIds(salt, minLength);\n  return hashIds.encode(Date.now());\n};\n\ndescribe('User Sessions', () => {\n  let userForTest;\n  let userForTestPassword;\n\n  beforeAll(async () => {\n    process.env.__UNSAFE_EXPO_HOME_DIRECTORY = path.join(\n      '/',\n      'tmp',\n      `.expo-${_makeShortId(uuid.v1())}`\n    );\n\n    const UserManager = _newTestUserManager();\n\n    const username = `xdl-test-${_makeShortId(uuid.v1())}`;\n    const password = uuid.v1();\n\n    // Register a new user that we can use for this test run\n    const newUser = await UserManager.registerAsync({\n      username,\n      password,\n      email: `adam+${username}@getexponent.com`,\n      givenName: 'XDL',\n      familyName: 'Test User',\n    });\n\n    userForTest = newUser;\n    userForTestPassword = password; // save password so we can use it to login\n\n    await UserManager.logoutAsync(); // log us out so we're in a clean state for these tests\n  });\n\n  afterAll(async () => {\n    if (process.env.__UNSAFE_EXPO_HOME_DIRECTORY) {\n      fs.removeSync(process.env.__UNSAFE_EXPO_HOME_DIRECTORY);\n    }\n\n    const api = ApiV2Client.clientForUser(userForTest);\n    try {\n      await api.postAsync('auth/deleteUser');\n    } catch (e) {\n      console.error(e);\n    }\n  });\n\n  it('should login successfully, and persist a session token upon login', async () => {\n    const UserManager = _newTestUserManager();\n    await UserManager.loginAsync('user-pass', {\n      username: userForTest.username,\n      password: userForTestPassword,\n      testSession: true,\n    });\n\n    const user = await UserManager.getCurrentUserAsync();\n    expect(user).not.toBeNull();\n    if (!user) {\n      return;\n    }\n    // expect session to be cached\n    expect(user.username).toBe(userForTest.username);\n    expect(user.sessionSecret).not.toBe(undefined);\n\n    // expect session to be in state.json\n    let { sessionSecret } = await UserSettings.getAsync('auth', {});\n    expect(sessionSecret).not.toBe(undefined);\n  });\n  it('should remove a session token upon logout', async () => {\n    const UserManager = _newTestUserManager();\n    await UserManager.loginAsync('user-pass', {\n      username: userForTest.username,\n      password: userForTestPassword,\n    });\n\n    await UserManager.logoutAsync();\n\n    // expect session to be removed\n    let { sessionSecret } = await UserSettings.getAsync('auth', {});\n    expect(sessionSecret).toBe(undefined);\n  });\n\n  it('should use the token in apiv1', async () => {\n    const UserManager = _newTestUserManager();\n    await UserManager.loginAsync('user-pass', {\n      username: userForTest.username,\n      password: userForTestPassword,\n    });\n\n    let formData = new FormData();\n    formData.append('queryType', 'history');\n    formData.append('slug', 'foobar');\n\n    let response = await Api.callMethodAsync(\n      'publishInfo',\n      [],\n      'post',\n      null,\n      {\n        formData,\n      },\n      true\n    );\n    expect(response.status).toBe(200);\n  });\n\n  it('should use the token in apiv2', async () => {\n    const UserManager = _newTestUserManager();\n    await UserManager.loginAsync('user-pass', {\n      username: userForTest.username,\n      password: userForTestPassword,\n    });\n\n    const user = await UserManager.getCurrentUserAsync();\n    const api = ApiV2Client.clientForUser(user);\n    const response = await api.getAsync('auth/intercomUserHash', {}, {}, true);\n    expect(response.status).toBe(200);\n  });\n});\n\nfunction _newTestUserManager() {\n  const UserManager = new UserManagerInstance();\n  UserManager.initialize();\n  return UserManager;\n}\n"],"sourceRoot":"/@expo/xdl@55.0.14/src"}