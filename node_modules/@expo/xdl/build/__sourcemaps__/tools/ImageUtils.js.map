{"version":3,"sources":["tools/ImageUtils.ts"],"names":["getImageDimensionsAsync","projectDirname","basename","_getImageDimensionsAsync","_","_getImageDimensionsWithImageProbeAsync","imagePath","path","resolve","readStream","fs","createReadStream","width","height","destroy","_hasWarned","resizeImageAsync","iconSizePx","iconFilename","destinationIconPath","process","platform","_resizeImageAsync","_resizeImageWithSipsAsync","LoggerDetach","warn","toFixed","stdio","cwd","setResizeImageFunction","fn","setGetImageDimensionsFunction"],"mappings":";;;;;;;;;;AAAA;;AACA;;AAEA;;AAEA;;AACA;;;;AAEA;;;;;AAKA,eAAeA,uBAAf,CACEC,cADF,EAEEC,QAFF,EAGqD;AACnD,MAAI;AACF,WAAO,MAAMC,wBAAwB,CAACF,cAAD,EAAiBC,QAAjB,CAArC;AACD,GAFD,CAEE,OAAOE,CAAP,EAAU,CAAE;;AACd,SAAO,IAAP;AACD;;AAED,eAAeC,sCAAf,CACEJ,cADF,EAEEC,QAFF,EAG8C;AAC5C,QAAMI,SAAS,GAAGC,cAAKC,OAAL,CAAaP,cAAb,EAA6BC,QAA7B,CAAlB;;AACA,QAAMO,UAAU,GAAGC,YAAGC,gBAAH,CAAoBL,SAApB,CAAnB;;AACA,QAAM;AAAEM,IAAAA,KAAF;AAASC,IAAAA;AAAT,MAAoB,MAAM,6BAAeJ,UAAf,CAAhC;AACAA,EAAAA,UAAU,CAACK,OAAX;AACA,SAAO;AAAEF,IAAAA,KAAF;AAASC,IAAAA;AAAT,GAAP;AACD;;AAED,IAAIE,UAAU,GAAG,KAAjB;;AACA,eAAeC,gBAAf,CACEC,UADF,EAEEC,YAFF,EAGEC,mBAHF,EAIE;AACA,MACEC,OAAO,CAACC,QAAR,KAAqB,QAArB,IACAC,iBAAiB,KAAKC,yBADtB,IAEA,CAACR,UAHH,EAIE;AACAS,oBAAaC,IAAb,CAAkB,qDAAlB;;AACAV,IAAAA,UAAU,GAAG,IAAb;AACD;;AACD,SAAOO,iBAAiB,CAACL,UAAD,EAAaC,YAAb,EAA2BC,mBAA3B,CAAxB;AACD;;AAED,eAAeI,yBAAf,CACEN,UADF,EAEEC,YAFF,EAGEC,mBAHF,EAIE;AACA,SAAO,yCAAqB,MAArB,EAA6B,CAAC,IAAD,EAAOF,UAAU,CAACS,OAAX,EAAP,EAA6BR,YAA7B,CAA7B,EAAyE;AAC9ES,IAAAA,KAAK,EAAE,CAAC,QAAD,EAAW,QAAX,EAAqB,SAArB,CADuE;AACtC;AACxCC,IAAAA,GAAG,EAAET;AAFyE,GAAzE,CAAP;AAID,C,CAED;;;AACA,IAAIG,iBAAiB,GAAGC,yBAAxB;AACA,IAAIpB,wBAGkD,GAAGE,sCAHzD,C,CAKA;AACA;;AACA,SAASwB,sBAAT,CACEC,EADF,EAEE;AACAR,EAAAA,iBAAiB,GAAGQ,EAApB;AACD,C,CAED;AACA;;;AACA,SAASC,6BAAT,CACED,EADF,EAEE;AACA3B,EAAAA,wBAAwB,GAAG2B,EAA3B;AACD","sourcesContent":["import path from 'path';\nimport fs from 'fs';\n\nimport probeImageSize from 'probe-image-size';\n\nimport { spawnAsyncThrowError } from '../detach/ExponentTools';\nimport LoggerDetach from '../detach/Logger';\n\n/**\n * @param {string} projectDirname\n * @param {string} basename\n * @returns {} { width: number, height: number } image dimensions or null\n */\nasync function getImageDimensionsAsync(\n  projectDirname: string,\n  basename: string\n): Promise<{ width: number; height: number } | null> {\n  try {\n    return await _getImageDimensionsAsync(projectDirname, basename);\n  } catch (_) {}\n  return null;\n}\n\nasync function _getImageDimensionsWithImageProbeAsync(\n  projectDirname: string,\n  basename: string\n): Promise<{ width: number; height: number }> {\n  const imagePath = path.resolve(projectDirname, basename);\n  const readStream = fs.createReadStream(imagePath);\n  const { width, height } = await probeImageSize(readStream);\n  readStream.destroy();\n  return { width, height };\n}\n\nlet _hasWarned = false;\nasync function resizeImageAsync(\n  iconSizePx: number,\n  iconFilename: string,\n  destinationIconPath: string\n) {\n  if (\n    process.platform !== 'darwin' &&\n    _resizeImageAsync === _resizeImageWithSipsAsync &&\n    !_hasWarned\n  ) {\n    LoggerDetach.warn('`sips` utility may or may not work outside of macOS');\n    _hasWarned = true;\n  }\n  return _resizeImageAsync(iconSizePx, iconFilename, destinationIconPath);\n}\n\nasync function _resizeImageWithSipsAsync(\n  iconSizePx: number,\n  iconFilename: string,\n  destinationIconPath: string\n) {\n  return spawnAsyncThrowError('sips', ['-Z', iconSizePx.toFixed(), iconFilename], {\n    stdio: ['ignore', 'ignore', 'inherit'], // only stderr\n    cwd: destinationIconPath,\n  });\n}\n\n// Allow us to swap out the default implementations of image functions\nlet _resizeImageAsync = _resizeImageWithSipsAsync;\nlet _getImageDimensionsAsync: (\n  dirname: string,\n  filename: string\n) => Promise<{ width: number; height: number } | null> = _getImageDimensionsWithImageProbeAsync;\n\n// Allow users to provide an alternate implementation for our image resize function.\n// This is used internally in order to use sharp instead of sips in standalone builder.\nfunction setResizeImageFunction(\n  fn: (iconSizePx: number, iconFilename: string, destinationIconPath: string) => Promise<any>\n) {\n  _resizeImageAsync = fn;\n}\n\n// Allow users to provide an alternate implementation for our image dimensions function.\n// This is used internally in order to use sharp instead of sips in standalone builder.\nfunction setGetImageDimensionsFunction(\n  fn: (dirname: string, filename: string) => Promise<{ width: number; height: number } | null>\n) {\n  _getImageDimensionsAsync = fn;\n}\n\nexport {\n  resizeImageAsync,\n  setResizeImageFunction,\n  setGetImageDimensionsFunction,\n  getImageDimensionsAsync,\n};\n"],"file":"../../tools/ImageUtils.js","sourceRoot":"/@expo/xdl@55.0.14/src"}