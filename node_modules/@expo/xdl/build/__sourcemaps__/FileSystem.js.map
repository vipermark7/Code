{"version":3,"sources":["FileSystem.js"],"names":["let","osascript","process","platform","require","openFolderName","openConsoleName","async","openFolderAsync","dir","await","openFinderToFolderAsync","spawnAsync","openConsoleAsync","openFolderInTerminalAppAsync","child_process","exec","openFileInEditorAsync","path","openInEditorAsync","env","EXPO_EDITOR","XDLError","openProjectInEditorAsync"],"mappings":";;;;;;;;;;;;AAIA;;AACA;;AAEA;;AACA;;;;;;AAEAA,IAAIC,SAAJD;;AACA,IAAIE,OAAO,CAACC,QAARD,KAAqB,QAAzB,EAAmC;AACjCD,EAAAA,SAAAA,GAAYG,OAAO,CAAC,iBAAD,CAAnBH;AACF;;AAEO,SAASI,cAAT,GAA0B;AAC/B,MAAIH,OAAO,CAACC,QAARD,KAAqB,QAAzB,EAAmC;AACjC,WAAO,gBAAP;AACF,GAFA,MAEO,IAAIA,OAAO,CAACC,QAARD,KAAqB,OAAzB,EAAkC;AACvC,WAAO,uBAAP;AACF;AACF;;AAEO,SAASI,eAAT,GAA2B;AAChC,MAAIJ,OAAO,CAACC,QAARD,KAAqB,QAAzB,EAAmC;AACjC,WAAO,kBAAP;AACF,GAFA,MAEO,IAAIA,OAAO,CAACC,QAARD,KAAqB,OAAzB,EAAkC;AACvC,WAAO,aAAP;AACF;AACF;;AAEOK,eAAeC,eAAfD,CAA+BE,GAA/BF,EAA4C;AACjD,MAAIL,OAAO,CAACC,QAARD,KAAqB,QAAzB,EAAmC;AACjC,WAAOQ,MAAMT,SAAS,CAACU,uBAAVV,CAAkCQ,GAAlCR,CAAb;AACF,GAFA,MAEO,IAAIC,OAAO,CAACC,QAARD,KAAqB,OAAzB,EAAkC;AACvC,WAAOQ,MAAME,yBAAW,UAAXA,EAAuB,CAACH,GAAD,CAAvBG,CAAb;AACF;AACF;;AAEOL,eAAeM,gBAAfN,CAAgCE,GAAhCF,EAA6C;AAClD,MAAIL,OAAO,CAACC,QAARD,KAAqB,QAAzB,EAAmC;AACjC,WAAOQ,MAAMT,SAAS,CAACa,4BAAVb,CAAuCQ,GAAvCR,CAAb;AACF,GAFA,MAEO,IAAIC,OAAO,CAACC,QAARD,KAAqB,OAAzB,EAAkC;AACvCa,2BAAcC,IAAdD,CAAoB,uBAAsBN,GAAI,GAA9CM;AACF;AACF;;AAEOR,eAAeU,qBAAfV,CAAqCW,IAArCX,EAAmD;AACxD,MAAIL,OAAO,CAACC,QAARD,KAAqB,QAAzB,EAAmC;AACjC;AACA;AACA,WAAOQ,MAAMT,SAAS,CAACkB,iBAAVlB,CAA4BiB,IAA5BjB,EAAkCC,OAAO,CAACkB,GAARlB,CAAYmB,WAA9CpB,CAAb;AACF,GAJA,MAIO,IAAIC,OAAO,CAACC,QAARD,KAAqB,OAAzB,EAAkC;AACvC,UAAM,IAAIoB,iBAAJ,CAAa,wBAAb,EAAuC,qCAAvC,CAAN;AACF;AACF;;AAEOf,eAAegB,wBAAfhB,CAAwCE,GAAxCF,EAAqD;AAC1D,MAAIL,OAAO,CAACC,QAARD,KAAqB,QAAzB,EAAmC;AACjC;AACA;AACA,WAAOQ,MAAMT,SAAS,CAACkB,iBAAVlB,CAA4BQ,GAA5BR,EAAiCC,OAAO,CAACkB,GAARlB,CAAYmB,WAA7CpB,CAAb;AACF,GAJA,MAIO,IAAIC,OAAO,CAACC,QAARD,KAAqB,OAAzB,EAAkC;AACvC,UAAM,IAAIoB,iBAAJ,CAAa,wBAAb,EAAuC,wCAAvC,CAAN;AACF;AACF","file":"../FileSystem.js","sourcesContent":["/**\n * @flow\n */\n\nimport child_process from 'child_process';\nimport spawnAsync from '@expo/spawn-async';\n\nimport * as Binaries from './Binaries';\nimport XDLError from './XDLError';\n\nlet osascript;\nif (process.platform === 'darwin') {\n  osascript = require('@expo/osascript');\n}\n\nexport function openFolderName() {\n  if (process.platform === 'darwin') {\n    return 'Show in Finder';\n  } else if (process.platform === 'win32') {\n    return 'Show in File Explorer';\n  }\n}\n\nexport function openConsoleName() {\n  if (process.platform === 'darwin') {\n    return 'Open in Terminal';\n  } else if (process.platform === 'win32') {\n    return 'Open in Cmd';\n  }\n}\n\nexport async function openFolderAsync(dir: string) {\n  if (process.platform === 'darwin') {\n    return await osascript.openFinderToFolderAsync(dir);\n  } else if (process.platform === 'win32') {\n    return await spawnAsync('explorer', [dir]);\n  }\n}\n\nexport async function openConsoleAsync(dir: string) {\n  if (process.platform === 'darwin') {\n    return await osascript.openFolderInTerminalAppAsync(dir);\n  } else if (process.platform === 'win32') {\n    child_process.exec(`start cmd /K \"cd /d ${dir}\"`);\n  }\n}\n\nexport async function openFileInEditorAsync(path: string) {\n  if (process.platform === 'darwin') {\n    // This will use the ENV var $EXPO_EDITOR if set, or else will try various\n    // popular editors, looking for one that is open, or if none are, one that is installed\n    return await osascript.openInEditorAsync(path, process.env.EXPO_EDITOR);\n  } else if (process.platform === 'win32') {\n    throw new XDLError('PLATFORM_NOT_SUPPORTED', 'openFileInEditorAsync not supported');\n  }\n}\n\nexport async function openProjectInEditorAsync(dir: string) {\n  if (process.platform === 'darwin') {\n    // This will use the ENV var $EXPO_EDITOR if set, or else will try various\n    // popular editors, looking for one that is open, or if none are, one that is installed\n    return await osascript.openInEditorAsync(dir, process.env.EXPO_EDITOR);\n  } else if (process.platform === 'win32') {\n    throw new XDLError('PLATFORM_NOT_SUPPORTED', 'openProjectInEditorAsync not supported');\n  }\n}\n"],"sourceRoot":"/@expo/xdl@55.0.14/src"}