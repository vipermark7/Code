{"version":3,"sources":["Webpack.js"],"names":["HOST","DEFAULT_PORT","WEBPACK_LOG_TAG","let","webpackDevServerInstance","webpackServerPort","getServer","projectRoot","ProjectUtils","logError","async","choosePortAsync","await","choosePort","error","XDLError","message","startAsync","nonInteractive","verbose","Doctor","validateWebSupportAsync","useYarn","ConfigUtils","isUsingYarn","exp","readConfigJsonAsync","webName","getNameFromConfig","dev","https","ProjectSettings","readAsync","mode","config","Web","invokeWebpackConfigAsync","pwa","development","production","info","isInfoEnabled","logInfo","chalk","underline","protocol","urls","prepareUrls","Promise","resolve","compiler","createWebpackCompiler","webpack","appName","onFinished","WebpackDevServer","devServer","listen","setPackagerInfoAsync","server","url","getUrlAsync","host","ip","address","urlType","getProtocolAsync","stopAsync","close","bundleAsync","packagerOpts","process","env","BABEL_ENV","NODE_ENV","polyfill","reject","run","stats","openAsync","options","openProjectAsync"],"mappings":"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","file":"../Webpack.js","sourcesContent":["/**\n * @flow\n */\nimport * as ConfigUtils from '@expo/config';\nimport { choosePort, prepareUrls } from 'react-dev-utils/WebpackDevServerUtils';\nimport webpack from 'webpack';\nimport WebpackDevServer from 'webpack-dev-server';\nimport chalk from 'chalk';\nimport createWebpackCompiler from './createWebpackCompiler';\nimport * as ProjectUtils from './project/ProjectUtils';\nimport * as ProjectSettings from './ProjectSettings';\nimport * as Web from './Web';\nimport * as Doctor from './project/Doctor';\nimport XDLError from './XDLError';\nimport ip from './ip';\n\nimport type { User as ExpUser } from './User'; //eslint-disable-line\n\nconst HOST = '0.0.0.0';\nconst DEFAULT_PORT = 19006;\nconst WEBPACK_LOG_TAG = 'expo';\n\nlet webpackDevServerInstance: WebpackDevServer | null = null;\nlet webpackServerPort: number | null = null;\n\nexport function getServer(projectRoot: string) {\n  if (webpackDevServerInstance == null) {\n    ProjectUtils.logError(projectRoot, WEBPACK_LOG_TAG, 'Webpack is not running.');\n  }\n  return webpackDevServerInstance;\n}\n\nasync function choosePortAsync(): Promise<number | null> {\n  try {\n    return await choosePort(HOST, DEFAULT_PORT);\n  } catch (error) {\n    throw new XDLError('NO_PORT_FOUND', 'No available port found: ' + error.message);\n  }\n}\n\nexport async function startAsync(\n  projectRoot: string,\n  { nonInteractive }: Object,\n  verbose: boolean\n): Promise<{ url: string, server: WebpackDevServer }> {\n  await Doctor.validateWebSupportAsync(projectRoot);\n\n  if (webpackDevServerInstance) {\n    ProjectUtils.logError(projectRoot, WEBPACK_LOG_TAG, 'Webpack is already running.');\n    return;\n  }\n\n  const useYarn = ConfigUtils.isUsingYarn(projectRoot);\n\n  const { exp } = await ProjectUtils.readConfigJsonAsync(projectRoot);\n  const { webName } = ConfigUtils.getNameFromConfig(exp);\n\n  let { dev, https } = await ProjectSettings.readAsync(projectRoot);\n  const mode = dev ? 'development' : 'production';\n\n  const config = await Web.invokeWebpackConfigAsync({\n    projectRoot,\n    pwa: true,\n    development: dev,\n    production: !dev,\n    https,\n    info: Web.isInfoEnabled(),\n  });\n\n  webpackServerPort = await choosePortAsync();\n  ProjectUtils.logInfo(\n    projectRoot,\n    WEBPACK_LOG_TAG,\n    `Starting Webpack on port ${webpackServerPort} in ${chalk.underline(mode)} mode.`\n  );\n\n  const protocol = https ? 'https' : 'http';\n  const urls = prepareUrls(protocol, '::', webpackServerPort);\n\n  await new Promise(resolve => {\n    // Create a webpack compiler that is configured with custom messages.\n    const compiler = createWebpackCompiler({\n      projectRoot,\n      nonInteractive,\n      webpack,\n      appName: webName,\n      config,\n      urls,\n      useYarn,\n      onFinished: resolve,\n    });\n    webpackDevServerInstance = new WebpackDevServer(compiler, config.devServer);\n    // Launch WebpackDevServer.\n    webpackDevServerInstance.listen(webpackServerPort, HOST, error => {\n      if (error) {\n        ProjectUtils.logError(projectRoot, WEBPACK_LOG_TAG, error);\n      }\n      // clearConsole();\n    });\n  });\n\n  await ProjectSettings.setPackagerInfoAsync(projectRoot, {\n    webpackServerPort,\n  });\n\n  return {\n    server: webpackDevServerInstance,\n    url: await getUrlAsync(projectRoot),\n  };\n}\n\nexport async function getUrlAsync(projectRoot: string): Promise<string> {\n  const devServer = getServer(projectRoot);\n  if (!devServer) {\n    return null;\n  }\n  const host = ip.address();\n  const urlType = await getProtocolAsync(projectRoot);\n  return `${urlType}://${host}:${webpackServerPort}`;\n}\n\nexport async function getProtocolAsync(projectRoot: string): Promise<'http' | 'https'> {\n  // TODO: Bacon: Handle when not in expo\n  const { https } = await ProjectSettings.readAsync(projectRoot);\n  if (https === true) {\n    return 'https';\n  }\n  return 'http';\n}\n\nexport async function stopAsync(projectRoot: string): Promise<void> {\n  if (webpackDevServerInstance) {\n    await new Promise(resolve => webpackDevServerInstance.close(() => resolve()));\n    webpackDevServerInstance = null;\n    webpackServerPort = null;\n    // TODO\n    await ProjectSettings.setPackagerInfoAsync(projectRoot, {\n      webpackServerPort: null,\n    });\n  }\n}\n\nexport async function bundleAsync(projectRoot: string, packagerOpts: Object): Promise<void> {\n  await Doctor.validateWebSupportAsync(projectRoot);\n  const mode = packagerOpts.dev ? 'development' : 'production';\n  process.env.BABEL_ENV = mode;\n  process.env.NODE_ENV = mode;\n\n  let config = await Web.invokeWebpackConfigAsync({\n    projectRoot,\n    pwa: packagerOpts.pwa,\n    polyfill: packagerOpts.polyfill,\n    development: packagerOpts.dev,\n    production: !packagerOpts.dev,\n    info: Web.isInfoEnabled(),\n  });\n  let compiler = webpack(config);\n\n  try {\n    // We generate the stats.json file in the webpack-config\n    await new Promise((resolve, reject) =>\n      compiler.run(async (error, stats) => {\n        // TODO: Bacon: account for CI\n        if (error) {\n          // TODO: Bacon: Clean up error messages\n          return reject(error);\n        }\n        resolve(stats);\n      })\n    );\n  } catch (error) {\n    ProjectUtils.logError(\n      projectRoot,\n      'expo',\n      'There was a problem building your web project. ' + error.message\n    );\n    throw error;\n  }\n}\n\nexport async function openAsync(projectRoot: string, options = {}, verbose = true): Promise<void> {\n  if (!webpackDevServerInstance) {\n    await startAsync(projectRoot, options, verbose);\n  }\n  await Web.openProjectAsync(projectRoot);\n}\n"],"sourceRoot":"/@expo/xdl@55.0.14/src"}