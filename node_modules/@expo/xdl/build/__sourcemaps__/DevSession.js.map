{"version":3,"sources":["DevSession.js"],"names":["UPDATE_FREQUENCY_SECS","let","keepUpdating","async","startSession","projectRoot","exp","platform","forceUpdate","boolean","Config","offline","authSession","await","UserManager","getSessionAsync","url","UrlUtils","constructManifestUrlAsync","constructWebAppUrlAsync","Error","apiClient","ApiV2Client","clientForUser","postAsync","data","session","description","name","os","hostname","config","slug","primaryColor","source","e","logger","global","debug","setTimeout","stopSession"],"mappings":";;;;;;;;AAEA;;AAEA;;AACA;;AACA;;AACA;;AACA;;;;;;AAEA,MAAMA,qBAAAA,GAAwB,EAA9B;AAEAC,IAAIC,YAAAA,GAAe,IAAnBD,C,CAEA;;AACOE,eAAeC,YAAfD,CACLE,WADKF,EAELG,GAFKH,EAGLI,QAHKJ,EAILK,WAAaC,GAAU,KAJlBN,EAKU;AACf,MAAIK,WAAJ,EAAiB;AACfN,IAAAA,YAAAA,GAAe,IAAfA;AACF;;AAEA,MAAI,CAACQ,gBAAOC,OAAR,IAAmBT,YAAvB,EAAqC;AACnC;AACAD,QAAIW,WAAAA,GAAcC,MAAMC,cAAYC,eAAZD,EAAxBb;;AAEA,QAAI,CAACW,WAAL,EAAkB;AAChB;AACA;AACA;AACF;;AAEA,QAAI;AACFX,UAAIe,GAAJf;;AACA,UAAIM,QAAAA,KAAa,QAAjB,EAA2B;AACzBS,QAAAA,GAAAA,GAAMH,MAAMI,QAAQ,CAACC,yBAATD,CAAmCZ,WAAnCY,CAAZD;AACF,OAFA,MAEO,IAAIT,QAAAA,KAAa,KAAjB,EAAwB;AAC7BS,QAAAA,GAAAA,GAAMH,MAAMI,QAAQ,CAACE,uBAATF,CAAiCZ,WAAjCY,CAAZD;AACF,OAFO,MAEA;AACL,cAAM,IAAII,KAAJ,CAAW,yBAAwBb,QAAS,EAA5C,CAAN;AACF;;AAEAN,UAAIoB,SAAAA,GAAYC,cAAYC,aAAZD,CAA0BV,WAA1BU,CAAhBrB;;AACAY,YAAMQ,SAAS,CAACG,SAAVH,CAAoB,mCAApBA,EAAyD;AAC7DI,QAAAA,IAAI,EAAE;AACJC,UAAAA,OAAO,EAAE;AACPC,YAAAA,WAAW,EAAG,GAAErB,GAAG,CAACsB,IAAK,OAAMC,YAAGC,QAAHD,EAAc,EADtC;AAEPC,YAAAA,QAAQ,EAAED,YAAGC,QAAHD,EAFH;AAGPtB,YAAAA,QAHO;AAIPwB,YAAAA,MAAM,EAAE;AACN;AACAJ,cAAAA,WAAW,EAAErB,GAAG,CAACqB,WAFX;AAGNC,cAAAA,IAAI,EAAEtB,GAAG,CAACsB,IAHJ;AAINI,cAAAA,IAAI,EAAE1B,GAAG,CAAC0B,IAJJ;AAKNC,cAAAA,YAAY,EAAE3B,GAAG,CAAC2B;AALZ,aAJD;AAWPjB,YAAAA,GAXO;AAYPkB,YAAAA,MAAM,EAAE;AAZD;AADL;AADuD,OAAzDb,CAANR;AAkBF,KA7BA,CA6BE,OAAOsB,CAAP,EAAU;AACVC,sBAAOC,MAAPD,CAAcE,KAAdF,CAAoBD,CAApBC,EAAwB,+BAA8BD,CAAE,EAAxDC;AACF;;AAEAG,IAAAA,UAAU,CAAC,MAAMnC,YAAY,CAACC,WAAD,EAAcC,GAAd,EAAmBC,QAAnB,CAAnB,EAAiDP,qBAAAA,GAAwB,IAAzE,CAAVuC;AACF;AACF;;AAEO,SAASC,WAAT,GAAuB;AAC5BtC,EAAAA,YAAAA,GAAe,KAAfA;AACF","file":"../DevSession.js","sourcesContent":["// @flow\n\nimport os from 'os';\n\nimport ApiV2Client from './ApiV2';\nimport Config from './Config';\nimport logger from './Logger';\nimport * as UrlUtils from './UrlUtils';\nimport UserManager from './User';\n\nconst UPDATE_FREQUENCY_SECS = 20;\n\nlet keepUpdating = true;\n\n// TODO notify www when a project is started, and every N seconds afterwards\nexport async function startSession(\n  projectRoot: string,\n  exp: any,\n  platform: 'native' | 'web',\n  forceUpdate: boolean = false\n): Promise<void> {\n  if (forceUpdate) {\n    keepUpdating = true;\n  }\n\n  if (!Config.offline && keepUpdating) {\n    // TODO(anp) if the user has configured device ids, then notify for those too\n    let authSession = await UserManager.getSessionAsync();\n\n    if (!authSession) {\n      // NOTE(brentvatne) let's just bail out in this case for now\n      // throw new Error('development sessions can only be initiated for logged in users');\n      return;\n    }\n\n    try {\n      let url;\n      if (platform === 'native') {\n        url = await UrlUtils.constructManifestUrlAsync(projectRoot);\n      } else if (platform === 'web') {\n        url = await UrlUtils.constructWebAppUrlAsync(projectRoot);\n      } else {\n        throw new Error(`Unsupported platform: ${platform}`);\n      }\n\n      let apiClient = ApiV2Client.clientForUser(authSession);\n      await apiClient.postAsync('development-sessions/notify-alive', {\n        data: {\n          session: {\n            description: `${exp.name} on ${os.hostname()}`,\n            hostname: os.hostname(),\n            platform,\n            config: {\n              // TODO: if icons are specified, upload a url for them too so people can distinguish\n              description: exp.description,\n              name: exp.name,\n              slug: exp.slug,\n              primaryColor: exp.primaryColor,\n            },\n            url,\n            source: 'desktop',\n          },\n        },\n      });\n    } catch (e) {\n      logger.global.debug(e, `Error updating dev session: ${e}`);\n    }\n\n    setTimeout(() => startSession(projectRoot, exp, platform), UPDATE_FREQUENCY_SECS * 1000);\n  }\n}\n\nexport function stopSession() {\n  keepUpdating = false;\n}\n"],"sourceRoot":"/@expo/xdl@55.0.14/src"}