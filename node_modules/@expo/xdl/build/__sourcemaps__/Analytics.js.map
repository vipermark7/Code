{"version":3,"sources":["Analytics.ts"],"names":["_segmentNodeInstance","_userId","_version","PLATFORM_TO_ANALYTICS_PLATFORM","darwin","win32","linux","flush","setSegmentNodeKey","key","Segment","flushInterval","setUserProperties","userId","traits","identify","context","_getContext","setVersionName","version","logEvent","name","properties","track","event","platform","os","ip","address","device","model","brand","release","app"],"mappings":";;;;;;;;;;;AAIA;;AACA;;AACA;;;;AAEA,IAAIA,oBAAJ;;AACA,IAAIC,OAAJ;;AACA,IAAIC,QAAJ;;AACA,MAAMC,8BAA8D,GAAG;AACrEC,EAAAA,MAAM,EAAE,KAD6D;AAErEC,EAAAA,KAAK,EAAE,SAF8D;AAGrEC,EAAAA,KAAK,EAAE;AAH8D,CAAvE;;AAMO,SAASC,KAAT,GAAiB;AACtB,MAAIP,oBAAJ,EAA0BA,oBAAoB,CAACO,KAArB;AAC3B;;AAEM,SAASC,iBAAT,CAA2BC,GAA3B,EAAwC;AAC7C;AACAT,EAAAA,oBAAoB,GAAG,IAAIU,sBAAJ,CAAYD,GAAZ,EAAiB;AAAEE,IAAAA,aAAa,EAAE;AAAjB,GAAjB,CAAvB;AACD;;AAEM,SAASC,iBAAT,CAA2BC,MAA3B,EAA2CC,MAA3C,EAAwD;AAC7Db,EAAAA,OAAO,GAAGY,MAAV;;AAEA,MAAIb,oBAAJ,EAA0B;AACxBA,IAAAA,oBAAoB,CAACe,QAArB,CAA8B;AAC5BF,MAAAA,MAD4B;AAE5BC,MAAAA,MAF4B;AAG5BE,MAAAA,OAAO,EAAEC,WAAW;AAHQ,KAA9B;AAKD;AACF;;AAEM,SAASC,cAAT,CAAwBC,OAAxB,EAAyC;AAC9CjB,EAAAA,QAAQ,GAAGiB,OAAX;AACD;;AAEM,SAASC,QAAT,CAAkBC,IAAlB,EAAgCC,UAAe,GAAG,EAAlD,EAAsD;AAC3D,MAAItB,oBAAoB,IAAIC,OAA5B,EAAqC;AACnCD,IAAAA,oBAAoB,CAACuB,KAArB,CAA2B;AACzBV,MAAAA,MAAM,EAAEZ,OADiB;AAEzBuB,MAAAA,KAAK,EAAEH,IAFkB;AAGzBC,MAAAA,UAHyB;AAIzBN,MAAAA,OAAO,EAAEC,WAAW;AAJK,KAA3B;AAMD;AACF;;AAED,SAASA,WAAT,GAAuB;AACrB,MAAIQ,QAAQ,GAAGtB,8BAA8B,CAACuB,YAAGD,QAAH,EAAD,CAA9B,IAAiDC,YAAGD,QAAH,EAAhE;;AACA,MAAIT,OAAO,GAAG;AACZW,IAAAA,EAAE,EAAEA,YAAGC,OAAH,EADQ;AAEZC,IAAAA,MAAM,EAAE;AACNC,MAAAA,KAAK,EAAEL,QADD;AAENM,MAAAA,KAAK,EAAEN;AAFD,KAFI;AAMZC,IAAAA,EAAE,EAAE;AACFL,MAAAA,IAAI,EAAEI,QADJ;AAEFN,MAAAA,OAAO,EAAEO,YAAGM,OAAH;AAFP,KANQ;AAUZC,IAAAA,GAAG,EAAE;AAVO,GAAd;;AAaA,MAAI/B,QAAJ,EAAc;AACZc,IAAAA,OAAO,CAACiB,GAAR,GAAc;AACZd,MAAAA,OAAO,EAAEjB;AADG,KAAd;AAGD;;AAED,SAAOc,OAAP;AACD","sourcesContent":["/**\n * @flow\n */\n\nimport os from 'os';\nimport Segment from 'analytics-node';\nimport ip from './ip';\n\nlet _segmentNodeInstance: Segment | undefined;\nlet _userId: string | undefined;\nlet _version: string | undefined;\nconst PLATFORM_TO_ANALYTICS_PLATFORM: { [platform: string]: string } = {\n  darwin: 'Mac',\n  win32: 'Windows',\n  linux: 'Linux',\n};\n\nexport function flush() {\n  if (_segmentNodeInstance) _segmentNodeInstance.flush();\n}\n\nexport function setSegmentNodeKey(key: string) {\n  // Do not wait before flushing, we want node to close immediately if the programs ends\n  _segmentNodeInstance = new Segment(key, { flushInterval: 300 });\n}\n\nexport function setUserProperties(userId: string, traits: any) {\n  _userId = userId;\n\n  if (_segmentNodeInstance) {\n    _segmentNodeInstance.identify({\n      userId,\n      traits,\n      context: _getContext(),\n    });\n  }\n}\n\nexport function setVersionName(version: string) {\n  _version = version;\n}\n\nexport function logEvent(name: string, properties: any = {}) {\n  if (_segmentNodeInstance && _userId) {\n    _segmentNodeInstance.track({\n      userId: _userId,\n      event: name,\n      properties,\n      context: _getContext(),\n    });\n  }\n}\n\nfunction _getContext() {\n  let platform = PLATFORM_TO_ANALYTICS_PLATFORM[os.platform()] || os.platform();\n  let context = {\n    ip: ip.address(),\n    device: {\n      model: platform,\n      brand: platform,\n    },\n    os: {\n      name: platform,\n      version: os.release(),\n    },\n    app: {},\n  };\n\n  if (_version) {\n    context.app = {\n      version: _version,\n    };\n  }\n\n  return context;\n}\n"],"file":"../Analytics.js","sourceRoot":"/@expo/xdl@55.0.14/src"}