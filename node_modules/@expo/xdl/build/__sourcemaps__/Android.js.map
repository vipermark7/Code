{"version":3,"sources":["Android.js"],"names":["let","_lastUrl","BEGINNING_OF_ADB_ERROR_MESSAGE","CANT_START_ACTIVITY_ERROR","isPlatformSupported","process","platform","async","_getAdbOutputAsync","args","await","Binaries","addToPathAsync","result","spawnAsync","stdout","e","errorMessage","_","trim","stderr","startsWith","substring","length","Error","_isDeviceAttachedAsync","devices","lines","split","_isDeviceAuthorizedAsync","shift","listOfDevicesWithoutFirstLine","join","includes","_isExpoInstalledAsync","packages","i","line","_expoVersionAsync","info","regex","regexMatch","exec","_checkExpoUpToDateAsync","versions","Versions","versionsAsync","installedVersion","semver","lt","androidVersion","Logger","notifications","warn","code","NotificationCode","OLD_ANDROID_APP_VERSION","_apkCacheDirectory","dotExpoHomeDirectory","UserSettings","dir","path","fs","mkdirpSync","_downloadApkAsync","apkPath","exists","Api","downloadAsync","androidUrl","_installExpoAsync","global","START_LOADING","STOP_LOADING","_uninstallExpoAsync","upgradeExpoAsync","_assertDeviceReadyAsync","installResult","status","error","message","genymotionMessage","_openUrlAsync","url","output","indexOf","openUrlAsync","isDetached","boolean","installedExpo","Analytics","logEvent","openProjectAsync","projectRoot","startAdbReverseAsync","projectUrl","UrlUtils","constructManifestUrlAsync","exp","ProjectUtils","readConfigJsonAsync","success","packagerInfo","ProjectSettings","readPackagerInfoAsync","expRc","readExpRcAsync","userDefinedAdbReversePorts","extraAdbReversePorts","adbReversePorts","packagerPort","expoServerPort","port","adbReverse","stopAdbReverseAsync","adbReverseRemove","debug","splashScreenDPIConstraints","dpi","sizeMultiplier","checkSplashScreenImages","projectDir","parseSdkMajorVersion","sdkVersion","splashScreenMode","get","generalSplashImagePath","chalk","italic","generalSplashImage","getImageDimensionsAsync","androidSplash","androidSplashImages","imageRelativePath","splashImage","width","height","expectedWidth","expectedHeight","push","sizeMatches","bold","some","map"],"mappings":"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","file":"../Android.js","sourcesContent":["/**\n * @flow\n */\n\nimport _ from 'lodash';\nimport fs from 'fs-extra';\nimport spawnAsync from '@expo/spawn-async';\nimport path from 'path';\nimport semver from 'semver';\nimport chalk from 'chalk';\n\nimport * as Analytics from './Analytics';\nimport * as Binaries from './Binaries';\nimport Api from './Api';\nimport Logger from './Logger';\nimport NotificationCode from './NotificationCode';\nimport * as ProjectUtils from './project/ProjectUtils';\nimport * as ProjectSettings from './ProjectSettings';\nimport UserSettings from './UserSettings';\nimport * as UrlUtils from './UrlUtils';\nimport * as Versions from './Versions';\nimport { getImageDimensionsAsync } from './tools/ImageUtils';\nimport { parseSdkMajorVersion } from './detach/ExponentTools';\n\nlet _lastUrl = null;\nconst BEGINNING_OF_ADB_ERROR_MESSAGE = 'error: ';\nconst CANT_START_ACTIVITY_ERROR = 'Activity not started, unable to resolve Intent';\n\nexport function isPlatformSupported() {\n  return (\n    process.platform === 'darwin' || process.platform === 'win32' || process.platform === 'linux'\n  );\n}\n\nasync function _getAdbOutputAsync(args) {\n  await Binaries.addToPathAsync('adb');\n\n  try {\n    let result = await spawnAsync('adb', args);\n    return result.stdout;\n  } catch (e) {\n    let errorMessage = _.trim(e.stderr);\n    if (errorMessage.startsWith(BEGINNING_OF_ADB_ERROR_MESSAGE)) {\n      errorMessage = errorMessage.substring(BEGINNING_OF_ADB_ERROR_MESSAGE.length);\n    }\n    throw new Error(errorMessage);\n  }\n}\n\n// Device attached\nasync function _isDeviceAttachedAsync() {\n  let devices = await _getAdbOutputAsync(['devices']);\n  let lines = _.trim(devices).split(/\\r?\\n/);\n  // First line is \"List of devices\".\n  return lines.length > 1;\n}\n\nasync function _isDeviceAuthorizedAsync() {\n  let devices = await _getAdbOutputAsync(['devices']);\n  let lines = _.trim(devices).split(/\\r?\\n/);\n  lines.shift();\n  let listOfDevicesWithoutFirstLine = lines.join('\\n');\n  // result looks like \"072c4cf200e333c7\tdevice\" when authorized\n  // and \"072c4cf200e333c7\tunauthorized\" when not.\n  return listOfDevicesWithoutFirstLine.includes('device');\n}\n\n// Expo installed\nasync function _isExpoInstalledAsync() {\n  let packages = await _getAdbOutputAsync(['shell', 'pm', 'list', 'packages', '-f']);\n  let lines = packages.split(/\\r?\\n/);\n  for (let i = 0; i < lines.length; i++) {\n    let line = lines[i];\n    if (line.includes('host.exp.exponent.test')) {\n      continue;\n    }\n\n    if (line.includes('host.exp.exponent')) {\n      return true;\n    }\n  }\n\n  return false;\n}\n\nasync function _expoVersionAsync() {\n  let info = await _getAdbOutputAsync(['shell', 'dumpsys', 'package', 'host.exp.exponent']);\n\n  let regex = /versionName=([0-9.]+)/;\n  let regexMatch = regex.exec(info);\n  if (regexMatch.length < 2) {\n    return null;\n  }\n\n  return regexMatch[1];\n}\n\nasync function _checkExpoUpToDateAsync() {\n  let versions = await Versions.versionsAsync();\n  let installedVersion = await _expoVersionAsync();\n\n  if (!installedVersion || semver.lt(installedVersion, versions.androidVersion)) {\n    Logger.notifications.warn(\n      { code: NotificationCode.OLD_ANDROID_APP_VERSION },\n      'This version of the Expo app is out of date. Uninstall the app and run again to upgrade.'\n    );\n  }\n}\n\nfunction _apkCacheDirectory() {\n  let dotExpoHomeDirectory = UserSettings.dotExpoHomeDirectory();\n  let dir = path.join(dotExpoHomeDirectory, 'android-apk-cache');\n  fs.mkdirpSync(dir);\n  return dir;\n}\n\nasync function _downloadApkAsync() {\n  let versions = await Versions.versionsAsync();\n  let apkPath = path.join(_apkCacheDirectory(), `Exponent-${versions.androidVersion}.apk`);\n\n  if (await fs.exists(apkPath)) {\n    return apkPath;\n  }\n\n  await Api.downloadAsync(\n    versions.androidUrl,\n    path.join(_apkCacheDirectory(), `Exponent-${versions.androidVersion}.apk`)\n  );\n  return apkPath;\n}\n\nasync function _installExpoAsync() {\n  Logger.global.info(`Downloading latest version of Expo`);\n  Logger.notifications.info({ code: NotificationCode.START_LOADING });\n  let path = await _downloadApkAsync();\n  Logger.notifications.info({ code: NotificationCode.STOP_LOADING });\n  Logger.global.info(`Installing Expo on device`);\n  Logger.notifications.info({ code: NotificationCode.START_LOADING });\n  let result = await _getAdbOutputAsync(['install', path]);\n  Logger.notifications.info({ code: NotificationCode.STOP_LOADING });\n  return result;\n}\n\nasync function _uninstallExpoAsync() {\n  Logger.global.info('Uninstalling Expo from Android device.');\n  return await _getAdbOutputAsync(['uninstall', 'host.exp.exponent']);\n}\n\nexport async function upgradeExpoAsync(): Promise<boolean> {\n  try {\n    await _assertDeviceReadyAsync();\n\n    await _uninstallExpoAsync();\n    let installResult = await _installExpoAsync();\n    if (installResult.status !== 0) {\n      return false;\n    }\n\n    if (_lastUrl) {\n      Logger.global.info(`Opening ${_lastUrl} in Expo.`);\n      await _getAdbOutputAsync([\n        'shell',\n        'am',\n        'start',\n        '-a',\n        'android.intent.action.VIEW',\n        '-d',\n        _lastUrl,\n      ]);\n      _lastUrl = null;\n    }\n\n    return true;\n  } catch (e) {\n    Logger.global.error(e.message);\n    return false;\n  }\n}\n\n// Open Url\nasync function _assertDeviceReadyAsync() {\n  const genymotionMessage = `https://developer.android.com/studio/run/device.html#developer-device-options. If you are using Genymotion go to Settings -> ADB, select \"Use custom Android SDK tools\", and point it at your Android SDK directory.`;\n\n  if (!(await _isDeviceAttachedAsync())) {\n    throw new Error(\n      `No Android device found. Please connect a device and follow the instructions here to enable USB debugging:\\n${genymotionMessage}`\n    );\n  }\n\n  if (!(await _isDeviceAuthorizedAsync())) {\n    throw new Error(\n      `This computer is not authorized to debug the device. Please follow the instructions here to enable USB debugging:\\n${genymotionMessage}`\n    );\n  }\n}\n\nasync function _openUrlAsync(url: string) {\n  let output = await _getAdbOutputAsync([\n    'shell',\n    'am',\n    'start',\n    '-a',\n    'android.intent.action.VIEW',\n    '-d',\n    url,\n  ]);\n  if (output.includes(CANT_START_ACTIVITY_ERROR)) {\n    throw new Error(output.substring(output.indexOf('Error: ')));\n  }\n\n  return output;\n}\n\nasync function openUrlAsync(url: string, isDetached: boolean = false) {\n  try {\n    await _assertDeviceReadyAsync();\n\n    let installedExpo = false;\n    if (!isDetached && !(await _isExpoInstalledAsync())) {\n      await _installExpoAsync();\n      installedExpo = true;\n    }\n\n    if (!isDetached) {\n      _lastUrl = url;\n      _checkExpoUpToDateAsync(); // let this run in background\n    }\n\n    Logger.global.info(`Opening on Android device`);\n    try {\n      await _openUrlAsync(url);\n    } catch (e) {\n      if (isDetached) {\n        e.message = `Error running app. Have you installed the app already using Android Studio? Since you are detached you must build manually. ${\n          e.message\n        }`;\n      } else {\n        e.message = `Error running app. ${e.message}`;\n      }\n\n      throw e;\n    }\n\n    Analytics.logEvent('Open Url on Device', {\n      platform: 'android',\n      installedExpo,\n    });\n  } catch (e) {\n    e.message = `Error running adb: ${e.message}`;\n    throw e;\n  }\n}\n\nexport async function openProjectAsync(\n  projectRoot: string\n): Promise<{ success: true, url: string } | { success: false, error: string }> {\n  try {\n    await startAdbReverseAsync(projectRoot);\n\n    let projectUrl = await UrlUtils.constructManifestUrlAsync(projectRoot);\n    let { exp } = await ProjectUtils.readConfigJsonAsync(projectRoot);\n\n    await openUrlAsync(projectUrl, !!exp.isDetached);\n    return { success: true, url: projectUrl };\n  } catch (e) {\n    Logger.global.error(`Couldn't start project on Android: ${e.message}`);\n    return { success: false, error: e };\n  }\n}\n\n// Adb reverse\nexport async function startAdbReverseAsync(projectRoot: string) {\n  const packagerInfo = await ProjectSettings.readPackagerInfoAsync(projectRoot);\n  const expRc = await ProjectUtils.readExpRcAsync(projectRoot);\n  const userDefinedAdbReversePorts = expRc.extraAdbReversePorts || [];\n\n  let adbReversePorts = [\n    packagerInfo.packagerPort,\n    packagerInfo.expoServerPort,\n    ...userDefinedAdbReversePorts,\n  ];\n\n  for (let port of adbReversePorts) {\n    if (!(await adbReverse(port))) {\n      return false;\n    }\n  }\n\n  return true;\n}\n\nexport async function stopAdbReverseAsync(projectRoot: string) {\n  const packagerInfo = await ProjectSettings.readPackagerInfoAsync(projectRoot);\n  const expRc = await ProjectUtils.readExpRcAsync(projectRoot);\n  const userDefinedAdbReversePorts = expRc.extraAdbReversePorts || [];\n\n  let adbReversePorts = [\n    packagerInfo.packagerPort,\n    packagerInfo.expoServerPort,\n    ...userDefinedAdbReversePorts,\n  ];\n\n  for (let port of adbReversePorts) {\n    await adbReverseRemove(port);\n  }\n}\n\nasync function adbReverse(port: number) {\n  if (!(await _isDeviceAuthorizedAsync())) {\n    return false;\n  }\n\n  try {\n    await _getAdbOutputAsync(['reverse', `tcp:${port}`, `tcp:${port}`]);\n    return true;\n  } catch (e) {\n    Logger.global.warn(`Couldn't adb reverse: ${e.message}`);\n    return false;\n  }\n}\n\nasync function adbReverseRemove(port: number) {\n  if (!(await _isDeviceAuthorizedAsync())) {\n    return false;\n  }\n\n  try {\n    await _getAdbOutputAsync(['reverse', '--remove', `tcp:${port}`]);\n    return true;\n  } catch (e) {\n    // Don't send this to warn because we call this preemptively sometimes\n    Logger.global.debug(`Couldn't adb reverse remove: ${e.message}`);\n    return false;\n  }\n}\n\nconst splashScreenDPIConstraints = [\n  {\n    dpi: 'mdpi',\n    sizeMultiplier: 1,\n  },\n  {\n    dpi: 'hdpi',\n    sizeMultiplier: 1.5,\n  },\n  {\n    dpi: 'xhdpi',\n    sizeMultiplier: 2,\n  },\n  {\n    dpi: 'xxhdpi',\n    sizeMultiplier: 3,\n  },\n  {\n    dpi: 'xxxhdpi',\n    sizeMultiplier: 4,\n  },\n];\n\n/**\n * Checks whether `resizeMode` is set to `native` and if `true` analyzes provided images for splashscreen\n * providing `Logger` feedback upon problems.\n * @param projectDir - directory of the expo project\n * @since SDK33\n */\nexport async function checkSplashScreenImages(projectDir: string) {\n  const { exp } = await ProjectUtils.readConfigJsonAsync(projectDir);\n\n  // return before SDK33\n  if (parseSdkMajorVersion(exp.sdkVersion) < 33) {\n    return;\n  }\n\n  const splashScreenMode =\n    _.get(exp, 'android.splash.resizeMode') || _.get(exp, 'splash.resizeMode');\n\n  // only mode `native` is handled by this check\n  if (splashScreenMode === 'contain' || splashScreenMode === 'cover') {\n    return;\n  }\n\n  const generalSplashImagePath = _.get(exp, 'splash.image');\n  if (!generalSplashImagePath) {\n    Logger.global.warn(\n      `Couldn't read '${chalk.italic('splash.image')}' from ${chalk.italic(\n        'app.json'\n      )}. Provide asset that would serve as baseline splash image.`\n    );\n    return;\n  }\n  const generalSplashImage = await getImageDimensionsAsync(projectDir, generalSplashImagePath);\n  if (!generalSplashImage) {\n    Logger.global.warn(\n      `Couldn't read dimensions of provided splash image '${chalk.italic(\n        generalSplashImagePath\n      )}'. Does the file exist?`\n    );\n    return;\n  }\n\n  const androidSplash = _.get(exp, 'android.splash');\n  const androidSplashImages = [];\n  for (const { dpi, sizeMultiplier } of splashScreenDPIConstraints) {\n    const imageRelativePath = _.get(androidSplash, dpi);\n    if (imageRelativePath) {\n      const splashImage = await getImageDimensionsAsync(projectDir, imageRelativePath);\n      if (!splashImage) {\n        Logger.global.warn(\n          `Couldn't read dimensions of provided splash image '${chalk.italic(\n            splashImage\n          )}'. Does the file exist?`\n        );\n        continue;\n      }\n      const { width, height } = splashImage;\n      const expectedWidth = sizeMultiplier * generalSplashImage.width;\n      const expectedHeight = sizeMultiplier * generalSplashImage.height;\n      androidSplashImages.push({\n        dpi,\n        width,\n        height,\n        expectedWidth,\n        expectedHeight,\n        sizeMatches: width === expectedWidth && height === expectedHeight,\n      });\n    }\n  }\n\n  if (androidSplashImages.length === 0) {\n    Logger.global\n      .warn(`Splash resizeMode is set to 'native', but you haven't provided any images for different DPIs.\nBe aware that your splash image will be used as xxxhdpi asset and its ${chalk.bold(\n      'actual size will be different'\n    )} depending on device's DPI.\nSee https://docs.expo.io/versions/latest/guides/splash-screens/#differences-between-environments---android for more information`);\n    return;\n  }\n\n  if (_.some(androidSplashImages, ({ sizeMatches }) => !sizeMatches)) {\n    Logger.global\n      .warn(`Splash resizeMode is set to 'native' and you've provided different images for different DPIs,\nbut their sizes mismatch expected ones: [dpi: provided (expected)] ${androidSplashImages\n      .map(\n        ({ dpi, width, height, expectedWidth, expectedHeight }) =>\n          `${dpi}: ${width}x${height} (${expectedWidth}x${expectedHeight})`\n      )\n      .join(', ')}\nSee https://docs.expo.io/versions/latest/guides/splash-screens/#differences-between-environments---android for more information`);\n  }\n}\n"],"sourceRoot":"/@expo/xdl@55.0.14/src"}