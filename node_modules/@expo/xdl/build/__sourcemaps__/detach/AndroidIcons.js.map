{"version":3,"sources":["detach/AndroidIcons.js"],"names":["iconScales","mdpi","hdpi","xhdpi","xxhdpi","xxxhdpi","async","_regexFileInResSubfoldersAsync","oldText","newText","resDirPath","folderPrefix","folderSuffix","fileName","Promise","all","Object","keys","map","key","regexFileAsync","path","join","let","_hasShownResizeErrorWindowsLinux","_resizeIconsAsync","context","resPath","prefix","mdpiSize","filename","url","isDetached","baseImagePath","await","saveImageToPathAsync","data","projectPath","saveUrlToPathAsync","e","Error","entries","iconScale","subdirectoryName","destinationPath","spawnAsyncThrowError","stdio","cwd","resizeImageAsync","console","warn","dims","getImageDimensionsAsync","width","height","createAndWriteIconsToPathAsync","manifest","config","iconUrl","android","notificationIconUrl","notification","icon","iconBackgroundUrl","iconBackgroundColor","iconForegroundUrl","adaptiveIcon","backgroundColor","foregroundImage","backgroundImage","foregroundImageUrl","backgroundImageUrl","globby","absolute","forEach","filePath","fs","removeSync","dot","rmdirSync"],"mappings":"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","file":"../../detach/AndroidIcons.js","sourcesContent":["/**\n *  @flow\n */\nimport fs from 'fs-extra';\nimport path from 'path';\nimport globby from 'globby';\n\nimport {\n  regexFileAsync,\n  saveImageToPathAsync,\n  saveUrlToPathAsync,\n  spawnAsyncThrowError,\n} from './ExponentTools';\nimport StandaloneContext from './StandaloneContext';\nimport { resizeImageAsync, getImageDimensionsAsync } from '../tools/ImageUtils';\n\nconst iconScales = {\n  mdpi: 1,\n  hdpi: 1.5,\n  xhdpi: 2,\n  xxhdpi: 3,\n  xxxhdpi: 4,\n};\n\nasync function _regexFileInResSubfoldersAsync(\n  oldText: string,\n  newText: string,\n  resDirPath: string,\n  folderPrefix: string,\n  folderSuffix: string,\n  fileName: string\n) {\n  return Promise.all(\n    Object.keys(iconScales).map(async key => {\n      return regexFileAsync(\n        oldText,\n        newText,\n        path.join(resDirPath, `${folderPrefix}${key}${folderSuffix}`, fileName)\n      );\n    })\n  );\n}\n\nlet _hasShownResizeErrorWindowsLinux = false;\n\nasync function _resizeIconsAsync(\n  context: StandaloneContext,\n  resPath: string,\n  prefix: string,\n  mdpiSize: number,\n  filename: string,\n  url: string,\n  isDetached: boolean\n) {\n  let baseImagePath = path.join(resPath, filename);\n\n  try {\n    if (isDetached) {\n      await saveImageToPathAsync(context.data.projectPath, url, baseImagePath);\n    } else {\n      await saveUrlToPathAsync(url, baseImagePath);\n    }\n  } catch (e) {\n    throw new Error(`Failed to save icon file to disk. (${e})`);\n  }\n\n  await Promise.all(\n    Object.entries(iconScales).map(async ([folderSuffix, iconScale]) => {\n      // adaptive icons (mdpiSize 108) must be placed in a -v26 folder\n      let subdirectoryName = `${prefix}${folderSuffix}${mdpiSize === 108 ? '-v26' : ''}`;\n      let destinationPath = path.join(resPath, subdirectoryName);\n      await spawnAsyncThrowError('/bin/cp', [baseImagePath, filename], {\n        stdio: 'inherit',\n        cwd: destinationPath,\n      });\n\n      try {\n        await resizeImageAsync(mdpiSize * iconScale, filename, destinationPath);\n      } catch (e) {\n        // Turtle should be able to resize images, so if it fails we want it to throw.\n        // However, `sips` does not exist on Windows or Linux machines, so we expect\n        // resizing images to error on these OSes and want the detach process to continue anyway.\n        if (isDetached) {\n          if (!_hasShownResizeErrorWindowsLinux) {\n            console.warn(\n              'Failed to resize app icons. Your full size icon will be copied to all android/app/src/main/res directories. For best quality, we recommend providing downscaled versions.'\n            );\n            _hasShownResizeErrorWindowsLinux = true;\n          }\n        } else {\n          throw new Error(`Failed to resize image: ${filename}. ${e}`);\n        }\n      }\n\n      // reject non-square icons\n      const dims = await getImageDimensionsAsync(destinationPath, filename);\n      if (!dims) {\n        // Again, only throw this error on Turtle -- we expect that this will fail\n        // for some detach users but we don't want this to stop the whole process.\n        if (!isDetached) {\n          throw new Error(`Unable to read the dimensions of ${filename}`);\n        }\n      } else if (dims.width !== dims.height) {\n        throw new Error(`Android icons must be square, the dimensions of ${filename} are ${dims}`);\n      }\n    })\n  );\n\n  await spawnAsyncThrowError('/bin/rm', [baseImagePath]);\n}\n\nasync function createAndWriteIconsToPathAsync(\n  context: StandaloneContext,\n  resPath: string,\n  isDetached: boolean\n) {\n  let manifest = context.config; // manifest or app.json\n  let iconUrl =\n    manifest.android && manifest.android.iconUrl ? manifest.android.iconUrl : manifest.iconUrl;\n  let notificationIconUrl = manifest.notification ? manifest.notification.iconUrl : null;\n\n  if (isDetached) {\n    // manifest is actually just app.json in this case, so iconUrl fields don't exist\n    iconUrl = manifest.android && manifest.android.icon ? manifest.android.icon : manifest.icon;\n    notificationIconUrl = manifest.notification ? manifest.notification.icon : null;\n  }\n\n  let iconBackgroundUrl;\n  let iconBackgroundColor;\n  let iconForegroundUrl;\n  if (manifest.android && manifest.android.adaptiveIcon) {\n    iconBackgroundColor = manifest.android.adaptiveIcon.backgroundColor;\n    if (isDetached) {\n      iconForegroundUrl = manifest.android.adaptiveIcon.foregroundImage;\n      iconBackgroundUrl = manifest.android.adaptiveIcon.backgroundImage;\n    } else {\n      iconForegroundUrl = manifest.android.adaptiveIcon.foregroundImageUrl;\n      iconBackgroundUrl = manifest.android.adaptiveIcon.backgroundImageUrl;\n    }\n  }\n\n  if (iconUrl || iconForegroundUrl) {\n    // Android 7 and below icon\n    if (iconUrl) {\n      (await globby(['**/ic_launcher.png'], {\n        cwd: resPath,\n        absolute: true,\n      })).forEach(filePath => {\n        fs.removeSync(filePath);\n      });\n\n      await _resizeIconsAsync(\n        context,\n        resPath,\n        'mipmap-',\n        48,\n        'ic_launcher.png',\n        iconUrl,\n        isDetached\n      );\n    }\n\n    // Adaptive icon foreground image\n    if (iconForegroundUrl) {\n      (await globby(['**/ic_foreground.png'], {\n        cwd: resPath,\n        absolute: true,\n      })).forEach(filePath => {\n        fs.removeSync(filePath);\n      });\n\n      await _resizeIconsAsync(\n        context,\n        resPath,\n        'mipmap-',\n        108,\n        'ic_foreground.png',\n        iconForegroundUrl,\n        isDetached\n      );\n    } else {\n      // the OS's default method of coercing normal app icons to adaptive\n      // makes them look quite different from using an actual adaptive icon (with xml)\n      // so we need to support falling back to the old version on Android 8\n      (await globby(['**/mipmap-*-v26/*'], {\n        cwd: resPath,\n        absolute: true,\n        dot: true,\n      })).forEach(filePath => {\n        fs.removeSync(filePath);\n      });\n\n      try {\n        (await globby(['**/mipmap-*-v26'], {\n          cwd: resPath,\n          absolute: true,\n        })).forEach(filePath => {\n          fs.rmdirSync(filePath);\n        });\n      } catch (e) {\n        // we don't want the entire detach script to fail if node\n        // can't remove the directories for whatever reason.\n        // people can remove the directories themselves if they need\n        // so just fail silently here\n      }\n    }\n  }\n\n  // Adaptive icon background image or color\n  if (iconBackgroundUrl) {\n    await _resizeIconsAsync(\n      context,\n      resPath,\n      'mipmap-',\n      108,\n      'ic_background.png',\n      iconBackgroundUrl,\n      isDetached\n    );\n\n    await _regexFileInResSubfoldersAsync(\n      '@color/iconBackground',\n      '@mipmap/ic_background',\n      resPath,\n      'mipmap-',\n      '-v26',\n      'ic_launcher.xml'\n    );\n  } else if (iconBackgroundColor) {\n    await regexFileAsync(\n      '\"iconBackground\">#FFFFFF',\n      `\"iconBackground\">${iconBackgroundColor}`,\n      path.join(resPath, 'values', 'colors.xml')\n    );\n  }\n\n  // Notification icon\n  if (notificationIconUrl) {\n    (await globby(['**/shell_notification_icon.png'], {\n      cwd: resPath,\n      absolute: true,\n    })).forEach(filePath => {\n      fs.removeSync(filePath);\n    });\n\n    await _resizeIconsAsync(\n      context,\n      resPath,\n      'drawable-',\n      24,\n      'shell_notification_icon.png',\n      notificationIconUrl,\n      isDetached\n    );\n  }\n}\n\nexport { createAndWriteIconsToPathAsync };\n"],"sourceRoot":"/@expo/xdl@55.0.14/src"}