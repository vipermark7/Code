{"version":3,"sources":["detach/Logger.ts"],"names":["Logger","constructor","configured","process","env","JSON_LOGS","loggerObj","bunyan","createLogger","name","console","selfConfigured","extraFields","configure","withFields","Object","assign","trace","args","logLine","debug","info","warn","error","fatal","level","argsToLog","extraFieldsFromArgsExist","_","isPlainObject","first","extraFieldsFromArgs","shift","isEmpty","unshift","LoggerDetach","pipeOutputToLogger","stdout","stderr","stdoutOnly","dontShowStdout","stdoutExtraFields","on","line","logMultiline","source","data","lines","String","split","forEach","shouldntLogMessage"],"mappings":"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","sourcesContent":["import { Readable } from 'stream';\n\nimport bunyan from '@expo/bunyan';\nimport _ from 'lodash';\n\nexport type LogLevel = 'trace' | 'debug' | 'info' | 'warn' | 'error' | 'fatal';\n\nexport class Logger {\n  loggerObj: any;\n  configured: boolean;\n  selfConfigured: boolean;\n  extraFields: any;\n\n  constructor() {\n    this.configured = process.env.JSON_LOGS === '1';\n    this.loggerObj = this.configured ? bunyan.createLogger({ name: 'xdl-detach' }) : console;\n    this.selfConfigured = this.configured && true;\n    this.extraFields = {};\n  }\n\n  configure(loggerObj: Console | bunyan) {\n    this.loggerObj = loggerObj;\n    this.configured = true;\n    this.selfConfigured = false;\n  }\n\n  withFields(extraFields: any) {\n    return Object.assign(new Logger(), this, { extraFields: { ...this.extraFields, ...extraFields } });\n  }\n\n  trace(...args: any[]) {\n    this.logLine('trace', ...args);\n  }\n  debug(...args: any[]) {\n    this.logLine('debug', ...args);\n  }\n  info(...args: any[]) {\n    this.logLine('info', ...args);\n  }\n  warn(...args: any[]) {\n    this.logLine('warn', ...args);\n  }\n  error(...args: any[]) {\n    this.logLine('error', ...args);\n  }\n  fatal(...args: any[]) {\n    this.logLine('fatal', ...args);\n  }\n\n  logLine(level: LogLevel, ...args: any[]) {\n    const argsToLog = [...args];\n    const extraFieldsFromArgsExist = _.isPlainObject(_.first(args));\n    const extraFieldsFromArgs = extraFieldsFromArgsExist ? args[0] : {};\n    if (extraFieldsFromArgsExist) {\n      argsToLog.shift();\n    }\n    const extraFields = { ...extraFieldsFromArgs, ...this.extraFields };\n    if (!_.isEmpty(extraFields)) {\n      argsToLog.unshift(extraFields);\n    }\n    this.loggerObj[level](...argsToLog);\n  }\n}\n\nconst LoggerDetach = new Logger();\nexport default LoggerDetach;\n\nexport function pipeOutputToLogger(\n  { stdout, stderr }: { stdout?: Readable | null; stderr?: Readable | null } = {\n    stdout: null,\n    stderr: null,\n  },\n  extraFields = {},\n  { stdoutOnly = false, dontShowStdout = false } = {}\n) {\n  if (stdout) {\n    const stdoutExtraFields = { ...extraFields, dontShowStdout: false };\n    if (dontShowStdout) {\n      stdoutExtraFields.dontShowStdout = true;\n    }\n    stdout.on('data', line => logMultiline(line, { ...stdoutExtraFields, source: 'stdout' }));\n  }\n  if (stderr) {\n    const source = stdoutOnly ? 'stdout' : 'stderr';\n    stderr.on('data', line => logMultiline(line, { ...extraFields, source }));\n  }\n}\n\nfunction logMultiline(data: any, extraFields: any) {\n  if (!data) {\n    return;\n  }\n  const lines = String(data).split('\\n');\n  lines.forEach(line => {\n    if (line) {\n      const args = [line];\n      if (LoggerDetach.configured) {\n        args.unshift(extraFields);\n      }\n      const shouldntLogMessage =\n        extraFields.source === 'stdout' &&\n        extraFields.dontShowStdout &&\n        LoggerDetach.configured &&\n        !LoggerDetach.selfConfigured;\n      if (!shouldntLogMessage) {\n        LoggerDetach.info(...args);\n      }\n    }\n  });\n}\n"],"file":"../../detach/Logger.js","sourceRoot":"/@expo/xdl@55.0.14/src"}