{"version":3,"sources":["detach/IosLocalization.js"],"names":["async","writeLocalizationResourcesAsync","supportingDirectory","context","let","locales","type","await","getResolvedLocalesAsync","config","undefined","lang","localizationObj","Object","entries","dir","path","join","fs","mkdirpSync","strings","buffer","plistKey","localVersion","push","writeFile"],"mappings":";;;;;;;AAAA;;AACA;;AACA;;;;AAEOA,eAAeC,+BAAfD,CAA+C;AAAEE,EAAAA,mBAAF;AAAuBC,EAAAA;AAAvB,CAA/CH,EAAiF;AACtFI,MAAIC,OAAAA,GAAU,EAAdD;;AACA,MAAID,OAAO,CAACG,IAARH,KAAiB,MAArB,EAA6B;AAC3BE,IAAAA,OAAAA,GAAUE,MAAMC,4CAAwBL,OAAO,CAACM,MAAhCD,CAAhBH;AACF,GAFA,MAEO,IAAIF,OAAO,CAACG,IAARH,KAAiB,SAArB,EAAgC;AACrCE,IAAAA,OAAAA,GAAUF,OAAO,CAACM,MAARN,CAAeE,OAAfF,KAA2BO,SAA3BP,GAAuCA,OAAO,CAACM,MAARN,CAAeE,OAAtDF,GAAgE,EAA1EE;AACF;;AACA,OAAK,MAAM,CAACM,IAAD,EAAOC,eAAP,CAAX,IAAsCC,MAAM,CAACC,OAAPD,CAAeR,OAAfQ,CAAtC,EAA+D;AAC7D,UAAME,GAAAA,GAAMC,cAAKC,IAALD,CAAUd,mBAAVc,EAAgC,GAAEL,IAAK,QAAvCK,CAAZ;;AACAE,qBAAGC,UAAHD,CAAcH,GAAdG;;AACA,UAAME,OAAAA,GAAUJ,cAAKC,IAALD,CAAUD,GAAVC,EAAe,mBAAfA,CAAhB;;AACA,UAAMK,MAAAA,GAAS,EAAf;;AACA,SAAK,MAAM,CAACC,QAAD,EAAWC,YAAX,CAAX,IAAuCV,MAAM,CAACC,OAAPD,CAAeD,eAAfC,CAAvC,EAAwE;AACtEQ,MAAAA,MAAM,CAACG,IAAPH,CAAa,GAAEC,QAAS,OAAMC,YAAa,IAA3CF;AACF;;AACAd,UAAMW,iBAAGO,SAAHP,CAAaE,OAAbF,EAAsBG,MAAM,CAACJ,IAAPI,CAAY,IAAZA,CAAtBH,CAANX;AACF;AACF","file":"../../detach/IosLocalization.js","sourcesContent":["import fs from 'fs-extra';\nimport path from 'path';\nimport { getResolvedLocalesAsync } from './ExponentTools';\n\nexport async function writeLocalizationResourcesAsync({ supportingDirectory, context }) {\n  let locales = {};\n  if (context.type === 'user') {\n    locales = await getResolvedLocalesAsync(context.config);\n  } else if (context.type === 'service') {\n    locales = context.config.locales !== undefined ? context.config.locales : {};\n  }\n  for (const [lang, localizationObj] of Object.entries(locales)) {\n    const dir = path.join(supportingDirectory, `${lang}.lproj`);\n    fs.mkdirpSync(dir);\n    const strings = path.join(dir, 'InfoPlist.strings');\n    const buffer = [];\n    for (const [plistKey, localVersion] of Object.entries(localizationObj)) {\n      buffer.push(`${plistKey} = \"${localVersion}\";`);\n    }\n    await fs.writeFile(strings, buffer.join('\\n'));\n  }\n}\n"],"sourceRoot":"/@expo/xdl@55.0.14/src"}