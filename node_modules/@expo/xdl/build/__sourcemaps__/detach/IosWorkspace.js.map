{"version":3,"sources":["detach/IosWorkspace.js"],"names":["async","_getVersionedExpoKitConfigAsync","sdkVersion","skipServerValidation","versions","await","Versions","versionsAsync","let","sdkVersionConfig","sdkVersions","Error","iosVersion","iosExpoViewUrl","iosClientVersion","_getOrCreateTemplateDirectoryAsync","context","type","path","join","data","expoSourcePath","expoRootTemplateDirectory","process","env","EXPO_VIEW_DIR","projectPath","isDirectory","fs","mkdirpSync","logger","info","invariant","Api","downloadAsync","extract","_renameAndMoveProjectFilesAsync","projectDirectory","projectName","gitIgnorePath","existsSync","rimraf","sync","e","filesToTransform","bundleIdentifier","exp","ios","Promise","all","map","fileName","transformFileContentsAsync","fileString","replace","filesToMove","forEach","destFileName","dirname","extname","spawnAsyncThrowError","_configureVersionsPlistAsync","configFilePath","standaloneSdkVersion","isServiceContext","IosPlist","modifyAsync","versionConfig","detachedNativeVersions","shell","kernel","_configureBuildConstantsPlistAsync","constantsConfig","STANDALONE_CONTEXT_TYPE","_renderPodfileFromTemplateAsync","iosProjectDirectory","getPaths","podfileTemplateFilename","podfileSubstitutions","any","TARGET_NAME","reactNativeDependencyPath","modulesPath","detachableUniversalModules","Modules","getDetachableModules","shellAppSdkVersion","EXPOKIT_TAG","EXPOKIT_PATH","relative","VERSIONED_REACT_NATIVE_PATH","REACT_NATIVE_PATH","UNIVERSAL_MODULES_PATH","UNIVERSAL_MODULES","module","libName","subdirectory","EXPOKIT_TAG_IOS","templatePodfilePath","renderPodfileAsync","createDetachedAsync","supportingDirectory","projectRootDirectory","getNewestSdkVersionSupportedAsync","Utils","ncpAsync","projectPackageJsonPath","exists","copy","_installRequiredPackagesAsync","rimrafDontThrow","cleanBackupAsync","_getPackagesToInstallWhenEjecting","packagesToInstallWhenEjecting","projectRoot","packagesToInstall","Object","keys","packageName","push","length","installPackagesAsync","addDetachedConfigToExp","warn","publishBundlePath","publishManifestPath","intermediatesDirectory","build","isExpoClientBuild","isAnonymous","config","name","projectNameLabel","toLowerCase","workspaceSourcePath","archivePath","allVersions","newestVersion","highestMajorComponent","version","majorComponent","parseSdkMajorVersion"],"mappings":"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","file":"../../detach/IosWorkspace.js","sourcesContent":["/**\n * @flow\n */\nimport fs from 'fs-extra';\nimport invariant from 'invariant';\nimport path from 'path';\nimport rimraf from 'rimraf';\n\nimport Api from '../Api';\nimport {\n  isDirectory,\n  rimrafDontThrow,\n  parseSdkMajorVersion,\n  spawnAsyncThrowError,\n  transformFileContentsAsync,\n} from './ExponentTools';\nimport { renderPodfileAsync } from './IosPodsTools.js';\nimport * as IosPlist from './IosPlist';\nimport logger from './Logger';\nimport * as Utils from '../Utils';\nimport StandaloneContext from './StandaloneContext';\nimport * as Versions from '../Versions';\nimport * as Modules from '../modules/Modules';\nimport installPackagesAsync from './installPackagesAsync';\n\nasync function _getVersionedExpoKitConfigAsync(\n  sdkVersion: string,\n  skipServerValidation: boolean\n): any {\n  const versions = await Versions.versionsAsync();\n  let sdkVersionConfig = versions.sdkVersions[sdkVersion];\n  if (!sdkVersionConfig) {\n    if (skipServerValidation) {\n      sdkVersionConfig = {};\n    } else {\n      throw new Error(`Unsupported SDK version: ${sdkVersion}`);\n    }\n  }\n  const { iosVersion, iosExpoViewUrl } = sdkVersionConfig;\n  const iosClientVersion = iosVersion ? iosVersion : versions.iosVersion;\n  return {\n    iosClientVersion,\n    iosExpoViewUrl,\n  };\n}\n\nasync function _getOrCreateTemplateDirectoryAsync(\n  context: StandaloneContext,\n  iosExpoViewUrl: ?string\n) {\n  if (context.type === 'service') {\n    return path.join(context.data.expoSourcePath, '..');\n  } else if (context.type === 'user') {\n    let expoRootTemplateDirectory;\n    if (process.env.EXPO_VIEW_DIR) {\n      // Only for testing\n      expoRootTemplateDirectory = process.env.EXPO_VIEW_DIR;\n    } else {\n      // HEY: if you need other paths into the extracted archive, be sure and include them\n      // when the archive is generated in `ios/pipeline.js`\n      expoRootTemplateDirectory = path.join(context.data.projectPath, 'temp-ios-directory');\n      if (!isDirectory(expoRootTemplateDirectory)) {\n        fs.mkdirpSync(expoRootTemplateDirectory);\n        logger.info('Downloading iOS code...');\n        invariant(iosExpoViewUrl, `The URL for ExpoKit iOS must be set`);\n        await Api.downloadAsync(iosExpoViewUrl, expoRootTemplateDirectory, {\n          extract: true,\n        });\n      }\n    }\n    return expoRootTemplateDirectory;\n  }\n}\n\nasync function _renameAndMoveProjectFilesAsync(\n  context: StandaloneContext,\n  projectDirectory: string,\n  projectName: string\n) {\n  // remove .gitignore, as this actually pertains to internal expo template management\n  try {\n    const gitIgnorePath = path.join(projectDirectory, '.gitignore');\n    if (fs.existsSync(gitIgnorePath)) {\n      rimraf.sync(gitIgnorePath);\n    }\n  } catch (e) {}\n\n  const filesToTransform = [\n    path.join('exponent-view-template.xcodeproj', 'project.pbxproj'),\n    path.join('exponent-view-template.xcworkspace', 'contents.xcworkspacedata'),\n    path.join(\n      'exponent-view-template.xcodeproj',\n      'xcshareddata',\n      'xcschemes',\n      'exponent-view-template.xcscheme'\n    ),\n  ];\n\n  let bundleIdentifier;\n  if (context.type === 'user') {\n    const exp = context.data.exp;\n    bundleIdentifier = exp.ios && exp.ios.bundleIdentifier ? exp.ios.bundleIdentifier : null;\n    if (!bundleIdentifier) {\n      throw new Error(`Cannot configure an ExpoKit workspace with no iOS bundle identifier.`);\n    }\n  } else if (context.type === 'service') {\n    bundleIdentifier = 'host.exp.Exponent';\n  }\n\n  await Promise.all(\n    filesToTransform.map(fileName =>\n      transformFileContentsAsync(path.join(projectDirectory, fileName), fileString => {\n        return fileString\n          .replace(/com.getexponent.exponent-view-template/g, bundleIdentifier)\n          .replace(/exponent-view-template/g, projectName);\n      })\n    )\n  );\n\n  // order of this array matters\n  const filesToMove = [\n    'exponent-view-template',\n    path.join(\n      'exponent-view-template.xcodeproj',\n      'xcshareddata',\n      'xcschemes',\n      'exponent-view-template.xcscheme'\n    ),\n    'exponent-view-template.xcodeproj',\n    'exponent-view-template.xcworkspace',\n  ];\n\n  filesToMove.forEach(async fileName => {\n    let destFileName = path.join(path.dirname(fileName), `${projectName}${path.extname(fileName)}`);\n    await spawnAsyncThrowError('/bin/mv', [\n      path.join(projectDirectory, fileName),\n      path.join(projectDirectory, destFileName),\n    ]);\n  });\n}\n\nasync function _configureVersionsPlistAsync(\n  configFilePath: string,\n  standaloneSdkVersion: string,\n  isServiceContext: boolean\n) {\n  await IosPlist.modifyAsync(configFilePath, 'EXSDKVersions', versionConfig => {\n    versionConfig.sdkVersions = [standaloneSdkVersion];\n    versionConfig.detachedNativeVersions = {\n      shell: standaloneSdkVersion,\n      kernel: standaloneSdkVersion,\n    };\n    return versionConfig;\n  });\n}\n\nasync function _configureBuildConstantsPlistAsync(\n  configFilePath: string,\n  context: StandaloneContext\n) {\n  await IosPlist.modifyAsync(configFilePath, 'EXBuildConstants', constantsConfig => {\n    constantsConfig.STANDALONE_CONTEXT_TYPE = context.type;\n    return constantsConfig;\n  });\n}\n\nasync function _renderPodfileFromTemplateAsync(\n  context: StandaloneContext,\n  expoRootTemplateDirectory: string,\n  sdkVersion: string,\n  iosClientVersion: ?string\n) {\n  const { iosProjectDirectory, projectName } = getPaths(context);\n  let podfileTemplateFilename;\n  let podfileSubstitutions: any = {\n    TARGET_NAME: projectName,\n  };\n  let reactNativeDependencyPath;\n  let modulesPath;\n\n  const detachableUniversalModules = Modules.getDetachableModules(\n    'ios',\n    context.data.shellAppSdkVersion || sdkVersion\n  );\n  if (context.type === 'user') {\n    invariant(iosClientVersion, `The iOS client version must be specified`);\n    reactNativeDependencyPath = path.join(context.data.projectPath, 'node_modules', 'react-native');\n    modulesPath = path.join(context.data.projectPath, 'node_modules');\n\n    podfileSubstitutions.EXPOKIT_TAG = `ios/${iosClientVersion}`;\n    podfileTemplateFilename = 'ExpoKit-Podfile';\n  } else if (context.type === 'service') {\n    reactNativeDependencyPath = path.join(\n      expoRootTemplateDirectory,\n      'react-native-lab',\n      'react-native'\n    );\n    modulesPath = path.join(expoRootTemplateDirectory, 'packages');\n\n    podfileSubstitutions.EXPOKIT_PATH = path.relative(\n      iosProjectDirectory,\n      expoRootTemplateDirectory\n    );\n    podfileSubstitutions.VERSIONED_REACT_NATIVE_PATH = path.relative(\n      iosProjectDirectory,\n      path.join(expoRootTemplateDirectory, 'ios', 'versioned-react-native')\n    );\n    podfileTemplateFilename = 'ExpoKit-Podfile-versioned';\n  } else {\n    throw new Error(`Unsupported context type: ${context.type}`);\n  }\n  podfileSubstitutions.REACT_NATIVE_PATH = path.relative(\n    iosProjectDirectory,\n    reactNativeDependencyPath\n  );\n  podfileSubstitutions.UNIVERSAL_MODULES_PATH = path.relative(iosProjectDirectory, modulesPath);\n  podfileSubstitutions.UNIVERSAL_MODULES = detachableUniversalModules.map(module => ({\n    ...module,\n    path: path.join(\n      podfileSubstitutions.UNIVERSAL_MODULES_PATH,\n      module.libName,\n      module.subdirectory\n    ),\n  }));\n\n  // env flags for testing\n  if (process.env.EXPOKIT_TAG_IOS) {\n    logger.info(`EXPOKIT_TAG_IOS: Using custom ExpoKit iOS tag...`);\n    podfileSubstitutions.EXPOKIT_TAG = process.env.EXPOKIT_TAG_IOS;\n  } else if (process.env.EXPO_VIEW_DIR) {\n    logger.info('EXPO_VIEW_DIR: Using local ExpoKit source for iOS...');\n    podfileSubstitutions.EXPOKIT_PATH = path.relative(\n      iosProjectDirectory,\n      process.env.EXPO_VIEW_DIR\n    );\n    // If EXPO_VIEW_DIR is defined overwrite UNIVERSAL_MODULES with paths pointing to EXPO_VIEW_DIR\n    podfileSubstitutions.UNIVERSAL_MODULES = podfileSubstitutions.UNIVERSAL_MODULES.map(module => ({\n      ...module,\n      path: path.relative(\n        iosProjectDirectory,\n        path.join(process.env.EXPO_VIEW_DIR, 'packages', module.libName, module.subdirectory)\n      ),\n    }));\n  }\n  const templatePodfilePath = path.join(\n    expoRootTemplateDirectory,\n    'template-files',\n    'ios',\n    podfileTemplateFilename\n  );\n  await renderPodfileAsync(\n    templatePodfilePath,\n    path.join(iosProjectDirectory, 'Podfile'),\n    podfileSubstitutions,\n    context.data.shellAppSdkVersion,\n    sdkVersion\n  );\n}\n\nasync function createDetachedAsync(context: StandaloneContext) {\n  const { iosProjectDirectory, projectName, supportingDirectory, projectRootDirectory } = getPaths(\n    context\n  );\n  logger.info(`Creating ExpoKit workspace at ${iosProjectDirectory}...`);\n\n  const isServiceContext = context.type === 'service';\n  const standaloneSdkVersion = await getNewestSdkVersionSupportedAsync(context);\n\n  let iosClientVersion;\n  let iosExpoViewUrl;\n  if (context.type === 'user') {\n    ({ iosClientVersion, iosExpoViewUrl } = await _getVersionedExpoKitConfigAsync(\n      standaloneSdkVersion,\n      process.env.EXPO_VIEW_DIR\n    ));\n  }\n\n  const expoRootTemplateDirectory = await _getOrCreateTemplateDirectoryAsync(\n    context,\n    iosExpoViewUrl\n  );\n\n  // copy template workspace\n  logger.info('Moving iOS project files...');\n  logger.info('Attempting to create project directory...');\n  fs.mkdirpSync(iosProjectDirectory);\n  logger.info('Created project directory! Copying files:');\n  await Utils.ncpAsync(\n    path.join(expoRootTemplateDirectory, 'exponent-view-template', 'ios'),\n    iosProjectDirectory\n  );\n\n  const projectPackageJsonPath = path.join(projectRootDirectory, 'package.json');\n\n  if (!await fs.exists(projectPackageJsonPath)) {\n    logger.info('Copying blank package.json...');\n    await fs.copy(\n      path.join(expoRootTemplateDirectory, 'exponent-view-template', 'package.json'),\n      projectPackageJsonPath\n    );\n  }\n\n  logger.info('Installing required packages...');\n  await _installRequiredPackagesAsync(projectRootDirectory, standaloneSdkVersion);\n\n  logger.info('Naming iOS project...');\n  await _renameAndMoveProjectFilesAsync(context, iosProjectDirectory, projectName);\n\n  logger.info('Configuring iOS dependencies...');\n  // this configuration must happen prior to build time because it affects which\n  // native versions of RN we depend on.\n  await _configureVersionsPlistAsync(supportingDirectory, standaloneSdkVersion, isServiceContext);\n  await _configureBuildConstantsPlistAsync(supportingDirectory, context);\n  await _renderPodfileFromTemplateAsync(\n    context,\n    expoRootTemplateDirectory,\n    standaloneSdkVersion,\n    iosClientVersion\n  );\n\n  if (!process.env.EXPO_VIEW_DIR) {\n    if (context.type === 'user') {\n      rimrafDontThrow(expoRootTemplateDirectory);\n    }\n    await IosPlist.cleanBackupAsync(supportingDirectory, 'EXSDKVersions', false);\n  }\n}\n\nasync function _getPackagesToInstallWhenEjecting(sdkVersion) {\n  const versions = await Versions.versionsAsync();\n  return versions.sdkVersions[sdkVersion].packagesToInstallWhenEjecting;\n}\n\n// @tsapeta: Temporarily copied from Detach._detachAsync. This needs to be invoked also when creating a shell app workspace\n// and not only when ejecting. These copies can be moved to one place if we decide to have just one flow for these two processes.\nasync function _installRequiredPackagesAsync(projectRoot, sdkVersion) {\n  const packagesToInstallWhenEjecting = await _getPackagesToInstallWhenEjecting(sdkVersion);\n  const packagesToInstall = [];\n\n  if (packagesToInstallWhenEjecting && typeof packagesToInstallWhenEjecting === 'object') {\n    Object.keys(packagesToInstallWhenEjecting).forEach(packageName => {\n      packagesToInstall.push(`${packageName}@${packagesToInstallWhenEjecting[packageName]}`);\n    });\n  }\n  if (packagesToInstall.length) {\n    await installPackagesAsync(projectRoot, packagesToInstall);\n  }\n}\n\nfunction addDetachedConfigToExp(exp: Object, context: StandaloneContext): Object {\n  if (context.type !== 'user') {\n    logger.warn(`Tried to modify exp for a non-user StandaloneContext, ignoring`);\n    return exp;\n  }\n  const { supportingDirectory } = getPaths(context);\n  exp.ios.publishBundlePath = path.relative(\n    context.data.projectPath,\n    path.join(supportingDirectory, 'shell-app.bundle')\n  );\n  exp.ios.publishManifestPath = path.relative(\n    context.data.projectPath,\n    path.join(supportingDirectory, 'shell-app-manifest.json')\n  );\n  return exp;\n}\n\n/**\n *  paths returned:\n *    iosProjectDirectory - root directory of an (uncompiled) xcworkspace and obj-c source tree\n *    projectName - xcworkspace project name normalized from context.config\n *    supportingDirectory - location of Info.plist, xib files, etc. during configuration.\n *      for an unbuilt app this is underneath iosProjectDirectory. for a compiled app it's just\n *      a path to the flat xcarchive.\n *    intermediatesDirectory - temporary spot to write whatever files are needed during the\n *      detach/build process but can be discarded afterward.\n */\nfunction getPaths(context: StandaloneContext) {\n  let iosProjectDirectory;\n  let projectName;\n  let supportingDirectory;\n  let intermediatesDirectory;\n  let projectRootDirectory;\n\n  if (context.build.isExpoClientBuild()) {\n    projectName = 'Exponent';\n  } else if (context.isAnonymous()) {\n    projectName = 'ExpoKitApp';\n  } else if (context.config && context.config.name) {\n    let projectNameLabel = context.config.name;\n    projectName = projectNameLabel.replace(/[^a-z0-9_-]/gi, '-').toLowerCase();\n  } else {\n    throw new Error('Cannot configure an Expo project with no name.');\n  }\n  if (context.type === 'user') {\n    projectRootDirectory = context.data.projectPath;\n    iosProjectDirectory = path.join(context.data.projectPath, 'ios');\n    supportingDirectory = path.join(iosProjectDirectory, projectName, 'Supporting');\n  } else if (context.type === 'service') {\n    projectRootDirectory = path.dirname(context.build.ios.workspaceSourcePath);\n    iosProjectDirectory = context.build.ios.workspaceSourcePath;\n    if (context.data.archivePath) {\n      // compiled archive has a flat NSBundle\n      supportingDirectory = context.data.archivePath;\n    } else {\n      supportingDirectory = path.join(iosProjectDirectory, projectName, 'Supporting');\n    }\n  } else {\n    throw new Error(`Unsupported StandaloneContext type: ${context.type}`);\n  }\n  // sandbox intermediates directory by workspace so that concurrently operating\n  // contexts do not interfere with one another.\n  intermediatesDirectory = path.join(\n    iosProjectDirectory,\n    context.build.isExpoClientBuild() ? 'ExponentIntermediates' : 'ExpoKitIntermediates'\n  );\n  return {\n    projectRootDirectory,\n    intermediatesDirectory,\n    iosProjectDirectory,\n    projectName,\n    supportingDirectory,\n  };\n}\n\n/**\n *  Get the newest sdk version supported given the standalone context.\n *  Not all contexts support the newest sdk version.\n */\nasync function getNewestSdkVersionSupportedAsync(context: StandaloneContext) {\n  if (context.type === 'user') {\n    return context.data.exp.sdkVersion;\n  } else if (context.type === 'service') {\n    // when running in universe or on a turtle machine,\n    // we care about what sdk version is actually present in this working copy.\n    // this might not be the same thing deployed to our www Versions endpoint.\n    let { supportingDirectory } = getPaths(context);\n    if (!fs.existsSync(supportingDirectory)) {\n      // if we run this method before creating the workspace, we may need to look at the template.\n      supportingDirectory = path.join(\n        context.data.expoSourcePath,\n        '..',\n        'exponent-view-template',\n        'ios',\n        'exponent-view-template',\n        'Supporting'\n      );\n    }\n    let allVersions, newestVersion;\n    await IosPlist.modifyAsync(supportingDirectory, 'EXSDKVersions', versionConfig => {\n      allVersions = versionConfig.sdkVersions;\n      return versionConfig;\n    });\n    let highestMajorComponent = 0;\n    allVersions.forEach(version => {\n      let majorComponent = parseSdkMajorVersion(version);\n      if (majorComponent > highestMajorComponent) {\n        highestMajorComponent = majorComponent;\n        newestVersion = version;\n      }\n    });\n    return newestVersion;\n  }\n}\n\nexport { addDetachedConfigToExp, createDetachedAsync, getPaths, getNewestSdkVersionSupportedAsync };\n"],"sourceRoot":"/@expo/xdl@55.0.14/src"}