{"version":3,"sources":["detach/IosIPABuilder.js"],"names":["logger","_logger","withFields","buildPhase","createIPABuilder","buildParams","appUUID","keychainPath","bundleIdentifier","teamID","manifest","workspacePath","appDir","path","join","buildDir","provisionDir","outputPath","uploadPath","async","build","provisioningProfilePath","clientBuild","await","copyProvisioningProfileToHomedir","info","plistData","readCMSMessage","codeSignIdentity","IosCodeSigning","ensureCertificateValid","validateProvisioningProfile","distCertFingerprint","exportMethod","resolveExportMethod","exportOptionsPlistPath","exportOptionsData","provisioningProfileUUID","UUID","writeExportOptionsPlistFile","unsignedIpaPath","ipaBuilderArgs","ipaPath","archivePath","buildIPA","generatedEntitlementsPath","createEntitlementsFile","resignIPA","entitlementsPath","sourceIpaPath","destIpaPath","removeProvisioningProfileFromHomedir","cleanup","fs","remove","getProvisioningProfilePath","err","error","mkdirp","getProvisioningProfileDirPath","newProvisioningProfilePath","copy","output","spawnAsyncThrowError","stdio","plistRaw","_","attempt","plist","parse","isError","Error","message","os","homedir"],"mappings":"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","file":"../../detach/IosIPABuilder.js","sourcesContent":["import _ from 'lodash';\nimport os from 'os';\nimport path from 'path';\nimport fs from 'fs-extra';\nimport plist from 'plist';\n\nimport _logger from './Logger';\nimport { spawnAsyncThrowError } from './ExponentTools';\nimport * as IosCodeSigning from './IosCodeSigning';\n\nconst logger = _logger.withFields({ buildPhase: 'building and signing IPA' });\n\nexport default function createIPABuilder(buildParams) {\n  const { appUUID, keychainPath, bundleIdentifier, teamID, manifest, workspacePath } = buildParams;\n  const appDir = path.join('/private/tmp/turtle', appUUID);\n  const buildDir = path.join(appDir, 'build');\n  const provisionDir = path.join(appDir, 'provisioning');\n  const outputPath = path.join(appDir, 'archive.xcarchive');\n  const uploadPath = path.join(buildDir, 'archive.ipa');\n\n  async function build() {\n    const { provisioningProfilePath, clientBuild } = buildParams;\n\n    await copyProvisioningProfileToHomedir(provisioningProfilePath, appUUID);\n    logger.info('provisioning profile copied to home directory');\n\n    try {\n      const plistData = await readCMSMessage(provisioningProfilePath);\n      logger.info('done retrieving provisioning profile data');\n\n      logger.info('checking if teamID is present in keychain and that certificate is valid...');\n      const codeSignIdentity = await IosCodeSigning.ensureCertificateValid(buildParams);\n      logger.info('ensured certificate is valid');\n\n      logger.info('validating provisioning profile...');\n      IosCodeSigning.validateProvisioningProfile(plistData, {\n        distCertFingerprint: codeSignIdentity,\n        teamID,\n        bundleIdentifier,\n      });\n      logger.info('provisioning profile is valid');\n\n      logger.info('writing export-options.plist file...');\n      const exportMethod = IosCodeSigning.resolveExportMethod(plistData);\n      const exportOptionsPlistPath = path.join(provisionDir, 'export-options.plist');\n      const exportOptionsData = {\n        bundleIdentifier,\n        provisioningProfileUUID: plistData.UUID,\n        exportMethod,\n        teamID,\n      };\n      await IosCodeSigning.writeExportOptionsPlistFile(exportOptionsPlistPath, exportOptionsData);\n      logger.info('created export-options.plist file');\n\n      logger.info('generating IPA...');\n      const unsignedIpaPath = path.join(buildDir, `${appUUID}-unsigned.ipa`);\n      const ipaBuilderArgs = {\n        ipaPath: unsignedIpaPath,\n        workspacePath,\n        archivePath: outputPath,\n        codeSignIdentity,\n        exportOptionsPlistPath,\n        plistData,\n        keychainPath,\n        exportMethod,\n      };\n      await IosCodeSigning.buildIPA(ipaBuilderArgs, buildParams, clientBuild);\n      logger.info('generated IPA');\n\n      logger.info('creating entitlements file...');\n      const generatedEntitlementsPath = path.join(appDir, 'generatedEntitlements.entitlements');\n      await IosCodeSigning.createEntitlementsFile({\n        generatedEntitlementsPath,\n        plistData,\n        archivePath: outputPath,\n        manifest,\n      });\n      logger.info('created entitlements file');\n\n      logger.info('resigning IPA...');\n      await IosCodeSigning.resignIPA(\n        {\n          codeSignIdentity,\n          entitlementsPath: generatedEntitlementsPath,\n          provisioningProfilePath,\n          sourceIpaPath: unsignedIpaPath,\n          destIpaPath: uploadPath,\n          keychainPath,\n        },\n        buildParams\n      );\n      logger.info('resigned IPA');\n    } finally {\n      await removeProvisioningProfileFromHomedir(appUUID);\n      logger.info('removed provisioning profile from the home directory');\n    }\n  }\n\n  async function cleanup() {\n    try {\n      await fs.remove(getProvisioningProfilePath(appUUID));\n    } catch (err) {\n      logger.error('failed to perform cleanup, error:', err);\n    }\n  }\n\n  async function copyProvisioningProfileToHomedir(provisioningProfilePath, appUUID) {\n    await fs.mkdirp(getProvisioningProfileDirPath());\n    const newProvisioningProfilePath = getProvisioningProfilePath(appUUID);\n    await fs.copy(provisioningProfilePath, newProvisioningProfilePath);\n  }\n\n  async function removeProvisioningProfileFromHomedir(appUUID) {\n    const provisioningProfilePath = getProvisioningProfilePath(appUUID);\n    await fs.remove(provisioningProfilePath);\n  }\n\n  async function readCMSMessage(provisioningProfilePath) {\n    const { output } = await spawnAsyncThrowError(\n      'security',\n      ['cms', '-D', '-i', provisioningProfilePath],\n      {\n        stdio: 'pipe',\n      }\n    );\n    const plistRaw = output.join('');\n    const plistData = _.attempt(plist.parse, plistRaw);\n    if (_.isError(plistData)) {\n      throw new Error(`Error when parsing plist: ${plistData.message}`);\n    }\n    return plistData;\n  }\n\n  const getProvisioningProfileDirPath = () =>\n    path.join(os.homedir(), 'Library/MobileDevice/Provisioning Profiles');\n\n  const getProvisioningProfilePath = appUUID =>\n    path.join(getProvisioningProfileDirPath(), `${appUUID}.mobileprovision`);\n\n  return { build, cleanup };\n}\n"],"sourceRoot":"/@expo/xdl@55.0.14/src"}