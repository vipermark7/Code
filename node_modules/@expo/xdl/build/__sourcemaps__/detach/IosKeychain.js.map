{"version":3,"sources":["detach/IosKeychain.js"],"names":["async","createKeychain","appUUID","saveResultToFile","BUILD_PHASE","logger","_logger","withFields","buildPhase","spawn","createSpawner","name","uuidv1","password","path","getKeychainPath","info","await","runFastlane","stdoutOnly","keychainInfo","keychainInfoPath","getKeychainInfoPath","fs","writeFile","JSON","stringify","deleteKeychain","remove","importIntoKeychain","keychainPath","certPath","certPassword","args","push","cleanUpKeychains","stdout","keychainsListRaw","spawnAsyncThrowError","stdio","allKeychainsList","match","map","i","slice","length","turtleKeychainsList","let","shouldCleanSearchList","err","warn","newSearchList","_","difference","error","Error","fastlaneArgs","fastlaneEnvVars","FASTLANE_DISABLE_COLORS","FASTLANE_SKIP_UPDATE_CHECK","CI","LC_ALL","env","process"],"mappings":"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","file":"../../detach/IosKeychain.js","sourcesContent":["import uuidv1 from 'uuid/v1';\nimport _ from 'lodash';\nimport fs from 'fs-extra';\n\nimport _logger from './Logger';\nimport { spawnAsyncThrowError, createSpawner } from './ExponentTools';\n\nexport async function createKeychain(appUUID, saveResultToFile = true) {\n  const BUILD_PHASE = 'creating keychain';\n  const logger = _logger.withFields({ buildPhase: BUILD_PHASE });\n  const spawn = createSpawner(BUILD_PHASE, logger);\n\n  const name = uuidv1();\n  const password = uuidv1();\n  const path = getKeychainPath(name);\n\n  logger.info('creating new keychain...');\n  await runFastlane([\n    'run',\n    'create_keychain',\n    `path:${path}`,\n    `password:${password}`,\n    'unlock:true',\n    'timeout:360000',\n  ]);\n  await spawn('security', 'show-keychain-info', path, { stdoutOnly: true });\n\n  logger.info('created new keychain');\n  const keychainInfo = {\n    name,\n    path,\n    password,\n  };\n\n  if (saveResultToFile) {\n    const keychainInfoPath = getKeychainInfoPath(appUUID);\n    await fs.writeFile(keychainInfoPath, JSON.stringify(keychainInfo));\n    logger.info('saved keychain info to %s', keychainInfoPath);\n  }\n\n  return keychainInfo;\n}\n\nexport async function deleteKeychain({ path, appUUID }) {\n  const BUILD_PHASE = 'deleting keychain';\n  const logger = _logger.withFields({ buildPhase: BUILD_PHASE });\n\n  logger.info('deleting keychain...');\n  await runFastlane(['run', 'delete_keychain', `keychain_path:${path}`]);\n\n  if (appUUID) {\n    const keychainInfoPath = getKeychainInfoPath(appUUID);\n    await fs.remove(keychainInfoPath);\n  }\n}\n\nexport async function importIntoKeychain({ keychainPath, certPath, certPassword }) {\n  const BUILD_PHASE = 'importing certificate into keychain';\n  const logger = _logger.withFields({ buildPhase: BUILD_PHASE });\n  const spawn = createSpawner(BUILD_PHASE);\n\n  logger.info('importing certificate into keychain...');\n  const args = ['import', certPath, '-A', '-k', keychainPath, '-f', 'pkcs12'];\n  if (certPassword) {\n    logger.info('certificate has password');\n    args.push('-P', certPassword);\n  } else {\n    logger.info(\"certificate doesn't have password\");\n  }\n  await spawn('security', ...args);\n  logger.info('imported certificate into keychain');\n}\n\nexport async function cleanUpKeychains() {\n  try {\n    _logger.info('Cleaning up keychains...');\n    const { stdout: keychainsListRaw } = await spawnAsyncThrowError(\n      'security',\n      ['list-keychains'],\n      { stdio: 'pipe' }\n    );\n    const allKeychainsList = keychainsListRaw.match(/\"(.*)\"/g).map(i => i.slice(1, i.length - 1));\n    const turtleKeychainsList = keychainsListRaw.match(/\\/private\\/tmp\\/xdl\\/(.*).keychain/g);\n    let shouldCleanSearchList = false;\n    if (turtleKeychainsList) {\n      for (const keychainPath of turtleKeychainsList) {\n        try {\n          await deleteKeychain({ path: keychainPath });\n        } catch (err) {\n          _logger.warn(`Failed to delete keychain: ${keychainPath}`, err);\n          shouldCleanSearchList = true;\n        }\n      }\n\n      if (shouldCleanSearchList) {\n        const newSearchList = _.difference(allKeychainsList, turtleKeychainsList);\n        await spawnAsyncThrowError('security', ['list-keychains', '-s', ...newSearchList], {\n          stdio: 'pipe',\n        });\n      }\n    }\n    _logger.info('Cleaned up keychains');\n  } catch (err) {\n    _logger.error(err);\n    throw new Error('Failed to clean up keychains');\n  }\n}\n\nasync function runFastlane(fastlaneArgs) {\n  const fastlaneEnvVars = {\n    FASTLANE_DISABLE_COLORS: 1,\n    FASTLANE_SKIP_UPDATE_CHECK: 1,\n    CI: 1,\n    LC_ALL: 'en_US.UTF-8',\n  };\n  await spawnAsyncThrowError('fastlane', fastlaneArgs, {\n    env: { ...process.env, ...fastlaneEnvVars },\n  });\n}\n\nconst getKeychainPath = name => `/private/tmp/xdl/${name}.keychain`;\nconst getKeychainInfoPath = appUUID => `/private/tmp/${appUUID}-keychain-info.json`;\n"],"sourceRoot":"/@expo/xdl@55.0.14/src"}