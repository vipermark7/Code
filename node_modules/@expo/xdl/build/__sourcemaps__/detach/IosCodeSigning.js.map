{"version":3,"sources":["detach/IosCodeSigning.js"],"names":["async","ensureCertificateValid","certPath","certPassword","teamID","certData","await","fs","readFile","fingerprint","_genP12CertFingerprint","identities","_findIdentitiesByTeamID","isValid","indexOf","Error","p12Buffer","passwordRaw","_getCertData","certAsn1","forge","pki","certificateToAsn1","certDer","asn1","toDer","getBytes","md","sha1","create","update","digest","toHex","toUpperCase","findP12CertSerialNumber","serialNumber","replace","Buffer","isBuffer","toString","password","String","p12Der","util","decode64","p12Asn1","fromDer","p12","pkcs12","pkcs12FromAsn1","certBagType","oids","certBag","_","get","getBags","bagType","output","spawnAsyncThrowError","stdio","join","validateProvisioningProfile","plistData","distCertFingerprint","bundleIdentifier","_ensureDeveloperCertificateIsValid","_ensureBundleIdentifierIsValid","devCertBase64","DeveloperCertificates","devCertFingerprint","_genDerCertFingerprint","certBase64","certBuffer","from","crypto","createHash","expectedBundleIdentifier","actualApplicationIdentifier","Entitlements","actualBundleIdentifier","exec","writeExportOptionsPlistFile","plistPath","data","toWrite","createExportOptionsPlist","writeFile","provisioningProfileUUID","exportMethod","disableBitcodeCompiling","buildIPA","ipaPath","workspacePath","archivePath","codeSignIdentity","exportOptionsPlistPath","keychainPath","credentials","client","path","Dir","env","process","CI","runFastlane","basename","dirname","buildPhase","resolveExportMethod","ProvisionedDevices","ProvisionsAllDevices","entitlementTransferRules","blacklistedEntitlementKeysWithoutICloud","blacklistedEntitlementKeys","icloudContainerEnvKey","createEntitlementsFile","generatedEntitlementsPath","manifest","decodedProvisioningProfileEntitlements","entitlementsPattern","entitlementsPaths","glob","length","archiveEntitlementsPath","archiveEntitlementsRaw","archiveEntitlementsData","attempt","plist","parse","isError","message","entitlements","forEach","rule","let","generatedEntitlements","omit","ios","usesIcloudStorage","ubiquityKvKey","teamId","split","associatedDomains","envs","filter","i","generatedEntitlementsPlistData","build","mode","plistDataReformatted","resignIPA","entitlementsPath","provisioningProfilePath","sourceIpaPath","destIpaPath","fastlaneArgs","loggerFields","fastlaneEnvVars","FASTLANE_SKIP_UPDATE_CHECK","FASTLANE_DISABLE_COLORS","FASTLANE_TEAM_ID","LC_ALL","pipeToLogger","dontShowStdout"],"mappings":"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","file":"../../detach/IosCodeSigning.js","sourcesContent":["import forge from 'node-forge';\nimport _ from 'lodash';\nimport fs from 'fs-extra';\nimport path from 'path';\nimport glob from 'glob-promise';\nimport plist from 'plist';\nimport crypto from 'crypto';\n\nimport { spawnAsyncThrowError } from './ExponentTools';\n\nasync function ensureCertificateValid({ certPath, certPassword, teamID }) {\n  const certData = await fs.readFile(certPath);\n  const fingerprint = _genP12CertFingerprint(certData, certPassword);\n  const identities = await _findIdentitiesByTeamID(teamID);\n  const isValid = identities.indexOf(fingerprint) !== -1;\n  if (!isValid) {\n    throw new Error(`codesign ident not present in find-identity: ${fingerprint}\\n${identities}`);\n  }\n  return fingerprint;\n}\n\nfunction _genP12CertFingerprint(p12Buffer, passwordRaw) {\n  const certData = _getCertData(p12Buffer, passwordRaw);\n  const certAsn1 = forge.pki.certificateToAsn1(certData);\n  const certDer = forge.asn1.toDer(certAsn1).getBytes();\n  return forge.md.sha1\n    .create()\n    .update(certDer)\n    .digest()\n    .toHex()\n    .toUpperCase();\n}\n\nfunction findP12CertSerialNumber(p12Buffer, passwordRaw) {\n  const certData = _getCertData(p12Buffer, passwordRaw);\n  const { serialNumber } = certData;\n  return serialNumber ? certData.serialNumber.replace(/^0+/, '').toUpperCase() : null;\n}\n\nfunction _getCertData(p12Buffer, passwordRaw) {\n  if (Buffer.isBuffer(p12Buffer)) {\n    p12Buffer = p12Buffer.toString('base64');\n  } else if (typeof p12Buffer !== 'string') {\n    throw new Error('_getCertData only takes strings and buffers.');\n  }\n\n  const password = String(passwordRaw || '');\n  const p12Der = forge.util.decode64(p12Buffer);\n  const p12Asn1 = forge.asn1.fromDer(p12Der);\n  const p12 = forge.pkcs12.pkcs12FromAsn1(p12Asn1, password);\n  const certBagType = forge.pki.oids.certBag;\n  const certData = _.get(p12.getBags({ bagType: certBagType }), [certBagType, 0, 'cert']);\n  if (!certData) {\n    throw new Error(\"_getCertData: couldn't find cert bag\");\n  }\n  return certData;\n}\n\nasync function _findIdentitiesByTeamID(teamID) {\n  const { output } = await spawnAsyncThrowError(\n    'security',\n    ['find-identity', '-v', '-s', `(${teamID})`],\n    {\n      stdio: 'pipe',\n    }\n  );\n  return output.join('');\n}\n\nfunction validateProvisioningProfile(plistData, { distCertFingerprint, bundleIdentifier }) {\n  _ensureDeveloperCertificateIsValid(plistData, distCertFingerprint);\n  _ensureBundleIdentifierIsValid(plistData, bundleIdentifier);\n}\n\nfunction _ensureDeveloperCertificateIsValid(plistData, distCertFingerprint) {\n  const devCertBase64 = plistData.DeveloperCertificates[0];\n  const devCertFingerprint = _genDerCertFingerprint(devCertBase64);\n  if (devCertFingerprint !== distCertFingerprint) {\n    throw new Error(\n      'validateProvisioningProfile: provisioning profile is not associated with uploaded distribution certificate'\n    );\n  }\n}\n\nfunction _genDerCertFingerprint(certBase64) {\n  const certBuffer = Buffer.from(certBase64, 'base64');\n  return crypto\n    .createHash('sha1')\n    .update(certBuffer)\n    .digest('hex')\n    .toUpperCase();\n}\n\nfunction _ensureBundleIdentifierIsValid(plistData, expectedBundleIdentifier) {\n  const actualApplicationIdentifier = plistData.Entitlements['application-identifier'];\n  const actualBundleIdentifier = /\\.(.+)/.exec(actualApplicationIdentifier)[1];\n\n  if (expectedBundleIdentifier !== actualBundleIdentifier) {\n    throw new Error(\n      `validateProvisioningProfile: wrong bundleIdentifier found in provisioning profile; expected: ${expectedBundleIdentifier}, found (in provisioning profile): ${actualBundleIdentifier}`\n    );\n  }\n}\n\nasync function writeExportOptionsPlistFile(plistPath, data) {\n  const toWrite = createExportOptionsPlist(data);\n  await fs.writeFile(plistPath, toWrite);\n}\n\nconst createExportOptionsPlist = ({\n  bundleIdentifier,\n  provisioningProfileUUID,\n  exportMethod,\n  teamID,\n}) => {\n  const disableBitcodeCompiling = `<key>uploadBitcode</key>\n    <false/>\n    <key>compileBitcode</key>\n    <false/>\n    <key>uploadSymbols</key>\n    <false/>`;\n  return `<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<!DOCTYPE plist PUBLIC \"-//Apple//DTD PLIST 1.0//EN\" \"http://www.apple.com/DTDs/PropertyList-1.0.dtd\">\n<plist version=\"1.0\">\n  <dict>\n    <key>method</key>\n    <string>${exportMethod}</string>\n    <key>teamID</key>\n    <string>${teamID}</string>\n    <key>provisioningProfiles</key>\n    <dict>\n      <key>${bundleIdentifier}</key>\n      <string>${provisioningProfileUUID}</string>\n    </dict>\n    ${exportMethod === 'ad-hoc' || exportMethod === 'enterprise' ? disableBitcodeCompiling : ''}\n  </dict>\n</plist>`;\n};\n\nasync function buildIPA(\n  {\n    ipaPath,\n    workspacePath,\n    archivePath,\n    codeSignIdentity,\n    exportOptionsPlistPath,\n    plistData,\n    keychainPath,\n    exportMethod,\n  },\n  credentials,\n  client = false\n) {\n  if (client) {\n    await spawnAsyncThrowError(\n      'xcodebuild',\n      [\n        '-exportArchive',\n        '-archivePath',\n        archivePath,\n        '-exportOptionsPlist',\n        exportOptionsPlistPath,\n        '-exportPath',\n        path.Dir(ipaPath),\n        `OTHER_CODE_SIGN_FLAGS=\"--keychain ${keychainPath}\"`,\n      ],\n      {\n        env: { ...process.env, CI: 1 },\n      }\n    );\n  } else {\n    await runFastlane(\n      credentials,\n      [\n        'gym',\n        '-n',\n        path.basename(ipaPath),\n        '--workspace',\n        workspacePath,\n        '--archive_path',\n        archivePath,\n        '--skip_build_archive',\n        'true',\n        '-i',\n        codeSignIdentity,\n        '--export_options',\n        exportOptionsPlistPath,\n        '--export_method',\n        exportMethod,\n        '--export_xcargs',\n        `OTHER_CODE_SIGN_FLAGS=\"--keychain ${keychainPath}\"`,\n        '-o',\n        path.dirname(ipaPath),\n        '--verbose',\n      ],\n      { buildPhase: 'building and signing IPA' }\n    );\n  }\n}\n\nconst resolveExportMethod = plistData => {\n  if (plistData.ProvisionedDevices) {\n    return 'ad-hoc';\n  } else if (plistData.ProvisionsAllDevices === true) {\n    return 'enterprise';\n  } else {\n    return 'app-store';\n  }\n};\n\nconst entitlementTransferRules = [\n  'com.apple.developer.associated-domains',\n  'com.apple.developer.healthkit',\n  'com.apple.developer.homekit',\n  'com.apple.developer.icloud-container-identifiers',\n  'com.apple.developer.icloud-services',\n  'com.apple.developer.in-app-payments',\n  'com.apple.developer.networking.vpn.api',\n  'com.apple.developer.ubiquity-container-identifiers',\n  'com.apple.developer.ubiquity-kvstore-identifier',\n  'com.apple.external-accessory.wireless-configuration',\n  'com.apple.security.application-groups',\n  'inter-app-audio',\n  'keychain-access-groups',\n];\n\nconst blacklistedEntitlementKeysWithoutICloud = [\n  'com.apple.developer.icloud-container-environment',\n  'com.apple.developer.icloud-container-identifiers',\n  'com.apple.developer.icloud-services',\n  'com.apple.developer.ubiquity-container-identifiers',\n  'com.apple.developer.ubiquity-kvstore-identifier',\n];\n\nconst blacklistedEntitlementKeys = [\n  'com.apple.developer.icloud-container-development-container-identifiers',\n  'com.apple.developer.restricted-resource-mode',\n  'inter-app-audio',\n  'com.apple.developer.homekit',\n  'com.apple.developer.healthkit',\n  'com.apple.developer.in-app-payments',\n  'com.apple.developer.maps',\n  'com.apple.external-accessory.wireless-configuration',\n];\n\nconst icloudContainerEnvKey = 'com.apple.developer.icloud-container-environment';\n\nasync function createEntitlementsFile({\n  generatedEntitlementsPath,\n  plistData,\n  archivePath,\n  manifest,\n}) {\n  const decodedProvisioningProfileEntitlements = plistData.Entitlements;\n\n  const entitlementsPattern = path.join(archivePath, 'Products/Applications/*.app/*.entitlements');\n  const entitlementsPaths = await glob(entitlementsPattern);\n  if (entitlementsPaths.length === 0) {\n    throw new Error(\"Didn't find any generated entitlements file in archive.\");\n  } else if (entitlementsPaths.length !== 1) {\n    throw new Error('Found more than one entitlements file.');\n  }\n  const archiveEntitlementsPath = entitlementsPaths[0];\n  const archiveEntitlementsRaw = await fs.readFile(archiveEntitlementsPath);\n  const archiveEntitlementsData = _.attempt(plist.parse, String(archiveEntitlementsRaw));\n  if (_.isError(archiveEntitlementsData)) {\n    throw new Error(`Error when parsing plist: ${archiveEntitlementsData.message}`);\n  }\n\n  const entitlements = { ...decodedProvisioningProfileEntitlements };\n\n  entitlementTransferRules.forEach(rule => {\n    if (rule in archiveEntitlementsData) {\n      entitlements[rule] = archiveEntitlementsData[rule];\n    }\n  });\n\n  let generatedEntitlements = _.omit(entitlements, blacklistedEntitlementKeys);\n\n  if (!manifest.ios.usesIcloudStorage) {\n    generatedEntitlements = _.omit(generatedEntitlements, blacklistedEntitlementKeysWithoutICloud);\n  } else {\n    const ubiquityKvKey = 'com.apple.developer.ubiquity-kvstore-identifier';\n    if (generatedEntitlements[ubiquityKvKey]) {\n      const teamId = generatedEntitlements[ubiquityKvKey].split('.')[0];\n      generatedEntitlements[ubiquityKvKey] = `${teamId}.${manifest.ios.bundleIdentifier}`;\n    }\n    generatedEntitlements['com.apple.developer.icloud-services'] = ['CloudDocuments'];\n  }\n  if (!manifest.ios.associatedDomains) {\n    generatedEntitlements = _.omit(generatedEntitlements, 'com.apple.developer.associated-domains');\n  }\n  if (generatedEntitlements[icloudContainerEnvKey]) {\n    const envs = generatedEntitlements[icloudContainerEnvKey].filter(i => i === 'Production');\n    generatedEntitlements[icloudContainerEnvKey] = envs;\n  }\n\n  const generatedEntitlementsPlistData = _.attempt(plist.build, generatedEntitlements);\n  await fs.writeFile(generatedEntitlementsPath, generatedEntitlementsPlistData, {\n    mode: 0o755,\n  });\n  const { output } = await spawnAsyncThrowError(\n    '/usr/libexec/PlistBuddy',\n    ['-x', '-c', 'Print', generatedEntitlementsPath],\n    {\n      stdio: 'pipe',\n    }\n  );\n  const plistDataReformatted = output.join('');\n  await fs.writeFile(generatedEntitlementsPath, plistDataReformatted, {\n    mode: 0o755,\n  });\n}\n\nasync function resignIPA(\n  {\n    codeSignIdentity,\n    entitlementsPath,\n    provisioningProfilePath,\n    sourceIpaPath,\n    destIpaPath,\n    keychainPath,\n  },\n  credentials\n) {\n  await spawnAsyncThrowError('cp', ['-rf', sourceIpaPath, destIpaPath]);\n  await runFastlane(\n    credentials,\n    [\n      'sigh',\n      'resign',\n      '--verbose',\n      '--entitlements',\n      entitlementsPath,\n      '--signing_identity',\n      codeSignIdentity,\n      '--keychain_path',\n      keychainPath,\n      '--provisioning_profile',\n      provisioningProfilePath,\n      destIpaPath,\n    ],\n    { buildPhase: 'building and signing IPA' }\n  );\n}\n\nasync function runFastlane({ teamID }, fastlaneArgs, loggerFields) {\n  const fastlaneEnvVars = {\n    FASTLANE_SKIP_UPDATE_CHECK: 1,\n    FASTLANE_DISABLE_COLORS: 1,\n    FASTLANE_TEAM_ID: teamID,\n    CI: 1,\n    LC_ALL: 'en_US.UTF-8',\n  };\n\n  await spawnAsyncThrowError('fastlane', fastlaneArgs, {\n    env: {\n      ...process.env,\n      ...fastlaneEnvVars,\n    },\n    pipeToLogger: true,\n    dontShowStdout: false,\n    loggerFields,\n  });\n}\n\nexport {\n  ensureCertificateValid,\n  findP12CertSerialNumber,\n  validateProvisioningProfile,\n  writeExportOptionsPlistFile,\n  buildIPA,\n  resolveExportMethod,\n  createEntitlementsFile,\n  resignIPA,\n};\n"],"sourceRoot":"/@expo/xdl@55.0.14/src"}