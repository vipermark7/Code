{"version":3,"sources":["detach/IosAssetArchive.js"],"names":["async","buildAssetArchiveAsync","context","destinationCARPath","intermediatesDirectory","type","Error","fs","mkdirpSync","await","spawnAsyncThrowError","path","join","data","expoSourcePath","stdio","IosIcons","createAndWriteIconsToPathAsync","sdkMajorVersion","parseSdkMajorVersion","manifest","sdkVersion","deploymentTarget","let","xcrunargs","concat","relative","cwd"],"mappings":";;;;;;;AAIA;;AACA;;AAEA;;AACA;;AACA;;;;;;AAEA;;;AAGAA,eAAeC,sBAAfD,CACEE,OADFF,EAEEG,kBAFFH,EAGEI,sBAHFJ,EAIE;AACA,MAAIE,OAAO,CAACG,IAARH,KAAiB,SAArB,EAAgC;AAC9B,UAAM,IAAII,KAAJ,CAAU,sEAAV,CAAN;AACF;;AACAC,mBAAGC,UAAHD,CAAcH,sBAAdG,EAJA,CAMA;;;AACAE,QAAMC,yCACJ,SADIA,EAEJ,CACE,IADF,EAEEC,cAAKC,IAALD,CAAUT,OAAO,CAACW,IAARX,CAAaY,cAAvBH,EAAuC,UAAvCA,EAAmD,iBAAnDA,CAFF,EAGEA,cAAKC,IAALD,CAAUP,sBAAVO,EAAkC,iBAAlCA,CAHF,CAFID,EAOJ;AACEK,IAAAA,KAAK,EAAE;AADT,GAPIL,CAAND,CAPA,CAmBA;;AACAA,QAAMO,QAAQ,CAACC,8BAATD,CACJd,OADIc,EAEJL,cAAKC,IAALD,CAAUP,sBAAVO,EAAkC,iBAAlCA,EAAqD,oBAArDA,CAFIK,CAANP;AAKA,QAAMS,eAAAA,GAAkBC,yCAAqBjB,OAAO,CAACW,IAARX,CAAakB,QAAblB,CAAsBmB,UAA3CF,CAAxB;AACA,QAAMG,gBAAAA,GAAmBJ,eAAAA,GAAkB,EAAlBA,GAAuB,MAAvBA,GAAgC,KAAzD,CA1BA,CA0B8D;AAE9D;;AACAK,MAAIC,SAAAA,GAAY,GAAGC,MAAH,CACd,CAAC,QAAD,CADc,EAEd,CAAC,6BAAD,EAAgCH,gBAAhC,CAFc,EAGd,CAAC,YAAD,EAAe,UAAf,CAHc,EAId,CAAC,YAAD,EAAe,SAAf,CAJc,EAKd,CAAC,6BAAD,EAAgC,mCAAhC,CALc,EAMd,CAAC,iBAAD,CANc,EAOd,CAAC,8BAAD,EAAiC,KAAjC,CAPc,EAQd,CAAC,gBAAD,EAAmB,oCAAnB,CARc,EASd,CAAC,iBAAD,EAAoB,QAApB,CATc,EAUd,CAAC,iBAAD,EAAoB,MAApB,CAVc,EAWd,CAAC,WAAD,EAAcX,cAAKe,QAALf,CAAcP,sBAAdO,EAAsCR,kBAAtCQ,CAAd,CAXc,EAYd,CAAC,iBAAD,CAZc,CAAhBY;AAcA;;;;;;AAKAd,QAAMC,yCAAqB,OAArBA,EAA8Bc,SAA9Bd,EAAyC;AAC7CK,IAAAA,KAAK,EAAE,CAAC,QAAD,EAAW,QAAX,EAAqB,SAArB,CADsC;AACP;AACtCY,IAAAA,GAAG,EAAEvB;AAFwC,GAAzCM,CAAND;AAIF","file":"../../detach/IosAssetArchive.js","sourcesContent":["/**\n *  @flow\n */\n\nimport fs from 'fs-extra';\nimport path from 'path';\n\nimport { spawnAsyncThrowError, parseSdkMajorVersion } from './ExponentTools';\nimport * as IosIcons from './IosIcons';\nimport StandaloneContext from './StandaloneContext';\n\n/**\n *  Compile a .car file from the icons in a manifest.\n */\nasync function buildAssetArchiveAsync(\n  context: StandaloneContext,\n  destinationCARPath: string,\n  intermediatesDirectory: string\n) {\n  if (context.type !== 'service') {\n    throw new Error('buildAssetArchive is only supported for service standalone contexts.');\n  }\n  fs.mkdirpSync(intermediatesDirectory);\n\n  // copy expoSourceRoot/.../Images.xcassets into intermediates\n  await spawnAsyncThrowError(\n    '/bin/cp',\n    [\n      '-R',\n      path.join(context.data.expoSourcePath, 'Exponent', 'Images.xcassets'),\n      path.join(intermediatesDirectory, 'Images.xcassets'),\n    ],\n    {\n      stdio: 'inherit',\n    }\n  );\n\n  // make the new xcassets contain the project's icon\n  await IosIcons.createAndWriteIconsToPathAsync(\n    context,\n    path.join(intermediatesDirectory, 'Images.xcassets', 'AppIcon.appiconset')\n  );\n\n  const sdkMajorVersion = parseSdkMajorVersion(context.data.manifest.sdkVersion);\n  const deploymentTarget = sdkMajorVersion > 30 ? '10.0' : '9.0'; // SDK31 drops support for iOS 9.0\n\n  // compile asset archive\n  let xcrunargs = [].concat(\n    ['actool'],\n    ['--minimum-deployment-target', deploymentTarget],\n    ['--platform', 'iphoneos'],\n    ['--app-icon', 'AppIcon'],\n    ['--output-partial-info-plist', 'assetcatalog_generated_info.plist'],\n    ['--compress-pngs'],\n    ['--enable-on-demand-resources', 'YES'],\n    ['--product-type', 'com.apple.product-type.application'],\n    ['--target-device', 'iphone'],\n    ['--target-device', 'ipad'],\n    ['--compile', path.relative(intermediatesDirectory, destinationCARPath)],\n    ['Images.xcassets']\n  );\n  /*\n   *  Note: if you want to debug issues with `actool`, try changing to stdio: 'inherit'.\n   *  In both success and failure cases, actool will write an enormous .plist to stdout\n   *  which may contain the key `com.apple.actool.errors`. Great work Apple\n   */\n  await spawnAsyncThrowError('xcrun', xcrunargs, {\n    stdio: ['ignore', 'ignore', 'inherit'], // only stderr\n    cwd: intermediatesDirectory,\n  });\n}\n\nexport { buildAssetArchiveAsync };\n"],"sourceRoot":"/@expo/xdl@55.0.14/src"}