{"version":3,"sources":["detach/IosPlist.js"],"names":["_getNormalizedPlistFilename","plistName","let","plistFilename","indexOf","async","modifyAsync","plistPath","transform","configPlistName","path","join","configFilename","config","process","platform","await","spawnAsyncThrowError","configContents","fs","readFile","JSON","parse","e","logger","info","plist","readFileSync","writeFile","stringify","build","createBlankAsync","emptyConfig","tmpConfigFile","cleanBackupAsync","restoreOriginal","backupPlistPath","exists","copy","remove"],"mappings":"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","file":"../../detach/IosPlist.js","sourcesContent":["import fs from 'fs-extra';\nimport path from 'path';\nimport plist from 'plist';\n\nimport { spawnAsyncThrowError } from './ExponentTools';\nimport logger from './Logger';\n\nfunction _getNormalizedPlistFilename(plistName) {\n  let plistFilename;\n  if (plistName.indexOf('.') !== -1) {\n    plistFilename = plistName;\n  } else {\n    plistFilename = `${plistName}.plist`;\n  }\n  return plistFilename;\n}\n\n/**\n *  @param plistName base filename of property list. if no extension, assumes .plist\n */\nasync function modifyAsync(plistPath, plistName, transform) {\n  let plistFilename = _getNormalizedPlistFilename(plistName);\n  let configPlistName = path.join(plistPath, plistFilename);\n  let configFilename = path.join(plistPath, `${plistName}.json`);\n\n  // grab original plist as json object\n  let config;\n  if (process.platform === 'darwin') {\n    await spawnAsyncThrowError('plutil', [\n      '-convert',\n      'json',\n      configPlistName,\n      '-o',\n      configFilename,\n    ]);\n    let configContents = await fs.readFile(configFilename, 'utf8');\n\n    try {\n      config = JSON.parse(configContents);\n    } catch (e) {\n      logger.info(`Error parsing ${configFilename}`, e);\n      logger.info('The erroneous file contents was:', configContents);\n      config = {};\n    }\n  } else {\n    config = plist.parse(fs.readFileSync(configPlistName, 'utf8'));\n  }\n\n  // apply transformation\n  config = transform(config);\n\n  // back up old plist and swap in modified one\n  await spawnAsyncThrowError('/bin/cp', [configPlistName, `${configPlistName}.bak`]);\n  await fs.writeFile(configFilename, JSON.stringify(config));\n  if (process.platform === 'darwin') {\n    await spawnAsyncThrowError('plutil', [\n      '-convert',\n      'xml1',\n      configFilename,\n      '-o',\n      configPlistName,\n    ]);\n  } else {\n    await fs.writeFile(configPlistName, plist.build(config));\n  }\n\n  return config;\n}\n\nasync function createBlankAsync(plistPath, plistName) {\n  // write empty json file\n  const emptyConfig = {};\n  const tmpConfigFile = path.join(plistPath, `${plistName}.json`);\n  await fs.writeFile(tmpConfigFile, JSON.stringify(emptyConfig));\n\n  // convert to plist\n  let plistFilename = _getNormalizedPlistFilename(plistName);\n  let configPlistName = path.join(plistPath, plistFilename);\n  if (process.platform === 'darwin') {\n    await spawnAsyncThrowError('plutil', [\n      '-convert',\n      'xml1',\n      tmpConfigFile,\n      '-o',\n      configPlistName,\n    ]);\n  } else {\n    await fs.writeFile(configPlistName, JSON.stringify(plist.build(emptyConfig)));\n  }\n\n  // remove tmp json file\n  await spawnAsyncThrowError('/bin/rm', [tmpConfigFile]);\n}\n\nasync function cleanBackupAsync(plistPath, plistName, restoreOriginal = true) {\n  let plistFilename = _getNormalizedPlistFilename(plistName);\n  let configPlistName = path.join(plistPath, plistFilename);\n  let configFilename = path.join(plistPath, `${plistName}.json`);\n  const backupPlistPath = `${configPlistName}.bak`;\n\n  if (restoreOriginal && (await fs.exists(backupPlistPath))) {\n    await fs.copy(backupPlistPath, configPlistName);\n  }\n\n  await fs.remove(backupPlistPath);\n  await fs.remove(configFilename);\n}\n\nexport { modifyAsync, cleanBackupAsync, createBlankAsync };\n"],"sourceRoot":"/@expo/xdl@55.0.14/src"}