{"version":3,"sources":["detach/IosShellApp.js"],"names":["EXPOKIT_APP","EXPONENT_APP","_validateCLIArgs","args","type","configuration","verbose","testEnvironment","Error","action","url","sdkVersion","archivePath","async","_buildAsync","projectName","workspacePath","relativeBuildDestination","useModernBuildSystem","modernBuildSystemFragment","buildDest","let","buildCmd","pathToArtifact","path","join","logger","info","await","spawnAsyncThrowError","stdio","cwd","shell","resolve","_podInstallAsync","isRepoUpdateEnabled","pathsToClean","forEach","fs","existsSync","rimraf","sync","cocoapodsArgs","push","_createStandaloneContextAsync","expoSourcePath","workspaceSourcePath","privateConfigFile","privateConfigData","privateConfig","privateConfigContents","readFile","JSON","parse","manifest","withFields","buildPhase","stringify","releaseChannel","getManifestAsync","Accept","buildFlags","StandaloneBuildFlags","createIos","appleTeamId","buildType","context","StandaloneContext","createServiceContext","shellAppSdkVersion","configureAndCopyArchiveAsync","output","IosNSBundle","configureAsync","archiveName","config","slug","replace","appReleasePath","data","spawnAsync","stdoutOnly","pipeToLogger","loggerFields","workspaceName","_createTurtleWorkspaceAsync","skipRepoUpdate","build","ios","_","IosWorkspace","createDetachedAsync","createTurtleWorkspaceAsync","buildAndCopyArtifactAsync","reuseWorkspace","getPaths","relative","parseSdkMajorVersion","artifactDestPath"],"mappings":"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","file":"../../detach/IosShellApp.js","sourcesContent":["// Copyright 2015-present 650 Industries. All rights reserved.\n\n'use strict';\n\nimport fs from 'fs-extra';\nimport path from 'path';\nimport rimraf from 'rimraf';\n\nimport {\n  getManifestAsync,\n  spawnAsync,\n  spawnAsyncThrowError,\n  parseSdkMajorVersion,\n} from './ExponentTools';\nimport * as IosNSBundle from './IosNSBundle';\nimport * as IosWorkspace from './IosWorkspace';\nimport StandaloneBuildFlags from './StandaloneBuildFlags';\nimport StandaloneContext from './StandaloneContext';\nimport logger from './Logger';\n\nexport const EXPOKIT_APP = 'ExpoKitApp';\nexport const EXPONENT_APP = 'Exponent';\n\nfunction _validateCLIArgs(args) {\n  args.type = args.type || 'archive';\n  args.configuration = args.configuration || 'Release';\n  args.verbose = args.verbose || false;\n  args.testEnvironment = args.testEnvironment || 'none';\n\n  switch (args.type) {\n    case 'simulator': {\n      if (args.configuration !== 'Debug' && args.configuration !== 'Release') {\n        throw new Error(`Unsupported build configuration ${args.configuration}`);\n      }\n      break;\n    }\n    case 'archive': {\n      if (args.configuration !== 'Release') {\n        throw new Error('Release is the only supported configuration when archiving');\n      }\n      break;\n    }\n    case 'client':\n      break;\n    default: {\n      throw new Error(`Unsupported build type ${args.type}`);\n    }\n  }\n\n  switch (args.action) {\n    case 'configure': {\n      if (args.type === 'client') {\n        break;\n      }\n\n      if (!args.url) {\n        throw new Error('Must run with `--url MANIFEST_URL`');\n      }\n      if (!args.sdkVersion) {\n        throw new Error('Must run with `--sdkVersion SDK_VERSION`');\n      }\n      if (!args.archivePath) {\n        throw new Error(\n          'Need to provide --archivePath <path to existing archive for configuration>'\n        );\n      }\n      if (\n        args.testEnvironment !== 'local' &&\n        args.testEnvironment !== 'ci' &&\n        args.testEnvironment !== 'none'\n      ) {\n        throw new Error(`Unsupported test environment ${args.testEnvironment}`);\n      }\n      break;\n    }\n    case 'build': {\n      break;\n    }\n    case 'create-workspace': {\n      break;\n    }\n    default: {\n      throw new Error(`Unsupported build action ${args.action}`);\n    }\n  }\n\n  return args;\n}\n\n/**\n *  Build the iOS workspace at the given path.\n *  @return the path to the resulting build artifact\n */\nasync function _buildAsync(\n  projectName,\n  workspacePath,\n  configuration,\n  type,\n  relativeBuildDestination,\n  verbose,\n  useModernBuildSystem = false\n) {\n  const modernBuildSystemFragment = `-UseModernBuildSystem=${useModernBuildSystem ? 'YES' : 'NO'}`;\n  const buildDest = `${relativeBuildDestination}-${type}`;\n  let buildCmd = `set -o pipefail && xcodebuild -workspace ${projectName}.xcworkspace -scheme ${projectName} -configuration ${configuration} -derivedDataPath ${buildDest} ${modernBuildSystemFragment}`,\n    pathToArtifact;\n  if (type === 'simulator') {\n    buildCmd += ` -sdk iphonesimulator CODE_SIGN_IDENTITY=\"\" CODE_SIGNING_REQUIRED=NO ARCHS=\"i386 x86_64\" ONLY_ACTIVE_ARCH=NO | xcpretty`;\n    pathToArtifact = path.join(\n      buildDest,\n      'Build',\n      'Products',\n      `${configuration}-iphonesimulator`,\n      `${projectName}.app`\n    );\n  } else if (type === 'archive') {\n    buildCmd += ` -sdk iphoneos -destination generic/platform=iOS archive -archivePath ${buildDest}/${projectName}.xcarchive CODE_SIGN_IDENTITY=\"\" CODE_SIGNING_REQUIRED=NO | xcpretty`;\n    pathToArtifact = path.join(buildDest, `${projectName}.xcarchive`);\n  } else {\n    throw new Error(`Unsupported build type: ${type}`);\n  }\n\n  logger.info(`Building iOS workspace at ${workspacePath} to ${buildDest}:\\n`);\n  logger.info(buildCmd);\n  if (!verbose) {\n    logger.info(\n      '\\nxcodebuild is running. Logging errors only. To see full output, use --verbose 1...'\n    );\n  }\n  await spawnAsyncThrowError(buildCmd, null, {\n    // only stderr\n    stdio: verbose ? 'inherit' : ['ignore', 'ignore', 'inherit'],\n    cwd: workspacePath,\n    shell: true,\n  });\n  return path.resolve(workspacePath, pathToArtifact);\n}\n\nasync function _podInstallAsync(workspacePath, isRepoUpdateEnabled) {\n  // ensure pods are clean\n  const pathsToClean = [path.join(workspacePath, 'Pods'), path.join(workspacePath, 'Podfile.lock')];\n  pathsToClean.forEach(path => {\n    if (fs.existsSync(path)) {\n      rimraf.sync(path);\n    }\n  });\n\n  // install\n  let cocoapodsArgs = ['install'];\n  if (isRepoUpdateEnabled) {\n    cocoapodsArgs.push('--repo-update');\n  }\n  logger.info('Installing iOS workspace dependencies...');\n  logger.info(`pod ${cocoapodsArgs.join(' ')}`);\n  await spawnAsyncThrowError('pod', cocoapodsArgs, {\n    stdio: 'inherit',\n    cwd: workspacePath,\n  });\n}\n\n/**\n * @param workspacePath optionally provide a path for the unbuilt xcode workspace to create/use.\n * @param expoSourcePath path to expo client app sourcecode (/ios dir from expo/expo repo)\n * @param shellAppSdkVersion sdk version for shell app\n */\nasync function _createStandaloneContextAsync(args) {\n  // right now we only ever build a single detached workspace for service contexts.\n  // TODO: support multiple different pod configurations, assemble a cache of those builds.\n  const expoSourcePath = args.expoSourcePath || '../ios';\n  let workspaceSourcePath;\n  if (args.workspacePath) {\n    workspaceSourcePath = args.workspacePath;\n  } else {\n    workspaceSourcePath = path.join(expoSourcePath, '..', 'shellAppWorkspaces', 'default', 'ios');\n  }\n  let { privateConfigFile, privateConfigData } = args;\n\n  let privateConfig;\n  if (privateConfigData) {\n    privateConfig = privateConfigData;\n  } else if (privateConfigFile) {\n    let privateConfigContents = await fs.readFile(privateConfigFile, 'utf8');\n    privateConfig = JSON.parse(privateConfigContents);\n  }\n\n  let manifest;\n  if (args.manifest) {\n    manifest = args.manifest;\n    logger\n      .withFields({ buildPhase: 'reading manifest' })\n      .info('Using manifest:', JSON.stringify(manifest));\n  } else if (args.url && args.sdkVersion) {\n    const { url, sdkVersion, releaseChannel } = args;\n    manifest = await getManifestAsync(url, {\n      'Exponent-SDK-Version': sdkVersion,\n      'Exponent-Platform': 'ios',\n      'Expo-Release-Channel': releaseChannel ? releaseChannel : 'default',\n      Accept: 'application/expo+json,application/json',\n    });\n  }\n\n  const buildFlags = StandaloneBuildFlags.createIos(args.configuration, {\n    workspaceSourcePath,\n    appleTeamId: args.appleTeamId,\n    buildType: args.type,\n  });\n  const context = StandaloneContext.createServiceContext(\n    expoSourcePath,\n    args.archivePath,\n    manifest,\n    privateConfig,\n    args.testEnvironment,\n    buildFlags,\n    args.url,\n    args.releaseChannel,\n    args.shellAppSdkVersion\n  );\n  return context;\n}\n\n/**\n * possible args:\n *  @param url manifest url for shell experience\n *  @param sdkVersion sdk to use when requesting the manifest\n *  @param releaseChannel channel to pull manifests from, default is 'default'\n *  @param archivePath path to existing NSBundle to configure\n *  @param privateConfigFile path to a private config file containing, e.g., private api keys\n *  @param appleTeamId Apple Developer's account Team ID\n *  @param output specify the output path of the configured archive (ie) /tmp/my-app-archive-build.xcarchive or /tmp/my-app-ios-build.tar.gz\n *  @param type type of artifact to configure (simulator or archive)\n *  @param expoSourcePath path to expo client app sourcecode (/ios dir from expo/expo repo)\n */\nasync function configureAndCopyArchiveAsync(args) {\n  args = _validateCLIArgs(args);\n  const { output, type } = args;\n  const context = await _createStandaloneContextAsync(args);\n  await IosNSBundle.configureAsync(context);\n  if (output) {\n    if (type === 'simulator') {\n      const archiveName = context.config.slug.replace(/[^0-9a-z_-]/gi, '_');\n      const appReleasePath = path.resolve(context.data.archivePath, '..');\n      await spawnAsync(\n        `mv ${EXPOKIT_APP}.app ${archiveName}.app && tar -czvf ${output} ${archiveName}.app`,\n        null,\n        {\n          stdoutOnly: true,\n          pipeToLogger: true,\n          loggerFields: { buildPhase: 'creating an archive for simulator' },\n          cwd: appReleasePath,\n          shell: true,\n        }\n      );\n    } else if (type === 'archive' || type === 'client') {\n      const workspaceName = type === 'archive' ? EXPOKIT_APP : EXPONENT_APP;\n      await spawnAsync('/bin/mv', [`${workspaceName}.xcarchive`, output], {\n        pipeToLogger: true,\n        cwd: `${context.data.archivePath}/../../../..`,\n        loggerFields: { buildPhase: 'renaming archive' },\n      });\n    }\n  }\n  return context.data.manifest;\n}\n\n/**\n * possible args:\n *  @param skipRepoUpdate if true, omit `--repo-update` cocoapods flag.\n */\nasync function _createTurtleWorkspaceAsync(context, args) {\n  const { skipRepoUpdate } = args;\n  if (fs.existsSync(context.build.ios.workspaceSourcePath)) {\n    logger.info(`Removing existing workspace at ${context.build.ios.workspaceSourcePath}...`);\n    try {\n      rimraf.sync(context.build.ios.workspaceSourcePath);\n    } catch (_) {}\n  }\n  await IosWorkspace.createDetachedAsync(context);\n  await _podInstallAsync(context.build.ios.workspaceSourcePath, !skipRepoUpdate);\n}\n\n/**\n * External-facing version can be used to create a turtle workspace without building it.\n * Probably only useful for local testing.\n *\n * @param workspacePath (optional) provide some other path to create the workspace besides the default\n * @param url (optional, with sdkVersion) url to an expo manifest, if you want the workspace to be configured automatically\n * @param sdkVersion (optional, with url) sdkVersion to an expo manifest, if you want the workspace to be configured automatically\n */\nasync function createTurtleWorkspaceAsync(args) {\n  args = _validateCLIArgs(args);\n  if (!args.workspacePath) {\n    logger.info(\n      'No workspace path was provided with --workspacePath, so the default will be used.'\n    );\n  }\n  const context = await _createStandaloneContextAsync(args);\n  await _createTurtleWorkspaceAsync(context, args);\n  logger.info(\n    `Created turtle workspace at ${\n      context.build.ios.workspaceSourcePath\n    }. You can open and run this in Xcode.`\n  );\n  if (context.config) {\n    await IosNSBundle.configureAsync(context);\n    logger.info(\n      `The turtle workspace was configured for the url ${\n        args.url\n      }. To run this app with a Debug scheme, make sure to add a development url to 'EXBuildConstants.plist'.`\n    );\n  } else {\n    logger.info(\n      `You can specify --url <manifestUrl> --sdkVersion <version> to configure this workspace as a particular Expo app.\\n\\nBecause those arguments were omitted, the workspace has not been configured. It will compile but not run. The minimum configuration to get something running is to specify a manifest url in 'EXShell.plist' (for Release builds) or 'EXBuildConstants.plist' (for Debug builds).`\n    );\n  }\n}\n\n/**\n * possible args:\n *  @param configuration StandaloneBuildConfiguration (Debug or Release)\n *  @param verbose show all xcodebuild output (default false)\n *  @param reuseWorkspace if true, when building, assume a detached workspace already exists rather than creating a new one.\n *  @param type type of artifact to build (simulator or archive)\n *  @param shellAppSdkVersion sdk version for shell app\n */\nasync function buildAndCopyArtifactAsync(args) {\n  args = _validateCLIArgs(args);\n  const context = await _createStandaloneContextAsync(args);\n  const { verbose, type, reuseWorkspace } = args;\n  const { projectName } = IosWorkspace.getPaths(context);\n\n  if (!reuseWorkspace) {\n    await _createTurtleWorkspaceAsync(context, args);\n  }\n  const pathToArtifact = await _buildAsync(\n    projectName,\n    context.build.ios.workspaceSourcePath,\n    context.build.configuration,\n    type,\n    path.relative(context.build.ios.workspaceSourcePath, '../shellAppBase'),\n    verbose,\n    parseSdkMajorVersion(args.shellAppSdkVersion) > 33\n  );\n  const artifactDestPath = path.join('../shellAppBase-builds', type, context.build.configuration);\n  logger.info(`\\nFinished building, copying artifact to ${path.resolve(artifactDestPath)}...`);\n  if (fs.existsSync(artifactDestPath)) {\n    await spawnAsyncThrowError('/bin/rm', ['-rf', artifactDestPath]);\n  }\n  logger.info(`mkdir -p ${artifactDestPath}`);\n  await spawnAsyncThrowError('/bin/mkdir', ['-p', artifactDestPath]);\n  logger.info(`cp -R ${pathToArtifact} ${artifactDestPath}`);\n  await spawnAsyncThrowError('/bin/cp', ['-R', pathToArtifact, artifactDestPath]);\n}\n\nexport { buildAndCopyArtifactAsync, configureAndCopyArchiveAsync, createTurtleWorkspaceAsync };\n"],"sourceRoot":"/@expo/xdl@55.0.14/src"}