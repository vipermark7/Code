{"version":3,"sources":["detach/Detach.js"],"names":["async","yesnoAsync","message","ok","await","inquirer","prompt","type","name","detachAsync","projectRoot","options","any","let","originalLogger","logger","loggerObj","configure","trace","verbose","console","bind","debug","info","warn","error","fatal","_detachAsync","user","UserManager","ensureLoggedInAsync","Error","username","configName","configPath","configNamespace","ConfigUtils","findConfigFileAsync","exp","pkg","ProjectUtils","readConfigJsonAsync","experienceName","slug","experienceUrl","hasIosDirectory","isDirectory","path","join","hasAndroidDirectory","XDLError","process","platform","response","sdkVersion","Versions","gteSdkVersion","versions","versionsAsync","sdkVersionConfig","sdkVersions","androidExpoViewUrl","iosExpoViewUrl","env","EXPO_VIEW_DIR","isDetached","detach","detachedUUID","uuid","v4","replace","generatedScheme","scheme","expoDirectory","fs","mkdirpSync","context","StandaloneContext","createUserContext","isIosSupported","force","ios","bundleIdentifier","iosBundleIdentifier","validate","value","test","detachIOSAsync","IosWorkspace","addDetachedConfigToExp","android","package","androidPackage","androidDirectory","rimraf","sync","detachAndroidAsync","AndroidShellApp","config","writeFile","JSON","stringify","packagesToInstall","nodeModulesPath","resolve","expoReactNativeTag","push","spawnAsync","cwd","expokitNpmPackage","packagesToInstallWhenEjecting","isPlainObject","Object","keys","forEach","packageName","length","installPackagesAsync","packageManager","createDetachedAsync","IosNSBundle","configureAsync","expoViewUrl","androidProjectDirectory","data","projectPath","tmpExpoDirectory","copyInitialShellAppFilesAsync","Api","downloadAsync","extract","runShellAppModificationsAsync","rimrafDontThrow","ensureBuildConstantsExistsIOSAsync","configFilePath","doesBuildConstantsExist","existsSync","IosPlist","createBlankAsync","_getIosExpoKitVersionThrowErrorAsync","iosProjectDirectory","expoKitVersion","podfileLockPath","podfileLock","readFile","expoKitVersionRegex","match","exec","e","prepareDetachedBuildIosAsync","projectDir","args","prepareDetachedUserContextIosAsync","prepareDetachedServiceContextIosAsync","expoRootDir","workspaceSourcePath","buildFlags","StandaloneBuildFlags","createIos","createServiceContext","supportingDirectory","getPaths","prodApiKeys","_readDefaultApiKeysAsync","expoSourcePath","modifyAsync","constantsConfig","contextType","STANDALONE_CONTEXT_TYPE","EXPO_RUNTIME_VERSION","API_SERVER_ENDPOINT","ENVIRONMENT","DEFAULT_API_KEYS","TEMPORARY_SDK_VERSION","jsonFilePath","allKeys","JsonFile","readAsync","validKeys","key","hasOwnProperty","includes","podsDirectory","rnPodDirectory","rnFilesToDelete","glob","i","unlink","skipXcodeConfig","devUrl","UrlUtils","constructManifestUrlAsync","defaultApiKeys","developmentUrl","prepareDetachedBuildAsync","expoBuildConstantsMatches","expoBuildConstants","regexFileAsync","bundleAssetsAsync","publishManifestPath","bundledManifestPath","manifest","parse","ex","AssetBundle","bundleAsync","bundledAssets","dest"],"mappings":"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","file":"../../detach/Detach.js","sourcesContent":["// Copyright 2015-present 650 Industries. All rights reserved.\n/**\n * @flow\n */\n\n'use strict';\n\n// Set EXPO_VIEW_DIR to universe/exponent to test locally\n\nimport fs from 'fs-extra';\nimport JsonFile from '@expo/json-file';\nimport path from 'path';\nimport process from 'process';\nimport rimraf from 'rimraf';\nimport glob from 'glob-promise';\nimport uuid from 'uuid';\nimport inquirer from 'inquirer';\nimport spawnAsync from '@expo/spawn-async';\nimport * as ConfigUtils from '@expo/config';\nimport isPlainObject from 'lodash/isPlainObject';\n\nimport { isDirectory, regexFileAsync, rimrafDontThrow } from './ExponentTools';\n\nimport * as AssetBundle from './AssetBundle';\nimport * as IosPlist from './IosPlist';\nimport * as IosNSBundle from './IosNSBundle';\nimport * as IosWorkspace from './IosWorkspace';\nimport * as AndroidShellApp from './AndroidShellApp';\n\nimport Api from '../Api';\nimport * as ProjectUtils from '../project/ProjectUtils';\nimport UserManager from '../User';\nimport XDLError from '../XDLError';\nimport StandaloneBuildFlags from './StandaloneBuildFlags';\nimport StandaloneContext from './StandaloneContext';\nimport * as UrlUtils from '../UrlUtils';\nimport * as Versions from '../Versions';\nimport installPackagesAsync from './installPackagesAsync';\nimport logger from './Logger';\n\nasync function yesnoAsync(message) {\n  const { ok } = await inquirer.prompt([\n    {\n      type: 'confirm',\n      name: 'ok',\n      message,\n    },\n  ]);\n  return ok;\n}\n\nexport async function detachAsync(projectRoot: string, options: any = {}) {\n  let originalLogger = logger.loggerObj;\n  logger.configure({\n    trace: options.verbose ? console.trace.bind(console) : () => {},\n    debug: options.verbose ? console.debug.bind(console) : () => {},\n    info: options.verbose ? console.info.bind(console) : () => {},\n    warn: console.warn.bind(console),\n    error: console.error.bind(console),\n    fatal: console.error.bind(console),\n  });\n  try {\n    return await _detachAsync(projectRoot, options);\n  } finally {\n    logger.configure(originalLogger);\n  }\n}\n\nasync function _detachAsync(projectRoot, options) {\n  let user = await UserManager.ensureLoggedInAsync();\n\n  if (!user) {\n    throw new Error('Internal error -- somehow detach is being run in offline mode.');\n  }\n\n  let username = user.username;\n  const { configName, configPath, configNamespace } = await ConfigUtils.findConfigFileAsync(\n    projectRoot\n  );\n  let { exp, pkg } = await ProjectUtils.readConfigJsonAsync(projectRoot);\n  if (!exp) throw new Error(`Couldn't read ${configName}`);\n  if (!pkg) throw new Error(`Couldn't read package.json`);\n  let experienceName = `@${username}/${exp.slug}`;\n  let experienceUrl = `exp://exp.host/${experienceName}`;\n\n  // Check to make sure project isn't fully detached already\n  let hasIosDirectory = isDirectory(path.join(projectRoot, 'ios'));\n  let hasAndroidDirectory = isDirectory(path.join(projectRoot, 'android'));\n\n  if (hasIosDirectory && hasAndroidDirectory) {\n    throw new XDLError(\n      'DIRECTORY_ALREADY_EXISTS',\n      'Error detaching. `ios` and `android` directories already exist.'\n    );\n  }\n\n  // Project was already detached on Windows or Linux\n  if (!hasIosDirectory && hasAndroidDirectory && process.platform === 'darwin') {\n    let response = await yesnoAsync(\n      `This will add an Xcode project and leave your existing Android project alone. Enter 'yes' to continue:`\n    );\n    if (!response) {\n      logger.info('Exiting...');\n      return false;\n    }\n  }\n\n  if (hasIosDirectory && !hasAndroidDirectory) {\n    throw new Error('`ios` directory already exists. Please remove it and try again.');\n  }\n\n  logger.info('Validating project manifest...');\n  if (!exp.name) {\n    throw new Error(`${configName} is missing \\`name\\``);\n  }\n\n  if (!exp.sdkVersion) {\n    throw new Error(`${configName} is missing \\`sdkVersion\\``);\n  }\n\n  if (!Versions.gteSdkVersion(exp, '24.0.0')) {\n    throw new Error(\n      `The app must be updated to SDK 24.0.0 or newer to be compatible with this tool.`\n    );\n  }\n\n  const versions = await Versions.versionsAsync();\n  let sdkVersionConfig = versions.sdkVersions[exp.sdkVersion];\n  if (\n    !sdkVersionConfig ||\n    !sdkVersionConfig.androidExpoViewUrl ||\n    !sdkVersionConfig.iosExpoViewUrl\n  ) {\n    if (process.env.EXPO_VIEW_DIR) {\n      logger.warn(\n        `Detaching is not supported for SDK ${\n          exp.sdkVersion\n        }; ignoring this because you provided EXPO_VIEW_DIR`\n      );\n      sdkVersionConfig = {};\n    } else {\n      throw new Error(`Detaching is not supported for SDK version ${exp.sdkVersion}`);\n    }\n  }\n\n  // Modify exp.json\n  exp.isDetached = true;\n\n  if (!exp.detach) {\n    exp.detach = {};\n  }\n\n  let detachedUUID = uuid.v4().replace(/-/g, '');\n  let generatedScheme = `exp${detachedUUID}`;\n\n  if (!exp.detach.scheme && !Versions.gteSdkVersion(exp, '27.0.0')) {\n    // set this for legacy purposes\n    exp.detach.scheme = generatedScheme;\n  }\n\n  if (!exp.scheme) {\n    logger.info(\n      `You have not specified a custom scheme for deep linking. A default value of ${generatedScheme} will be used. You can change this later by following the instructions in this guide: https://docs.expo.io/versions/latest/workflow/linking/`\n    );\n    exp.scheme = generatedScheme;\n  }\n\n  let expoDirectory = path.join(projectRoot, '.expo-source');\n  fs.mkdirpSync(expoDirectory);\n  const context = StandaloneContext.createUserContext(projectRoot, exp, experienceUrl);\n\n  // iOS\n  let isIosSupported = true;\n  if (process.platform !== 'darwin') {\n    if (options && options.force) {\n      logger.warn(\n        `You are not running macOS, but have provided the --force option, so we will attempt to generate an iOS project anyway. This might fail.`\n      );\n    } else {\n      logger.warn(`Skipping iOS because you are not running macOS.`);\n      isIosSupported = false;\n    }\n  }\n\n  if (!hasIosDirectory && isIosSupported) {\n    if (!exp.ios) {\n      exp.ios = {};\n    }\n    if (!exp.ios.bundleIdentifier) {\n      logger.info(\n        `You'll need to specify an iOS bundle identifier. See: https://docs.expo.io/versions/latest/workflow/configuration/#ios`\n      );\n      const { iosBundleIdentifier } = await inquirer.prompt([\n        {\n          name: 'iosBundleIdentifier',\n          message: 'What would you like your iOS bundle identifier to be?',\n          validate: value => /^[a-zA-Z][a-zA-Z0-9\\-.]+$/.test(value),\n        },\n      ]);\n      exp.ios.bundleIdentifier = iosBundleIdentifier;\n    }\n\n    await detachIOSAsync(context);\n    exp = IosWorkspace.addDetachedConfigToExp(exp, context);\n    exp.detach.iosExpoViewUrl = sdkVersionConfig.iosExpoViewUrl;\n  }\n\n  // Android\n  if (!hasAndroidDirectory) {\n    if (!exp.android) {\n      exp.android = {};\n    }\n    if (!exp.android.package) {\n      logger.info(\n        `You'll need to specify an Android package name. See: https://docs.expo.io/versions/latest/workflow/configuration/#android`\n      );\n      const { androidPackage } = await inquirer.prompt([\n        {\n          name: 'androidPackage',\n          message: 'What would you like your Android package name to be?',\n          validate: value =>\n            /^[a-zA-Z][a-zA-Z0-9_]*(\\.[a-zA-Z][a-zA-Z0-9_]*)+$/.test(value)\n              ? true\n              : \"Invalid format of Android package name (only alphanumeric characters, '.' and '_' are allowed, and each '.' must be followed by a letter)\",\n        },\n      ]);\n      exp.android.package = androidPackage;\n    }\n\n    let androidDirectory = path.join(expoDirectory, 'android');\n    rimraf.sync(androidDirectory);\n    fs.mkdirpSync(androidDirectory);\n    await detachAndroidAsync(context, sdkVersionConfig.androidExpoViewUrl);\n    exp = AndroidShellApp.addDetachedConfigToExp(exp, context);\n    exp.detach.androidExpoViewUrl = sdkVersionConfig.androidExpoViewUrl;\n  }\n\n  logger.info('Writing ExpoKit configuration...');\n  // Update exp.json/app.json\n  // if we're writing to app.json, we need to place the configuration under the expo key\n  const config = configNamespace ? { [configNamespace]: exp } : exp;\n  await fs.writeFile(configPath, JSON.stringify(config, null, 2));\n\n  const packagesToInstall = [];\n  const nodeModulesPath = exp.nodeModulesPath\n    ? path.resolve(projectRoot, exp.nodeModulesPath)\n    : projectRoot;\n\n  if (sdkVersionConfig && sdkVersionConfig.expoReactNativeTag) {\n    packagesToInstall.push(\n      `react-native@https://github.com/expo/react-native/archive/${\n        sdkVersionConfig.expoReactNativeTag\n      }.tar.gz`\n    );\n  } else if (process.env.EXPO_VIEW_DIR) {\n    // ignore, using test directory\n  } else {\n    throw new Error(`Expo's React Native fork does not support this SDK version.`);\n  }\n\n  // Add expokitNpmPackage if it is supported. Was added before SDK 29.\n  if (process.env.EXPO_VIEW_DIR) {\n    logger.info(`Linking 'expokit' package...`);\n    await spawnAsync('yarn', ['link'], {\n      cwd: path.join(process.env.EXPO_VIEW_DIR, 'expokit-npm-package'),\n    });\n    await spawnAsync('yarn', ['link', 'expokit'], {\n      cwd: nodeModulesPath,\n    });\n  } else if (sdkVersionConfig.expokitNpmPackage) {\n    packagesToInstall.push(sdkVersionConfig.expokitNpmPackage);\n  }\n\n  const { packagesToInstallWhenEjecting } = sdkVersionConfig;\n  if (isPlainObject(packagesToInstallWhenEjecting)) {\n    Object.keys(packagesToInstallWhenEjecting).forEach(packageName => {\n      packagesToInstall.push(`${packageName}@${packagesToInstallWhenEjecting[packageName]}`);\n    });\n  }\n\n  if (packagesToInstall.length) {\n    await installPackagesAsync(projectRoot, packagesToInstall, {\n      packageManager: options.packageManager,\n    });\n  }\n  return true;\n}\n\n/**\n *  Create a detached Expo iOS app pointing at the given project.\n */\nasync function detachIOSAsync(context: StandaloneContext) {\n  await IosWorkspace.createDetachedAsync(context);\n\n  logger.info('Configuring iOS project...');\n  await IosNSBundle.configureAsync(context);\n\n  logger.info(`iOS detach is complete!`);\n}\n\nasync function detachAndroidAsync(context: StandaloneContext, expoViewUrl: string) {\n  if (context.type !== 'user') {\n    throw new Error(`detachAndroidAsync only supports user standalone contexts`);\n  }\n\n  logger.info('Moving Android project files...');\n  let androidProjectDirectory = path.join(context.data.projectPath, 'android');\n  let tmpExpoDirectory;\n  if (process.env.EXPO_VIEW_DIR) {\n    // Only for testing\n    await AndroidShellApp.copyInitialShellAppFilesAsync(\n      path.join(process.env.EXPO_VIEW_DIR, 'android'),\n      androidProjectDirectory,\n      true,\n      context.data.exp.sdkVersion\n    );\n  } else {\n    tmpExpoDirectory = path.join(context.data.projectPath, 'temp-android-directory');\n    fs.mkdirpSync(tmpExpoDirectory);\n    logger.info('Downloading Android code...');\n    await Api.downloadAsync(expoViewUrl, tmpExpoDirectory, { extract: true });\n    await AndroidShellApp.copyInitialShellAppFilesAsync(\n      tmpExpoDirectory,\n      androidProjectDirectory,\n      true,\n      context.data.exp.sdkVersion\n    );\n  }\n\n  logger.info('Updating Android app...');\n  await AndroidShellApp.runShellAppModificationsAsync(context, context.data.exp.sdkVersion);\n\n  // Clean up\n  logger.info('Cleaning up Android...');\n  if (!process.env.EXPO_VIEW_DIR) {\n    rimrafDontThrow(tmpExpoDirectory);\n  }\n  logger.info('Android detach is complete!\\n');\n}\n\nasync function ensureBuildConstantsExistsIOSAsync(configFilePath: string) {\n  // EXBuildConstants is included in newer ExpoKit projects.\n  // create it if it doesn't exist.\n  const doesBuildConstantsExist = fs.existsSync(\n    path.join(configFilePath, 'EXBuildConstants.plist')\n  );\n  if (!doesBuildConstantsExist) {\n    await IosPlist.createBlankAsync(configFilePath, 'EXBuildConstants');\n    logger.info('Created `EXBuildConstants.plist` because it did not exist yet');\n  }\n}\n\nasync function _getIosExpoKitVersionThrowErrorAsync(iosProjectDirectory: string) {\n  let expoKitVersion = '';\n  const podfileLockPath = path.join(iosProjectDirectory, 'Podfile.lock');\n  try {\n    const podfileLock = await fs.readFile(podfileLockPath, 'utf8');\n    const expoKitVersionRegex = /ExpoKit\\/Core\\W?\\(([0-9.]+)\\)/gi;\n    let match = expoKitVersionRegex.exec(podfileLock);\n    expoKitVersion = match[1];\n  } catch (e) {\n    throw new Error(\n      `Unable to read ExpoKit version from Podfile.lock. Make sure your project depends on ExpoKit. (${e})`\n    );\n  }\n  return expoKitVersion;\n}\n\nasync function prepareDetachedBuildIosAsync(projectDir: string, args: any) {\n  const { exp } = await ProjectUtils.readConfigJsonAsync(projectDir);\n  if (exp) {\n    return prepareDetachedUserContextIosAsync(projectDir, exp, args);\n  } else {\n    return prepareDetachedServiceContextIosAsync(projectDir, args);\n  }\n}\n\nasync function prepareDetachedServiceContextIosAsync(projectDir: string, args: any) {\n  // service context\n  // TODO: very brittle hack: the paths here are hard coded to match the single workspace\n  // path generated inside IosShellApp. When we support more than one path, this needs to\n  // be smarter.\n  const expoRootDir = path.join(projectDir, '..', '..');\n  const workspaceSourcePath = path.join(projectDir, 'ios');\n  const buildFlags = StandaloneBuildFlags.createIos('Release', { workspaceSourcePath });\n  const context = StandaloneContext.createServiceContext(\n    expoRootDir,\n    null,\n    null,\n    null,\n    /* testEnvironment */ 'none',\n    buildFlags,\n    null,\n    null\n  );\n  const { iosProjectDirectory, supportingDirectory } = IosWorkspace.getPaths(context);\n  const expoKitVersion = await _getIosExpoKitVersionThrowErrorAsync(iosProjectDirectory);\n\n  // use prod api keys if available\n  const prodApiKeys = await _readDefaultApiKeysAsync(\n    path.join(context.data.expoSourcePath, '__internal__', 'keys.json')\n  );\n\n  const { exp } = await ProjectUtils.readConfigJsonAsync(expoRootDir);\n\n  await IosPlist.modifyAsync(supportingDirectory, 'EXBuildConstants', constantsConfig => {\n    // verify that we are actually in a service context and not a misconfigured project\n    const contextType = constantsConfig.STANDALONE_CONTEXT_TYPE;\n    if (contextType !== 'service') {\n      throw new Error(\n        'Unable to configure a project which has no app.json and also no STANDALONE_CONTEXT_TYPE.'\n      );\n    }\n    constantsConfig.EXPO_RUNTIME_VERSION = expoKitVersion;\n    constantsConfig.API_SERVER_ENDPOINT =\n      process.env.ENVIRONMENT === 'staging'\n        ? 'https://staging.exp.host/--/api/v2/'\n        : 'https://exp.host/--/api/v2/';\n    if (prodApiKeys) {\n      constantsConfig.DEFAULT_API_KEYS = prodApiKeys;\n    }\n    if (exp && exp.sdkVersion) {\n      constantsConfig.TEMPORARY_SDK_VERSION = exp.sdkVersion;\n    }\n    return constantsConfig;\n  });\n}\n\nasync function _readDefaultApiKeysAsync(jsonFilePath: string) {\n  if (fs.existsSync(jsonFilePath)) {\n    let keys = {};\n    const allKeys = await new JsonFile(jsonFilePath).readAsync();\n    const validKeys = ['AMPLITUDE_KEY', 'GOOGLE_MAPS_IOS_API_KEY'];\n    for (const key in allKeys) {\n      if (allKeys.hasOwnProperty(key) && validKeys.includes(key)) {\n        keys[key] = allKeys[key];\n      }\n    }\n    return keys;\n  }\n  return null;\n}\n\nasync function prepareDetachedUserContextIosAsync(projectDir: string, exp: any, args: any) {\n  const context = StandaloneContext.createUserContext(projectDir, exp);\n  let { iosProjectDirectory, supportingDirectory } = IosWorkspace.getPaths(context);\n\n  logger.info(`Preparing iOS build at ${iosProjectDirectory}...`);\n  // These files cause @providesModule naming collisions\n  // but are not available until after `pod install` has run.\n  let podsDirectory = path.join(iosProjectDirectory, 'Pods');\n  if (!isDirectory(podsDirectory)) {\n    throw new Error(`Can't find directory ${podsDirectory}, make sure you've run pod install.`);\n  }\n  let rnPodDirectory = path.join(podsDirectory, 'React');\n  if (isDirectory(rnPodDirectory)) {\n    let rnFilesToDelete = await glob(rnPodDirectory + '/**/*.@(js|json)');\n    if (rnFilesToDelete) {\n      for (let i = 0; i < rnFilesToDelete.length; i++) {\n        await fs.unlink(rnFilesToDelete[i]);\n      }\n    }\n  }\n\n  // insert expo development url into iOS config\n  if (!args.skipXcodeConfig) {\n    // populate EXPO_RUNTIME_VERSION from ExpoKit pod version\n    const expoKitVersion = await _getIosExpoKitVersionThrowErrorAsync(iosProjectDirectory);\n\n    // populate development url\n    let devUrl = await UrlUtils.constructManifestUrlAsync(projectDir);\n\n    // populate default api keys\n    const defaultApiKeys = await _readDefaultApiKeysAsync(\n      path.join(podsDirectory, 'ExpoKit', 'template-files', 'keys.json')\n    );\n\n    await ensureBuildConstantsExistsIOSAsync(supportingDirectory);\n    await IosPlist.modifyAsync(supportingDirectory, 'EXBuildConstants', constantsConfig => {\n      constantsConfig.developmentUrl = devUrl;\n      constantsConfig.EXPO_RUNTIME_VERSION = expoKitVersion;\n      if (defaultApiKeys) {\n        constantsConfig.DEFAULT_API_KEYS = defaultApiKeys;\n      }\n      if (exp.sdkVersion) {\n        constantsConfig.TEMPORARY_SDK_VERSION = exp.sdkVersion;\n      }\n      return constantsConfig;\n    });\n  }\n}\n\nexport async function prepareDetachedBuildAsync(projectDir: string, args: any) {\n  if (args.platform === 'ios') {\n    await prepareDetachedBuildIosAsync(projectDir, args);\n  } else {\n    let androidProjectDirectory = path.join(projectDir, 'android');\n    let expoBuildConstantsMatches = await glob(\n      androidProjectDirectory + '/**/DetachBuildConstants.java'\n    );\n    if (expoBuildConstantsMatches && expoBuildConstantsMatches.length) {\n      let expoBuildConstants = expoBuildConstantsMatches[0];\n      let devUrl = await UrlUtils.constructManifestUrlAsync(projectDir);\n      await regexFileAsync(\n        /DEVELOPMENT_URL = \"[^\"]*\";/,\n        `DEVELOPMENT_URL = \"${devUrl}\";`,\n        expoBuildConstants\n      );\n    }\n  }\n}\n\ntype BundleAssetsArgs = {\n  platform: 'ios' | 'android',\n  // This is the path where assets will be copied to. It should be\n  // `$CONFIGURATION_BUILD_DIR/$UNLOCALIZED_RESOURCES_FOLDER_PATH` on iOS\n  // (see `exponent-view-template.xcodeproj/project.pbxproj` for an example)\n  // and `$buildDir/intermediates/assets/$targetPath` on Android (see\n  // `android/app/expo.gradle` for an example).\n  dest: string,\n};\n\nexport async function bundleAssetsAsync(projectDir: string, args: BundleAssetsArgs) {\n  let { exp } = await ProjectUtils.readConfigJsonAsync(projectDir);\n  if (!exp) {\n    // Don't run assets bundling for the service context.\n    return;\n  }\n  let publishManifestPath =\n    args.platform === 'ios' ? exp.ios.publishManifestPath : exp.android.publishManifestPath;\n  if (!publishManifestPath) {\n    logger.warn(\n      `Skipped assets bundling because the '${\n        args.platform\n      }.publishManifestPath' key is not specified in the app manifest.`\n    );\n    return;\n  }\n  let bundledManifestPath = path.join(projectDir, publishManifestPath);\n  let manifest;\n  try {\n    manifest = JSON.parse(await fs.readFile(bundledManifestPath, 'utf8'));\n  } catch (ex) {\n    throw new Error(\n      `Error reading the manifest file. Make sure the path '${bundledManifestPath}' is correct.\\n\\nError: ${\n        ex.message\n      }`\n    );\n  }\n  await AssetBundle.bundleAsync(null, manifest.bundledAssets, args.dest);\n}\n"],"sourceRoot":"/@expo/xdl@55.0.14/src"}