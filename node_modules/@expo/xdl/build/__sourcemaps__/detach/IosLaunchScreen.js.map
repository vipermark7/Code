{"version":3,"sources":["detach/IosLaunchScreen.js"],"names":["logger","_logger","withFields","buildPhase","ASPECT_FILL","ASPECT_FIT","backgroundImageViewID","backgroundViewID","_backgroundColorFromHexString","hexColor","result","exec","length","warn","r","g","b","parseInt","_setBackgroundColor","manifest","dom","let","backgroundColorString","ios","splash","backgroundColor","backgroundViewNode","getElementById","backgroundViewColorNodes","getElementsByTagName","backgroundColorNode","i","node","parentNode","getAttribute","setAttribute","async","_saveImageAssetsAsync","context","tabletImagePathOrUrl","phoneImagePathOrUrl","type","exp","data","image","tabletImage","imageUrl","tabletImageUrl","outputs","push","pathOrUrl","filename","supportingDirectory","IosWorkspace","getPaths","projectRoot","projectPath","forEach","output","destinationPath","path","join","await","saveImageToPathAsync","_setBackgroundImageResizeMode","backgroundViewMode","mode","resizeMode","backgroundImageViewNode","_copyIntermediateLaunchScreenAsync","launchScreenPath","splashTemplateFilename","expoTemplatePath","expoSourcePath","spawnAsyncThrowError","stdio","configureLaunchAssetsAsync","intermediatesDirectory","info","fs","mkdirpSync","config","splashIntermediateFilename","manifestUsesSplashApi","transformFileContentsAsync","fileString","parser","DOMParser","serializer","XMLSerializer","parseFromString","serializeToString","splashOutputFilename","generatedUnnecessaryNib","existsSync","rimraf","sync"],"mappings":";;;;;;;AAGA;;AACA;;AACA;;AACA;;AAEA;;AAMA;;AACA;;AACA;;;;;;AAEA,MAAMA,MAAAA,GAASC,gBAAQC,UAARD,CAAmB;AAAEE,EAAAA,UAAU,EAAE;AAAd,CAAnBF,CAAf;;AAEA,MAAMG,WAAAA,GAAc,iBAApB;AACA,MAAMC,UAAAA,GAAa,gBAAnB;AAEA,MAAMC,qBAAAA,GAAwB,YAA9B;AACA,MAAMC,gBAAAA,GAAmB,YAAzB;;AAEA,SAASC,6BAAT,CAAuCC,QAAvC,EAAiD;AAC/C,QAAMC,MAAAA,GAAS,4CAA4CC,IAA5C,CAAiDF,QAAjD,CAAf;;AACA,MAAI,CAACC,MAAD,IAAWA,MAAM,CAACE,MAAPF,GAAgB,CAA/B,EAAkC;AAChC;AACAV,IAAAA,MAAM,CAACa,IAAPb,CAAY,yBAAZA,EAAuCS,QAAvCT,EAAiD,UAAjDA,EAA6DU,MAA7DV;AACA,WAAO;AAAEc,MAAAA,CAAC,EAAE,CAAL;AAAQC,MAAAA,CAAC,EAAE,CAAX;AAAcC,MAAAA,CAAC,EAAE;AAAjB,KAAP;AACF;;AAEA,QAAMF,CAAAA,GAAIG,QAAQ,CAACP,MAAM,CAAC,CAAD,CAAP,EAAY,EAAZ,CAARO,GAA0B,GAApC;AACA,QAAMF,CAAAA,GAAIE,QAAQ,CAACP,MAAM,CAAC,CAAD,CAAP,EAAY,EAAZ,CAARO,GAA0B,GAApC;AACA,QAAMD,CAAAA,GAAIC,QAAQ,CAACP,MAAM,CAAC,CAAD,CAAP,EAAY,EAAZ,CAARO,GAA0B,GAApC;AACA,SAAO;AAAEH,IAAAA,CAAF;AAAKC,IAAAA,CAAL;AAAQC,IAAAA;AAAR,GAAP;AACF;;AAEA,SAASE,mBAAT,CAA6BC,QAA7B,EAAuCC,GAAvC,EAA4C;AAC1CC,MAAIC,qBAAJD;;AACA,MAAIF,QAAQ,CAACI,GAATJ,IAAgBA,QAAQ,CAACI,GAATJ,CAAaK,MAA7BL,IAAuCA,QAAQ,CAACI,GAATJ,CAAaK,MAAbL,CAAoBM,eAA/D,EAAgF;AAC9EH,IAAAA,qBAAAA,GAAwBH,QAAQ,CAACI,GAATJ,CAAaK,MAAbL,CAAoBM,eAA5CH;AACF,GAFA,MAEO,IAAIH,QAAQ,CAACK,MAATL,IAAmBA,QAAQ,CAACK,MAATL,CAAgBM,eAAvC,EAAwD;AAC7DH,IAAAA,qBAAAA,GAAwBH,QAAQ,CAACK,MAATL,CAAgBM,eAAxCH;AACF,GAN0C,CAQ1C;;;AACA,MAAI,CAACA,qBAAL,EAA4B;AAC1BA,IAAAA,qBAAAA,GAAwB,SAAxBA;AACF;;AAEA,QAAM;AAAER,IAAAA,CAAF;AAAKC,IAAAA,CAAL;AAAQC,IAAAA;AAAR,MAAcR,6BAA6B,CAACc,qBAAD,CAAjD;;AACA,QAAMI,kBAAAA,GAAqBN,GAAG,CAACO,cAAJP,CAAmBb,gBAAnBa,CAA3B;AACA,QAAMQ,wBAAAA,GAA2BF,kBAAkB,CAACG,oBAAnBH,CAAwC,OAAxCA,CAAjC;AACAL,MAAIS,mBAAJT;;AACA,OAAKA,IAAIU,CAAAA,GAAI,CAAb,EAAgBA,CAAAA,GAAIH,wBAAwB,CAAChB,MAA7C,EAAqDmB,CAAC,EAAtD,EAA0D;AACxD,UAAMC,IAAAA,GAAOJ,wBAAwB,CAACG,CAAD,CAArC;;AACA,QAAIC,IAAI,CAACC,UAALD,CAAgBE,YAAhBF,CAA6B,IAA7BA,MAAuCzB,gBAA3C,EAA6D;AAC3D;AACF;;AAEA,QAAIyB,IAAI,CAACE,YAALF,CAAkB,KAAlBA,MAA6B,iBAAjC,EAAoD;AAClDF,MAAAA,mBAAAA,GAAsBE,IAAtBF;AACA;AACF;AACF;;AAEA,MAAIA,mBAAJ,EAAyB;AACvBA,IAAAA,mBAAmB,CAACK,YAApBL,CAAiC,KAAjCA,EAAwChB,CAAxCgB;AACAA,IAAAA,mBAAmB,CAACK,YAApBL,CAAiC,OAAjCA,EAA0Cf,CAA1Ce;AACAA,IAAAA,mBAAmB,CAACK,YAApBL,CAAiC,MAAjCA,EAAyCd,CAAzCc;AACF;AACF;;AAEAM,eAAeC,qBAAfD,CAAqCE,OAArCF,EAAiE;AAC/Df,MAAIkB,oBAAJlB,EAA0BmB,mBAA1BnB;;AAEA,MAAIiB,OAAO,CAACG,IAARH,KAAiB,MAArB,EAA6B;AAC3B;AACA,UAAMI,GAAAA,GAAMJ,OAAO,CAACK,IAARL,CAAaI,GAAzB;;AACA,QAAIA,GAAG,CAACnB,GAAJmB,IAAWA,GAAG,CAACnB,GAAJmB,CAAQlB,MAAnBkB,IAA6BA,GAAG,CAACnB,GAAJmB,CAAQlB,MAARkB,CAAeE,KAAhD,EAAuD;AACrDJ,MAAAA,mBAAAA,GAAsBE,GAAG,CAACnB,GAAJmB,CAAQlB,MAARkB,CAAeE,KAArCJ;;AAEA,UAAIE,GAAG,CAACnB,GAAJmB,CAAQlB,MAARkB,CAAeG,WAAnB,EAAgC;AAC9BN,QAAAA,oBAAAA,GAAuBG,GAAG,CAACnB,GAAJmB,CAAQlB,MAARkB,CAAeG,WAAtCN;AACF;AACF,KANA,MAMO,IAAIG,GAAG,CAAClB,MAAJkB,IAAcA,GAAG,CAAClB,MAAJkB,CAAWE,KAA7B,EAAoC;AACzCJ,MAAAA,mBAAAA,GAAsBE,GAAG,CAAClB,MAAJkB,CAAWE,KAAjCJ;AACF;AACF,GAZA,MAYO;AACL;AACA,UAAMrB,QAAAA,GAAWmB,OAAO,CAACK,IAARL,CAAanB,QAA9B;;AACA,QAAIA,QAAQ,CAACI,GAATJ,IAAgBA,QAAQ,CAACI,GAATJ,CAAaK,MAA7BL,IAAuCA,QAAQ,CAACI,GAATJ,CAAaK,MAAbL,CAAoB2B,QAA/D,EAAyE;AACvEN,MAAAA,mBAAAA,GAAsBrB,QAAQ,CAACI,GAATJ,CAAaK,MAAbL,CAAoB2B,QAA1CN;;AAEA,UAAIrB,QAAQ,CAACI,GAATJ,CAAaK,MAAbL,CAAoB4B,cAAxB,EAAwC;AACtCR,QAAAA,oBAAAA,GAAuBpB,QAAQ,CAACI,GAATJ,CAAaK,MAAbL,CAAoB4B,cAA3CR;AACF;AACF,KANA,MAMO,IAAIpB,QAAQ,CAACK,MAATL,IAAmBA,QAAQ,CAACK,MAATL,CAAgB2B,QAAvC,EAAiD;AACtDN,MAAAA,mBAAAA,GAAsBrB,QAAQ,CAACK,MAATL,CAAgB2B,QAAtCN;AACF;AACF;;AAEA,MAAI,CAACA,mBAAL,EAA0B;AACxB;AACF;;AAEA,QAAMQ,OAAAA,GAAU,EAAhB;;AACA,MAAI,CAACT,oBAAL,EAA2B;AACzBS,IAAAA,OAAO,CAACC,IAARD,CAAa;AACXE,MAAAA,SAAS,EAAEV,mBADA;AAEXW,MAAAA,QAAQ,EAAE;AAFC,KAAbH;AAIF,GALA,MAKO;AACLA,IAAAA,OAAO,CAACC,IAARD,CAAa;AACXE,MAAAA,SAAS,EAAEV,mBADA;AAEXW,MAAAA,QAAQ,EAAE;AAFC,KAAbH;AAIAA,IAAAA,OAAO,CAACC,IAARD,CAAa;AACXE,MAAAA,SAAS,EAAEX,oBADA;AAEXY,MAAAA,QAAQ,EAAE;AAFC,KAAbH;AAIF;;AAEA,QAAM;AAAEI,IAAAA;AAAF,MAA0BC,YAAY,CAACC,QAAbD,CAAsBf,OAAtBe,CAAhC;AACA,QAAME,WAAAA,GAAcjB,OAAO,CAACG,IAARH,KAAiB,MAAjBA,GAA0BA,OAAO,CAACK,IAARL,CAAakB,WAAvClB,GAAqDc,mBAAzE;AACAJ,EAAAA,OAAO,CAACS,OAART,CAAgBZ,MAAMsB,MAANtB,IAAgB;AAC9B,UAAM;AAAEc,MAAAA,SAAF;AAAaC,MAAAA;AAAb,QAA0BO,MAAhC;;AACA,UAAMC,eAAAA,GAAkBC,cAAKC,IAALD,CAAUR,mBAAVQ,EAA+BT,QAA/BS,CAAxB;;AACAE,UAAMC,yCAAqBR,WAArBQ,EAAkCb,SAAlCa,EAA6CJ,eAA7CI,CAAND;AACD,GAJDd;AAKF;;AAEA,SAASgB,6BAAT,CAAuC7C,QAAvC,EAAiDC,GAAjD,EAAsD;AACpDC,MAAI4C,kBAAAA,GAAqB,CAAC,MAAM;AAC9B5C,QAAI6C,IAAJ7C;;AACA,QAAI,CAACF,QAAL,EAAe;AACb,aAAOd,UAAP;AACF;;AAEA,QAAIc,QAAQ,CAACI,GAATJ,IAAgBA,QAAQ,CAACI,GAATJ,CAAaK,MAA7BL,IAAuCA,QAAQ,CAACI,GAATJ,CAAaK,MAAbL,CAAoBgD,UAA/D,EAA2E;AACzED,MAAAA,IAAAA,GAAO/C,QAAQ,CAACI,GAATJ,CAAaK,MAAbL,CAAoBgD,UAA3BD;AACF,KAFA,MAEO,IAAI/C,QAAQ,CAACK,MAATL,IAAmBA,QAAQ,CAACK,MAATL,CAAgBgD,UAAvC,EAAmD;AACxDD,MAAAA,IAAAA,GAAO/C,QAAQ,CAACK,MAATL,CAAgBgD,UAAvBD;AACF;;AAEA,WAAOA,IAAAA,KAAS,OAATA,GAAmB9D,WAAnB8D,GAAiC7D,UAAxC;AACD,GAbwB,GAAzBgB;;AAeA,QAAM+C,uBAAAA,GAA0BhD,GAAG,CAACO,cAAJP,CAAmBd,qBAAnBc,CAAhC;;AACA,MAAIgD,uBAAJ,EAA6B;AAC3BA,IAAAA,uBAAuB,CAACjC,YAAxBiC,CAAqC,aAArCA,EAAoDH,kBAApDG;AACF;AACF;;AAEAhC,eAAeiC,kCAAfjC,CACEE,OADFF,EAEEkC,gBAFFlC,EAGE;AACAf,MAAIkD,sBAAJlD;;AACA,MAAIiB,OAAO,CAACG,IAARH,KAAiB,MAArB,EAA6B;AAC3B,UAAM;AAAEc,MAAAA;AAAF,QAA0BC,YAAY,CAACC,QAAbD,CAAsBf,OAAtBe,CAAhC;AACAkB,IAAAA,sBAAAA,GAAyBX,cAAKC,IAALD,CAAUR,mBAAVQ,EAA+B,kBAA/BA,CAAzBW;AACF,GAHA,MAGO;AACL;AACA;AACA,UAAMC,gBAAAA,GAAmBZ,cAAKC,IAALD,CACvBtB,OAAO,CAACK,IAARL,CAAamC,cADUb,EAEvB,IAFuBA,EAGvB,wBAHuBA,EAIvB,KAJuBA,CAAzB;;AAMAW,IAAAA,sBAAAA,GAAyBX,cAAKC,IAALD,CACvBY,gBADuBZ,EAEvB,wBAFuBA,EAGvB,YAHuBA,EAIvB,kBAJuBA,CAAzBW;AAMF;;AACAT,QAAMY,yCAAqB,SAArBA,EAAgC,CAACH,sBAAD,EAAyBD,gBAAzB,CAAhCI,EAA4E;AAChFC,IAAAA,KAAK,EAAE;AADyE,GAA5ED,CAANZ;AAGF;;AAEA1B,eAAewC,0BAAfxC,CACEE,OADFF,EAEEyC,sBAFFzC,EAGE;AACApC,EAAAA,MAAM,CAAC8E,IAAP9E,CAAY,kCAAZA;;AAEA+E,mBAAGC,UAAHD,CAAcF,sBAAdE;;AACA,QAAM;AAAE3B,IAAAA;AAAF,MAA0BC,YAAY,CAACC,QAAbD,CAAsBf,OAAtBe,CAAhC;AACA,QAAM4B,MAAAA,GAAS3C,OAAO,CAAC2C,MAAvB;;AAEA,QAAMC,0BAAAA,GAA6BtB,cAAKC,IAALD,CAAUiB,sBAAVjB,EAAkC,kBAAlCA,CAAnC;;AACAE,QAAMO,kCAAkC,CAAC/B,OAAD,EAAU4C,0BAAV,CAAxCpB;;AAEA,MAAIqB,0CAAsBF,MAAtBE,EAA8B,KAA9BA,CAAJ,EAA0C;AACxCrB,UAAMsB,+CAA2BF,0BAA3BE,EAAuDC,UAAAA,IAAc;AACzE,YAAMC,MAAAA,GAAS,IAAIC,iBAAJ,EAAf;AACA,YAAMC,UAAAA,GAAa,IAAIC,qBAAJ,EAAnB;AACA,YAAMrE,GAAAA,GAAMkE,MAAM,CAACI,eAAPJ,CAAuBD,UAAvBC,CAAZ;;AAEApE,MAAAA,mBAAmB,CAAC+D,MAAD,EAAS7D,GAAT,CAAnBF;;AACA8C,MAAAA,6BAA6B,CAACiB,MAAD,EAAS7D,GAAT,CAA7B4C;;AAEA,aAAOwB,UAAU,CAACG,iBAAXH,CAA6BpE,GAA7BoE,CAAP;AACD,KATKJ,CAANtB;AAWAA,UAAMzB,qBAAqB,CAACC,OAAD,CAA3BwB;AACF;;AAEA,MAAIxB,OAAO,CAACG,IAARH,KAAiB,MAArB,EAA6B;AAC3BwB,UAAMY,yCACJ,SADIA,EAEJ,CAACQ,0BAAD,EAA6BtB,cAAKC,IAALD,CAAUR,mBAAVQ,EAA+B,kBAA/BA,CAA7B,CAFIc,EAGJ;AACEC,MAAAA,KAAK,EAAE;AADT,KAHID,CAANZ;AAOF,GARA,MAQO;AACL,UAAM8B,oBAAAA,GAAuBhC,cAAKC,IAALD,CAAUR,mBAAVQ,EAA+B,YAA/BA,EAA6C,kBAA7CA,CAA7B;;AACAE,UAAMY,yCAAqB,QAArBA,EAA+B,CACnC,WADmC,EAEnCkB,oBAFmC,EAGnCV,0BAHmC,CAA/BR,CAANZ;;AAMA,UAAM+B,uBAAAA,GAA0BjC,cAAKC,IAALD,CAAUR,mBAAVQ,EAA+B,kBAA/BA,CAAhC;;AACA,QAAImB,iBAAGe,UAAHf,CAAcc,uBAAdd,CAAJ,EAA4C;AAC1CgB,sBAAOC,IAAPD,CAAYF,uBAAZE;AACF;AACF;AACF","file":"../../detach/IosLaunchScreen.js","sourcesContent":["/**\n *  @flow\n */\nimport fs from 'fs-extra';\nimport path from 'path';\nimport rimraf from 'rimraf';\nimport { DOMParser, XMLSerializer } from 'xmldom';\n\nimport {\n  manifestUsesSplashApi,\n  saveImageToPathAsync,\n  spawnAsyncThrowError,\n  transformFileContentsAsync,\n} from './ExponentTools';\nimport * as IosWorkspace from './IosWorkspace';\nimport StandaloneContext from './StandaloneContext';\nimport _logger from './Logger';\n\nconst logger = _logger.withFields({ buildPhase: 'configuring NSBundle' });\n\nconst ASPECT_FILL = 'scaleAspectFill';\nconst ASPECT_FIT = 'scaleAspectFit';\n\nconst backgroundImageViewID = 'Bsh-cT-K4l';\nconst backgroundViewID = 'OfY-5Y-tS4';\n\nfunction _backgroundColorFromHexString(hexColor) {\n  const result = /^#?([a-f\\d]{2})([a-f\\d]{2})([a-f\\d]{2})$/i.exec(hexColor);\n  if (!result || result.length < 4) {\n    // Default to white if we can't parse the color. We should have 3 matches.\n    logger.warn('Unable to parse color: ', hexColor, ' result:', result);\n    return { r: 1, g: 1, b: 1 };\n  }\n\n  const r = parseInt(result[1], 16) / 255;\n  const g = parseInt(result[2], 16) / 255;\n  const b = parseInt(result[3], 16) / 255;\n  return { r, g, b };\n}\n\nfunction _setBackgroundColor(manifest, dom) {\n  let backgroundColorString;\n  if (manifest.ios && manifest.ios.splash && manifest.ios.splash.backgroundColor) {\n    backgroundColorString = manifest.ios.splash.backgroundColor;\n  } else if (manifest.splash && manifest.splash.backgroundColor) {\n    backgroundColorString = manifest.splash.backgroundColor;\n  }\n\n  // Default to white\n  if (!backgroundColorString) {\n    backgroundColorString = '#FFFFFF';\n  }\n\n  const { r, g, b } = _backgroundColorFromHexString(backgroundColorString);\n  const backgroundViewNode = dom.getElementById(backgroundViewID);\n  const backgroundViewColorNodes = backgroundViewNode.getElementsByTagName('color');\n  let backgroundColorNode;\n  for (let i = 0; i < backgroundViewColorNodes.length; i++) {\n    const node = backgroundViewColorNodes[i];\n    if (node.parentNode.getAttribute('id') !== backgroundViewID) {\n      continue;\n    }\n\n    if (node.getAttribute('key') === 'backgroundColor') {\n      backgroundColorNode = node;\n      break;\n    }\n  }\n\n  if (backgroundColorNode) {\n    backgroundColorNode.setAttribute('red', r);\n    backgroundColorNode.setAttribute('green', g);\n    backgroundColorNode.setAttribute('blue', b);\n  }\n}\n\nasync function _saveImageAssetsAsync(context: StandaloneContext) {\n  let tabletImagePathOrUrl, phoneImagePathOrUrl;\n\n  if (context.type === 'user') {\n    // copy images from local project\n    const exp = context.data.exp;\n    if (exp.ios && exp.ios.splash && exp.ios.splash.image) {\n      phoneImagePathOrUrl = exp.ios.splash.image;\n\n      if (exp.ios.splash.tabletImage) {\n        tabletImagePathOrUrl = exp.ios.splash.tabletImage;\n      }\n    } else if (exp.splash && exp.splash.image) {\n      phoneImagePathOrUrl = exp.splash.image;\n    }\n  } else {\n    // use uploaded assets from published project\n    const manifest = context.data.manifest;\n    if (manifest.ios && manifest.ios.splash && manifest.ios.splash.imageUrl) {\n      phoneImagePathOrUrl = manifest.ios.splash.imageUrl;\n\n      if (manifest.ios.splash.tabletImageUrl) {\n        tabletImagePathOrUrl = manifest.ios.splash.tabletImageUrl;\n      }\n    } else if (manifest.splash && manifest.splash.imageUrl) {\n      phoneImagePathOrUrl = manifest.splash.imageUrl;\n    }\n  }\n\n  if (!phoneImagePathOrUrl) {\n    return;\n  }\n\n  const outputs = [];\n  if (!tabletImagePathOrUrl) {\n    outputs.push({\n      pathOrUrl: phoneImagePathOrUrl,\n      filename: 'launch_background_image.png',\n    });\n  } else {\n    outputs.push({\n      pathOrUrl: phoneImagePathOrUrl,\n      filename: 'launch_background_image~iphone.png',\n    });\n    outputs.push({\n      pathOrUrl: tabletImagePathOrUrl,\n      filename: 'launch_background_image.png',\n    });\n  }\n\n  const { supportingDirectory } = IosWorkspace.getPaths(context);\n  const projectRoot = context.type === 'user' ? context.data.projectPath : supportingDirectory;\n  outputs.forEach(async output => {\n    const { pathOrUrl, filename } = output;\n    const destinationPath = path.join(supportingDirectory, filename);\n    await saveImageToPathAsync(projectRoot, pathOrUrl, destinationPath);\n  });\n}\n\nfunction _setBackgroundImageResizeMode(manifest, dom) {\n  let backgroundViewMode = (() => {\n    let mode;\n    if (!manifest) {\n      return ASPECT_FIT;\n    }\n\n    if (manifest.ios && manifest.ios.splash && manifest.ios.splash.resizeMode) {\n      mode = manifest.ios.splash.resizeMode;\n    } else if (manifest.splash && manifest.splash.resizeMode) {\n      mode = manifest.splash.resizeMode;\n    }\n\n    return mode === 'cover' ? ASPECT_FILL : ASPECT_FIT;\n  })();\n\n  const backgroundImageViewNode = dom.getElementById(backgroundImageViewID);\n  if (backgroundImageViewNode) {\n    backgroundImageViewNode.setAttribute('contentMode', backgroundViewMode);\n  }\n}\n\nasync function _copyIntermediateLaunchScreenAsync(\n  context: StandaloneContext,\n  launchScreenPath: string\n) {\n  let splashTemplateFilename;\n  if (context.type === 'user') {\n    const { supportingDirectory } = IosWorkspace.getPaths(context);\n    splashTemplateFilename = path.join(supportingDirectory, 'LaunchScreen.xib');\n  } else {\n    // TODO: after shell apps use detached workspaces,\n    // we can just do this with the workspace's copy instead of referencing expoSourcePath.\n    const expoTemplatePath = path.join(\n      context.data.expoSourcePath,\n      '..',\n      'exponent-view-template',\n      'ios'\n    );\n    splashTemplateFilename = path.join(\n      expoTemplatePath,\n      'exponent-view-template',\n      'Supporting',\n      'LaunchScreen.xib'\n    );\n  }\n  await spawnAsyncThrowError('/bin/cp', [splashTemplateFilename, launchScreenPath], {\n    stdio: 'inherit',\n  });\n}\n\nasync function configureLaunchAssetsAsync(\n  context: StandaloneContext,\n  intermediatesDirectory: string\n) {\n  logger.info('Configuring iOS Launch Screen...');\n\n  fs.mkdirpSync(intermediatesDirectory);\n  const { supportingDirectory } = IosWorkspace.getPaths(context);\n  const config = context.config;\n\n  const splashIntermediateFilename = path.join(intermediatesDirectory, 'LaunchScreen.xib');\n  await _copyIntermediateLaunchScreenAsync(context, splashIntermediateFilename);\n\n  if (manifestUsesSplashApi(config, 'ios')) {\n    await transformFileContentsAsync(splashIntermediateFilename, fileString => {\n      const parser = new DOMParser();\n      const serializer = new XMLSerializer();\n      const dom = parser.parseFromString(fileString);\n\n      _setBackgroundColor(config, dom);\n      _setBackgroundImageResizeMode(config, dom);\n\n      return serializer.serializeToString(dom);\n    });\n\n    await _saveImageAssetsAsync(context);\n  }\n\n  if (context.type === 'user') {\n    await spawnAsyncThrowError(\n      '/bin/cp',\n      [splashIntermediateFilename, path.join(supportingDirectory, 'LaunchScreen.xib')],\n      {\n        stdio: 'inherit',\n      }\n    );\n  } else {\n    const splashOutputFilename = path.join(supportingDirectory, 'Base.lproj', 'LaunchScreen.nib');\n    await spawnAsyncThrowError('ibtool', [\n      '--compile',\n      splashOutputFilename,\n      splashIntermediateFilename,\n    ]);\n\n    const generatedUnnecessaryNib = path.join(supportingDirectory, 'LaunchScreen.nib');\n    if (fs.existsSync(generatedUnnecessaryNib)) {\n      rimraf.sync(generatedUnnecessaryNib);\n    }\n  }\n}\n\nexport { configureLaunchAssetsAsync };\n"],"sourceRoot":"/@expo/xdl@55.0.14/src"}