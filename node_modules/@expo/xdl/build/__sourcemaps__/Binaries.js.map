{"version":3,"sources":["Binaries.ts"],"names":["OSX_SOURCE_PATH","path","join","__dirname","_hasbinAsync","name","Promise","resolve","reject","result","getBinariesPath","process","platform","XDLError","addToPathAsync","ignoreBundledBinaries","UserSettings","getAsync","includes","binariesPath","_prependToPath","newPath","currentPath","env","PATH","length","delimiter","writePathToUserSettingsAsync","setAsync","pathFile","dotExpoHomeDirectory","fs","writeFile","_isDirectory","dir","statSync","isDirectory","e","isXcodeInstalled"],"mappings":"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","sourcesContent":["import fs from 'fs-extra';\nimport hasbin from 'hasbin';\nimport spawnAsync from '@expo/spawn-async';\nimport path from 'path';\n\nimport Config from './Config';\nimport Logger from './Logger';\nimport UserSettings from './UserSettings';\nimport XDLError from './XDLError';\n\nexport const OSX_SOURCE_PATH = path.join(__dirname, '..', 'binaries', 'osx');\n\nfunction _hasbinAsync(name: string) {\n  return new Promise((resolve, reject) => {\n    hasbin(name, result => {\n      resolve(result);\n    });\n  });\n}\n\nexport function getBinariesPath(): string {\n  if (process.platform === 'darwin') {\n    return path.join(__dirname, '..', 'binaries', 'osx');\n  } else if (process.platform === 'win32') {\n    return path.join(__dirname, '..', 'binaries', 'windows');\n  } else if (process.platform === 'linux') {\n    return path.join(__dirname, '..', 'binaries', 'linux');\n  } else {\n    throw new XDLError('PLATFORM_NOT_SUPPORTED', 'Platform not supported.');\n  }\n}\n\nexport async function addToPathAsync(name: string): Promise<void> {\n  if (await _hasbinAsync(name)) {\n    return;\n  }\n\n  // Users can set {ignoreBundledBinaries: [\"watchman\"]} to tell us to never use our version\n  let ignoreBundledBinaries = await UserSettings.getAsync('ignoreBundledBinaries', [] as string[]);\n  if (ignoreBundledBinaries.includes(name)) {\n    return;\n  }\n\n  let binariesPath = path.join(getBinariesPath(), name);\n  _prependToPath(binariesPath);\n}\n\nfunction _prependToPath(newPath: string) {\n  let currentPath = process.env.PATH ? process.env.PATH : '';\n  if (currentPath.length > 0) {\n    let delimiter = process.platform === 'win32' ? ';' : ':';\n    currentPath = `${delimiter}${currentPath}`;\n  }\n\n  process.env.PATH = `${newPath}${currentPath}`;\n}\n\nexport async function writePathToUserSettingsAsync(): Promise<void> {\n  await UserSettings.setAsync('PATH', process.env.PATH);\n\n  // Used in detach app\n  let pathFile = path.join(UserSettings.dotExpoHomeDirectory(), 'PATH');\n  await fs.writeFile(pathFile, process.env.PATH);\n}\n\nfunction _isDirectory(dir: string) {\n  try {\n    if (fs.statSync(dir).isDirectory()) {\n      return true;\n    }\n\n    return false;\n  } catch (e) {\n    return false;\n  }\n}\n\nexport function isXcodeInstalled(): boolean {\n  return _isDirectory('/Applications/Xcode.app/');\n}\n"],"file":"../Binaries.js","sourceRoot":"/@expo/xdl@55.0.14/src"}