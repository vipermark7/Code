"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.logWithLevel = logWithLevel;
exports.logDebug = logDebug;
exports.logInfo = logInfo;
exports.logError = logError;
exports.logWarning = logWarning;
exports.clearNotification = clearNotification;
exports.attachLoggerStream = attachLoggerStream;
exports.readExpRcAsync = readExpRcAsync;
exports.readConfigJsonAsync = readConfigJsonAsync;

var ConfigUtils = _interopRequireWildcard(require("@expo/config"));

var _path = _interopRequireDefault(require("path"));

var Analytics = _interopRequireWildcard(require("../Analytics"));

var _Logger = _interopRequireDefault(require("../Logger"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {}; if (desc.get || desc.set) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } } newObj.default = obj; return newObj; } }

const MAX_MESSAGE_LENGTH = 200;
let _projectRootToLogger = {};

function _getLogger(projectRoot) {
  let logger = _projectRootToLogger[projectRoot];

  if (!logger) {
    logger = _Logger.default.child({
      type: 'project',
      project: _path.default.resolve(projectRoot)
    });
    _projectRootToLogger[projectRoot] = logger;
  }

  return logger;
}

function logWithLevel(projectRoot, level, fields, msg, id) {
  if (id) {
    fields.issueId = id;
  }

  let logger = _getLogger(projectRoot);

  switch (level) {
    case 'debug':
      logger.debug(fields, msg);
      break;

    case 'info':
      logger.info(fields, msg);
      break;

    case 'warn':
      logger.warn(fields, msg);
      break;

    case 'error':
      logger.error(fields, msg);
      break;

    default:
      logger.debug(fields, msg);
      break;
  }
}

function logDebug(projectRoot, tag, message, id) {
  _getLogger(projectRoot).debug({
    tag
  }, message.toString());
}

function logInfo(projectRoot, tag, message, id) {
  const fields = {
    tag
  };

  if (id) {
    fields.issueId = id;
  }

  _getLogger(projectRoot).info(fields, message.toString());
}

function logError(projectRoot, tag, message, id) {
  const fields = {
    tag
  };

  if (id) {
    fields.issueId = id;
  }

  _getLogger(projectRoot).error(fields, message.toString());

  let truncatedMessage = message.toString();

  if (truncatedMessage.length > MAX_MESSAGE_LENGTH) {
    truncatedMessage = truncatedMessage.substring(0, MAX_MESSAGE_LENGTH);
  } // temporarily remove sentry until we can trim events
  // send error to Sentry
  // Sentry.logError(message.toString(), {
  //   tags: { tag },
  // });

}

function logWarning(projectRoot, tag, message, id) {
  const fields = {
    tag
  };

  if (id) {
    fields.issueId = id;
  }

  _getLogger(projectRoot).warn(fields, message.toString());

  let truncatedMessage = message.toString();

  if (truncatedMessage.length > MAX_MESSAGE_LENGTH) {
    truncatedMessage = truncatedMessage.substring(0, MAX_MESSAGE_LENGTH);
  }

  Analytics.logEvent('Project Warning', {
    projectRoot,
    tag,
    message: truncatedMessage
  });
}

function clearNotification(projectRoot, id) {
  _getLogger(projectRoot).info({
    tag: 'expo',
    issueCleared: true,
    issueId: id
  }, `No issue with ${id}`);
}

function attachLoggerStream(projectRoot, stream) {
  _getLogger(projectRoot).addStream(stream);
} // Wrap with logger


async function readExpRcAsync(projectRoot) {
  try {
    return await ConfigUtils.readExpRcAsync(projectRoot);
  } catch (e) {
    logError(projectRoot, 'expo', e.message);
    return {};
  }
}

async function readConfigJsonAsync(projectRoot) {
  try {
    return await ConfigUtils.readConfigJsonAsync(projectRoot);
  } catch (error) {
    logError(projectRoot, 'expo', error.message);
    return {
      exp: null,
      pkg: null
    };
  }
}
//# sourceMappingURL=../__sourcemaps__/project/ProjectUtils.js.map
