"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.updateSdkVersionsAsync = updateSdkVersionsAsync;
exports.updateIOSSimulatorBuild = updateIOSSimulatorBuild;
exports.updateAndroidApk = updateAndroidApk;

var _fs = _interopRequireDefault(require("fs"));

var _path = _interopRequireDefault(require("path"));

var _spawnAsync = _interopRequireDefault(require("@expo/spawn-async"));

var _lodash = _interopRequireDefault(require("lodash"));

var Versions = _interopRequireWildcard(require("../Versions"));

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {}; if (desc.get || desc.set) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } } newObj.default = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

async function updateSdkVersionsAsync(sdkVersion, reactNativeTag, facebookRNVersion, facebookReactVersion) {
  let versions = await Versions.versionsAsync();
  versions.sdkVersions[sdkVersion] = { ...versions.sdkVersions[sdkVersion],
    expoReactNativeTag: reactNativeTag,
    facebookReactNativeVersion: facebookRNVersion,
    facebookReactVersion
  };
  await Versions.setVersionsAsync(versions);
}

async function updateIOSSimulatorBuild(s3Client, pathToApp, appVersion) {
  let tempAppPath = _path.default.join(process.cwd(), 'temp-app.tar.gz');

  await (0, _spawnAsync.default)('tar', ['-zcvf', tempAppPath, '-C', pathToApp, '.'], {
    cwd: process.cwd(),
    stdio: ['ignore', 'ignore', 'inherit'] // only stderr

  });

  let file = _fs.default.createReadStream(tempAppPath);

  console.log('Uploading...');
  await s3Client.putObject({
    Bucket: 'exp-ios-simulator-apps',
    Key: `Exponent-${appVersion}.tar.gz`,
    Body: file,
    ACL: 'public-read'
  }).promise();
  await (0, _spawnAsync.default)('rm', [tempAppPath]);
  console.log('Adding to server config...');
  let versions = await Versions.versionsAsync();
  versions['iosVersion'] = appVersion;
  versions['iosUrl'] = `https://dpq5q02fu5f55.cloudfront.net/Exponent-${appVersion}.tar.gz`;
  await Versions.setVersionsAsync(versions);
}

async function updateAndroidApk(s3Client, pathToApp, appVersion) {
  let file = _fs.default.createReadStream(pathToApp);

  console.log('Uploading...');
  await s3Client.putObject({
    Bucket: 'exp-android-apks',
    Key: `Exponent-${appVersion}.apk`,
    Body: file,
    ACL: 'public-read'
  }).promise();
  console.log('Adding to server config...');
  let versions = await Versions.versionsAsync();
  versions['androidVersion'] = appVersion;
  versions['androidUrl'] = `https://d1ahtucjixef4r.cloudfront.net/Exponent-${appVersion}.apk`;
  await Versions.setVersionsAsync(versions);
}
//# sourceMappingURL=../__sourcemaps__/tools/UpdateVersions.js.map
