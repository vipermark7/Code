'use strict';

var _stringify = require('babel-runtime/core-js/json/stringify');

var _stringify2 = _interopRequireDefault(_stringify);

var _fs = require('fs');

var _fs2 = _interopRequireDefault(_fs);

var _graphql = require('graphql');

var _GraphQLSchema = require('./graphql/GraphQLSchema');

var _GraphQLSchema2 = _interopRequireDefault(_GraphQLSchema);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

(0, _graphql.graphql)(_GraphQLSchema2.default, `
    {
      __schema {
        types {
          kind
          name
          possibleTypes {
            name
          }
        }
      }
    }
  `).then(result => {
  // here we're filtering out any type information unrelated to unions or interfaces
  const filteredData = result.data.__schema.types.filter(type => type.possibleTypes !== null);
  result.data.__schema.types = filteredData;
  _fs2.default.writeFile('./fragmentTypes.json', (0, _stringify2.default)(result.data), err => {
    if (err) {
      console.error('Error writing fragmentTypes file', err);
    } else {
      console.log('Fragment types successfully extracted!');
    }
  });
});