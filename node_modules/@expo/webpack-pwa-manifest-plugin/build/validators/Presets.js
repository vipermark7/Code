'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _getIterator2;

function _load_getIterator() {
  return _getIterator2 = _interopRequireDefault(require('babel-runtime/core-js/get-iterator'));
}

exports.default = function (config) {
  if (!config) return;

  for (var _len = arguments.length, properties = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
    properties[_key - 1] = arguments[_key];
  }

  var _iteratorNormalCompletion = true;
  var _didIteratorError = false;
  var _iteratorError = undefined;

  try {
    for (var _iterator = (0, (_getIterator2 || _load_getIterator()).default)(properties), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
      var property = _step.value;

      var value = config[property];
      if (value && !hasPreset(property, value)) {
        throw new (_PresetError || _load_PresetError()).default(property, value);
      }
    }
  } catch (err) {
    _didIteratorError = true;
    _iteratorError = err;
  } finally {
    try {
      if (!_iteratorNormalCompletion && _iterator.return) {
        _iterator.return();
      }
    } finally {
      if (_didIteratorError) {
        throw _iteratorError;
      }
    }
  }
};

var _PresetError;

function _load_PresetError() {
  return _PresetError = _interopRequireDefault(require('../errors/PresetError'));
}

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// CSS can target this with https://developer.mozilla.org/en-US/docs/Web/CSS/@media/display-mode
var VALID_DISPLAY_TYPES = [
/**
 * Opens the web application without any browser UI and takes up the entirety of the available display area.
 * Fallback to: `standalone`
 */
'fullscreen',
/**
 * Opens the web app to look and feel like a standalone native app. The app runs in its own window, separate from the browser, and hides standard browser UI elements like the URL bar, etc.
 * Fallback to: `minimal-ui`
 */
'standalone',
/**
 * This mode is similar to fullscreen, but provides the user with some means to access a minimal set of UI elements for controlling navigation (i.e., back, forward, reload, etc).
 * > Note: Only supported by Chrome on mobile.
 * Fallback to: `browser`
 */
'minimal-ui',
/**
 * A standard browser experience.
 */
'browser'];

var presets = {
  dir: ['ltr', 'rtl', 'auto'],
  orientation: ['any', 'natural', 'landscape', 'landscape-primary', 'landscape-secondary', 'portrait', 'portrait-primary', 'portrait-secondary', 'omit'],
  display: VALID_DISPLAY_TYPES,
  crossorigin: ['anonymous', 'use-credentials']
};

function hasPreset(key, value) {
  return presets[key].indexOf(value) >= 0;
}

module.exports = exports['default'];
//# sourceMappingURL=../__sourcemaps__/validators/Presets.js.map
