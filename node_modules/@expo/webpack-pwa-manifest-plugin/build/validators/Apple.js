'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _getIterator2;

function _load_getIterator() {
  return _getIterator2 = _interopRequireDefault(require('babel-runtime/core-js/get-iterator'));
}

var _extends2;

function _load_extends() {
  return _extends2 = _interopRequireDefault(require('babel-runtime/helpers/extends'));
}

var _keys;

function _load_keys() {
  return _keys = _interopRequireDefault(require('babel-runtime/core-js/object/keys'));
}

var _toConsumableArray2;

function _load_toConsumableArray() {
  return _toConsumableArray2 = _interopRequireDefault(require('babel-runtime/helpers/toConsumableArray'));
}

exports.fromStartupImage = fromStartupImage;

var _Orientation;

function _load_Orientation() {
  return _Orientation = require('./Orientation');
}

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var Devices = [{ names: ['iPhone SE'], width: 640, height: 1136, scale: 2 }, { names: ['iPhone Xs Max'], width: 1242, height: 2688, scale: 3 }, { names: ['iPhone Xr'], width: 828, height: 1792, scale: 2 }, { names: ['iPhone X', 'iPhone Xs'], width: 1125, height: 2436, scale: 3 }, {
  names: ['iPhone 8 Plus', 'iPhone 7 Plus', 'iPhone 6s Plus', 'iPhone 6 Plus'],
  width: 1242,
  height: 2208,
  scale: 3
}, { names: ['iPhone 8', 'iPhone 7', 'iPhone 6s', 'iPhone 6'], width: 750, height: 1334, scale: 2 }, { names: ['iPad Pro 12.9"'], width: 2048, height: 2732, scale: 2, isTablet: true }, { names: ['iPad Pro 11"'], width: 1668, height: 2388, scale: 2, isTablet: true }, { names: ['iPad Pro 10.5"'], width: 1668, height: 2224, scale: 2, isTablet: true }, { names: ['iPad Mini', 'iPad Air'], width: 1536, height: 2048, scale: 2, isTablet: true }];

function assembleOrientationMedia(width, height, scale, orientation) {
  var params = {
    'device-width': Math.floor(width / scale) + 'px',
    // 'max-device-width': width + 'px',
    'device-height': Math.floor(height / scale) + 'px',
    // 'max-device-height': height + 'px',
    '-webkit-device-pixel-ratio': scale,
    orientation: orientation
  };

  var query = ['screen'].concat((0, (_toConsumableArray2 || _load_toConsumableArray()).default)((0, (_keys || _load_keys()).default)(params).map(function (key) {
    return '(' + key + ': ' + params[key] + ')';
  })));

  return query.join(' and ');
}

function getDevices(_ref) {
  var _ref$orientation = _ref.orientation,
      orientation = _ref$orientation === undefined ? 'natural' : _ref$orientation,
      _ref$supportsTablet = _ref.supportsTablet,
      supportsTablet = _ref$supportsTablet === undefined ? true : _ref$supportsTablet;

  if (!(0, (_Orientation || _load_Orientation()).isValid)(orientation)) {
    throw new Error(orientation + ' is not a valid orientation');
  }

  var orientations = [];
  if ((0, (_Orientation || _load_Orientation()).isLandscape)(orientation)) {
    orientations.push('landscape');
  }
  if ((0, (_Orientation || _load_Orientation()).isPortrait)(orientation)) {
    orientations.push('portrait');
  }

  var devices = [];
  if (supportsTablet) {
    devices = Devices;
  } else {
    devices = Devices.filter(function (_ref2) {
      var isTablet = _ref2.isTablet;
      return !isTablet;
    });
  }

  return devices.map(function (device) {
    return (0, (_extends2 || _load_extends()).default)({}, device, { orientations: orientations });
  });
}

function fromStartupImage(_ref3) {
  var supportsTablet = _ref3.supportsTablet,
      src = _ref3.src,
      resizeMode = _ref3.resizeMode,
      destination = _ref3.destination,
      color = _ref3.color;

  var devices = getDevices({ orientation: 'any', supportsTablet: supportsTablet });

  var startupImages = [];
  var _iteratorNormalCompletion = true;
  var _didIteratorError = false;
  var _iteratorError = undefined;

  try {
    for (var _iterator = (0, (_getIterator2 || _load_getIterator()).default)(devices), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
      var device = _step.value;
      var width = device.width,
          height = device.height;
      var _iteratorNormalCompletion2 = true;
      var _didIteratorError2 = false;
      var _iteratorError2 = undefined;

      try {
        for (var _iterator2 = (0, (_getIterator2 || _load_getIterator()).default)(device.orientations), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
          var orientation = _step2.value;

          var size = orientation === 'portrait' ? [width, height] : [height, width];
          startupImages.push({
            ios: 'startup',
            src: src,
            sizes: [size],
            scale: device.scale,
            media: assembleOrientationMedia(device.width, device.height, device.scale, orientation),
            destination: destination,
            resizeMode: resizeMode,
            color: color
          });
        }
      } catch (err) {
        _didIteratorError2 = true;
        _iteratorError2 = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion2 && _iterator2.return) {
            _iterator2.return();
          }
        } finally {
          if (_didIteratorError2) {
            throw _iteratorError2;
          }
        }
      }
    }
  } catch (err) {
    _didIteratorError = true;
    _iteratorError = err;
  } finally {
    try {
      if (!_iteratorNormalCompletion && _iterator.return) {
        _iterator.return();
      }
    } finally {
      if (_didIteratorError) {
        throw _iteratorError;
      }
    }
  }

  return startupImages;
}
//# sourceMappingURL=../__sourcemaps__/validators/Apple.js.map
