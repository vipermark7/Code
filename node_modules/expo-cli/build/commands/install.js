'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _regenerator;

function _load_regenerator() {
  return _regenerator = _interopRequireDefault(require('babel-runtime/regenerator'));
}

var _toConsumableArray2;

function _load_toConsumableArray() {
  return _toConsumableArray2 = _interopRequireDefault(require('babel-runtime/helpers/toConsumableArray'));
}

var _asyncToGenerator2;

function _load_asyncToGenerator() {
  return _asyncToGenerator2 = _interopRequireDefault(require('babel-runtime/helpers/asyncToGenerator'));
}

var installAsync = function () {
  var _ref = (0, (_asyncToGenerator2 || _load_asyncToGenerator()).default)( /*#__PURE__*/(_regenerator || _load_regenerator()).default.mark(function _callee(packages, options) {
    var _ref2, projectRoot, workflow, packageManager, _ref3, exp, bundledNativeModules, nativeModules, others, versionedPackages, messages;

    return (_regenerator || _load_regenerator()).default.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            _context.next = 2;
            return findProjectRootAsync(process.cwd());

          case 2:
            _ref2 = _context.sent;
            projectRoot = _ref2.projectRoot;
            workflow = _ref2.workflow;
            packageManager = (_PackageManager || _load_PackageManager()).createForProject(projectRoot, {
              npm: options.npm,
              yarn: options.yarn
            });

            if (!(workflow === 'bare')) {
              _context.next = 10;
              break;
            }

            _context.next = 9;
            return packageManager.addAsync.apply(packageManager, (0, (_toConsumableArray2 || _load_toConsumableArray()).default)(packages));

          case 9:
            return _context.abrupt('return', _context.sent);

          case 10:
            _context.next = 12;
            return (_config || _load_config()).readConfigJsonAsync(projectRoot);

          case 12:
            _ref3 = _context.sent;
            exp = _ref3.exp;

            if ((_xdl || _load_xdl()).Versions.gteSdkVersion(exp, '33.0.0')) {
              _context.next = 16;
              break;
            }

            throw new (_CommandError || _load_CommandError()).default('UNSUPPORTED_SDK_VERSION', 'expo install is only available for managed apps using Expo SDK version 33 or higher. Current version: ' + exp.sdkVersion + '.');

          case 16:
            if (_fs.default.existsSync(_path.default.join(exp.nodeModulesPath || projectRoot, 'node_modules'))) {
              _context.next = 20;
              break;
            }

            (_log || _load_log()).default.warn('node_modules not found, running ' + packageManager.name + ' install command.');
            _context.next = 20;
            return packageManager.installAsync();

          case 20:
            _context.next = 22;
            return (_jsonFile || _load_jsonFile()).default.readAsync((_config || _load_config()).resolveModule('expo/bundledNativeModules.json', projectRoot, exp));

          case 22:
            bundledNativeModules = _context.sent;
            nativeModules = [];
            others = [];
            versionedPackages = packages.map(function (arg) {
              var spec = (0, (_npmPackageArg || _load_npmPackageArg()).default)(arg);
              var name = spec.name;

              if (['tag', 'version', 'range'].includes(spec.type) && name && bundledNativeModules[name]) {
                // Unimodule packages from npm registry are modified to use the bundled version.
                var version = bundledNativeModules[name];
                var modifiedSpec = name + '@' + version;
                nativeModules.push(modifiedSpec);
                return modifiedSpec;
              } else {
                // Other packages are passed through unmodified.
                others.push(spec.raw);
                return spec.raw;
              }
            });
            messages = [];

            if (nativeModules.length > 0) {
              messages.push(nativeModules.length + ' SDK ' + exp.sdkVersion + ' compatible native ' + (0, (_inflection || _load_inflection()).inflect)('modules', nativeModules.length));
            }
            if (others.length > 0) {
              messages.push(others.length + ' other ' + (0, (_inflection || _load_inflection()).inflect)('packages', others.length));
            }
            (0, (_log || _load_log()).default)('Installing ' + messages.join(' and ') + ' using ' + packageManager.name + '.');
            _context.next = 32;
            return packageManager.addAsync.apply(packageManager, (0, (_toConsumableArray2 || _load_toConsumableArray()).default)(versionedPackages));

          case 32:
          case 'end':
            return _context.stop();
        }
      }
    }, _callee, this);
  }));

  return function installAsync(_x, _x2) {
    return _ref.apply(this, arguments);
  };
}();

var findProjectRootAsync = function () {
  var _ref4 = (0, (_asyncToGenerator2 || _load_asyncToGenerator()).default)( /*#__PURE__*/(_regenerator || _load_regenerator()).default.mark(function _callee2(base) {
    var previous, dir;
    return (_regenerator || _load_regenerator()).default.wrap(function _callee2$(_context2) {
      while (1) {
        switch (_context2.prev = _context2.next) {
          case 0:
            previous = null;
            dir = base;

          case 2:
            _context2.next = 4;
            return (_jsonFile || _load_jsonFile()).default.getAsync(_path.default.join(dir, 'app.json'), 'expo', null);

          case 4:
            if (!_context2.sent) {
              _context2.next = 8;
              break;
            }

            return _context2.abrupt('return', { projectRoot: dir, workflow: 'managed' });

          case 8:
            if (!_fs.default.existsSync(_path.default.join(dir, 'package.json'))) {
              _context2.next = 10;
              break;
            }

            return _context2.abrupt('return', { projectRoot: dir, workflow: 'bare' });

          case 10:
            previous = dir;
            dir = _path.default.dirname(dir);

          case 12:
            if (dir !== previous) {
              _context2.next = 2;
              break;
            }

          case 13:
            throw new (_CommandError || _load_CommandError()).default('NO_PROJECT', 'No managed or bare projects found. Please make sure you are inside a project folder.');

          case 14:
          case 'end':
            return _context2.stop();
        }
      }
    }, _callee2, this);
  }));

  return function findProjectRootAsync(_x3) {
    return _ref4.apply(this, arguments);
  };
}();

var _config;

function _load_config() {
  return _config = _interopRequireWildcard(require('@expo/config'));
}

var _fs = _interopRequireDefault(require('fs'));

var _inflection;

function _load_inflection() {
  return _inflection = require('inflection');
}

var _jsonFile;

function _load_jsonFile() {
  return _jsonFile = _interopRequireDefault(require('@expo/json-file'));
}

var _npmPackageArg;

function _load_npmPackageArg() {
  return _npmPackageArg = _interopRequireDefault(require('npm-package-arg'));
}

var _path = _interopRequireDefault(require('path'));

var _xdl;

function _load_xdl() {
  return _xdl = require('@expo/xdl');
}

var _CommandError;

function _load_CommandError() {
  return _CommandError = _interopRequireDefault(require('../CommandError'));
}

var _PackageManager;

function _load_PackageManager() {
  return _PackageManager = _interopRequireWildcard(require('../PackageManager'));
}

var _log;

function _load_log() {
  return _log = _interopRequireDefault(require('../log'));
}

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

exports.default = function (program) {
  program.command('install [packages...]').option('--npm', 'Use npm to install dependencies. (default when package-lock.json exists)').option('--yarn', 'Use Yarn to install dependencies. (default when yarn.lock exists)').description('Installs a unimodule or other package to a project.').asyncAction(installAsync);
};

module.exports = exports['default'];
//# sourceMappingURL=../__sourcemaps__/commands/install.js.map
