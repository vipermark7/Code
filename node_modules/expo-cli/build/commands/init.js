'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _regenerator;

function _load_regenerator() {
  return _regenerator = _interopRequireDefault(require('babel-runtime/regenerator'));
}

var _asyncToGenerator2;

function _load_asyncToGenerator() {
  return _asyncToGenerator2 = _interopRequireDefault(require('babel-runtime/helpers/asyncToGenerator'));
}

var action = function () {
  var _ref = (0, (_asyncToGenerator2 || _load_asyncToGenerator()).default)( /*#__PURE__*/(_regenerator || _load_regenerator()).default.mark(function _callee(projectDir, options) {
    var parentDir, name, root, validationResult, _ref2, templateSpec, _ref3, packageManager, projectPath, cdPath;

    return (_regenerator || _load_regenerator()).default.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            parentDir = void 0;
            name = void 0;

            if (!projectDir) {
              _context.next = 11;
              break;
            }

            root = _path.default.resolve(projectDir);

            parentDir = _path.default.dirname(root);
            name = _path.default.basename(root);
            validationResult = validateName(parentDir, name);

            if (!(validationResult !== true)) {
              _context.next = 9;
              break;
            }

            throw new (_CommandError || _load_CommandError()).default('INVALID_PROJECT_DIR', validationResult);

          case 9:
            _context.next = 16;
            break;

          case 11:
            parentDir = process.cwd();
            _context.next = 14;
            return (0, (_prompt || _load_prompt()).default)({
              name: 'name',
              message: 'Choose a project name:',
              filter: function filter(name) {
                return name.trim();
              },
              validate: function validate(name) {
                return validateName(parentDir, name);
              }
            });

          case 14:
            _ref2 = _context.sent;
            name = _ref2.name;

          case 16:
            templateSpec = void 0;

            if (!options.template) {
              _context.next = 22;
              break;
            }

            templateSpec = (0, (_npmPackageArg || _load_npmPackageArg()).default)(options.template);

            // For backwards compatibility, 'blank' and 'tabs' are aliases for
            // 'expo-template-blank' and 'expo-template-tabs', respectively.
            if ((templateSpec.name === 'blank' || templateSpec.name === 'tabs') && templateSpec.registry) {
              templateSpec.name = templateSpec.escapedName = 'expo-template-' + templateSpec.name;
            }
            _context.next = 26;
            break;

          case 22:
            _context.next = 24;
            return (0, (_prompt || _load_prompt()).default)({
              type: 'list',
              name: 'templateSpec',
              message: 'Choose a template:',
              choices: FEATURED_TEMPLATES.map(function (template) {
                return {
                  value: template.name,
                  name: (_chalk || _load_chalk()).default.bold(template.shortName) + '\n' + (0, (_wordwrap || _load_wordwrap()).default)(2, process.stdout.columns || 80)(template.description),
                  short: template.name
                };
              })
            });

          case 24:
            _ref3 = _context.sent;
            templateSpec = _ref3.templateSpec;

          case 26:
            packageManager = void 0;

            if (!options.yarn) {
              _context.next = 31;
              break;
            }

            packageManager = 'yarn';
            _context.next = 43;
            break;

          case 31:
            if (!options.npm) {
              _context.next = 35;
              break;
            }

            packageManager = 'npm';
            _context.next = 43;
            break;

          case 35:
            _context.next = 37;
            return shouldUseYarnAsync();

          case 37:
            if (!_context.sent) {
              _context.next = 41;
              break;
            }

            _context.t0 = 'yarn';
            _context.next = 42;
            break;

          case 41:
            _context.t0 = 'npm';

          case 42:
            packageManager = _context.t0;

          case 43:
            _context.next = 45;
            return downloadAndExtractTemplate(templateSpec, parentDir, name, packageManager);

          case 45:
            projectPath = _context.sent;
            cdPath = _path.default.relative(process.cwd(), projectPath);

            if (cdPath.length > projectPath.length) {
              cdPath = projectPath;
            }
            (_log || _load_log()).default.nested('\nYour project is ready at ' + projectPath);
            (_log || _load_log()).default.nested('To get started, you can type:\n');
            if (cdPath) {
              // empty string if project was created in current directory
              (_log || _load_log()).default.nested('  cd ' + cdPath);
            }
            (_log || _load_log()).default.nested('  ' + packageManager + ' start\n');

          case 52:
          case 'end':
            return _context.stop();
        }
      }
    }, _callee, this);
  }));

  return function action(_x, _x2) {
    return _ref.apply(this, arguments);
  };
}();

var downloadAndExtractTemplate = function () {
  var _ref4 = (0, (_asyncToGenerator2 || _load_asyncToGenerator()).default)( /*#__PURE__*/(_regenerator || _load_regenerator()).default.mark(function _callee2(templateSpec, parentDir, name, packageManager) {
    return (_regenerator || _load_regenerator()).default.wrap(function _callee2$(_context2) {
      while (1) {
        switch (_context2.prev = _context2.next) {
          case 0:
            return _context2.abrupt('return', (_xdl || _load_xdl()).Exp.extractTemplateApp(templateSpec, name, _path.default.join(parentDir, name), packageManager));

          case 1:
          case 'end':
            return _context2.stop();
        }
      }
    }, _callee2, this);
  }));

  return function downloadAndExtractTemplate(_x3, _x4, _x5, _x6) {
    return _ref4.apply(this, arguments);
  };
}();

var shouldUseYarnAsync = function () {
  var _ref5 = (0, (_asyncToGenerator2 || _load_asyncToGenerator()).default)( /*#__PURE__*/(_regenerator || _load_regenerator()).default.mark(function _callee3() {
    var version, answer;
    return (_regenerator || _load_regenerator()).default.wrap(function _callee3$(_context3) {
      while (1) {
        switch (_context3.prev = _context3.next) {
          case 0:
            _context3.prev = 0;
            _context3.next = 3;
            return (0, (_spawnAsync || _load_spawnAsync()).default)('yarnpkg', ['--version']);

          case 3:
            version = _context3.sent.stdout.trim();

            if ((_semver || _load_semver()).default.valid(version)) {
              _context3.next = 6;
              break;
            }

            return _context3.abrupt('return', false);

          case 6:
            _context3.next = 8;
            return (0, (_prompt || _load_prompt()).default)({
              type: 'confirm',
              name: 'useYarn',
              message: 'Yarn v' + version + ' found. Use Yarn to install dependencies?'
            });

          case 8:
            answer = _context3.sent;
            return _context3.abrupt('return', answer.useYarn);

          case 12:
            _context3.prev = 12;
            _context3.t0 = _context3['catch'](0);
            return _context3.abrupt('return', false);

          case 15:
          case 'end':
            return _context3.stop();
        }
      }
    }, _callee3, this, [[0, 12]]);
  }));

  return function shouldUseYarnAsync() {
    return _ref5.apply(this, arguments);
  };
}();

var _chalk;

function _load_chalk() {
  return _chalk = _interopRequireDefault(require('chalk'));
}

var _fs = _interopRequireDefault(require('fs'));

var _xdl;

function _load_xdl() {
  return _xdl = require('xdl');
}

var _semver;

function _load_semver() {
  return _semver = _interopRequireDefault(require('semver'));
}

var _spawnAsync;

function _load_spawnAsync() {
  return _spawnAsync = _interopRequireDefault(require('@expo/spawn-async'));
}

var _npmPackageArg;

function _load_npmPackageArg() {
  return _npmPackageArg = _interopRequireDefault(require('npm-package-arg'));
}

var _wordwrap;

function _load_wordwrap() {
  return _wordwrap = _interopRequireDefault(require('wordwrap'));
}

var _prompt;

function _load_prompt() {
  return _prompt = _interopRequireDefault(require('../prompt'));
}

var _log;

function _load_log() {
  return _log = _interopRequireDefault(require('../log'));
}

var _CommandError;

function _load_CommandError() {
  return _CommandError = _interopRequireDefault(require('../CommandError'));
}

var _path = _interopRequireDefault(require('path'));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var FEATURED_TEMPLATES = [{
  shortName: 'blank',
  name: 'expo-template-blank',
  description: 'minimum dependencies to run and an empty root component'
}, {
  shortName: 'tabs',
  name: 'expo-template-tabs',
  description: 'several example screens and tabs using react-navigation'
}];

var _downloadIsSlowPrompt = false;

function validateName(parentDir, name) {
  if (!/^[a-z0-9@.\-_]+$/i.test(name)) {
    return 'The project name can only contain URL-friendly characters.';
  }
  var dir = _path.default.join(parentDir, name);
  if (!isNonExistentOrEmptyDir(dir)) {
    return 'The path "' + dir + '" already exists.\nPlease choose a different parent directory or project name.';
  }
  return true;
}

function isNonExistentOrEmptyDir(dir) {
  try {
    return _fs.default.statSync(dir).isDirectory() && _fs.default.readdirSync(dir).length === 0;
  } catch (error) {
    if (error.code === 'ENOENT') {
      return true;
    }
    throw error;
  }
}

exports.default = function (program) {
  program.command('init [project-dir]').alias('i').description('Initializes a directory with an example project. Run it without any options and you will be prompted for the name and type.').option('-t, --template [name]', 'Specify which template to use. Valid options are "blank", "tabs" or any npm package that includes an Expo project template.').option('--npm', 'Use npm to install dependencies. (default when Yarn is not installed)').option('--yarn', 'Use Yarn to install dependencies. (default when Yarn is installed)').asyncAction(action);
};

module.exports = exports['default'];
//# sourceMappingURL=../__sourcemaps__/commands/init.js.map
