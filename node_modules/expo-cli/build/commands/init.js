'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _keys;

function _load_keys() {
  return _keys = _interopRequireDefault(require('babel-runtime/core-js/object/keys'));
}

var _getIterator2;

function _load_getIterator() {
  return _getIterator2 = _interopRequireDefault(require('babel-runtime/core-js/get-iterator'));
}

var _stringify;

function _load_stringify() {
  return _stringify = _interopRequireDefault(require('babel-runtime/core-js/json/stringify'));
}

var _regenerator;

function _load_regenerator() {
  return _regenerator = _interopRequireDefault(require('babel-runtime/regenerator'));
}

var _toConsumableArray2;

function _load_toConsumableArray() {
  return _toConsumableArray2 = _interopRequireDefault(require('babel-runtime/helpers/toConsumableArray'));
}

var _asyncToGenerator2;

function _load_asyncToGenerator() {
  return _asyncToGenerator2 = _interopRequireDefault(require('babel-runtime/helpers/asyncToGenerator'));
}

var action = function () {
  var _ref = (0, (_asyncToGenerator2 || _load_asyncToGenerator()).default)( /*#__PURE__*/(_regenerator || _load_regenerator()).default.mark(function _callee(projectDir, options) {
    var parentDir, dirName, root, validationResult, templateSpec, descriptionColumn, _ref2, template, initialConfig, templateManifest, isBare, packageManager, projectPath, cdPath;

    return (_regenerator || _load_regenerator()).default.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            parentDir = void 0;
            dirName = void 0;

            if (!projectDir) {
              _context.next = 11;
              break;
            }

            root = _path.default.resolve(projectDir);

            parentDir = _path.default.dirname(root);
            dirName = _path.default.basename(root);
            validationResult = validateName(parentDir, dirName);

            if (!(validationResult !== true)) {
              _context.next = 9;
              break;
            }

            throw new (_CommandError || _load_CommandError()).default('INVALID_PROJECT_DIR', validationResult);

          case 9:
            _context.next = 16;
            break;

          case 11:
            if (!(options.parent && options.parent.nonInteractive)) {
              _context.next = 15;
              break;
            }

            throw new (_CommandError || _load_CommandError()).default('NON_INTERACTIVE', 'The project dir argument is required in non-interactive mode.');

          case 15:
            parentDir = process.cwd();

          case 16:
            templateSpec = void 0;

            if (!options.template) {
              _context.next = 22;
              break;
            }

            templateSpec = (0, (_npmPackageArg || _load_npmPackageArg()).default)(options.template);

            // For backwards compatibility, 'blank' and 'tabs' are aliases for
            // 'expo-template-blank' and 'expo-template-tabs', respectively.
            if ((templateSpec.name === 'blank' || templateSpec.name === 'tabs' || templateSpec.name === 'bare-minimum' || templateSpec.name === 'bare-foundation') && templateSpec.registry) {
              templateSpec.escapedName = 'expo-template-' + templateSpec.name;
              templateSpec.name = templateSpec.escapedName;
            }
            _context.next = 28;
            break;

          case 22:
            descriptionColumn = Math.max.apply(Math, (0, (_toConsumableArray2 || _load_toConsumableArray()).default)(FEATURED_TEMPLATES.map(function (t) {
              return t.shortName ? t.shortName.length : 0;
            }))) + 2;
            _context.next = 25;
            return (0, (_prompt || _load_prompt()).default)({
              type: 'list',
              name: 'template',
              message: 'Choose a template:',
              pageSize: 20,
              choices: FEATURED_TEMPLATES.map(function (template) {
                if (typeof template === 'string') {
                  return (_prompt || _load_prompt()).default.separator(template);
                } else {
                  return {
                    value: template.name,
                    name: (_chalk || _load_chalk()).default.bold((0, (_padEnd || _load_padEnd()).default)(template.shortName, descriptionColumn)) + (0, (_trimStart || _load_trimStart()).default)((0, (_wordwrap || _load_wordwrap()).default)(descriptionColumn + 2, process.stdout.columns || 80)(template.description)),
                    short: template.name
                  };
                }
              })
            }, {
              nonInteractiveHelp: '--template: argument is required in non-interactive mode. Valid choices are: ' + FEATURED_TEMPLATES.filter(function (_ref3) {
                var shortName = _ref3.shortName;
                return shortName;
              }).map(function (template) {
                return '\'' + template.shortName + '\'';
              }).join(', ') + ' or any custom template (name of npm package).'
            });

          case 25:
            _ref2 = _context.sent;
            template = _ref2.template;

            templateSpec = (0, (_npmPackageArg || _load_npmPackageArg()).default)(template);

          case 28:

            if (options.workflow) {
              (_log || _load_log()).default.warn('The --workflow flag is deprecated. Workflow is chosen automatically based on the chosen template.');
            }
            initialConfig = void 0;
            _context.next = 32;
            return (_pacote || _load_pacote()).default.manifest(templateSpec);

          case 32:
            templateManifest = _context.sent;
            isBare = BARE_WORKFLOW_TEMPLATES.includes(templateManifest.name);

            if (!isBare) {
              _context.next = 40;
              break;
            }

            _context.next = 37;
            return promptForBareConfig(parentDir, dirName, options);

          case 37:
            initialConfig = _context.sent;
            _context.next = 43;
            break;

          case 40:
            _context.next = 42;
            return promptForManagedConfig(parentDir, dirName, options);

          case 42:
            initialConfig = _context.sent;

          case 43:
            packageManager = void 0;

            if (!options.yarn) {
              _context.next = 48;
              break;
            }

            packageManager = 'yarn';
            _context.next = 60;
            break;

          case 48:
            if (!options.npm) {
              _context.next = 52;
              break;
            }

            packageManager = 'npm';
            _context.next = 60;
            break;

          case 52:
            _context.next = 54;
            return shouldUseYarnAsync();

          case 54:
            if (!_context.sent) {
              _context.next = 58;
              break;
            }

            _context.t0 = 'yarn';
            _context.next = 59;
            break;

          case 58:
            _context.t0 = 'npm';

          case 59:
            packageManager = _context.t0;

          case 60:
            _context.next = 62;
            return (_xdl || _load_xdl()).Exp.extractTemplateApp(templateSpec, _path.default.join(parentDir, dirName || initialConfig.name || initialConfig.expo.slug), packageManager, initialConfig);

          case 62:
            projectPath = _context.sent;
            cdPath = _path.default.relative(process.cwd(), projectPath);

            if (cdPath.length > projectPath.length) {
              cdPath = projectPath;
            }
            (_log || _load_log()).default.nested('\nYour project is ready at ' + projectPath);
            (_log || _load_log()).default.nested('');
            if (isBare) {
              (_log || _load_log()).default.nested('Before running your app on iOS, make sure you have CocoaPods installed and initialize the project:');
              (_log || _load_log()).default.nested('');
              (_log || _load_log()).default.nested('  cd ' + (cdPath || '.') + '/ios');
              (_log || _load_log()).default.nested('  pod install');
              (_log || _load_log()).default.nested('');
              (_log || _load_log()).default.nested('Then you can run the project:');
              (_log || _load_log()).default.nested('');
              if (cdPath) {
                // empty string if project was created in current directory
                (_log || _load_log()).default.nested('  cd ' + cdPath);
              }
              (_log || _load_log()).default.nested('  ' + (packageManager === 'npm' ? 'npm run android' : 'yarn android'));
              (_log || _load_log()).default.nested('  ' + (packageManager === 'npm' ? 'npm run ios' : 'yarn ios'));
            } else {
              (_log || _load_log()).default.nested('To get started, you can type:\n');
              if (cdPath) {
                // empty string if project was created in current directory
                (_log || _load_log()).default.nested('  cd ' + cdPath);
              }
              (_log || _load_log()).default.nested('  ' + packageManager + ' start');
            }
            (_log || _load_log()).default.nested('');

          case 69:
          case 'end':
            return _context.stop();
        }
      }
    }, _callee, this);
  }));

  return function action(_x, _x2) {
    return _ref.apply(this, arguments);
  };
}();

var shouldUseYarnAsync = function () {
  var _ref4 = (0, (_asyncToGenerator2 || _load_asyncToGenerator()).default)( /*#__PURE__*/(_regenerator || _load_regenerator()).default.mark(function _callee2() {
    var version, answer;
    return (_regenerator || _load_regenerator()).default.wrap(function _callee2$(_context2) {
      while (1) {
        switch (_context2.prev = _context2.next) {
          case 0:
            _context2.prev = 0;
            _context2.next = 3;
            return (0, (_spawnAsync || _load_spawnAsync()).default)('yarnpkg', ['--version']);

          case 3:
            version = _context2.sent.stdout.trim();

            if ((_semver || _load_semver()).default.valid(version)) {
              _context2.next = 6;
              break;
            }

            return _context2.abrupt('return', false);

          case 6:
            _context2.next = 8;
            return (0, (_prompt || _load_prompt()).default)({
              type: 'confirm',
              name: 'useYarn',
              message: 'Yarn v' + version + ' found. Use Yarn to install dependencies?'
            }, {
              nonInteractiveHelp: 'Please specify either --npm or --yarn to choose the installation method.'
            });

          case 8:
            answer = _context2.sent;
            return _context2.abrupt('return', answer.useYarn);

          case 12:
            _context2.prev = 12;
            _context2.t0 = _context2['catch'](0);
            return _context2.abrupt('return', false);

          case 15:
          case 'end':
            return _context2.stop();
        }
      }
    }, _callee2, this, [[0, 12]]);
  }));

  return function shouldUseYarnAsync() {
    return _ref4.apply(this, arguments);
  };
}();

var promptForBareConfig = function () {
  var _ref5 = (0, (_asyncToGenerator2 || _load_asyncToGenerator()).default)( /*#__PURE__*/(_regenerator || _load_regenerator()).default.mark(function _callee3(parentDir, dirName, options) {
    var projectName, validationResult, _config, _ref6, values, config, _iteratorNormalCompletion, _didIteratorError, _iteratorError, _iterator, _step, key;

    return (_regenerator || _load_regenerator()).default.wrap(function _callee3$(_context3) {
      while (1) {
        switch (_context3.prev = _context3.next) {
          case 0:
            projectName = undefined;

            if (!dirName) {
              _context3.next = 8;
              break;
            }

            validationResult = validateProjectName(dirName);

            if (!(validationResult === true)) {
              _context3.next = 7;
              break;
            }

            projectName = dirName;
            _context3.next = 8;
            break;

          case 7:
            throw new (_CommandError || _load_CommandError()).default('INVALID_PROJECT_NAME', validationResult);

          case 8:
            if (!(options.parent && options.parent.nonInteractive)) {
              _context3.next = 16;
              break;
            }

            _config = {
              name: projectName
            };

            if (!(!(0, (_isString || _load_isString()).default)(options.name) || options.name === '')) {
              _context3.next = 14;
              break;
            }

            throw new (_CommandError || _load_CommandError()).default('NON_INTERACTIVE', '--name: argument is required in non-interactive mode.');

          case 14:
            _config.displayName = options.name;
            return _context3.abrupt('return', _config);

          case 16:
            _context3.next = 18;
            return new (_enquirer || _load_enquirer()).Snippet({
              name: 'app',
              message: 'Please enter names for your project.',
              required: true,
              fields: [{
                name: 'name',
                message: 'The name of the Android Studio and Xcode projects to be created',
                initial: projectName,
                filter: function filter(name) {
                  return name.trim();
                },
                validate: function validate(name) {
                  return validateProjectName(name);
                },
                required: true
              }, {
                name: 'displayName',
                message: 'The name of your app visible on the home screen',
                initial: (0, (_isString || _load_isString()).default)(options.name) ? options.name : undefined,
                filter: function filter(name) {
                  return name.trim();
                },
                required: true
              }],
              initial: 'name',
              template: (0, (_stringify || _load_stringify()).default)({
                name: '{{name}}',
                displayName: '{{displayName}}'
              }, null, 2)
            }).run();

          case 18:
            _ref6 = _context3.sent;
            values = _ref6.values;
            config = {};
            _iteratorNormalCompletion = true;
            _didIteratorError = false;
            _iteratorError = undefined;
            _context3.prev = 24;

            for (_iterator = (0, (_getIterator2 || _load_getIterator()).default)((0, (_keys || _load_keys()).default)(values)); !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
              key = _step.value;

              (0, (_set || _load_set()).default)(config, key, values[key]);
            }
            _context3.next = 32;
            break;

          case 28:
            _context3.prev = 28;
            _context3.t0 = _context3['catch'](24);
            _didIteratorError = true;
            _iteratorError = _context3.t0;

          case 32:
            _context3.prev = 32;
            _context3.prev = 33;

            if (!_iteratorNormalCompletion && _iterator.return) {
              _iterator.return();
            }

          case 35:
            _context3.prev = 35;

            if (!_didIteratorError) {
              _context3.next = 38;
              break;
            }

            throw _iteratorError;

          case 38:
            return _context3.finish(35);

          case 39:
            return _context3.finish(32);

          case 40:
            return _context3.abrupt('return', config);

          case 41:
          case 'end':
            return _context3.stop();
        }
      }
    }, _callee3, this, [[24, 28, 32, 40], [33,, 35, 39]]);
  }));

  return function promptForBareConfig(_x3, _x4, _x5) {
    return _ref5.apply(this, arguments);
  };
}();

var promptForManagedConfig = function () {
  var _ref7 = (0, (_asyncToGenerator2 || _load_asyncToGenerator()).default)( /*#__PURE__*/(_regenerator || _load_regenerator()).default.mark(function _callee4(parentDir, dirName, options) {
    var _config2, _ref8, values, config, _iteratorNormalCompletion2, _didIteratorError2, _iteratorError2, _iterator2, _step2, key;

    return (_regenerator || _load_regenerator()).default.wrap(function _callee4$(_context4) {
      while (1) {
        switch (_context4.prev = _context4.next) {
          case 0:
            if (!(options.parent && options.parent.nonInteractive)) {
              _context4.next = 8;
              break;
            }

            _config2 = {
              slug: dirName
            };

            if (!(!(0, (_isString || _load_isString()).default)(options.name) || options.name === '')) {
              _context4.next = 6;
              break;
            }

            throw new (_CommandError || _load_CommandError()).default('NON_INTERACTIVE', '--name: argument is required in non-interactive mode.');

          case 6:
            _config2.name = options.name;
            return _context4.abrupt('return', _config2);

          case 8:
            _context4.next = 10;
            return new (_enquirer || _load_enquirer()).Snippet({
              name: 'expo',
              message: 'Please enter a few initial configuration values.\n  Read more: https://docs.expo.io/versions/latest/workflow/configuration/',
              required: true,
              fields: [{
                name: 'name',
                message: 'The name of your app visible on the home screen',
                initial: (0, (_isString || _load_isString()).default)(options.name) ? options.name : undefined,
                filter: function filter(name) {
                  return name.trim();
                },
                required: true
              }, {
                name: 'slug',
                message: 'A URL friendly name for your app',
                initial: dirName,
                filter: function filter(name) {
                  return name.trim();
                },
                validate: function validate(name) {
                  return validateName(parentDir, name);
                },
                required: true
              }],
              initial: 'slug',
              template: (0, (_stringify || _load_stringify()).default)({
                expo: {
                  name: '{{name}}',
                  slug: '{{slug}}'
                }
              }, null, 2)
            }).run();

          case 10:
            _ref8 = _context4.sent;
            values = _ref8.values;
            config = {};
            _iteratorNormalCompletion2 = true;
            _didIteratorError2 = false;
            _iteratorError2 = undefined;
            _context4.prev = 16;

            for (_iterator2 = (0, (_getIterator2 || _load_getIterator()).default)((0, (_keys || _load_keys()).default)(values)); !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
              key = _step2.value;

              (0, (_set || _load_set()).default)(config, key, values[key]);
            }
            _context4.next = 24;
            break;

          case 20:
            _context4.prev = 20;
            _context4.t0 = _context4['catch'](16);
            _didIteratorError2 = true;
            _iteratorError2 = _context4.t0;

          case 24:
            _context4.prev = 24;
            _context4.prev = 25;

            if (!_iteratorNormalCompletion2 && _iterator2.return) {
              _iterator2.return();
            }

          case 27:
            _context4.prev = 27;

            if (!_didIteratorError2) {
              _context4.next = 30;
              break;
            }

            throw _iteratorError2;

          case 30:
            return _context4.finish(27);

          case 31:
            return _context4.finish(24);

          case 32:
            return _context4.abrupt('return', { expo: config });

          case 33:
          case 'end':
            return _context4.stop();
        }
      }
    }, _callee4, this, [[16, 20, 24, 32], [25,, 27, 31]]);
  }));

  return function promptForManagedConfig(_x6, _x7, _x8) {
    return _ref7.apply(this, arguments);
  };
}();

var _chalk;

function _load_chalk() {
  return _chalk = _interopRequireDefault(require('chalk'));
}

var _fs = _interopRequireDefault(require('fs'));

var _xdl;

function _load_xdl() {
  return _xdl = require('@expo/xdl');
}

var _isString;

function _load_isString() {
  return _isString = _interopRequireDefault(require('lodash/isString'));
}

var _padEnd;

function _load_padEnd() {
  return _padEnd = _interopRequireDefault(require('lodash/padEnd'));
}

var _enquirer;

function _load_enquirer() {
  return _enquirer = require('enquirer');
}

var _semver;

function _load_semver() {
  return _semver = _interopRequireDefault(require('semver'));
}

var _set;

function _load_set() {
  return _set = _interopRequireDefault(require('lodash/set'));
}

var _spawnAsync;

function _load_spawnAsync() {
  return _spawnAsync = _interopRequireDefault(require('@expo/spawn-async'));
}

var _npmPackageArg;

function _load_npmPackageArg() {
  return _npmPackageArg = _interopRequireDefault(require('npm-package-arg'));
}

var _pacote;

function _load_pacote() {
  return _pacote = _interopRequireDefault(require('pacote'));
}

var _trimStart;

function _load_trimStart() {
  return _trimStart = _interopRequireDefault(require('lodash/trimStart'));
}

var _wordwrap;

function _load_wordwrap() {
  return _wordwrap = _interopRequireDefault(require('wordwrap'));
}

var _path = _interopRequireDefault(require('path'));

var _prompt;

function _load_prompt() {
  return _prompt = _interopRequireDefault(require('../prompt'));
}

var _log;

function _load_log() {
  return _log = _interopRequireDefault(require('../log'));
}

var _CommandError;

function _load_CommandError() {
  return _CommandError = _interopRequireDefault(require('../CommandError'));
}

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var FEATURED_TEMPLATES = ['----- Managed workflow -----', {
  shortName: 'blank',
  name: 'expo-template-blank',
  description: 'minimal dependencies to run and an empty root component'
}, {
  shortName: 'blank (TypeScript)',
  name: 'expo-template-blank-typescript',
  description: 'same as blank but with TypeScript configuration'
}, {
  shortName: 'tabs',
  name: 'expo-template-tabs',
  description: 'several example screens and tabs using react-navigation'
}, '----- Bare workflow -----', {
  shortName: 'bare-minimum',
  name: 'expo-template-bare-minimum',
  description: 'minimal setup for using unimodules',
  bare: true
}];

var BARE_WORKFLOW_TEMPLATES = ['expo-template-bare-minimum', 'expo-template-bare-foundation,'];

function validateName(parentDir, name) {
  if (!/^[a-z0-9@.\-_]+$/i.test(name)) {
    return 'The project name can only contain URL-friendly characters.';
  }
  if (typeof name !== 'string' || name === '') {
    return 'The project name can not be empty.';
  }
  var dir = _path.default.join(parentDir, name);
  if (!isNonExistentOrEmptyDir(dir)) {
    return 'The path "' + dir + '" already exists. Please choose a different parent directory or project name.';
  }
  return true;
}

function validateProjectName(name) {
  return (/^[a-z0-9]+$/i.test(name) || 'Project name can only include ASCII characters A-Z, a-z and 0-9'
  );
}

function isNonExistentOrEmptyDir(dir) {
  try {
    return _fs.default.statSync(dir).isDirectory() && _fs.default.readdirSync(dir).length === 0;
  } catch (error) {
    if (error.code === 'ENOENT') {
      return true;
    }
    throw error;
  }
}

exports.default = function (program) {
  program.command('init [project-dir]').alias('i').description('Initializes a directory with an example project. Run it without any options and you will be prompted for the name and type.').option('-t, --template [name]', 'Specify which template to use. Valid options are "blank", "tabs", "bare-minimum" or any npm package that includes an Expo project template.').option('--npm', 'Use npm to install dependencies. (default when Yarn is not installed)').option('--yarn', 'Use Yarn to install dependencies. (default when Yarn is installed)').option('--workflow [name]', '(Deprecated) The workflow to use. managed (default) or advanced').option('--name [name]', 'The name of your app visible on the home screen.').option('--android-package [name]', 'The package name for your Android app.').option('--ios-bundle-identifier [name]', 'The bundle identifier for your iOS app.').asyncAction(action);
};

module.exports = exports['default'];
//# sourceMappingURL=../__sourcemaps__/commands/init.js.map
