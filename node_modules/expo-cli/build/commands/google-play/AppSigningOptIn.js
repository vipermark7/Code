'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends2;

function _load_extends() {
  return _extends2 = _interopRequireDefault(require('babel-runtime/helpers/extends'));
}

var _regenerator;

function _load_regenerator() {
  return _regenerator = _interopRequireDefault(require('babel-runtime/regenerator'));
}

var _asyncToGenerator2;

function _load_asyncToGenerator() {
  return _asyncToGenerator2 = _interopRequireDefault(require('babel-runtime/helpers/asyncToGenerator'));
}

var _classCallCheck2;

function _load_classCallCheck() {
  return _classCallCheck2 = _interopRequireDefault(require('babel-runtime/helpers/classCallCheck'));
}

var _createClass2;

function _load_createClass() {
  return _createClass2 = _interopRequireDefault(require('babel-runtime/helpers/createClass'));
}

var tryUnlink = function () {
  var _ref12 = (0, (_asyncToGenerator2 || _load_asyncToGenerator()).default)( /*#__PURE__*/(_regenerator || _load_regenerator()).default.mark(function _callee7(file) {
    return (_regenerator || _load_regenerator()).default.wrap(function _callee7$(_context7) {
      while (1) {
        switch (_context7.prev = _context7.next) {
          case 0:
            _context7.prev = 0;
            _context7.next = 3;
            return (_fsExtra || _load_fsExtra()).default.unlink(file);

          case 3:
            _context7.next = 7;
            break;

          case 5:
            _context7.prev = 5;
            _context7.t0 = _context7['catch'](0);

          case 7:
          case 'end':
            return _context7.stop();
        }
      }
    }, _callee7, this, [[0, 5]]);
  }));

  return function tryUnlink(_x7) {
    return _ref12.apply(this, arguments);
  };
}();

var _path = _interopRequireDefault(require('path'));

var _chalk;

function _load_chalk() {
  return _chalk = _interopRequireDefault(require('chalk'));
}

var _fsExtra;

function _load_fsExtra() {
  return _fsExtra = _interopRequireDefault(require('fs-extra'));
}

var _lodash;

function _load_lodash() {
  return _lodash = _interopRequireDefault(require('lodash'));
}

var _xdl;

function _load_xdl() {
  return _xdl = require('@expo/xdl');
}

var _log;

function _load_log() {
  return _log = _interopRequireDefault(require('../../log'));
}

var _prompt;

function _load_prompt() {
  return _prompt = _interopRequireDefault(require('../../prompt'));
}

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var AppSigningOptInProcess = function () {
  // private signing key and public cert extracted from signKeystore and encrypted using Google Play encryption key.


  // Keystore used to sign production app
  function AppSigningOptInProcess(projectDir) {
    (0, (_classCallCheck2 || _load_classCallCheck()).default)(this, AppSigningOptInProcess);
    this.projectDir = '';
    this.signKeystore = '';
    this.uploadKeystore = '';
    this.privateSigningKey = '';
    this.publicUploadCert = '';
    this.uploadKeystoreCredentials = {};
    this.signKeystoreCredentials = {};

    this.projectDir = projectDir;
  }
  // public cert extracted from upload keystore

  // Keystore used to sign app before uploading to Google Play store


  (0, (_createClass2 || _load_createClass()).default)(AppSigningOptInProcess, [{
    key: 'run',
    value: function () {
      var _ref = (0, (_asyncToGenerator2 || _load_asyncToGenerator()).default)( /*#__PURE__*/(_regenerator || _load_regenerator()).default.mark(function _callee() {
        var _ref2, username, _ref3, _ref3$exp, exp;

        return (_regenerator || _load_regenerator()).default.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                _context.next = 2;
                return (_xdl || _load_xdl()).User.ensureLoggedInAsync();

              case 2:
                _context.t0 = _context.sent;

                if (_context.t0) {
                  _context.next = 5;
                  break;
                }

                _context.t0 = {};

              case 5:
                _ref2 = _context.t0;
                username = _ref2.username;
                _context.next = 9;
                return (_xdl || _load_xdl()).ProjectUtils.readConfigJsonAsync(this.projectDir);

              case 9:
                _ref3 = _context.sent;
                _ref3$exp = _ref3.exp;
                exp = _ref3$exp === undefined ? {} : _ref3$exp;
                _context.next = 14;
                return this.init(exp.slug);

              case 14:

                (0, (_log || _load_log()).default)('Saving current keystore to ' + this.signKeystore + '...');
                _context.next = 17;
                return (_xdl || _load_xdl()).Credentials.Android.backupExistingCredentials({
                  outputPath: this.signKeystore,
                  username: username,
                  experienceName: '@' + username + '/' + exp.slug
                });

              case 17:
                this.signKeystoreCredentials = _context.sent;
                _context.prev = 18;
                _context.next = 21;
                return this.exportPrivateKey();

              case 21:
                _context.next = 23;
                return this.prepareKeystores(username, exp);

              case 23:
                _context.next = 31;
                break;

              case 25:
                _context.prev = 25;
                _context.t1 = _context['catch'](18);

                (_log || _load_log()).default.error(_context.t1);
                _context.next = 30;
                return this.cleanup(true);

              case 30:
                return _context.abrupt('return');

              case 31:
                _context.next = 33;
                return this.afterStoreSubmit(username, exp);

              case 33:
              case 'end':
                return _context.stop();
            }
          }
        }, _callee, this, [[18, 25]]);
      }));

      function run() {
        return _ref.apply(this, arguments);
      }

      return run;
    }()
  }, {
    key: 'init',
    value: function () {
      var _ref4 = (0, (_asyncToGenerator2 || _load_asyncToGenerator()).default)( /*#__PURE__*/(_regenerator || _load_regenerator()).default.mark(function _callee2(slug) {
        var confirmQuestion, _ref5, confirmEnabled;

        return (_regenerator || _load_regenerator()).default.wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                (_log || _load_log()).default.warn('Make sure you are not using Google Play App Signing already as this process will remove your current keystore from Expo servers.');
                (0, (_log || _load_log()).default)('You can check whether you are using Google Play App Signing here: ' + (_chalk || _load_chalk()).default.underline('https://play.google.com/apps/publish') + '. Select your app and go to "Release management" \u2192 "App signing" tab. If you are already using Google Play App Signing, there will be a message that says, "App Signing by Google Play is enabled for this app", at the top of the page.');
                confirmQuestion = [{
                  type: 'confirm',
                  name: 'confirm',
                  message: 'Is Google Play App Signing enabled for this app?'
                }];
                _context2.next = 5;
                return (0, (_prompt || _load_prompt()).default)(confirmQuestion);

              case 5:
                _ref5 = _context2.sent;
                confirmEnabled = _ref5.confirm;

                if (confirmEnabled) {
                  (0, (_log || _load_log()).default)('Google Play App Signing is already enabled; there is nothing to do here.');
                  process.exit(0);
                }

                this.signKeystore = _path.default.join(this.projectDir, slug + '_sign.jks.bak');
                this.uploadKeystore = _path.default.join(this.projectDir, slug + '_upload.jks.tmp');
                this.privateSigningKey = _path.default.join(this.projectDir, slug + '_private_sign_key');
                this.publicUploadCert = _path.default.join(this.projectDir, slug + '_upload_cert.pem');
                _context2.next = 14;
                return this.cleanup(true);

              case 14:
              case 'end':
                return _context2.stop();
            }
          }
        }, _callee2, this);
      }));

      function init(_x) {
        return _ref4.apply(this, arguments);
      }

      return init;
    }()
  }, {
    key: 'exportPrivateKey',
    value: function () {
      var _ref6 = (0, (_asyncToGenerator2 || _load_asyncToGenerator()).default)( /*#__PURE__*/(_regenerator || _load_regenerator()).default.mark(function _callee3() {
        var encryptKeyQuestion, _ref7, encryptionKey;

        return (_regenerator || _load_regenerator()).default.wrap(function _callee3$(_context3) {
          while (1) {
            switch (_context3.prev = _context3.next) {
              case 0:
                (0, (_log || _load_log()).default)('Go to the "App signing" tab in the Google Play console, select "' + (_chalk || _load_chalk()).default.bold('Export and upload a key (not using a Java keystore)') + '" and copy the encryption key that is listed in step 1.');
                encryptKeyQuestion = [{
                  type: 'input',
                  name: 'encryptionKey',
                  message: 'Google Play encryption key',
                  validate: function validate(value) {
                    return value.length === 136 && /^[A-Fa-f0-9]+$/.test(value) || 'Encryption key needs to be a hex-encoded 68-byte string (a 4-byte identity followed by a 64-byte P-256 point).';
                  }
                }];
                _context3.next = 4;
                return (0, (_prompt || _load_prompt()).default)(encryptKeyQuestion);

              case 4:
                _ref7 = _context3.sent;
                encryptionKey = _ref7.encryptionKey;
                _context3.next = 8;
                return (_xdl || _load_xdl()).Credentials.Android.exportPrivateKey((0, (_extends2 || _load_extends()).default)({ keystorePath: this.signKeystore }, this.signKeystoreCredentials), encryptionKey, this.privateSigningKey, (_log || _load_log()).default);

              case 8:
              case 'end':
                return _context3.stop();
            }
          }
        }, _callee3, this);
      }));

      function exportPrivateKey() {
        return _ref6.apply(this, arguments);
      }

      return exportPrivateKey;
    }()
  }, {
    key: 'prepareKeystores',
    value: function () {
      var _ref8 = (0, (_asyncToGenerator2 || _load_asyncToGenerator()).default)( /*#__PURE__*/(_regenerator || _load_regenerator()).default.mark(function _callee4(username, exp) {
        return (_regenerator || _load_regenerator()).default.wrap(function _callee4$(_context4) {
          while (1) {
            switch (_context4.prev = _context4.next) {
              case 0:
                (0, (_log || _load_log()).default)('Saving upload keystore to ' + this.uploadKeystore + '...');
                _context4.next = 3;
                return (_xdl || _load_xdl()).Credentials.Android.generateUploadKeystore(this.uploadKeystore, (_lodash || _load_lodash()).default.get(exp, 'android.package'), '@' + username + '/' + exp.slug);

              case 3:
                this.uploadKeystoreCredentials = _context4.sent;


                (0, (_log || _load_log()).default)('Saving upload certificate to ' + this.publicUploadCert);
                _context4.next = 7;
                return (_xdl || _load_xdl()).Credentials.Android.exportCertBase64(this.uploadKeystore, this.uploadKeystoreCredentials.keystorePassword, this.uploadKeystoreCredentials.keyAlias, this.publicUploadCert);

              case 7:
                _context4.next = 9;
                return (_xdl || _load_xdl()).Credentials.Android.logKeystoreCredentials(this.uploadKeystoreCredentials, 'Credentials for upload keystore', (_log || _load_log()).default);

              case 9:

                (0, (_log || _load_log()).default)('App signing certificate');
                _context4.next = 12;
                return (_xdl || _load_xdl()).Credentials.Android.logKeystoreHashes((0, (_extends2 || _load_extends()).default)({
                  keystorePath: this.signKeystore
                }, this.signKeystoreCredentials), (_log || _load_log()).default);

              case 12:
                (0, (_log || _load_log()).default)('Upload certificate');
                _context4.next = 15;
                return (_xdl || _load_xdl()).Credentials.Android.logKeystoreHashes((0, (_extends2 || _load_extends()).default)({ keystorePath: this.uploadKeystore }, this.uploadKeystoreCredentials), (_log || _load_log()).default);

              case 15:
              case 'end':
                return _context4.stop();
            }
          }
        }, _callee4, this);
      }));

      function prepareKeystores(_x2, _x3) {
        return _ref8.apply(this, arguments);
      }

      return prepareKeystores;
    }()
  }, {
    key: 'afterStoreSubmit',
    value: function () {
      var _ref9 = (0, (_asyncToGenerator2 || _load_asyncToGenerator()).default)( /*#__PURE__*/(_regenerator || _load_regenerator()).default.mark(function _callee5(username, exp) {
        var _ref10, confirmUpload;

        return (_regenerator || _load_regenerator()).default.wrap(function _callee5$(_context5) {
          while (1) {
            switch (_context5.prev = _context5.next) {
              case 0:
                (_log || _load_log()).default.warn('On the previously opened Google Play console page, upload ' + (_chalk || _load_chalk()).default.underline(this.privateSigningKey) + ' as "' + (_chalk || _load_chalk()).default.bold('APP SIGNING PRIVATE KEY') + '" and ' + (_chalk || _load_chalk()).default.underline(this.publicUploadCert) + ' as "' + (_chalk || _load_chalk()).default.bold('UPLOAD KEY PUBLIC CERTIFICATE') + '"');

                (_log || _load_log()).default.warn('The next step will ' + (_chalk || _load_chalk()).default.red('remove your current keystore from Expo servers') + '. Make sure that private key is uploaded successfully and compare the hashes displayed above with the ones printed in the console.');
                _context5.next = 4;
                return (0, (_prompt || _load_prompt()).default)([{
                  type: 'confirm',
                  name: 'confirm',
                  message: 'Is App Signing by Google Play enabled succesfully?',
                  default: false
                }]);

              case 4:
                _ref10 = _context5.sent;
                confirmUpload = _ref10.confirm;

                if (confirmUpload) {
                  _context5.next = 11;
                  break;
                }

                _context5.next = 9;
                return this.cleanup(true);

              case 9:
                (_log || _load_log()).default.error('Aborting, no changes were applied');
                process.exit(1);

              case 11:
                _context5.t0 = (_xdl || _load_xdl()).Credentials;
                _context5.t1 = this.uploadKeystoreCredentials.keystorePassword;
                _context5.t2 = this.uploadKeystoreCredentials.keyAlias;
                _context5.t3 = this.uploadKeystoreCredentials.keyPassword;
                _context5.next = 17;
                return (_fsExtra || _load_fsExtra()).default.readFile(this.uploadKeystore);

              case 17:
                _context5.t4 = _context5.sent.toString('base64');
                _context5.t5 = {
                  keystorePassword: _context5.t1,
                  keystoreAlias: _context5.t2,
                  keyPassword: _context5.t3,
                  keystore: _context5.t4
                };
                _context5.t6 = [];
                _context5.t7 = {
                  platform: 'android',
                  username: username,
                  experienceName: '@' + username + '/' + exp.slug
                };
                _context5.next = 23;
                return _context5.t0.updateCredentialsForPlatform.call(_context5.t0, 'android', _context5.t5, _context5.t6, _context5.t7);

              case 23:

                (0, (_log || _load_log()).default)('The original keystore is stored in ' + this.signKeystore + '; remove it only if you are sure that Google Play App Signing is enabled for your app.');
                (_xdl || _load_xdl()).Credentials.Android.logKeystoreCredentials(this.signKeystoreCredentials, 'Credentials for original keystore', (_log || _load_log()).default);
                _context5.next = 27;
                return this.cleanup();

              case 27:
              case 'end':
                return _context5.stop();
            }
          }
        }, _callee5, this);
      }));

      function afterStoreSubmit(_x4, _x5) {
        return _ref9.apply(this, arguments);
      }

      return afterStoreSubmit;
    }()
  }, {
    key: 'cleanup',
    value: function () {
      var _ref11 = (0, (_asyncToGenerator2 || _load_asyncToGenerator()).default)( /*#__PURE__*/(_regenerator || _load_regenerator()).default.mark(function _callee6() {
        var all = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;
        return (_regenerator || _load_regenerator()).default.wrap(function _callee6$(_context6) {
          while (1) {
            switch (_context6.prev = _context6.next) {
              case 0:
                tryUnlink(this.uploadKeystore);
                tryUnlink(this.publicUploadCert);
                tryUnlink(this.privateSigningKey);
                if (all) {
                  tryUnlink(this.signKeystore);
                }

              case 4:
              case 'end':
                return _context6.stop();
            }
          }
        }, _callee6, this);
      }));

      function cleanup() {
        return _ref11.apply(this, arguments);
      }

      return cleanup;
    }()
  }]);
  return AppSigningOptInProcess;
}();

exports.default = AppSigningOptInProcess;
module.exports = exports['default'];
//# sourceMappingURL=../../__sourcemaps__/commands/google-play/AppSigningOptIn.js.map
