'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _regenerator;

function _load_regenerator() {
  return _regenerator = _interopRequireDefault(require('babel-runtime/regenerator'));
}

var _asyncToGenerator2;

function _load_asyncToGenerator() {
  return _asyncToGenerator2 = _interopRequireDefault(require('babel-runtime/helpers/asyncToGenerator'));
}

var getFromParams = function () {
  var _ref = (0, (_asyncToGenerator2 || _load_asyncToGenerator()).default)( /*#__PURE__*/(_regenerator || _load_regenerator()).default.mark(function _callee(options) {
    var distPassword, distP12Path, pushP8Path, pushId, provisioningProfilePath, all, withoutEmptyObjects;
    return (_regenerator || _load_regenerator()).default.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            distPassword = process.env.EXPO_IOS_DIST_P12_PASSWORD;
            distP12Path = options.distP12Path, pushP8Path = options.pushP8Path, pushId = options.pushId, provisioningProfilePath = options.provisioningProfilePath;

            if (!_isOnlyOneSet(distP12Path, distPassword)) {
              _context.next = 4;
              break;
            }

            throw new Error('You have to both pass --dist-p12-path parameter and set EXPO_IOS_DIST_P12_PASSWORD environment variable.');

          case 4:
            if (!_isOnlyOneSet(pushP8Path, pushId)) {
              _context.next = 6;
              break;
            }

            throw new Error('You have to pass both --push-p8-path and --push-id parameters.');

          case 6:
            _context.t0 = distP12Path;

            if (!_context.t0) {
              _context.next = 11;
              break;
            }

            _context.next = 10;
            return (_fsExtra || _load_fsExtra()).default.readFile(distP12Path, 'base64');

          case 10:
            _context.t0 = _context.sent;

          case 11:
            _context.t1 = _context.t0;
            _context.t2 = distPassword;
            _context.t3 = {
              certP12: _context.t1,
              certPassword: _context.t2
            };
            _context.t4 = pushP8Path;

            if (!_context.t4) {
              _context.next = 19;
              break;
            }

            _context.next = 18;
            return (_fsExtra || _load_fsExtra()).default.readFile(pushP8Path, 'utf8');

          case 18:
            _context.t4 = _context.sent;

          case 19:
            _context.t5 = _context.t4;
            _context.t6 = pushId;
            _context.t7 = {
              apnsKeyP8: _context.t5,
              apnsKeyId: _context.t6
            };
            _context.t8 = provisioningProfilePath;

            if (!_context.t8) {
              _context.next = 27;
              break;
            }

            _context.next = 26;
            return (_fsExtra || _load_fsExtra()).default.readFile(provisioningProfilePath, 'base64');

          case 26:
            _context.t8 = _context.sent;

          case 27:
            _context.t9 = _context.t8;
            all = {
              distributionCert: _context.t3,
              pushKey: _context.t7,
              provisioningProfile: _context.t9
            };
            withoutEmptyObjects = (0, (_mapValues || _load_mapValues()).default)(all, function (value) {
              if ((0, (_isObject || _load_isObject()).default)(value)) {
                var cleanedValue = (0, (_pickBy || _load_pickBy()).default)(value);
                return (0, (_isEmpty || _load_isEmpty()).default)(cleanedValue) ? null : cleanedValue;
              } else {
                return value;
              }
            });
            return _context.abrupt('return', (0, (_pickBy || _load_pickBy()).default)(withoutEmptyObjects));

          case 31:
          case 'end':
            return _context.stop();
        }
      }
    }, _callee, this);
  }));

  return function getFromParams(_x) {
    return _ref.apply(this, arguments);
  };
}();

var _mapValues;

function _load_mapValues() {
  return _mapValues = _interopRequireDefault(require('lodash/mapValues'));
}

var _isObject;

function _load_isObject() {
  return _isObject = _interopRequireDefault(require('lodash/isObject'));
}

var _isEmpty;

function _load_isEmpty() {
  return _isEmpty = _interopRequireDefault(require('lodash/isEmpty'));
}

var _pickBy;

function _load_pickBy() {
  return _pickBy = _interopRequireDefault(require('lodash/pickBy'));
}

var _fsExtra;

function _load_fsExtra() {
  return _fsExtra = _interopRequireDefault(require('fs-extra'));
}

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var _isOnlyOneSet = function _isOnlyOneSet(a, b) {
  return a && !b || b && !a;
};

exports.default = getFromParams;
module.exports = exports['default'];
//# sourceMappingURL=../../../../../__sourcemaps__/commands/build/ios/credentials/prompt/getFromParams.js.map
