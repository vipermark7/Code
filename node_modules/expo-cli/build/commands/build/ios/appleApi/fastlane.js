'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.WSL_BASH_PATH = exports.runAction = exports.travelingFastlane = undefined;

var _toConsumableArray2;

function _load_toConsumableArray() {
  return _toConsumableArray2 = _interopRequireDefault(require('babel-runtime/helpers/toConsumableArray'));
}

var _regenerator;

function _load_regenerator() {
  return _regenerator = _interopRequireDefault(require('babel-runtime/regenerator'));
}

var _stringify;

function _load_stringify() {
  return _stringify = _interopRequireDefault(require('babel-runtime/core-js/json/stringify'));
}

var _objectWithoutProperties2;

function _load_objectWithoutProperties() {
  return _objectWithoutProperties2 = _interopRequireDefault(require('babel-runtime/helpers/objectWithoutProperties'));
}

var _slicedToArray2;

function _load_slicedToArray() {
  return _slicedToArray2 = _interopRequireDefault(require('babel-runtime/helpers/slicedToArray'));
}

var _asyncToGenerator2;

function _load_asyncToGenerator() {
  return _asyncToGenerator2 = _interopRequireDefault(require('babel-runtime/helpers/asyncToGenerator'));
}

var runAction = function () {
  var _ref = (0, (_asyncToGenerator2 || _load_asyncToGenerator()).default)( /*#__PURE__*/(_regenerator || _load_regenerator()).default.mark(function _callee(fastlaneAction, args) {
    var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};

    var _options$pipeStdout, pipeStdout, _getCommandAndArgsFor, _getCommandAndArgsFor2, command, commandArgs, _ref2, stderr, _JSON$parse, result, rest, reason, rawDump, err;

    return (_regenerator || _load_regenerator()).default.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            _options$pipeStdout = options.pipeStdout, pipeStdout = _options$pipeStdout === undefined ? false : _options$pipeStdout;
            _getCommandAndArgsFor = getCommandAndArgsForPlatform(fastlaneAction, args), _getCommandAndArgsFor2 = (0, (_slicedToArray2 || _load_slicedToArray()).default)(_getCommandAndArgsFor, 2), command = _getCommandAndArgsFor2[0], commandArgs = _getCommandAndArgsFor2[1];
            _context.next = 4;
            return (0, (_spawnAsync || _load_spawnAsync()).default)(command, commandArgs, {
              stdio: ['inherit', pipeStdout ? 'inherit' : 'pipe', 'pipe']
            });

          case 4:
            _ref2 = _context.sent;
            stderr = _ref2.stderr;
            _JSON$parse = JSON.parse(stderr.trim()), result = _JSON$parse.result, rest = (0, (_objectWithoutProperties2 || _load_objectWithoutProperties()).default)(_JSON$parse, ['result']);

            if (!(result === 'success')) {
              _context.next = 11;
              break;
            }

            return _context.abrupt('return', rest);

          case 11:
            reason = rest.reason, rawDump = rest.rawDump;
            err = new Error('Reason: ' + reason + ', raw: ' + (0, (_stringify || _load_stringify()).default)(rawDump));

            err.rawDump = rawDump;
            throw err;

          case 15:
          case 'end':
            return _context.stop();
        }
      }
    }, _callee, this);
  }));

  return function runAction(_x, _x2) {
    return _ref.apply(this, arguments);
  };
}();

var _spawnAsync;

function _load_spawnAsync() {
  return _spawnAsync = _interopRequireDefault(require('@expo/spawn-async'));
}

var _slash;

function _load_slash() {
  return _slash = _interopRequireDefault(require('slash'));
}

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var travelingFastlane = process.platform === 'darwin' ? require('@expo/traveling-fastlane-darwin')() : require('@expo/traveling-fastlane-linux')();

var WSL_BASH_PATH = 'C:\\Windows\\system32\\bash.exe';
var WSL_BASH = 'bash';
var WSL_ONLY_PATH = 'PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin';

var getCommandAndArgsForPlatform = function getCommandAndArgsForPlatform(fastlaneAction, args) {
  if (process.platform === 'win32') {
    var command = WSL_BASH;
    var argsJoined = args.map(function (i) {
      return '"' + i + '"';
    }).join(' ');
    var commandArgs = ['-c', WSL_ONLY_PATH + ' ' + windowsToWSLPath(fastlaneAction) + ' ' + argsJoined];
    return [command, commandArgs];
  } else {
    var _command = fastlaneAction;
    var _commandArgs = [].concat((0, (_toConsumableArray2 || _load_toConsumableArray()).default)(args));
    return [_command, _commandArgs];
  }
};

var windowsToWSLPath = function windowsToWSLPath(_path) {
  var slashPath = (0, (_slash || _load_slash()).default)(_path);
  var diskLetter = _path[0].toLowerCase();
  var pathOnDisk = slashPath.slice(2);
  return '/mnt/' + diskLetter + pathOnDisk;
};

exports.travelingFastlane = travelingFastlane;
exports.runAction = runAction;
exports.WSL_BASH_PATH = WSL_BASH_PATH;
//# sourceMappingURL=../../../../__sourcemaps__/commands/build/ios/appleApi/fastlane.js.map
