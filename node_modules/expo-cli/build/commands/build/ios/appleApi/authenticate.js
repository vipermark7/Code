'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _slicedToArray2;

function _load_slicedToArray() {
  return _slicedToArray2 = _interopRequireDefault(require('babel-runtime/helpers/slicedToArray'));
}

var _regenerator;

function _load_regenerator() {
  return _regenerator = _interopRequireDefault(require('babel-runtime/regenerator'));
}

var _asyncToGenerator2;

function _load_asyncToGenerator() {
  return _asyncToGenerator2 = _interopRequireDefault(require('babel-runtime/helpers/asyncToGenerator'));
}

var _requestAppleIdCreds = function () {
  var _ref4 = (0, (_asyncToGenerator2 || _load_asyncToGenerator()).default)( /*#__PURE__*/(_regenerator || _load_regenerator()).default.mark(function _callee2(options) {
    return (_regenerator || _load_regenerator()).default.wrap(function _callee2$(_context2) {
      while (1) {
        switch (_context2.prev = _context2.next) {
          case 0:
            _context2.t0 = _getAppleIdFromParams(options);

            if (_context2.t0) {
              _context2.next = 5;
              break;
            }

            _context2.next = 4;
            return _promptForAppleId(options);

          case 4:
            _context2.t0 = _context2.sent;

          case 5:
            return _context2.abrupt('return', _context2.t0);

          case 6:
          case 'end':
            return _context2.stop();
        }
      }
    }, _callee2, this);
  }));

  return function _requestAppleIdCreds(_x2) {
    return _ref4.apply(this, arguments);
  };
}();

var _promptForAppleId = function () {
  var _ref6 = (0, (_asyncToGenerator2 || _load_asyncToGenerator()).default)( /*#__PURE__*/(_regenerator || _load_regenerator()).default.mark(function _callee3(_ref7) {
    var appleId = _ref7.appleId;

    var wrap, _ref8, _ref9, appleIdPassword;

    return (_regenerator || _load_regenerator()).default.wrap(function _callee3$(_context3) {
      while (1) {
        switch (_context3.prev = _context3.next) {
          case 0:
            wrap = (0, (_wordwrap || _load_wordwrap()).default)(process.stdout.columns || 80);

            (0, (_log || _load_log()).default)(wrap('Please enter your Apple Developer Program account credentials. ' + 'These credentials are needed to manage certificates, keys and provisioning profiles ' + 'in your Apple Developer account.'));

            (0, (_log || _load_log()).default)(wrap((_chalk || _load_chalk()).default.bold('The password is only used to authenticate with Apple and never stored.')));

            if (appleId) {
              _context3.next = 8;
              break;
            }

            _context3.next = 6;
            return (0, (_prompt || _load_prompt()).default)({
              type: 'input',
              name: 'appleId',
              message: 'Apple ID:',
              validate: (_validators || _load_validators()).nonEmptyInput
            }, {
              nonInteractiveHelp: 'Pass your Apple ID using the --apple-id flag.'
            });

          case 6:
            _ref8 = _context3.sent;
            appleId = _ref8.appleId;

          case 8:
            _context3.next = 10;
            return (0, (_prompt || _load_prompt()).default)({
              type: 'password',
              name: 'appleIdPassword',
              message: function message(answer) {
                return 'Password (for ' + appleId + '):';
              },
              validate: (_validators || _load_validators()).nonEmptyInput
            }, {
              nonInteractiveHelp: 'Pass your Apple ID password using the EXPO_APPLE_PASSWORD environment variable'
            });

          case 10:
            _ref9 = _context3.sent;
            appleIdPassword = _ref9.appleIdPassword;
            return _context3.abrupt('return', { appleId: appleId, appleIdPassword: appleIdPassword });

          case 13:
          case 'end':
            return _context3.stop();
        }
      }
    }, _callee3, this);
  }));

  return function _promptForAppleId(_x3) {
    return _ref6.apply(this, arguments);
  };
}();

var _chooseTeam = function () {
  var _ref10 = (0, (_asyncToGenerator2 || _load_asyncToGenerator()).default)( /*#__PURE__*/(_regenerator || _load_regenerator()).default.mark(function _callee4(teams, userProvidedTeamId) {
    var foundTeam, _teams, team, choices, _ref12, _team;

    return (_regenerator || _load_regenerator()).default.wrap(function _callee4$(_context4) {
      while (1) {
        switch (_context4.prev = _context4.next) {
          case 0:
            if (!(teams.length === 0)) {
              _context4.next = 2;
              break;
            }

            throw new Error('You have no team associated with your Apple account, cannot proceed.\n(Do you have a paid Apple Developer account?)');

          case 2:
            if (!userProvidedTeamId) {
              _context4.next = 10;
              break;
            }

            foundTeam = teams.find(function (_ref11) {
              var teamId = _ref11.teamId;
              return teamId === userProvidedTeamId;
            });

            if (!foundTeam) {
              _context4.next = 9;
              break;
            }

            (0, (_log || _load_log()).default)('Using Apple Team with ID: ' + userProvidedTeamId);
            return _context4.abrupt('return', _formatTeam(foundTeam));

          case 9:
            (_log || _load_log()).default.warn('Your account is not associated with Apple Team with ID: ' + userProvidedTeamId);

          case 10:
            if (!(teams.length === 1)) {
              _context4.next = 16;
              break;
            }

            _teams = (0, (_slicedToArray2 || _load_slicedToArray()).default)(teams, 1), team = _teams[0];

            (0, (_log || _load_log()).default)('Only 1 team associated with your account, using Apple Team with ID: ' + team.teamId);
            return _context4.abrupt('return', _formatTeam(team));

          case 16:
            (0, (_log || _load_log()).default)('You have ' + teams.length + ' teams associated with your account');
            choices = teams.map(function (team, i) {
              return {
                name: i + 1 + ') ' + team.teamId + ' "' + team.name + '" (' + team.type + ')',
                value: team
              };
            });
            _context4.next = 20;
            return (0, (_prompt || _load_prompt()).default)({
              type: 'list',
              name: 'team',
              message: 'Which team would you like to use?',
              choices: choices
            });

          case 20:
            _ref12 = _context4.sent;
            _team = _ref12.team;
            return _context4.abrupt('return', _formatTeam(_team));

          case 23:
          case 'end':
            return _context4.stop();
        }
      }
    }, _callee4, this);
  }));

  return function _chooseTeam(_x4, _x5) {
    return _ref10.apply(this, arguments);
  };
}();

var _chalk;

function _load_chalk() {
  return _chalk = _interopRequireDefault(require('chalk'));
}

var _wordwrap;

function _load_wordwrap() {
  return _wordwrap = _interopRequireDefault(require('wordwrap'));
}

var _fastlane;

function _load_fastlane() {
  return _fastlane = require('./fastlane');
}

var _validators;

function _load_validators() {
  return _validators = require('../../../utils/validators');
}

var _log;

function _load_log() {
  return _log = _interopRequireDefault(require('../../../../log'));
}

var _prompt;

function _load_prompt() {
  return _prompt = _interopRequireDefault(require('../../../../prompt'));
}

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var APPLE_IN_HOUSE_TEAM_TYPE = 'in-house';

exports.default = function () {
  var _ref = (0, (_asyncToGenerator2 || _load_asyncToGenerator()).default)( /*#__PURE__*/(_regenerator || _load_regenerator()).default.mark(function _callee(options) {
    var _ref2, appleId, appleIdPassword, _ref3, teams, fastlaneSession, team;

    return (_regenerator || _load_regenerator()).default.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            _context.next = 2;
            return _requestAppleIdCreds(options);

          case 2:
            _ref2 = _context.sent;
            appleId = _ref2.appleId;
            appleIdPassword = _ref2.appleIdPassword;
            _context.prev = 5;

            (0, (_log || _load_log()).default)('Trying to authenticate with Apple Developer Portal...');
            _context.next = 9;
            return (0, (_fastlane || _load_fastlane()).runAction)((_fastlane || _load_fastlane()).travelingFastlane.authenticate, [appleId, appleIdPassword], {
              pipeStdout: true
            });

          case 9:
            _ref3 = _context.sent;
            teams = _ref3.teams;
            fastlaneSession = _ref3.fastlaneSession;

            (0, (_log || _load_log()).default)('Authenticated with Apple Developer Portal successfully!');
            _context.next = 15;
            return _chooseTeam(teams, options.teamId);

          case 15:
            team = _context.sent;
            return _context.abrupt('return', { appleId: appleId, appleIdPassword: appleIdPassword, team: team, fastlaneSession: fastlaneSession });

          case 19:
            _context.prev = 19;
            _context.t0 = _context['catch'](5);

            (0, (_log || _load_log()).default)('Authentication with Apple Developer Portal failed!');
            throw _context.t0;

          case 23:
          case 'end':
            return _context.stop();
        }
      }
    }, _callee, this, [[5, 19]]);
  }));

  function authenticate(_x) {
    return _ref.apply(this, arguments);
  }

  return authenticate;
}();

function _getAppleIdFromParams(_ref5) {
  var appleId = _ref5.appleId;

  var appleIdPassword = process.env.EXPO_APPLE_PASSWORD;
  if (appleId && appleIdPassword) {
    return {
      appleId: appleId,
      appleIdPassword: appleIdPassword
    };
  } else {
    return null;
  }
}

var _formatTeam = function _formatTeam(_ref13) {
  var teamId = _ref13.teamId,
      name = _ref13.name,
      type = _ref13.type;
  return {
    id: teamId,
    name: name + ' (' + type + ')',
    inHouse: type.toLowerCase() === APPLE_IN_HOUSE_TEAM_TYPE
  };
};
module.exports = exports['default'];
//# sourceMappingURL=../../../../__sourcemaps__/commands/build/ios/appleApi/authenticate.js.map
