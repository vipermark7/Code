'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _regenerator;

function _load_regenerator() {
  return _regenerator = _interopRequireDefault(require('babel-runtime/regenerator'));
}

var _toConsumableArray2;

function _load_toConsumableArray() {
  return _toConsumableArray2 = _interopRequireDefault(require('babel-runtime/helpers/toConsumableArray'));
}

var _asyncToGenerator2;

function _load_asyncToGenerator() {
  return _asyncToGenerator2 = _interopRequireDefault(require('babel-runtime/helpers/asyncToGenerator'));
}

var _ora;

function _load_ora() {
  return _ora = _interopRequireDefault(require('ora'));
}

var _fastlane;

function _load_fastlane() {
  return _fastlane = require('./fastlane');
}

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

exports.default = function () {
  var _ref = (0, (_asyncToGenerator2 || _load_asyncToGenerator()).default)( /*#__PURE__*/(_regenerator || _load_regenerator()).default.mark(function _callee(appleCtx) {
    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

    var appleId, appleIdPassword, team, bundleIdentifier, experienceName, spinner, _ref2, created;

    return (_regenerator || _load_regenerator()).default.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            appleId = appleCtx.appleId, appleIdPassword = appleCtx.appleIdPassword, team = appleCtx.team, bundleIdentifier = appleCtx.bundleIdentifier, experienceName = appleCtx.experienceName;
            spinner = (0, (_ora || _load_ora()).default)('Ensuring App ID exists on Apple Developer Portal...').start();
            _context.prev = 2;
            _context.next = 5;
            return (0, (_fastlane || _load_fastlane()).runAction)((_fastlane || _load_fastlane()).travelingFastlane.ensureAppExists, [].concat((0, (_toConsumableArray2 || _load_toConsumableArray()).default)(options.enablePushNotifications ? ['--push-notifications'] : []), [appleId, appleIdPassword, team.id, bundleIdentifier, experienceName]));

          case 5:
            _ref2 = _context.sent;
            created = _ref2.created;

            if (created) {
              spinner.succeed('App ID created with bundle identifier ' + bundleIdentifier + '.');
            } else {
              spinner.succeed('App ID found on Apple Developer Portal.');
            }
            _context.next = 14;
            break;

          case 10:
            _context.prev = 10;
            _context.t0 = _context['catch'](2);

            spinner.fail('Something went wrong when trying to ensure App ID exists on Apple Developer Portal!');
            throw _context.t0;

          case 14:
          case 'end':
            return _context.stop();
        }
      }
    }, _callee, this, [[2, 10]]);
  }));

  function ensureAppExists(_x) {
    return _ref.apply(this, arguments);
  }

  return ensureAppExists;
}();

module.exports = exports['default'];
//# sourceMappingURL=../../../../__sourcemaps__/commands/build/ios/appleApi/ensureAppExists.js.map
