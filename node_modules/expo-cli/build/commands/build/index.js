'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _regenerator;

function _load_regenerator() {
  return _regenerator = _interopRequireDefault(require('babel-runtime/regenerator'));
}

var _asyncToGenerator2;

function _load_asyncToGenerator() {
  return _asyncToGenerator2 = _interopRequireDefault(require('babel-runtime/helpers/asyncToGenerator'));
}

var _xdl;

function _load_xdl() {
  return _xdl = require('@expo/xdl');
}

var _BaseBuilder;

function _load_BaseBuilder() {
  return _BaseBuilder = _interopRequireDefault(require('./BaseBuilder'));
}

var _IOSBuilder;

function _load_IOSBuilder() {
  return _IOSBuilder = _interopRequireDefault(require('./ios/IOSBuilder'));
}

var _AndroidBuilder;

function _load_AndroidBuilder() {
  return _AndroidBuilder = _interopRequireDefault(require('./AndroidBuilder'));
}

var _log;

function _load_log() {
  return _log = _interopRequireDefault(require('../../log'));
}

var _CommandError;

function _load_CommandError() {
  return _CommandError = _interopRequireDefault(require('../../CommandError'));
}

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

exports.default = function (program) {
  program.command('build:ios [project-dir]').alias('bi').option('-c, --clear-credentials', 'Clear all credentials stored on Expo servers.').option('--clear-dist-cert', 'Remove Distribution Certificate stored on Expo servers.').option('--clear-push-key', 'Remove Push Notifications Key stored on Expo servers.').option('--clear-push-cert', 'Remove Push Notifications Certificate stored on Expo servers. Use of Push Notifications Certificates is deprecated.').option('--clear-provisioning-profile', 'Remove Provisioning Profile stored on Expo servers.').option('-r --revoke-credentials', 'Revoke credentials on developer.apple.com, select appropriate using --clear-* options.').option('--apple-id <login>', 'Apple ID username (please also set the Apple ID password as EXPO_APPLE_PASSWORD environment variable).').option('-t --type <build>', 'Type of build: [archive|simulator].', /^(archive|simulator)$/i, 'archive').option('--release-channel <channel-name>', 'Pull from specified release channel.', 'default').option('--no-publish', 'Disable automatic publishing before building.').option('--no-wait', 'Exit immediately after scheduling build.').option('--team-id <apple-teamId>', 'Apple Team ID.').option('--dist-p12-path <dist.p12>', 'Path to your Distribution Certificate P12 (set password as EXPO_IOS_DIST_P12_PASSWORD environment variable).').option('--push-id <push-id>', 'Push Key ID (ex: 123AB4C56D).').option('--push-p8-path <push.p12>', 'Path to your Push Key .p8 file.').option('--provisioning-profile-path <.mobileprovision>', 'Path to your Provisioning Profile.').option('--public-url <url>', 'The URL of an externally hosted manifest (for self-hosted apps).').description('Build a standalone IPA for your project, signed and ready for submission to the Apple App Store.').asyncActionProjectDir(function (projectDir, options) {
    if (options.publicUrl && !(_xdl || _load_xdl()).UrlUtils.isHttps(options.publicUrl)) {
      throw new (_CommandError || _load_CommandError()).default('INVALID_PUBLIC_URL', '--public-url must be a valid HTTPS URL.');
    }
    var channelRe = new RegExp(/^[a-z\d][a-z\d._-]*$/);
    if (!channelRe.test(options.releaseChannel)) {
      (_log || _load_log()).default.error('Release channel name can only contain lowercase letters, numbers and special characters . _ and -');
      process.exit(1);
    }
    if (options.type !== undefined && options.type !== 'archive' && options.type !== 'simulator') {
      (_log || _load_log()).default.error('Build type must be one of {archive, simulator}');
      process.exit(1);
    }
    var iosBuilder = new (_IOSBuilder || _load_IOSBuilder()).default(projectDir, options);
    return iosBuilder.command();
  });

  program.command('build:android [project-dir]').alias('ba').option('-c, --clear-credentials', 'Clear stored credentials.').option('--release-channel <channel-name>', 'Pull from specified release channel.', 'default').option('--no-publish', 'Disable automatic publishing before building.').option('--no-wait', 'Exit immediately after triggering build.').option('--keystore-path <app.jks>', 'Path to your Keystore.').option('--keystore-alias <alias>', 'Keystore Alias').option('--public-url <url>', 'The URL of an externally hosted manifest (for self-hosted apps)').option('-t --type <build>', 'Type of build: [app-bundle|apk].', /^(app-bundle|apk)$/i, 'apk').description('Build a standalone APK or App Bundle for your project, signed and ready for submission to the Google Play Store.').asyncActionProjectDir(function (projectDir, options) {
    if (options.publicUrl && !(_xdl || _load_xdl()).UrlUtils.isHttps(options.publicUrl)) {
      throw new (_CommandError || _load_CommandError()).default('INVALID_PUBLIC_URL', '--public-url must be a valid HTTPS URL.');
    }
    var channelRe = new RegExp(/^[a-z\d][a-z\d._-]*$/);
    if (!channelRe.test(options.releaseChannel)) {
      (_log || _load_log()).default.error('Release channel name can only contain lowercase letters, numbers and special characters . _ and -');
      process.exit(1);
    }
    var androidBuilder = new (_AndroidBuilder || _load_AndroidBuilder()).default(projectDir, options);
    return androidBuilder.command();
  });

  program.command('build:web [project-dir]').option('--polyfill', 'Include @babel/polyfill').option('--no-pwa', 'Prevent webpack from generating the manifest.json and injecting meta into the index.html head.').option('-d, --dev', 'Bundle your project using webpack in dev mode.').description('Build a production bundle for your project, compressed and ready for deployment.').asyncActionProjectDir(function (projectDir, options) {
    return (_xdl || _load_xdl()).Webpack.bundleAsync(projectDir, options);
  },
  /* skipProjectValidation: */false,
  /* skipAuthCheck: */true);

  program.command('build:status [project-dir]').alias('bs').option('--public-url <url>', 'The URL of an externally hosted manifest (for self-hosted apps).').description('Gets the status of a current (or most recently finished) build for your project.').asyncActionProjectDir(function () {
    var _ref = (0, (_asyncToGenerator2 || _load_asyncToGenerator()).default)( /*#__PURE__*/(_regenerator || _load_regenerator()).default.mark(function _callee(projectDir, options) {
      var builder;
      return (_regenerator || _load_regenerator()).default.wrap(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              if (!(options.publicUrl && !(_xdl || _load_xdl()).UrlUtils.isHttps(options.publicUrl))) {
                _context.next = 2;
                break;
              }

              throw new (_CommandError || _load_CommandError()).default('INVALID_PUBLIC_URL', '--public-url must be a valid HTTPS URL.');

            case 2:
              builder = new (_BaseBuilder || _load_BaseBuilder()).default(projectDir, options);
              return _context.abrupt('return', builder.commandCheckStatus());

            case 4:
            case 'end':
              return _context.stop();
          }
        }
      }, _callee, undefined);
    }));

    return function (_x, _x2) {
      return _ref.apply(this, arguments);
    };
  }(), /* skipProjectValidation: */true);
};

module.exports = exports['default'];
//# sourceMappingURL=../../__sourcemaps__/commands/build/index.js.map
