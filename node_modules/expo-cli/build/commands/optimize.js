'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.action = undefined;

var _regenerator;

function _load_regenerator() {
  return _regenerator = _interopRequireDefault(require('babel-runtime/regenerator'));
}

var _isInteger;

function _load_isInteger() {
  return _isInteger = _interopRequireDefault(require('babel-runtime/core-js/number/is-integer'));
}

var _asyncToGenerator2;

function _load_asyncToGenerator() {
  return _asyncToGenerator2 = _interopRequireDefault(require('babel-runtime/helpers/asyncToGenerator'));
}

var action = exports.action = function () {
  var _ref = (0, (_asyncToGenerator2 || _load_asyncToGenerator()).default)( /*#__PURE__*/(_regenerator || _load_regenerator()).default.mark(function _callee() {
    var projectDir = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : './';
    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

    var _ref2, exp, hasUnoptimizedAssets, defaultQuality, strQuality, quality, validQuality, outputQuality;

    return (_regenerator || _load_regenerator()).default.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            _context.next = 2;
            return (_xdl || _load_xdl()).ProjectUtils.readConfigJsonAsync(projectDir);

          case 2:
            _ref2 = _context.sent;
            exp = _ref2.exp;

            if (exp === null) {
              (_log || _load_log()).default.warn('No Expo configuration found. Are you sure this is a project directory?');
              process.exit(1);
            }

            _context.next = 7;
            return (_xdl || _load_xdl()).AssetUtils.hasUnoptimizedAssetsAsync(projectDir, options);

          case 7:
            hasUnoptimizedAssets = _context.sent;

            if (!options.save && hasUnoptimizedAssets) {
              (_log || _load_log()).default.warn('This will overwrite the original assets.');
            }

            // Validate custom quality
            defaultQuality = 80;
            strQuality = options.quality;
            quality = Number(strQuality);
            validQuality = (0, (_isInteger || _load_isInteger()).default)(quality) && quality > 0 && quality <= 100;

            if (!(strQuality !== undefined && !validQuality)) {
              _context.next = 15;
              break;
            }

            throw new Error('Invalid value for --quality flag. Must be an integer between 1 and 100.');

          case 15:
            outputQuality = validQuality ? quality : defaultQuality;

            options.quality = outputQuality;
            _context.next = 19;
            return (_xdl || _load_xdl()).Project.optimizeAsync(projectDir, options);

          case 19:
          case 'end':
            return _context.stop();
        }
      }
    }, _callee, this);
  }));

  return function action() {
    return _ref.apply(this, arguments);
  };
}();

var _xdl;

function _load_xdl() {
  return _xdl = require('@expo/xdl');
}

var _log;

function _load_log() {
  return _log = _interopRequireDefault(require('../log'));
}

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

exports.default = function (program) {
  program.command('optimize [project-dir]').alias('o').description('Compress the assets in your Expo project').option('-s, --save', 'Save the original assets with a .orig extension').option('--quality [number]', 'Specify the quality the compressed image is reduced to. Default is 60').option('--include [pattern]', 'Include only assets that match this glob pattern relative to the project root').option('--exclude [pattern]', 'Exclude all assets that match this glob pattern relative to the project root').allowOffline().asyncAction(action);
};
//# sourceMappingURL=../__sourcemaps__/commands/optimize.js.map
