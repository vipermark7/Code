'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _regenerator;

function _load_regenerator() {
  return _regenerator = _interopRequireDefault(require('babel-runtime/regenerator'));
}

var _asyncToGenerator2;

function _load_asyncToGenerator() {
  return _asyncToGenerator2 = _interopRequireDefault(require('babel-runtime/helpers/asyncToGenerator'));
}

var ensureOptionsAreValid = function () {
  var _ref2 = (0, (_asyncToGenerator2 || _load_asyncToGenerator()).default)( /*#__PURE__*/(_regenerator || _load_regenerator()).default.mark(function _callee2(command) {
    var args;
    return (_regenerator || _load_regenerator()).default.wrap(function _callee2$(_context2) {
      while (1) {
        switch (_context2.prev = _context2.next) {
          case 0:
            args = (0, (_pick || _load_pick()).default)(command, COMMON_OPTIONS);

            if (!((0, (_size || _load_size()).default)(args) > 1)) {
              _context2.next = 3;
              break;
            }

            throw new Error('You have to choose only one of --path, --id or --latest parameters');

          case 3:
          case 'end':
            return _context2.stop();
        }
      }
    }, _callee2, this);
  }));

  return function ensureOptionsAreValid(_x3) {
    return _ref2.apply(this, arguments);
  };
}();

var _pick;

function _load_pick() {
  return _pick = _interopRequireDefault(require('lodash/pick'));
}

var _size;

function _load_size() {
  return _size = _interopRequireDefault(require('lodash/size'));
}

var _IOSUploader;

function _load_IOSUploader() {
  return _IOSUploader = _interopRequireDefault(require('./upload/IOSUploader'));
}

var _IOSUploader2;

function _load_IOSUploader2() {
  return _IOSUploader2 = require('./upload/IOSUploader');
}

var _AndroidUploader;

function _load_AndroidUploader() {
  return _AndroidUploader = _interopRequireDefault(require('./upload/AndroidUploader'));
}

var _log;

function _load_log() {
  return _log = _interopRequireDefault(require('../log'));
}

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var COMMON_OPTIONS = ['id', 'latest', 'path'];

exports.default = function (program) {
  var ANDROID_OPTIONS = [].concat(COMMON_OPTIONS, ['key', 'track']);
  var androidCommand = program.command('upload:android [projectDir]').alias('ua');
  setCommonOptions(androidCommand, '.apk');
  androidCommand.option('--key <key>', 'path to the JSON key used to authenticate with Google Play').option('--track <track>', 'the track of the application to use, choose from: production, beta, alpha, internal, rollout', /^(production|beta|alpha|internal|rollout)$/i, 'internal').description('Uploads a standalone Android app to Google Play (works on macOS only). Uploads the latest build by default.').asyncActionProjectDir(createUploadAction((_AndroidUploader || _load_AndroidUploader()).default, ANDROID_OPTIONS));

  var IOS_OPTIONS = [].concat(COMMON_OPTIONS, ['appleId', 'appleIdPassword', 'itcTeamId', 'appName', 'sku', 'language', 'publicUrl']);
  var iosCommand = program.command('upload:ios [projectDir]').alias('ui');
  setCommonOptions(iosCommand, '.ipa');
  iosCommand.option('--apple-id <apple-id>', 'your Apple ID username (you can also set EXPO_APPLE_ID env variable)')
  // apple unified App Store Connect and Developer Portal teams, this is temporary solution until fastlane implements those changes
  // https://github.com/fastlane/fastlane/issues/14229
  // after updating fastlane this value will be unnecessary
  .option('--itc-team-id <itc-team-id>', 'App Store Connect Team ID (optional if there is only one team available)').option('--apple-id-password <apple-id-password>', 'your Apple ID password (you can also set EXPO_APPLE_ID_PASSWORD env variable)').option('--app-name <app-name>', 'the name of your app as it will appear on the App Store, this can\'t be longer than 30 characters (default: expo.name from app.json)').option('--sku <sku>', 'a unique ID for your app that is not visible on the App Store, will be generated unless provided').option('--language <language>', 'primary language (e.g. English, German; run `expo upload:ios --help` to see the list of available languages)', 'English').option('--public-url <url>', 'The URL of an externally hosted manifest (for self-hosted apps)').description('Uploads a standalone app to Apple TestFlight (works on macOS only). Uploads the latest build by default.').on('--help', function () {
    console.log('Available languages:');
    console.log('  ' + (_IOSUploader2 || _load_IOSUploader2()).LANGUAGES.join(', '));
    console.log();
  }).asyncActionProjectDir(createUploadAction((_IOSUploader || _load_IOSUploader()).default, IOS_OPTIONS));
};

function setCommonOptions(command, fileExtension) {
  command.option('--latest', 'uploads the latest build (default)').option('--id <id>', 'id of the build to upload').option('--path <path>', 'path to the ' + fileExtension + ' file');
}

function createUploadAction(UploaderClass, optionKeys) {
  var _this = this;

  return function () {
    var _ref = (0, (_asyncToGenerator2 || _load_asyncToGenerator()).default)( /*#__PURE__*/(_regenerator || _load_regenerator()).default.mark(function _callee(projectDir, command) {
      var options, uploader;
      return (_regenerator || _load_regenerator()).default.wrap(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              _context.prev = 0;

              ensurePlatformIsSupported();
              _context.next = 4;
              return ensureOptionsAreValid(command);

            case 4:
              options = (0, (_pick || _load_pick()).default)(command, optionKeys);

              if (UploaderClass.validateOptions) {
                UploaderClass.validateOptions(options);
              }
              uploader = new UploaderClass(projectDir, options);
              _context.next = 9;
              return uploader.upload();

            case 9:
              _context.next = 15;
              break;

            case 11:
              _context.prev = 11;
              _context.t0 = _context['catch'](0);

              (_log || _load_log()).default.error('Failed to upload the standalone app to the app store.');
              throw _context.t0;

            case 15:
            case 'end':
              return _context.stop();
          }
        }
      }, _callee, _this, [[0, 11]]);
    }));

    return function (_x, _x2) {
      return _ref.apply(this, arguments);
    };
  }();
}

function ensurePlatformIsSupported() {
  if (process.platform !== 'darwin') {
    (_log || _load_log()).default.error('Unsupported platform! This feature works on macOS only.');
    process.exit(1);
  }
}

module.exports = exports['default'];
//# sourceMappingURL=../__sourcemaps__/commands/upload.js.map
