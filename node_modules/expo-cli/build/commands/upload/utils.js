'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.runFastlaneAsync = exports.downloadFile = undefined;

var _extends2;

function _load_extends() {
  return _extends2 = _interopRequireDefault(require('babel-runtime/helpers/extends'));
}

var _regenerator;

function _load_regenerator() {
  return _regenerator = _interopRequireDefault(require('babel-runtime/regenerator'));
}

var _promise;

function _load_promise() {
  return _promise = _interopRequireDefault(require('babel-runtime/core-js/promise'));
}

var _asyncToGenerator2;

function _load_asyncToGenerator() {
  return _asyncToGenerator2 = _interopRequireDefault(require('babel-runtime/helpers/asyncToGenerator'));
}

var downloadFile = exports.downloadFile = function () {
  var _ref = (0, (_asyncToGenerator2 || _load_asyncToGenerator()).default)( /*#__PURE__*/(_regenerator || _load_regenerator()).default.mark(function _callee(url, dest) {
    var response, fileSize, bar;
    return (_regenerator || _load_regenerator()).default.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            _context.next = 2;
            return (_axios || _load_axios()).default.get(url, { responseType: 'stream' });

          case 2:
            response = _context.sent;
            fileSize = Number(response.headers['content-length']);
            bar = new (_progress || _load_progress()).default('Downloading [:bar] :percent :etas', {
              complete: '=',
              incomplete: ' ',
              total: fileSize
            });

            response.data.pipe((_fsExtra || _load_fsExtra()).default.createWriteStream(dest));
            return _context.abrupt('return', new (_promise || _load_promise()).default(function (resolve, reject) {
              response.data.on('data', function (data) {
                return bar.tick(data.length);
              });
              response.data.on('end', function () {
                return resolve(dest);
              });
              response.data.on('error', reject);
            }));

          case 7:
          case 'end':
            return _context.stop();
        }
      }
    }, _callee, this);
  }));

  return function downloadFile(_x, _x2) {
    return _ref.apply(this, arguments);
  };
}();

var runFastlaneAsync = exports.runFastlaneAsync = function () {
  var _ref2 = (0, (_asyncToGenerator2 || _load_asyncToGenerator()).default)( /*#__PURE__*/(_regenerator || _load_regenerator()).default.mark(function _callee2(program, args, _ref3) {
    var appleId = _ref3.appleId,
        appleIdPassword = _ref3.appleIdPassword,
        appleTeamId = _ref3.appleTeamId,
        itcTeamId = _ref3.itcTeamId;
    var pipeToLogger = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;

    var _ref4, stderr, res, message;

    return (_regenerator || _load_regenerator()).default.wrap(function _callee2$(_context2) {
      while (1) {
        switch (_context2.prev = _context2.next) {
          case 0:
            _context2.next = 2;
            return spawnAsyncThrowError(program, args, (0, (_extends2 || _load_extends()).default)({}, pipeToLogger ? { pipeToLogger: { stdout: 1 } } : { stdio: [0, 1, 'pipe'] }, {
              env: (0, (_extends2 || _load_extends()).default)({}, process.env, appleId && appleIdPassword && (0, (_extends2 || _load_extends()).default)({
                FASTLANE_USER: appleId,
                FASTLANE_PASSWORD: appleIdPassword,
                FASTLANE_DONT_STORE_PASSWORD: '1',
                FASTLANE_TEAM_ID: appleTeamId
              }, itcTeamId ? { FASTLANE_ITC_TEAM_ID: itcTeamId } : {}))
            }));

          case 2:
            _ref4 = _context2.sent;
            stderr = _ref4.stderr;
            res = JSON.parse(stderr);

            if (!(res.result !== 'failure')) {
              _context2.next = 9;
              break;
            }

            return _context2.abrupt('return', res);

          case 9:
            message = res.reason !== 'Unknown reason' ? res.reason : (0, (_get || _load_get()).default)(res, 'rawDump.message', 'Unknown error when running fastlane');
            throw new Error(message);

          case 11:
          case 'end':
            return _context2.stop();
        }
      }
    }, _callee2, this);
  }));

  return function runFastlaneAsync(_x3, _x4, _x5) {
    return _ref2.apply(this, arguments);
  };
}();

var _xdl;

function _load_xdl() {
  return _xdl = require('@expo/xdl');
}

var _get;

function _load_get() {
  return _get = _interopRequireDefault(require('lodash/get'));
}

var _fsExtra;

function _load_fsExtra() {
  return _fsExtra = _interopRequireDefault(require('fs-extra'));
}

var _progress;

function _load_progress() {
  return _progress = _interopRequireDefault(require('progress'));
}

var _axios;

function _load_axios() {
  return _axios = _interopRequireDefault(require('axios'));
}

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var spawnAsyncThrowError = (_xdl || _load_xdl()).ExponentTools.spawnAsyncThrowError;
//# sourceMappingURL=../../__sourcemaps__/commands/upload/utils.js.map
