'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _regenerator;

function _load_regenerator() {
  return _regenerator = _interopRequireDefault(require('babel-runtime/regenerator'));
}

var _asyncToGenerator2;

function _load_asyncToGenerator() {
  return _asyncToGenerator2 = _interopRequireDefault(require('babel-runtime/helpers/asyncToGenerator'));
}

var _classCallCheck2;

function _load_classCallCheck() {
  return _classCallCheck2 = _interopRequireDefault(require('babel-runtime/helpers/classCallCheck'));
}

var _createClass2;

function _load_createClass() {
  return _createClass2 = _interopRequireDefault(require('babel-runtime/helpers/createClass'));
}

var _path = _interopRequireDefault(require('path'));

var _fsExtra;

function _load_fsExtra() {
  return _fsExtra = _interopRequireDefault(require('fs-extra'));
}

var _xdl;

function _load_xdl() {
  return _xdl = require('xdl');
}

var _chalk;

function _load_chalk() {
  return _chalk = _interopRequireDefault(require('chalk'));
}

var _utils;

function _load_utils() {
  return _utils = require('./utils');
}

var _log;

function _load_log() {
  return _log = _interopRequireDefault(require('../../log'));
}

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var BaseUploader = function () {
  function BaseUploader(platform, projectDir, options) {
    (0, (_classCallCheck2 || _load_classCallCheck()).default)(this, BaseUploader);

    this.platform = platform;
    this.projectDir = projectDir;
    this.options = options;

    // it has to happen in constructor because we don't want to load this module on a different platform than darwin
    this.fastlane = require('@expo/traveling-fastlane-darwin')();
  }

  (0, (_createClass2 || _load_createClass()).default)(BaseUploader, [{
    key: 'upload',
    value: function () {
      var _ref = (0, (_asyncToGenerator2 || _load_asyncToGenerator()).default)( /*#__PURE__*/(_regenerator || _load_regenerator()).default.mark(function _callee() {
        var buildPath, platformData;
        return (_regenerator || _load_regenerator()).default.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                _context.next = 2;
                return this._getProjectConfig();

              case 2:
                _context.next = 4;
                return this._getBinaryFilePath();

              case 4:
                buildPath = _context.sent;
                _context.next = 7;
                return this._getPlatformSpecificOptions();

              case 7:
                platformData = _context.sent;
                _context.next = 10;
                return this._uploadToTheStore(platformData, buildPath);

              case 10:
                _context.next = 12;
                return this._removeBuildFileIfDownloaded(buildPath);

              case 12:
                (0, (_log || _load_log()).default)('Please also see our docs (' + (_chalk || _load_chalk()).default.underline('https://docs.expo.io/versions/latest/distribution/uploading-apps') + ') to learn more about the upload process.');

              case 13:
              case 'end':
                return _context.stop();
            }
          }
        }, _callee, this);
      }));

      function upload() {
        return _ref.apply(this, arguments);
      }

      return upload;
    }()
  }, {
    key: '_getProjectConfig',
    value: function () {
      var _ref2 = (0, (_asyncToGenerator2 || _load_asyncToGenerator()).default)( /*#__PURE__*/(_regenerator || _load_regenerator()).default.mark(function _callee2() {
        var _ref3, exp;

        return (_regenerator || _load_regenerator()).default.wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                _context2.next = 2;
                return (_xdl || _load_xdl()).ProjectUtils.readConfigJsonAsync(this.projectDir);

              case 2:
                _ref3 = _context2.sent;
                exp = _ref3.exp;

                if (exp) {
                  _context2.next = 6;
                  break;
                }

                throw new Error('Couldn\'t read project config file in ' + this.projectDir + '.');

              case 6:
                this._ensureExperienceIsValid(exp);
                this._exp = exp;

              case 8:
              case 'end':
                return _context2.stop();
            }
          }
        }, _callee2, this);
      }));

      function _getProjectConfig() {
        return _ref2.apply(this, arguments);
      }

      return _getProjectConfig;
    }()
  }, {
    key: '_getBinaryFilePath',
    value: function () {
      var _ref4 = (0, (_asyncToGenerator2 || _load_asyncToGenerator()).default)( /*#__PURE__*/(_regenerator || _load_regenerator()).default.mark(function _callee3() {
        var _options, path, id;

        return (_regenerator || _load_regenerator()).default.wrap(function _callee3$(_context3) {
          while (1) {
            switch (_context3.prev = _context3.next) {
              case 0:
                _options = this.options, path = _options.path, id = _options.id;

                if (!path) {
                  _context3.next = 5;
                  break;
                }

                return _context3.abrupt('return', path);

              case 5:
                if (!id) {
                  _context3.next = 9;
                  break;
                }

                return _context3.abrupt('return', this._downloadBuildById(id));

              case 9:
                return _context3.abrupt('return', this._downloadLastestBuild());

              case 10:
              case 'end':
                return _context3.stop();
            }
          }
        }, _callee3, this);
      }));

      function _getBinaryFilePath() {
        return _ref4.apply(this, arguments);
      }

      return _getBinaryFilePath;
    }()
  }, {
    key: '_downloadBuildById',
    value: function () {
      var _ref5 = (0, (_asyncToGenerator2 || _load_asyncToGenerator()).default)( /*#__PURE__*/(_regenerator || _load_regenerator()).default.mark(function _callee4(id) {
        var platform, slug, build;
        return (_regenerator || _load_regenerator()).default.wrap(function _callee4$(_context4) {
          while (1) {
            switch (_context4.prev = _context4.next) {
              case 0:
                platform = this.platform;
                slug = this._exp.slug;
                _context4.next = 4;
                return (_xdl || _load_xdl()).StandaloneBuild.getStandaloneBuilds({ id: id, slug: slug, platform: platform });

              case 4:
                build = _context4.sent;

                if (build) {
                  _context4.next = 7;
                  break;
                }

                throw new Error('We couldn\'t find build with id ' + id);

              case 7:
                return _context4.abrupt('return', this._downloadBuild(build.artifacts.url));

              case 8:
              case 'end':
                return _context4.stop();
            }
          }
        }, _callee4, this);
      }));

      function _downloadBuildById(_x) {
        return _ref5.apply(this, arguments);
      }

      return _downloadBuildById;
    }()
  }, {
    key: '_downloadLastestBuild',
    value: function () {
      var _ref6 = (0, (_asyncToGenerator2 || _load_asyncToGenerator()).default)( /*#__PURE__*/(_regenerator || _load_regenerator()).default.mark(function _callee5() {
        var platform, slug, build;
        return (_regenerator || _load_regenerator()).default.wrap(function _callee5$(_context5) {
          while (1) {
            switch (_context5.prev = _context5.next) {
              case 0:
                platform = this.platform;
                slug = this._exp.slug;
                _context5.next = 4;
                return (_xdl || _load_xdl()).StandaloneBuild.getStandaloneBuilds({
                  slug: slug,
                  platform: platform,
                  limit: 1
                });

              case 4:
                build = _context5.sent;

                if (build) {
                  _context5.next = 7;
                  break;
                }

                throw new Error('There are no builds on the Expo servers, please run \'expo build:' + platform + ' first\'');

              case 7:
                return _context5.abrupt('return', this._downloadBuild(build.artifacts.url));

              case 8:
              case 'end':
                return _context5.stop();
            }
          }
        }, _callee5, this);
      }));

      function _downloadLastestBuild() {
        return _ref6.apply(this, arguments);
      }

      return _downloadLastestBuild;
    }()
  }, {
    key: '_downloadBuild',
    value: function () {
      var _ref7 = (0, (_asyncToGenerator2 || _load_asyncToGenerator()).default)( /*#__PURE__*/(_regenerator || _load_regenerator()).default.mark(function _callee6(urlOrPath) {
        var filename, destinationPath;
        return (_regenerator || _load_regenerator()).default.wrap(function _callee6$(_context6) {
          while (1) {
            switch (_context6.prev = _context6.next) {
              case 0:
                filename = _path.default.basename(urlOrPath);
                destinationPath = '/tmp/' + filename;
                _context6.next = 4;
                return (_fsExtra || _load_fsExtra()).default.exists(destinationPath);

              case 4:
                if (!_context6.sent) {
                  _context6.next = 6;
                  break;
                }

                return _context6.abrupt('return', destinationPath);

              case 6:
                if (!urlOrPath.startsWith('/')) {
                  _context6.next = 12;
                  break;
                }

                _context6.next = 9;
                return (_fsExtra || _load_fsExtra()).default.copy(urlOrPath, destinationPath);

              case 9:
                return _context6.abrupt('return', destinationPath);

              case 12:
                (0, (_log || _load_log()).default)('Downloading build from ' + urlOrPath);
                _context6.next = 15;
                return (0, (_utils || _load_utils()).downloadFile)(urlOrPath, destinationPath);

              case 15:
                return _context6.abrupt('return', _context6.sent);

              case 16:
              case 'end':
                return _context6.stop();
            }
          }
        }, _callee6, this);
      }));

      function _downloadBuild(_x2) {
        return _ref7.apply(this, arguments);
      }

      return _downloadBuild;
    }()
  }, {
    key: '_removeBuildFileIfDownloaded',
    value: function () {
      var _ref8 = (0, (_asyncToGenerator2 || _load_asyncToGenerator()).default)( /*#__PURE__*/(_regenerator || _load_regenerator()).default.mark(function _callee7(buildPath) {
        return (_regenerator || _load_regenerator()).default.wrap(function _callee7$(_context7) {
          while (1) {
            switch (_context7.prev = _context7.next) {
              case 0:
                if (this.options.path) {
                  _context7.next = 3;
                  break;
                }

                _context7.next = 3;
                return (_fsExtra || _load_fsExtra()).default.remove(buildPath);

              case 3:
              case 'end':
                return _context7.stop();
            }
          }
        }, _callee7, this);
      }));

      function _removeBuildFileIfDownloaded(_x3) {
        return _ref8.apply(this, arguments);
      }

      return _removeBuildFileIfDownloaded;
    }()
  }, {
    key: '_ensureExperienceIsValid',
    value: function _ensureExperienceIsValid() {
      throw new Error('Not implemented');
    }
  }, {
    key: '_getPlatformSpecificOptions',
    value: function _getPlatformSpecificOptions() {
      throw new Error('Not implemented');
    }
  }, {
    key: '_uploadToTheStore',
    value: function _uploadToTheStore(platformData, buildPath) {
      throw new Error('Not implemented');
    }
  }]);
  return BaseUploader;
}();

exports.default = BaseUploader;
module.exports = exports['default'];
//# sourceMappingURL=../../__sourcemaps__/commands/upload/BaseUploader.js.map
