'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _regenerator;

function _load_regenerator() {
  return _regenerator = _interopRequireDefault(require('babel-runtime/regenerator'));
}

var _asyncToGenerator2;

function _load_asyncToGenerator() {
  return _asyncToGenerator2 = _interopRequireDefault(require('babel-runtime/helpers/asyncToGenerator'));
}

var _prompt;

function _load_prompt() {
  return _prompt = _interopRequireDefault(require('../../prompt'));
}

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * Generates CocoaPod name in format `Namepart1Namepart2Namepart3`.
 * For these with `expo` as `partname1` would generate `EXNamepart2...`.
 * @param {string} moduleName - provided module name, expects format: `namepart1-namepart2-namepart3`
 */
var generateCocoaPodDefaultName = function generateCocoaPodDefaultName(moduleName) {
  var wordsToUpperCase = function wordsToUpperCase(s) {
    return s.toLowerCase().split('-').map(function (s) {
      return s.charAt(0).toUpperCase() + s.substring(1);
    }).join('');
  };

  if (moduleName.toLowerCase().startsWith('expo')) {
    return 'EX' + wordsToUpperCase(moduleName.substring(4));
  }
  return wordsToUpperCase(moduleName);
};

/**
 * Generates java package name in format `namepart1.namepart2.namepart3`.
 * @param {string} moduleName - provided module name, expects format: `namepart1-namepart2-namepart3`
 */
var generateJavaModuleDefaultName = function generateJavaModuleDefaultName(moduleName) {
  var wordsToJavaModule = function wordsToJavaModule(s) {
    return s.toLowerCase().split('-').join('');
  };

  if (moduleName.toLowerCase().startsWith('expo')) {
    return 'expo.modules.' + wordsToJavaModule(moduleName.substring(4));
  }
  return wordsToJavaModule(moduleName);
};

/**
 * Generates JS/TS module name in format `Namepart1Namepart2Namepart3`.
 * @param {string} moduleName - provided module name, expects format: `namepart1-namepart2-namepart3`
 */
var generateInCodeModuleDefaultName = function generateInCodeModuleDefaultName(moduleName) {
  return moduleName.toLowerCase().split('-').map(function (s) {
    return s.charAt(0).toUpperCase() + s.substring(1);
  }).join('');
};

/**
 * Generates questions
 * @param {string} [suggestedModuleName]
 */
var generateQuestions = function generateQuestions(suggestedModuleName) {
  return [{
    name: 'npmModuleName',
    message: 'How would you like to call your module in JS/npm? (eg. expo-camera)',
    default: suggestedModuleName,
    validate: function validate(answer) {
      return !answer.length ? 'Module name cannot be empty' : /[A-Z]/.test(answer) ? 'Module name connot contain any upper case characters' : /\s/.test(answer) ? 'Module name cannot contain any whitespaces' : true;
    }
  }, {
    name: 'podName',
    message: 'How would you like to call your module in CocoaPods? (eg. EXCamera)',
    default: function _default(_ref) {
      var npmModuleName = _ref.npmModuleName;
      return generateCocoaPodDefaultName(npmModuleName);
    },
    validate: function validate(answer) {
      return !answer.length ? 'CocoaPod name cannot be empty' : /\s/.test(answer) ? 'CocoaPod name cannot contain any whitespaces' : true;
    }
  }, {
    name: 'javaPackage',
    message: 'How would you like to call your module in Java? (eg. expo.modules.camera)',
    default: function _default(_ref2) {
      var npmModuleName = _ref2.npmModuleName;
      return generateJavaModuleDefaultName(npmModuleName);
    },
    validate: function validate(answer) {
      return !answer.length ? 'Java Package name cannot be empty' : /\s/.test(answer) ? 'Java Package name cannot contain any whitespaces' : true;
    }
  }, {
    name: 'jsModuleName',
    message: 'How would you like to call your module in JS/TS codebase (eg. ExpoCamera)?',
    default: function _default(_ref3) {
      var npmModuleName = _ref3.npmModuleName;
      return generateInCodeModuleDefaultName(npmModuleName);
    },
    validate: function validate(answer) {
      return !answer.length ? 'Module name cannot be empty' : /\s/.test(answer) ? 'Module name cannot contain any whitespaces' : true;
    }
  }];
};

/**
 * Prompt user about new module namings.
 * @param {string} [suggestedModuleName] - suggested module name that would be used to generate all sugestions for each question
 * @returns {Promise<{ npmModuleName: string, podName: string, javaPackage: string, jsModuleName: string }>} - user's answers
 */

exports.default = function () {
  var _ref4 = (0, (_asyncToGenerator2 || _load_asyncToGenerator()).default)( /*#__PURE__*/(_regenerator || _load_regenerator()).default.mark(function _callee(suggestedModuleName) {
    return (_regenerator || _load_regenerator()).default.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            _context.next = 2;
            return (0, (_prompt || _load_prompt()).default)(generateQuestions(suggestedModuleName));

          case 2:
            return _context.abrupt('return', _context.sent);

          case 3:
          case 'end':
            return _context.stop();
        }
      }
    }, _callee, this);
  }));

  function promptQuestionsAsync(_x) {
    return _ref4.apply(this, arguments);
  }

  return promptQuestionsAsync;
}();

module.exports = exports['default'];
//# sourceMappingURL=../../__sourcemaps__/commands/generate-module/promptQuestionsAsync.js.map
