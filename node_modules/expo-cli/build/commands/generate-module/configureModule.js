'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _toConsumableArray2;

function _load_toConsumableArray() {
  return _toConsumableArray2 = _interopRequireDefault(require('babel-runtime/helpers/toConsumableArray'));
}

var _promise;

function _load_promise() {
  return _promise = _interopRequireDefault(require('babel-runtime/core-js/promise'));
}

var _getIterator2;

function _load_getIterator() {
  return _getIterator2 = _interopRequireDefault(require('babel-runtime/core-js/get-iterator'));
}

var _regenerator;

function _load_regenerator() {
  return _regenerator = _interopRequireDefault(require('babel-runtime/regenerator'));
}

var _asyncToGenerator2;

function _load_asyncToGenerator() {
  return _asyncToGenerator2 = _interopRequireDefault(require('babel-runtime/helpers/asyncToGenerator'));
}

/**
 * Prepares iOS part, mainly by renaming all files and some template word in files
 * Versioning is done automatically based on package.json from JS/TS part
 * @param {path} modulePath - module directory
 * @param {string} podName - PodName
 * @param {{ npmModuleName: string, podName: string, javaPackage: string, jsModuleName: string }} configuration - naming configuration
 */
var configureIOS = function () {
  var _ref9 = (0, (_asyncToGenerator2 || _load_asyncToGenerator()).default)( /*#__PURE__*/(_regenerator || _load_regenerator()).default.mark(function _callee8(modulePath, _ref10) {
    var podName = _ref10.podName,
        jsModuleName = _ref10.jsModuleName;
    var iosPath;
    return (_regenerator || _load_regenerator()).default.wrap(function _callee8$(_context8) {
      while (1) {
        switch (_context8.prev = _context8.next) {
          case 0:
            iosPath = _path.default.join(modulePath, 'ios');
            _context8.next = 3;
            return renameFilesWithExtensions(_path.default.join(iosPath, 'EXModuleTemplate'), ['.h', '.m'], [{ from: 'EXModuleTemplateModule', to: podName + 'Module' }, {
              from: 'EXModuleTemplateView',
              to: podName + 'View'
            }, {
              from: 'EXModuleTemplateViewManager',
              to: podName + 'ViewManager'
            }]);

          case 3:
            _context8.next = 5;
            return renameFilesWithExtensions(iosPath, ['', '.podspec'], [{ from: 'EXModuleTemplate', to: '' + podName }]);

          case 5:
            _context8.next = 7;
            return replaceContents(iosPath, function (singleFileContent) {
              return singleFileContent.replace(/EXModuleTemplate/g, podName).replace(/ExpoModuleTemplate/g, jsModuleName);
            });

          case 7:
          case 'end':
            return _context8.stop();
        }
      }
    }, _callee8, this);
  }));

  return function configureIOS(_x12, _x13) {
    return _ref9.apply(this, arguments);
  };
}();

/**
 * Prepares Android part, mainly by renaming all files and template words in files
 * Sets all version in gradle to 1.0.0
 * @param {path} modulePath - module directory
 * @param {{ npmModuleName: string, podName: string, javaPackage: string, jsModuleName: string }} configuration - naming configuration
 */


var configureAndroid = function () {
  var _ref11 = (0, (_asyncToGenerator2 || _load_asyncToGenerator()).default)( /*#__PURE__*/(_regenerator || _load_regenerator()).default.mark(function _callee9(modulePath, _ref12) {
    var javaPackage = _ref12.javaPackage,
        jsModuleName = _ref12.jsModuleName;
    var androidPath, sourceFilesPath, destinationFilesPath, moduleName;
    return (_regenerator || _load_regenerator()).default.wrap(function _callee9$(_context9) {
      while (1) {
        switch (_context9.prev = _context9.next) {
          case 0:
            androidPath = _path.default.join(modulePath, 'android');
            sourceFilesPath = _path.default.join(androidPath, 'src', 'main', 'java', 'expo', 'module', 'template');
            destinationFilesPath = _path.default.join.apply(_path.default, [androidPath, 'src', 'main', 'java'].concat((0, (_toConsumableArray2 || _load_toConsumableArray()).default)(javaPackage.split('.'))));
            _context9.next = 5;
            return (_fsExtra || _load_fsExtra()).default.mkdirp(destinationFilesPath);

          case 5:
            _context9.next = 7;
            return (_fsExtra || _load_fsExtra()).default.copy(sourceFilesPath, destinationFilesPath);

          case 7:
            _context9.next = 9;
            return (_fsExtra || _load_fsExtra()).default.remove(sourceFilesPath);

          case 9:
            _context9.next = 11;
            return removeUponEmptyOrOnlyEmptySubdirs(_path.default.join(androidPath, 'src', 'main', 'java', 'expo'));

          case 11:
            moduleName = jsModuleName.startsWith('Expo') ? jsModuleName.substring(4) : jsModuleName;
            _context9.next = 14;
            return replaceContents(androidPath, function (singleFileContent) {
              return singleFileContent.replace(/expo\.module\.template/g, javaPackage).replace(/ModuleTemplate/g, moduleName).replace(/ExpoModuleTemplate/g, jsModuleName);
            });

          case 14:
            _context9.next = 16;
            return replaceContent(_path.default.join(androidPath, 'build.gradle'), function (gradleContent) {
              return gradleContent.replace(/version = ['"][\w.-]+['"]/, "version = '1.0.0'").replace(/versionCode \d+/, 'versionCode 1').replace(/versionName ['"][\w.-]+['"]/, "versionName '1.0.0'");
            });

          case 16:
            _context9.next = 18;
            return renameFilesWithExtensions(destinationFilesPath, ['.java'], [{ from: 'ModuleTemplateModule', to: moduleName + 'Module' }, { from: 'ModuleTemplatePackage', to: moduleName + 'Package' }, { from: 'ModuleTemplateView', to: moduleName + 'View' }, { from: 'ModuleTemplateViewManager', to: moduleName + 'ViewManager' }]);

          case 18:
          case 'end':
            return _context9.stop();
        }
      }
    }, _callee9, this);
  }));

  return function configureAndroid(_x14, _x15) {
    return _ref11.apply(this, arguments);
  };
}();

/**
 * Prepares JS/TS part with npm package with package.json and README.md
 * @param {string} modulePath - module directory
 * @param {{ npmModuleName: string, podName: string, javaPackage: string, jsModuleName: string }} configuration - naming configuration
 */


var configureTS = function () {
  var _ref13 = (0, (_asyncToGenerator2 || _load_asyncToGenerator()).default)( /*#__PURE__*/(_regenerator || _load_regenerator()).default.mark(function _callee10(modulePath, _ref14) {
    var npmModuleName = _ref14.npmModuleName,
        podName = _ref14.podName,
        jsModuleName = _ref14.jsModuleName;
    return (_regenerator || _load_regenerator()).default.wrap(function _callee10$(_context10) {
      while (1) {
        switch (_context10.prev = _context10.next) {
          case 0:
            _context10.next = 2;
            return replaceContent(_path.default.join(modulePath, 'package.json'), function (singleFileContent) {
              return singleFileContent.replace(/expo-module-template/g, npmModuleName).replace(/"version": "[\w.-]+"/, '"version": "1.0.0"').replace(/ExpoModuleTemplate/g, jsModuleName);
            });

          case 2:
            _context10.next = 4;
            return replaceContent(_path.default.join(modulePath, 'README.md'), function (readmeContent) {
              return readmeContent.replace(/expo-module-template/g, npmModuleName).replace(/ExpoModuleTemplate/g, jsModuleName).replace(/EXModuleTemplate/g, podName);
            });

          case 4:
            _context10.next = 6;
            return replaceContents(_path.default.join(modulePath, 'src'), function (singleFileContent) {
              return singleFileContent.replace(/ExpoModuleTemplate/g, jsModuleName);
            });

          case 6:
            _context10.next = 8;
            return renameFilesWithExtensions(_path.default.join(modulePath, 'src'), ['.tsx'], [{ from: 'ExpoModuleTemplateView', to: jsModuleName + 'View' }]);

          case 8:
          case 'end':
            return _context10.stop();
        }
      }
    }, _callee10, this);
  }));

  return function configureTS(_x16, _x17) {
    return _ref13.apply(this, arguments);
  };
}();

/**
 * Configures TS, Android and iOS parts of generated module mostly by applying provided renamings
 * @param {string} modulePath - module directory
 * @param {{ npmModuleName: string, podName: string, javaPackage: string, jsModuleName: string }} configuration - naming configuration
 */


var _fsExtra;

function _load_fsExtra() {
  return _fsExtra = _interopRequireDefault(require('fs-extra'));
}

var _path = _interopRequireDefault(require('path'));

var _klawSync;

function _load_klawSync() {
  return _klawSync = _interopRequireDefault(require('klaw-sync'));
}

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var asyncForEach = function () {
  var _ref = (0, (_asyncToGenerator2 || _load_asyncToGenerator()).default)( /*#__PURE__*/(_regenerator || _load_regenerator()).default.mark(function _callee(array, callback) {
    var index;
    return (_regenerator || _load_regenerator()).default.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            index = 0;

          case 1:
            if (!(index < array.length)) {
              _context.next = 7;
              break;
            }

            _context.next = 4;
            return callback(array[index], index, array);

          case 4:
            index++;
            _context.next = 1;
            break;

          case 7:
          case 'end':
            return _context.stop();
        }
      }
    }, _callee, undefined);
  }));

  return function asyncForEach(_x, _x2) {
    return _ref.apply(this, arguments);
  };
}();

/**
 * Renames files names
 * @param {path} directoryPath - directory that holds files to be renamed
 * @param {string[]} extensions - array of extensions for files that would be renamed, must be provided with leading dot or empty for no extension, e.g. ['.html', '']
 * @param {{ from: string, to: string }[]} renamings - array of filenames and their replacers
 */
var renameFilesWithExtensions = function () {
  var _ref2 = (0, (_asyncToGenerator2 || _load_asyncToGenerator()).default)( /*#__PURE__*/(_regenerator || _load_regenerator()).default.mark(function _callee4(directoryPath, extensions, renamings) {
    return (_regenerator || _load_regenerator()).default.wrap(function _callee4$(_context4) {
      while (1) {
        switch (_context4.prev = _context4.next) {
          case 0:
            _context4.next = 2;
            return asyncForEach(renamings, function () {
              var _ref3 = (0, (_asyncToGenerator2 || _load_asyncToGenerator()).default)( /*#__PURE__*/(_regenerator || _load_regenerator()).default.mark(function _callee3(_ref4) {
                var from = _ref4.from,
                    to = _ref4.to;
                return (_regenerator || _load_regenerator()).default.wrap(function _callee3$(_context3) {
                  while (1) {
                    switch (_context3.prev = _context3.next) {
                      case 0:
                        _context3.next = 2;
                        return asyncForEach(extensions, function () {
                          var _ref5 = (0, (_asyncToGenerator2 || _load_asyncToGenerator()).default)( /*#__PURE__*/(_regenerator || _load_regenerator()).default.mark(function _callee2(extension) {
                            var fromFilename, toFilename;
                            return (_regenerator || _load_regenerator()).default.wrap(function _callee2$(_context2) {
                              while (1) {
                                switch (_context2.prev = _context2.next) {
                                  case 0:
                                    fromFilename = '' + from + extension;
                                    _context2.next = 3;
                                    return (_fsExtra || _load_fsExtra()).default.exists(_path.default.join(directoryPath, fromFilename));

                                  case 3:
                                    if (_context2.sent) {
                                      _context2.next = 5;
                                      break;
                                    }

                                    return _context2.abrupt('return');

                                  case 5:
                                    toFilename = '' + to + extension;
                                    _context2.next = 8;
                                    return (_fsExtra || _load_fsExtra()).default.rename(_path.default.join(directoryPath, fromFilename), _path.default.join(directoryPath, toFilename));

                                  case 8:
                                  case 'end':
                                    return _context2.stop();
                                }
                              }
                            }, _callee2, undefined);
                          }));

                          return function (_x7) {
                            return _ref5.apply(this, arguments);
                          };
                        }());

                      case 2:
                        return _context3.abrupt('return', _context3.sent);

                      case 3:
                      case 'end':
                        return _context3.stop();
                    }
                  }
                }, _callee3, undefined);
              }));

              return function (_x6) {
                return _ref3.apply(this, arguments);
              };
            }());

          case 2:
          case 'end':
            return _context4.stop();
        }
      }
    }, _callee4, undefined);
  }));

  return function renameFilesWithExtensions(_x3, _x4, _x5) {
    return _ref2.apply(this, arguments);
  };
}();

/**
 * Enters each file recursively in provided dir and replaces content by invoking provided callback function
 * @param {path} directoryPath - root directory
 * @param {(contentOfSingleFile: string) => string} replaceFunction - function that converts current content into something different
 */
var replaceContents = function replaceContents(directoryPath, replaceFunction) {
  var _iteratorNormalCompletion = true;
  var _didIteratorError = false;
  var _iteratorError = undefined;

  try {
    for (var _iterator = (0, (_getIterator2 || _load_getIterator()).default)((0, (_klawSync || _load_klawSync()).default)(directoryPath, { nodir: true })), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
      var file = _step.value;

      replaceContent(file.path, replaceFunction);
    }
  } catch (err) {
    _didIteratorError = true;
    _iteratorError = err;
  } finally {
    try {
      if (!_iteratorNormalCompletion && _iterator.return) {
        _iterator.return();
      }
    } finally {
      if (_didIteratorError) {
        throw _iteratorError;
      }
    }
  }
};

/**
 * Replaces content in file
 * @param {path} filePath - provided file
 * @param {(contentOfSingleFile: string) => string} replaceFunction - function that converts current content into something different
 */
var replaceContent = function () {
  var _ref6 = (0, (_asyncToGenerator2 || _load_asyncToGenerator()).default)( /*#__PURE__*/(_regenerator || _load_regenerator()).default.mark(function _callee5(filePath, replaceFunction) {
    var content, newContent;
    return (_regenerator || _load_regenerator()).default.wrap(function _callee5$(_context5) {
      while (1) {
        switch (_context5.prev = _context5.next) {
          case 0:
            _context5.next = 2;
            return (_fsExtra || _load_fsExtra()).default.readFile(filePath, 'utf8');

          case 2:
            content = _context5.sent;
            newContent = replaceFunction(content);

            if (!(newContent !== content)) {
              _context5.next = 7;
              break;
            }

            _context5.next = 7;
            return (_fsExtra || _load_fsExtra()).default.writeFile(filePath, newContent);

          case 7:
          case 'end':
            return _context5.stop();
        }
      }
    }, _callee5, undefined);
  }));

  return function replaceContent(_x8, _x9) {
    return _ref6.apply(this, arguments);
  };
}();

/**
 * Removes all empty subsdirs up to rootDir
 * Recursively enters all subdirs and removes them if one is empty or cantained only empty subdirs
 * @param {path} dirPath - directory path that is being inspected
 * @returns {boolean} whether directory was deleted or not
 */
var removeUponEmptyOrOnlyEmptySubdirs = function () {
  var _ref7 = (0, (_asyncToGenerator2 || _load_asyncToGenerator()).default)( /*#__PURE__*/(_regenerator || _load_regenerator()).default.mark(function _callee7(dirPath) {
    var contents, results, isRemovable;
    return (_regenerator || _load_regenerator()).default.wrap(function _callee7$(_context7) {
      while (1) {
        switch (_context7.prev = _context7.next) {
          case 0:
            _context7.next = 2;
            return (_fsExtra || _load_fsExtra()).default.readdir(dirPath);

          case 2:
            contents = _context7.sent;
            _context7.next = 5;
            return (_promise || _load_promise()).default.all(contents.map(function () {
              var _ref8 = (0, (_asyncToGenerator2 || _load_asyncToGenerator()).default)( /*#__PURE__*/(_regenerator || _load_regenerator()).default.mark(function _callee6(file) {
                var filePath, fileStats;
                return (_regenerator || _load_regenerator()).default.wrap(function _callee6$(_context6) {
                  while (1) {
                    switch (_context6.prev = _context6.next) {
                      case 0:
                        filePath = _path.default.join(dirPath, file);
                        _context6.next = 3;
                        return (_fsExtra || _load_fsExtra()).default.lstat(filePath);

                      case 3:
                        fileStats = _context6.sent;
                        _context6.t0 = fileStats.isDirectory();

                        if (!_context6.t0) {
                          _context6.next = 9;
                          break;
                        }

                        _context6.next = 8;
                        return removeUponEmptyOrOnlyEmptySubdirs(filePath);

                      case 8:
                        _context6.t0 = _context6.sent;

                      case 9:
                        return _context6.abrupt('return', _context6.t0);

                      case 10:
                      case 'end':
                        return _context6.stop();
                    }
                  }
                }, _callee6, undefined);
              }));

              return function (_x11) {
                return _ref8.apply(this, arguments);
              };
            }()));

          case 5:
            results = _context7.sent;
            isRemovable = results.reduce(function (acc, current) {
              return acc && current;
            }, true);

            if (!isRemovable) {
              _context7.next = 10;
              break;
            }

            _context7.next = 10;
            return (_fsExtra || _load_fsExtra()).default.remove(dirPath);

          case 10:
            return _context7.abrupt('return', isRemovable);

          case 11:
          case 'end':
            return _context7.stop();
        }
      }
    }, _callee7, undefined);
  }));

  return function removeUponEmptyOrOnlyEmptySubdirs(_x10) {
    return _ref7.apply(this, arguments);
  };
}();
exports.default = function () {
  var _ref15 = (0, (_asyncToGenerator2 || _load_asyncToGenerator()).default)( /*#__PURE__*/(_regenerator || _load_regenerator()).default.mark(function _callee11(newModulePath, configuration) {
    return (_regenerator || _load_regenerator()).default.wrap(function _callee11$(_context11) {
      while (1) {
        switch (_context11.prev = _context11.next) {
          case 0:
            _context11.next = 2;
            return configureTS(newModulePath, configuration);

          case 2:
            _context11.next = 4;
            return configureAndroid(newModulePath, configuration);

          case 4:
            _context11.next = 6;
            return configureIOS(newModulePath, configuration);

          case 6:
          case 'end':
            return _context11.stop();
        }
      }
    }, _callee11, this);
  }));

  function configureModule(_x18, _x19) {
    return _ref15.apply(this, arguments);
  }

  return configureModule;
}();

module.exports = exports['default'];
//# sourceMappingURL=../../__sourcemaps__/commands/generate-module/configureModule.js.map
