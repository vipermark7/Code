'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.action = undefined;

var _toConsumableArray2;

function _load_toConsumableArray() {
  return _toConsumableArray2 = _interopRequireDefault(require('babel-runtime/helpers/toConsumableArray'));
}

var _getIterator2;

function _load_getIterator() {
  return _getIterator2 = _interopRequireDefault(require('babel-runtime/core-js/get-iterator'));
}

var _promise;

function _load_promise() {
  return _promise = _interopRequireDefault(require('babel-runtime/core-js/promise'));
}

var _regenerator;

function _load_regenerator() {
  return _regenerator = _interopRequireDefault(require('babel-runtime/regenerator'));
}

var _asyncToGenerator2;

function _load_asyncToGenerator() {
  return _asyncToGenerator2 = _interopRequireDefault(require('babel-runtime/helpers/asyncToGenerator'));
}

var maybeWarnToCommitAsync = function () {
  var _ref = (0, (_asyncToGenerator2 || _load_asyncToGenerator()).default)( /*#__PURE__*/(_regenerator || _load_regenerator()).default.mark(function _callee(projectRoot) {
    var workingTreeStatus, result;
    return (_regenerator || _load_regenerator()).default.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            workingTreeStatus = 'unknown';
            _context.prev = 1;
            _context.next = 4;
            return (0, (_spawnAsync || _load_spawnAsync()).default)('git', ['status', '--porcelain']);

          case 4:
            result = _context.sent;

            workingTreeStatus = result.stdout === '' ? 'clean' : 'dirty';
            _context.next = 10;
            break;

          case 8:
            _context.prev = 8;
            _context.t0 = _context['catch'](1);

          case 10:

            if (workingTreeStatus === 'dirty') {
              (0, (_log || _load_log()).default)((_chalk || _load_chalk()).default.yellow('You should commit your changes before generating code into the root of your project.'));
            }

          case 11:
          case 'end':
            return _context.stop();
        }
      }
    }, _callee, this, [[1, 8]]);
  }));

  return function maybeWarnToCommitAsync(_x) {
    return _ref.apply(this, arguments);
  };
}();

var generateFilesAsync = function () {
  var _ref2 = (0, (_asyncToGenerator2 || _load_asyncToGenerator()).default)( /*#__PURE__*/(_regenerator || _load_regenerator()).default.mark(function _callee2(_ref3) {
    var projectDir = _ref3.projectDir,
        staticPath = _ref3.staticPath,
        options = _ref3.options,
        answer = _ref3.answer,
        templateFolder = _ref3.templateFolder;

    var promises, _iteratorNormalCompletion, _didIteratorError, _iteratorError, _iterator, _step, file, projectWebpackConfig, packageManager, fileName, src, dest;

    return (_regenerator || _load_regenerator()).default.wrap(function _callee2$(_context2) {
      while (1) {
        switch (_context2.prev = _context2.next) {
          case 0:
            promises = [];
            _iteratorNormalCompletion = true;
            _didIteratorError = false;
            _iteratorError = undefined;
            _context2.prev = 4;
            _iterator = (0, (_getIterator2 || _load_getIterator()).default)(answer);

          case 6:
            if (_iteratorNormalCompletion = (_step = _iterator.next()).done) {
              _context2.next = 28;
              break;
            }

            file = _step.value;

            if (!file.includes('webpack.config.js')) {
              _context2.next = 15;
              break;
            }

            projectWebpackConfig = _path.default.resolve(projectDir, file);
            // copy the file from template

            promises.push((_fsExtra || _load_fsExtra()).default.copy(require.resolve('@expo/webpack-config/template/webpack.config.js'), projectWebpackConfig, { overwrite: true, recursive: true }));

            packageManager = (_PackageManager || _load_PackageManager()).createForProject(projectDir);

            promises.push(packageManager.addDevAsync('@expo/webpack-config'));
            _context2.next = 25;
            break;

          case 15:
            fileName = _path.default.basename(file);
            src = _path.default.resolve(templateFolder, fileName);
            dest = _path.default.resolve(projectDir, staticPath, fileName);
            _context2.next = 20;
            return (_fsExtra || _load_fsExtra()).default.exists(src);

          case 20:
            if (!_context2.sent) {
              _context2.next = 24;
              break;
            }

            promises.push((_fsExtra || _load_fsExtra()).default.copy(src, dest, { overwrite: true, recursive: true }));
            _context2.next = 25;
            break;

          case 24:
            throw new Error('Expected template file for ' + fileName + ' doesn\'t exist at path: ' + src);

          case 25:
            _iteratorNormalCompletion = true;
            _context2.next = 6;
            break;

          case 28:
            _context2.next = 34;
            break;

          case 30:
            _context2.prev = 30;
            _context2.t0 = _context2['catch'](4);
            _didIteratorError = true;
            _iteratorError = _context2.t0;

          case 34:
            _context2.prev = 34;
            _context2.prev = 35;

            if (!_iteratorNormalCompletion && _iterator.return) {
              _iterator.return();
            }

          case 37:
            _context2.prev = 37;

            if (!_didIteratorError) {
              _context2.next = 40;
              break;
            }

            throw _iteratorError;

          case 40:
            return _context2.finish(37);

          case 41:
            return _context2.finish(34);

          case 42:
            _context2.next = 44;
            return (_promise || _load_promise()).default.all(promises);

          case 44:
          case 'end':
            return _context2.stop();
        }
      }
    }, _callee2, this, [[4, 30, 34, 42], [35,, 37, 41]]);
  }));

  return function generateFilesAsync(_x2) {
    return _ref2.apply(this, arguments);
  };
}();

var action = exports.action = function () {
  var _ref4 = (0, (_asyncToGenerator2 || _load_asyncToGenerator()).default)( /*#__PURE__*/(_regenerator || _load_regenerator()).default.mark(function _callee3() {
    var projectDir = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : './';
    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

    var _ref5, exp, templateFolder, files, _exp$web, _exp$web$staticPath, staticPath, allFiles, values, _iteratorNormalCompletion2, _didIteratorError2, _iteratorError2, _iterator2, _step2, file, localProjectFile, exists, prompt, answer;

    return (_regenerator || _load_regenerator()).default.wrap(function _callee3$(_context3) {
      while (1) {
        switch (_context3.prev = _context3.next) {
          case 0:
            _context3.next = 2;
            return (_xdl || _load_xdl()).ProjectUtils.readConfigJsonAsync(projectDir);

          case 2:
            _ref5 = _context3.sent;
            exp = _ref5.exp;
            templateFolder = require.resolve('@expo/webpack-config/web-default/index.html');

            templateFolder = templateFolder.substring(0, templateFolder.lastIndexOf('/'));

            _context3.next = 8;
            return (_fsExtra || _load_fsExtra()).default.readdir(templateFolder);

          case 8:
            _context3.t0 = function (item) {
              return item !== 'icon.png';
            };

            files = _context3.sent.filter(_context3.t0);

            // { expo: { web: { staticPath: ... } } }
            _exp$web = exp.web;
            _exp$web = _exp$web === undefined ? {} : _exp$web;
            _exp$web$staticPath = _exp$web.staticPath, staticPath = _exp$web$staticPath === undefined ? 'web' : _exp$web$staticPath;
            allFiles = ['webpack.config.js'].concat((0, (_toConsumableArray2 || _load_toConsumableArray()).default)(files.map(function (file) {
              return _path.default.join(staticPath, file);
            })));
            values = [];
            _iteratorNormalCompletion2 = true;
            _didIteratorError2 = false;
            _iteratorError2 = undefined;
            _context3.prev = 18;


            for (_iterator2 = (0, (_getIterator2 || _load_getIterator()).default)(allFiles); !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
              file = _step2.value;
              localProjectFile = _path.default.resolve(projectDir, file);
              exists = (_fsExtra || _load_fsExtra()).default.existsSync(localProjectFile);


              values.push({
                name: file,
                disabled: !options.force && exists ? '✔︎' : false,
                message: options.force && exists ? (_chalk || _load_chalk()).default.red(file) : file
              });
            }

            _context3.next = 26;
            break;

          case 22:
            _context3.prev = 22;
            _context3.t1 = _context3['catch'](18);
            _didIteratorError2 = true;
            _iteratorError2 = _context3.t1;

          case 26:
            _context3.prev = 26;
            _context3.prev = 27;

            if (!_iteratorNormalCompletion2 && _iterator2.return) {
              _iterator2.return();
            }

          case 29:
            _context3.prev = 29;

            if (!_didIteratorError2) {
              _context3.next = 32;
              break;
            }

            throw _iteratorError2;

          case 32:
            return _context3.finish(29);

          case 33:
            return _context3.finish(26);

          case 34:
            if (values.filter(function (_ref6) {
              var disabled = _ref6.disabled;
              return !disabled;
            }).length) {
              _context3.next = 37;
              break;
            }

            (0, (_log || _load_log()).default)((_chalk || _load_chalk()).default.yellow('\nAll of the custom web files already exist.') + '\nTo regenerate the files run:' + (_chalk || _load_chalk()).default.bold(' expo customize:web --force\n'));
            return _context3.abrupt('return');

          case 37:
            _context3.next = 39;
            return maybeWarnToCommitAsync(projectDir);

          case 39:
            prompt = new (_enquirer || _load_enquirer()).MultiSelect({
              hint: '(Use <space> to select, <return> to submit)',
              message: 'Which files would you like to generate?',
              limit: values.length,
              choices: values
            });
            answer = void 0;
            _context3.prev = 41;
            _context3.next = 44;
            return prompt.run();

          case 44:
            answer = _context3.sent;
            _context3.next = 50;
            break;

          case 47:
            _context3.prev = 47;
            _context3.t2 = _context3['catch'](41);
            return _context3.abrupt('return');

          case 50:
            _context3.next = 52;
            return generateFilesAsync({ projectDir: projectDir, staticPath: staticPath, options: options, answer: answer, templateFolder: templateFolder });

          case 52:
          case 'end':
            return _context3.stop();
        }
      }
    }, _callee3, this, [[18, 22, 26, 34], [27,, 29, 33], [41, 47]]);
  }));

  return function action() {
    return _ref4.apply(this, arguments);
  };
}();

var _spawnAsync;

function _load_spawnAsync() {
  return _spawnAsync = _interopRequireDefault(require('@expo/spawn-async'));
}

var _xdl;

function _load_xdl() {
  return _xdl = require('@expo/xdl');
}

var _chalk;

function _load_chalk() {
  return _chalk = _interopRequireDefault(require('chalk'));
}

var _enquirer;

function _load_enquirer() {
  return _enquirer = require('enquirer');
}

var _fsExtra;

function _load_fsExtra() {
  return _fsExtra = _interopRequireDefault(require('fs-extra'));
}

var _path = _interopRequireDefault(require('path'));

var _log;

function _load_log() {
  return _log = _interopRequireDefault(require('../log'));
}

var _PackageManager;

function _load_PackageManager() {
  return _PackageManager = _interopRequireWildcard(require('../PackageManager'));
}

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

exports.default = function (program) {
  program.command('customize:web [project-dir]').description('Generate static web files into your project.').option('-f, --force', 'Allows replacing existing files').allowOffline().asyncAction(action);
};
//# sourceMappingURL=../__sourcemaps__/commands/customize.js.map
