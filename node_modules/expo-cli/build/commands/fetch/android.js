'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.fetchAndroidUploadCertAsync = exports.fetchAndroidHashesAsync = exports.fetchAndroidKeystoreAsync = undefined;

var _regenerator;

function _load_regenerator() {
  return _regenerator = _interopRequireDefault(require('babel-runtime/regenerator'));
}

var _asyncToGenerator2;

function _load_asyncToGenerator() {
  return _asyncToGenerator2 = _interopRequireDefault(require('babel-runtime/helpers/asyncToGenerator'));
}

var fetchAndroidKeystoreAsync = function () {
  var _ref = (0, (_asyncToGenerator2 || _load_asyncToGenerator()).default)( /*#__PURE__*/(_regenerator || _load_regenerator()).default.mark(function _callee(projectDir) {
    var _ref2, _ref2$args, username, remotePackageName, experienceName, backupKeystoreOutputPath;

    return (_regenerator || _load_regenerator()).default.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            _context.next = 2;
            return (_xdl || _load_xdl()).Exp.getPublishInfoAsync(projectDir);

          case 2:
            _ref2 = _context.sent;
            _ref2$args = _ref2.args;
            username = _ref2$args.username;
            remotePackageName = _ref2$args.remotePackageName;
            experienceName = _ref2$args.remoteFullPackageName;
            backupKeystoreOutputPath = _path.default.resolve(projectDir, remotePackageName + '.jks');
            _context.next = 10;
            return (_xdl || _load_xdl()).Credentials.Android.backupExistingCredentials({
              outputPath: backupKeystoreOutputPath,
              username: username,
              experienceName: experienceName
            }, (_log || _load_log()).default);

          case 10:
          case 'end':
            return _context.stop();
        }
      }
    }, _callee, this);
  }));

  return function fetchAndroidKeystoreAsync(_x) {
    return _ref.apply(this, arguments);
  };
}();

var fetchAndroidHashesAsync = function () {
  var _ref3 = (0, (_asyncToGenerator2 || _load_asyncToGenerator()).default)( /*#__PURE__*/(_regenerator || _load_regenerator()).default.mark(function _callee2(projectDir) {
    var _ref4, _ref4$args, username, remotePackageName, experienceName, outputPath, _ref5, keystorePassword, keyAlias;

    return (_regenerator || _load_regenerator()).default.wrap(function _callee2$(_context2) {
      while (1) {
        switch (_context2.prev = _context2.next) {
          case 0:
            _context2.next = 2;
            return (_xdl || _load_xdl()).Exp.getPublishInfoAsync(projectDir);

          case 2:
            _ref4 = _context2.sent;
            _ref4$args = _ref4.args;
            username = _ref4$args.username;
            remotePackageName = _ref4$args.remotePackageName;
            experienceName = _ref4$args.remoteFullPackageName;
            outputPath = _path.default.resolve(projectDir, remotePackageName + '.tmp.jks');
            _context2.prev = 8;
            _context2.next = 11;
            return (_xdl || _load_xdl()).Credentials.Android.backupExistingCredentials({
              outputPath: outputPath,
              username: username,
              experienceName: experienceName
            }, (_log || _load_log()).default, false);

          case 11:
            _ref5 = _context2.sent;
            keystorePassword = _ref5.keystorePassword;
            keyAlias = _ref5.keyAlias;
            _context2.next = 16;
            return (_xdl || _load_xdl()).Credentials.Android.logKeystoreHashes({
              keystorePath: outputPath,
              keystorePassword: keystorePassword,
              keyAlias: keyAlias
            }, (_log || _load_log()).default);

          case 16:
            _context2.prev = 16;

            try {
              _fs.default.unlinkSync(outputPath);
            } catch (err) {
              if (err.code !== 'ENOENT') {
                (_log || _load_log()).default.error(err);
              }
            }
            return _context2.finish(16);

          case 19:
          case 'end':
            return _context2.stop();
        }
      }
    }, _callee2, this, [[8,, 16, 19]]);
  }));

  return function fetchAndroidHashesAsync(_x2) {
    return _ref3.apply(this, arguments);
  };
}();

var fetchAndroidUploadCertAsync = function () {
  var _ref6 = (0, (_asyncToGenerator2 || _load_asyncToGenerator()).default)( /*#__PURE__*/(_regenerator || _load_regenerator()).default.mark(function _callee3(projectDir) {
    var _ref7, _ref7$args, username, remotePackageName, experienceName, keystorePath, uploadKeyPath, _ref8, keystorePassword, keyAlias;

    return (_regenerator || _load_regenerator()).default.wrap(function _callee3$(_context3) {
      while (1) {
        switch (_context3.prev = _context3.next) {
          case 0:
            _context3.next = 2;
            return (_xdl || _load_xdl()).Exp.getPublishInfoAsync(projectDir);

          case 2:
            _ref7 = _context3.sent;
            _ref7$args = _ref7.args;
            username = _ref7$args.username;
            remotePackageName = _ref7$args.remotePackageName;
            experienceName = _ref7$args.remoteFullPackageName;
            keystorePath = _path.default.resolve(projectDir, remotePackageName + '.tmp.jks');
            uploadKeyPath = _path.default.resolve(projectDir, remotePackageName + '_upload_cert.pem');
            _context3.prev = 9;
            _context3.next = 12;
            return (_xdl || _load_xdl()).Credentials.Android.backupExistingCredentials({
              outputPath: keystorePath,
              username: username,
              experienceName: experienceName
            }, (_log || _load_log()).default, false);

          case 12:
            _ref8 = _context3.sent;
            keystorePassword = _ref8.keystorePassword;
            keyAlias = _ref8.keyAlias;


            (0, (_log || _load_log()).default)('Writing upload key to ' + uploadKeyPath);
            _context3.next = 18;
            return (_xdl || _load_xdl()).Credentials.Android.exportCertBase64(keystorePath, keystorePassword, keyAlias, uploadKeyPath);

          case 18:
            _context3.prev = 18;

            try {
              _fs.default.unlinkSync(keystorePath);
            } catch (err) {
              if (err.code !== 'ENOENT') {
                (_log || _load_log()).default.error(err);
              }
            }
            return _context3.finish(18);

          case 21:
          case 'end':
            return _context3.stop();
        }
      }
    }, _callee3, this, [[9,, 18, 21]]);
  }));

  return function fetchAndroidUploadCertAsync(_x3) {
    return _ref6.apply(this, arguments);
  };
}();

var _path = _interopRequireDefault(require('path'));

var _fs = _interopRequireDefault(require('fs'));

var _xdl;

function _load_xdl() {
  return _xdl = require('@expo/xdl');
}

var _log;

function _load_log() {
  return _log = _interopRequireDefault(require('../../log'));
}

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

exports.fetchAndroidKeystoreAsync = fetchAndroidKeystoreAsync;
exports.fetchAndroidHashesAsync = fetchAndroidHashesAsync;
exports.fetchAndroidUploadCertAsync = fetchAndroidUploadCertAsync;
//# sourceMappingURL=../../__sourcemaps__/commands/fetch/android.js.map
