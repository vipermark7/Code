'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _android;

function _load_android() {
  return _android = require('./android');
}

var _ios;

function _load_ios() {
  return _ios = _interopRequireDefault(require('./ios'));
}

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

exports.default = function (program) {
  program.command('fetch:ios:certs [project-dir]').description('Fetch this project\'s iOS certificates/keys and provisioning profile. Writes files to the PROJECT_DIR and prints passwords to stdout.').asyncActionProjectDir((_ios || _load_ios()).default, true);

  program.command('fetch:android:keystore [project-dir]').description("Fetch this project's Android keystore. Writes keystore to PROJECT_DIR/PROJECT_NAME.jks and prints passwords to stdout.").asyncActionProjectDir((_android || _load_android()).fetchAndroidKeystoreAsync, true);

  program.command('fetch:android:hashes [project-dir]').description("Fetch this project's Android key hashes needed to set up Google/Facebook authentication. Note: if you are using Google Play signing, this app will be signed with a different key after publishing to the store, and you'll need to use the hashes displayed in the Google Play console.").asyncActionProjectDir((_android || _load_android()).fetchAndroidHashesAsync, true);

  program.command('fetch:android:upload-cert [project-dir]').description("Fetch this project's upload certificate needed after opting in to app signing by Google Play or after resetting a previous upload certificate.").asyncActionProjectDir((_android || _load_android()).fetchAndroidUploadCertAsync, true);
};

module.exports = exports['default'];
//# sourceMappingURL=../../__sourcemaps__/commands/fetch/index.js.map
