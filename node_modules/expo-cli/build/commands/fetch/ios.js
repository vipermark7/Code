'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _regenerator;

function _load_regenerator() {
  return _regenerator = _interopRequireDefault(require('babel-runtime/regenerator'));
}

var _asyncToGenerator2;

function _load_asyncToGenerator() {
  return _asyncToGenerator2 = _interopRequireDefault(require('babel-runtime/helpers/asyncToGenerator'));
}

var fetchIosCerts = function () {
  var _ref = (0, (_asyncToGenerator2 || _load_asyncToGenerator()).default)( /*#__PURE__*/(_regenerator || _load_regenerator()).default.mark(function _callee(projectDir) {
    var _ref2, _ref2$args, username, remotePackageName, experienceName, bundleIdentifier, inProjectDir, credentialMetadata, _ref3, certP12, certPassword, certPrivateSigningKey, apnsKeyId, apnsKeyP8, pushP12, pushPassword, pushPrivateSigningKey, provisioningProfile, teamId, distPath, distPrivateKeyPath, apnsKeyP8Path, pushPath, pushPrivateKeyPath, provisioningProfilePath;

    return (_regenerator || _load_regenerator()).default.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            _context.next = 2;
            return (_xdl || _load_xdl()).Exp.getPublishInfoAsync(projectDir);

          case 2:
            _ref2 = _context.sent;
            _ref2$args = _ref2.args;
            username = _ref2$args.username;
            remotePackageName = _ref2$args.remotePackageName;
            experienceName = _ref2$args.remoteFullPackageName;
            bundleIdentifier = _ref2$args.iosBundleIdentifier;

            inProjectDir = function inProjectDir(filename) {
              return _path.default.resolve(projectDir, filename);
            };

            credentialMetadata = { username: username, experienceName: experienceName, platform: 'ios', bundleIdentifier: bundleIdentifier };


            (0, (_log || _load_log()).default)('Retrieving iOS credentials for ' + experienceName);

            _context.prev = 11;
            _context.next = 14;
            return (_xdl || _load_xdl()).Credentials.getCredentialsForPlatform(credentialMetadata);

          case 14:
            _ref3 = _context.sent;
            certP12 = _ref3.certP12;
            certPassword = _ref3.certPassword;
            certPrivateSigningKey = _ref3.certPrivateSigningKey;
            apnsKeyId = _ref3.apnsKeyId;
            apnsKeyP8 = _ref3.apnsKeyP8;
            pushP12 = _ref3.pushP12;
            pushPassword = _ref3.pushPassword;
            pushPrivateSigningKey = _ref3.pushPrivateSigningKey;
            provisioningProfile = _ref3.provisioningProfile;
            teamId = _ref3.teamId;


            if (teamId !== undefined) {
              (0, (_log || _load_log()).default)('These credentials are associated with Apple Team ID: ' + teamId);
            }

            if (!certP12) {
              _context.next = 30;
              break;
            }

            distPath = inProjectDir(remotePackageName + '_dist.p12');
            _context.next = 30;
            return (_fsExtra || _load_fsExtra()).default.writeFile(distPath, Buffer.from(certP12, 'base64'));

          case 30:
            if (!certPrivateSigningKey) {
              _context.next = 34;
              break;
            }

            distPrivateKeyPath = inProjectDir(remotePackageName + '_dist_cert_private.key');
            _context.next = 34;
            return (_fsExtra || _load_fsExtra()).default.writeFile(distPrivateKeyPath, certPrivateSigningKey);

          case 34:
            if (certP12 || certPrivateSigningKey) {
              (0, (_log || _load_log()).default)('Wrote distribution cert credentials to disk.');
            }

            if (!apnsKeyP8) {
              _context.next = 40;
              break;
            }

            apnsKeyP8Path = inProjectDir(remotePackageName + '_apns_key.p8');
            _context.next = 39;
            return (_fsExtra || _load_fsExtra()).default.writeFile(apnsKeyP8Path, apnsKeyP8);

          case 39:
            (0, (_log || _load_log()).default)('Wrote push key credentials to disk.');

          case 40:
            if (!pushP12) {
              _context.next = 44;
              break;
            }

            pushPath = inProjectDir(remotePackageName + '_push.p12');
            _context.next = 44;
            return (_fsExtra || _load_fsExtra()).default.writeFile(pushPath, Buffer.from(pushP12, 'base64'));

          case 44:
            if (!pushPrivateSigningKey) {
              _context.next = 48;
              break;
            }

            pushPrivateKeyPath = inProjectDir(remotePackageName + '_push_cert_private.key');
            _context.next = 48;
            return (_fsExtra || _load_fsExtra()).default.writeFile(pushPrivateKeyPath, pushPrivateSigningKey);

          case 48:
            if (pushP12 || pushPrivateSigningKey) {
              (0, (_log || _load_log()).default)('Wrote push cert credentials to disk.');
            }

            if (!provisioningProfile) {
              _context.next = 54;
              break;
            }

            provisioningProfilePath = _path.default.resolve(projectDir, remotePackageName + '.mobileprovision');
            _context.next = 53;
            return (_fsExtra || _load_fsExtra()).default.writeFile(provisioningProfilePath, Buffer.from(provisioningProfile, 'base64'));

          case 53:
            (0, (_log || _load_log()).default)('Wrote provisioning profile to disk');

          case 54:
            (0, (_log || _load_log()).default)('Save these important values as well:\n\nDistribution P12 password: ' + (certPassword ? (_chalk || _load_chalk()).default.bold(certPassword) : (_chalk || _load_chalk()).default.yellow('(not available)')) + '\nPush Key ID:               ' + (apnsKeyId ? (_chalk || _load_chalk()).default.bold(apnsKeyId) : (_chalk || _load_chalk()).default.yellow('(not available)')) + '\nPush P12 password:         ' + (pushPassword ? (_chalk || _load_chalk()).default.bold(pushPassword) : (_chalk || _load_chalk()).default.yellow('(not available)')) + '\n');
            _context.next = 60;
            break;

          case 57:
            _context.prev = 57;
            _context.t0 = _context['catch'](11);
            throw new Error('Unable to fetch credentials for this project. Are you sure they exist?');

          case 60:

            (0, (_log || _load_log()).default)('All done!');

          case 61:
          case 'end':
            return _context.stop();
        }
      }
    }, _callee, this, [[11, 57]]);
  }));

  return function fetchIosCerts(_x) {
    return _ref.apply(this, arguments);
  };
}();

var _path = _interopRequireDefault(require('path'));

var _fsExtra;

function _load_fsExtra() {
  return _fsExtra = _interopRequireDefault(require('fs-extra'));
}

var _chalk;

function _load_chalk() {
  return _chalk = _interopRequireDefault(require('chalk'));
}

var _xdl;

function _load_xdl() {
  return _xdl = require('@expo/xdl');
}

var _log;

function _load_log() {
  return _log = _interopRequireDefault(require('../../log'));
}

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

exports.default = fetchIosCerts;
module.exports = exports['default'];
//# sourceMappingURL=../../__sourcemaps__/commands/fetch/ios.js.map
