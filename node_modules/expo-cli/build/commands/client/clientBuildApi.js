'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.isAllowedToBuild = exports.getExperienceName = exports.createClientBuildRequest = undefined;

var _regenerator;

function _load_regenerator() {
  return _regenerator = _interopRequireDefault(require('babel-runtime/regenerator'));
}

var _stringify;

function _load_stringify() {
  return _stringify = _interopRequireDefault(require('babel-runtime/core-js/json/stringify'));
}

var _extends2;

function _load_extends() {
  return _extends2 = _interopRequireDefault(require('babel-runtime/helpers/extends'));
}

var _asyncToGenerator2;

function _load_asyncToGenerator() {
  return _asyncToGenerator2 = _interopRequireDefault(require('babel-runtime/helpers/asyncToGenerator'));
}

var createClientBuildRequest = function () {
  var _ref = (0, (_asyncToGenerator2 || _load_asyncToGenerator()).default)( /*#__PURE__*/(_regenerator || _load_regenerator()).default.mark(function _callee(_ref2) {
    var _ref2$user = _ref2.user,
        user = _ref2$user === undefined ? null : _ref2$user,
        context = _ref2.context,
        distributionCert = _ref2.distributionCert,
        provisioningProfile = _ref2.provisioningProfile,
        pushKey = _ref2.pushKey,
        udids = _ref2.udids,
        addUdid = _ref2.addUdid,
        email = _ref2.email,
        _ref2$customAppConfig = _ref2.customAppConfig,
        customAppConfig = _ref2$customAppConfig === undefined ? {} : _ref2$customAppConfig;
    return (_regenerator || _load_regenerator()).default.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            _context.next = 2;
            return (_xdl || _load_xdl()).ApiV2.clientForUser(user).postAsync('client-build/create-ios-request', {
              appleTeamId: context.team.id,
              appleTeamName: context.team.name,
              addUdid: addUdid,
              bundleIdentifier: context.bundleIdentifier,
              email: email,
              customAppConfig: customAppConfig,
              credentials: (0, (_extends2 || _load_extends()).default)({}, pushKey && pushKey.apnsKeyP8 ? { apnsKeyP8: pushKey.apnsKeyP8 } : null, pushKey && pushKey.apnsKeyId ? { apnsKeyId: pushKey.apnsKeyId } : null, {
                certP12: distributionCert.certP12,
                certPassword: distributionCert.certPassword,
                provisioningProfileId: provisioningProfile.provisioningProfileId,
                provisioningProfile: provisioningProfile.provisioningProfile,
                teamId: context.team.id,
                appleSession: context.fastlaneSession,
                udidsString: (0, (_stringify || _load_stringify()).default)(udids)
              })
            });

          case 2:
            return _context.abrupt('return', _context.sent);

          case 3:
          case 'end':
            return _context.stop();
        }
      }
    }, _callee, this);
  }));

  return function createClientBuildRequest(_x) {
    return _ref.apply(this, arguments);
  };
}();

var getExperienceName = function () {
  var _ref3 = (0, (_asyncToGenerator2 || _load_asyncToGenerator()).default)( /*#__PURE__*/(_regenerator || _load_regenerator()).default.mark(function _callee2(_ref4) {
    var _ref4$user = _ref4.user,
        user = _ref4$user === undefined ? null : _ref4$user,
        appleTeamId = _ref4.appleTeamId;

    var _ref5, experienceName;

    return (_regenerator || _load_regenerator()).default.wrap(function _callee2$(_context2) {
      while (1) {
        switch (_context2.prev = _context2.next) {
          case 0:
            _context2.next = 2;
            return (_xdl || _load_xdl()).ApiV2.clientForUser(user).postAsync('client-build/experience-name', {
              appleTeamId: appleTeamId
            });

          case 2:
            _ref5 = _context2.sent;
            experienceName = _ref5.experienceName;
            return _context2.abrupt('return', experienceName);

          case 5:
          case 'end':
            return _context2.stop();
        }
      }
    }, _callee2, this);
  }));

  return function getExperienceName(_x2) {
    return _ref3.apply(this, arguments);
  };
}();

var isAllowedToBuild = function () {
  var _ref6 = (0, (_asyncToGenerator2 || _load_asyncToGenerator()).default)( /*#__PURE__*/(_regenerator || _load_regenerator()).default.mark(function _callee3(_ref7) {
    var _ref7$user = _ref7.user,
        user = _ref7$user === undefined ? null : _ref7$user,
        appleTeamId = _ref7.appleTeamId;
    return (_regenerator || _load_regenerator()).default.wrap(function _callee3$(_context3) {
      while (1) {
        switch (_context3.prev = _context3.next) {
          case 0:
            _context3.next = 2;
            return (_xdl || _load_xdl()).ApiV2.clientForUser(user).postAsync('client-build/allowed-to-build', {
              appleTeamId: appleTeamId
            });

          case 2:
            return _context3.abrupt('return', _context3.sent);

          case 3:
          case 'end':
            return _context3.stop();
        }
      }
    }, _callee3, this);
  }));

  return function isAllowedToBuild(_x3) {
    return _ref6.apply(this, arguments);
  };
}();

var _xdl;

function _load_xdl() {
  return _xdl = require('@expo/xdl');
}

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

exports.createClientBuildRequest = createClientBuildRequest;
exports.getExperienceName = getExperienceName;
exports.isAllowedToBuild = isAllowedToBuild;
//# sourceMappingURL=../../__sourcemaps__/commands/client/clientBuildApi.js.map
