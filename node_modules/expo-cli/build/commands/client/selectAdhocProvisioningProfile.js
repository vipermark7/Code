'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _regenerator;

function _load_regenerator() {
  return _regenerator = _interopRequireDefault(require('babel-runtime/regenerator'));
}

var _asyncToGenerator2;

function _load_asyncToGenerator() {
  return _asyncToGenerator2 = _interopRequireDefault(require('babel-runtime/helpers/asyncToGenerator'));
}

var _ora;

function _load_ora() {
  return _ora = _interopRequireDefault(require('ora'));
}

var _fastlane;

function _load_fastlane() {
  return _fastlane = require('../build/ios/appleApi/fastlane');
}

var _tagger;

function _load_tagger() {
  return _tagger = require('./tagger');
}

var _log;

function _load_log() {
  return _log = _interopRequireDefault(require('../../log'));
}

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

exports.default = function () {
  var _ref = (0, (_asyncToGenerator2 || _load_asyncToGenerator()).default)( /*#__PURE__*/(_regenerator || _load_regenerator()).default.mark(function _callee(context, udids, distCertSerialNumber) {
    var options = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};
    var spinner, args, adhocProvisioningProfile, provisioningProfileUpdateTimestamp, provisioningProfileCreateTimestamp, provisioningProfileName;
    return (_regenerator || _load_regenerator()).default.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            spinner = (0, (_ora || _load_ora()).default)('Handling Adhoc provisioning profiles on Apple Developer Portal...').start();
            args = ['--apple-id', context.appleId, '--apple-password', context.appleIdPassword, context.team.id, udids, context.bundleIdentifier, distCertSerialNumber];
            _context.next = 4;
            return (0, (_fastlane || _load_fastlane()).runAction)((_fastlane || _load_fastlane()).travelingFastlane.manageAdHocProvisioningProfile, args);

          case 4:
            adhocProvisioningProfile = _context.sent;
            provisioningProfileUpdateTimestamp = adhocProvisioningProfile.provisioningProfileUpdateTimestamp, provisioningProfileCreateTimestamp = adhocProvisioningProfile.provisioningProfileCreateTimestamp, provisioningProfileName = adhocProvisioningProfile.provisioningProfileName;

            if (provisioningProfileCreateTimestamp) {
              spinner.succeed('Created new profile: ' + provisioningProfileName);
            } else if (provisioningProfileUpdateTimestamp) {
              spinner.succeed('Updated existing profile: ' + provisioningProfileName);
            } else {
              spinner.succeed('Used existing profile: ' + provisioningProfileName);
            }

            // tag for updating to Expo servers
            (0, (_tagger || _load_tagger()).tagForUpdate)(adhocProvisioningProfile);

            return _context.abrupt('return', adhocProvisioningProfile);

          case 9:
          case 'end':
            return _context.stop();
        }
      }
    }, _callee, this);
  }));

  function selectAdhocProvisioningProfile(_x, _x2, _x3) {
    return _ref.apply(this, arguments);
  }

  return selectAdhocProvisioningProfile;
}();

module.exports = exports['default'];
//# sourceMappingURL=../../__sourcemaps__/commands/client/selectAdhocProvisioningProfile.js.map
