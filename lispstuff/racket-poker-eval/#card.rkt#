#lang racket
(define black-cards '( "2H 4S 4C 2D 4H" "2H 3D 5S 9C KD"
                                      "2H 3D 5S 9C KD" "2H 3D 5S 9C KD"))
(define white-cards '("2C 3H 4S 8C AH" "2S 8S AS QS 3S"
                                       "2C 3H 4S 8C KH" "2D 3H 5C 9S KH"))
(struct card (value suit))
(struct hand (card1 card2 card3 card4 card5))
(struct game (black-hand white-hand winning-hand ))

(define values (hash #\2 2 #\3 3 #\4 4 #\5 5 #\6 6 #\7 7 #\8 8 #\9 9
                     #\T 10 #\J 11 #\Q 12 #\K 13 #\A 14))

(define hand-ranks (hash "high card" 1 "pair" 2 "two pair" 3 "three of a kind" 4 "straight" 5
                         "flush" 6 "full house" 7 "four of a kind" 8  "straight flush" 9))

(define (make-cards hand-string)
  (define split (string-split hand-string))
  (for/list ([i split])
    (card (string-ref i 0) (string-ref i 1))))

(define (sort-by-value hand-string)
  (define unsorted (make-cards hand-string))
  (sort (for/list ([i unsorted])
          (hash-ref values (card-value i))) < )) 

(define (sort-by-suit hand-string)
  (define unsorted (make-cards hand-string))
  (sort (for/list ([i unsorted])
          (card-suit i)) char<? )) ;;char<? sort gives us C D H S

(define (high-card? hand)
  )

(define (pair? hand))

(define (two-pair? hand))

(define (three-of-a-kind? hand))

(define (straight? hand))

(define (flush? hand))

(define (full-house? hand))

(define (four-of-a-kind? hand))

(define (straight-flush? hand))
