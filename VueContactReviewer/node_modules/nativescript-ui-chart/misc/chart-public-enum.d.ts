export declare namespace knownCollections {
    const series = "series";
    const entries = "entries";
    const palettes = "palettes";
    const annotations = "annotations";
}
export declare const seriesName = "seriesName";
export declare enum ChartSeriesStackMode {
    /**
     * Series are not stacked
     * */
    None = "None",
    /**
     *  Stack series
     */
    Stack = "Stack",
    /**
     * Stack series up to 100%.
     * */
    Stack100 = "Stack100"
}
/**
 * Font styles
 */
export declare enum ChartFontStyle {
    /**
     * Regular font style
     */
    Normal = "Normal",
    /**
     * Bold font style
     */
    Bold = "Bold",
    /**
     * Italic font style
     */
    Italic = "Italic",
    /**
     * Combine Bold and Italic styles
     */
    BoldItalic = "BoldItalic"
}
/**
 * Defines available options for {@link ChartSeries}'s {@link selectionMode} property
 */
export declare enum ChartSeriesSelectionMode {
    /**
     * Series selection disabled.
     */
    None = "Normal",
    /**
     * Series selection not set. The selection mode set to chart will be used.
     */
    NotSet = "NotSet",
    /**
     * Select the whole series.
     */
    Series = "Series",
    /**
     * Select a single data point.
     */
    DataPoint = "DataPoint",
    /**
     * Select multiple points.
     */
    DataPointMultiple = "DataPointMultiple"
}
/**
 * Defines available options for {@link RadChartBase}'s seriesSelectionMode and pointSelectionMode properties
 */
export declare enum ChartSelectionMode {
    /**
     *  Only a single item (series or point) can be selected at a time.
     */
    Single = "Single",
    /**
     * Multiple series/points can be selected.
     */
    Multiple = "Multiple",
    /**
     * Selection disabled.
     */
    None = "None"
}
export declare enum ChartTrackballSnapMode {
    /**
    * Only the closest point is selected.
    */
    ClosestPoint = "ClosestPoint",
    /**
    * All points with the same category as the closest point are selected.
    */
    AllClosestPoints = "AllClosestPoints"
}
export declare enum ChartLegendPosition {
    /**
     * The legend is positioned at the left side of the chart.
     */
    Left = "Left",
    /**
     * The legend is positioned at the right side of the chart.
     */
    Right = "Right",
    /**
     * The legend is positioned at the top side of the chart.
     */
    Top = "Top",
    /**
     * The legend is positioned at the bottom side of the chart.
     */
    Bottom = "Bottom",
    /**
     * The legend is floating. The default offset origin for this mode is TopLeft with offset values (0,0).
     */
    Floating = "Floating"
}
export declare enum ChartLegendOffsetOrigin {
    /**
     * The offset is relative to the top left corner.
     */
    TopLeft = "TopLeft",
    /**
     * The offset is relative to the top right corner.
     */
    TopRight = "TopRight",
    /**
     * The offset is relative to the bottom left corner.
     */
    BottomLeft = "BottomLeft",
    /**
     * The offset is relative to the bottom right corner.
     */
    BottomRight = "BottomRight"
}
export declare enum ChartPaletteSeriesState {
    /**
     * The palette will be used when the series are not in selected state
     */
    Normal = "Normal",
    /**
     * The palette will be used when the series are in selected state
     */
    Selected = "Selected"
}
export declare enum ChartSeriesPaletteMode {
    /**
     * The palette item that will be used will be selected depending on the index of the current series.
     */
    Series = "Series",
    /**
     * The palette item that will be used will be selected depending on the index of the current item.
     */
    Item = "Item"
}
export declare enum ChartAxisLabelFitMode {
    /**
     * The default single line mode
     */
    None = "None",
    /**
     * Axis labels are on multiple lines.
     */
    Multiline = "Multiline",
    /**
     * Axis labels are rotated. Use labelRotationAngle to set the corresponding rotation angle.
     */
    Rotate = "Rotate"
}
export declare enum ChartAxisLabelLayoutMode {
    Outer = "Outer",
    Inner = "Inner"
}
/**
* Lists the possible values for the horizontalLocation property of vertical axes of type {@link CartesianAxis}.
*/
export declare enum ChartAxisHorizontalLocation {
    /**
    * The axis is positioned at the left side of the plotting area.
    */
    Left = "Left",
    /**
    * The axis is positioned at the right side of the plotting area.
    */
    Right = "Right"
}
/**
* Lists the possible values for the verticalLocation property of horizontal axes of type {@link CartesianAxis}.
*/
export declare enum ChartAxisVerticalLocation {
    /**
    * The axis is positioned at the top of the plotting area.
    */
    Top = "Top",
    /**
    * The axis is positioned at the bottom of the plotting area.
    */
    Bottom = "Bottom"
}
/**
* Lists the possible values of the plotMode property of {@link CategoricalAxis} and {@link DateTimeContinuousAxis}.
*/
export declare enum ChartAxisPlotMode {
    /**
    * Data points are plotted between the ticks.
    */
    BetweenTicks = "BetweenTicks",
    /**
    * Data points are plotted on the ticks.
    */
    OnTicks = "OnTicks"
}
/**
* Lists the possible visibility options for the firstLabelVisibility and lastLabelVisibility properties of {@link CategoricalAxis}.
*/
export declare enum ChartAxisLabelVisibility {
    /**
    * The axis label is shown.
    */
    Visible = "Visible",
    /**
    * The axis label is not shown.
    */
    Hidden = "Hidden",
    /**
    * The axis label is clipped.
    * NOTE: Works only on Android.
    */
    Clip = "Clip"
}
/**
* Lists the possible ways to extract a category from a Date object.
* The proper type should be set as a value of the dateTimeComponent property of {@link DateTimeCategoricalAxis} or
* the majorStep property of {@link DateTimeContinuousAxis}.
*/
export declare enum ChartAxisDateTimeComponent {
    /**
    * The 'seconds' value of the Date object will be considered.
    */
    Second = "Second",
    /**
    * The 'minutes' value of the Date object will be considered.
    */
    Minute = "Minute",
    /**
    * The 'hours' value of the Date object will be considered.
    */
    Hour = "Hour",
    /**
    * The 'days' value of the Date object will be considered.
    */
    Day = "Day",
    /**
    * The 'weeks' value of the Date object will be considered.
    */
    Week = "Week",
    /**
    * The 'months' value of the Date object will be considered.
    */
    Month = "Month",
    /**
    * The 'years' value of the Date object will be considered.
    */
    Year = "Year"
}
/**
* Lists the possible values of the zPosition property of {@link CartesianChartAnnotation}.
*/
export declare enum ChartAnnotationZPosition {
    /**
    * The annotation is rendered below the series (default).
    */
    BelowSeries = "BelowSeries",
    /**
    * The annotation is rendered above the series.
    */
    AboveSeries = "AboveSeries"
}
