declare module com {
	export module telerik {
		export module android {
			export module primitives {
				export module widget {
					export module tooltip {
						export class RadTooltipView extends com.telerik.android.primitives.widget.tooltip.views.TooltipPresenterBase {
							public static class: java.lang.Class<com.telerik.android.primitives.widget.tooltip.RadTooltipView>;
							public constructor(param0: globalAndroid.content.Context, param1: com.telerik.android.primitives.widget.tooltip.contracts.TooltipAdapter);
							public invalidateDrawable(param0: globalAndroid.graphics.drawable.Drawable): void;
							public onKeyDown(param0: number, param1: globalAndroid.view.KeyEvent): boolean;
							public notifyDraw(param0: globalAndroid.graphics.Canvas): void;
							public onKeyLongPress(param0: number, param1: globalAndroid.view.KeyEvent): boolean;
							public unscheduleDrawable(param0: globalAndroid.graphics.drawable.Drawable, param1: java.lang.Runnable): void;
							public constructor(param0: globalAndroid.content.Context, param1: globalAndroid.util.AttributeSet);
							public scheduleDrawable(param0: globalAndroid.graphics.drawable.Drawable, param1: java.lang.Runnable, param2: number): void;
							public getPointerSize(): number;
							public onKeyMultiple(param0: number, param1: number, param2: globalAndroid.view.KeyEvent): boolean;
							public sendAccessibilityEvent(param0: number): void;
							public constructor(param0: globalAndroid.content.Context, param1: globalAndroid.util.AttributeSet, param2: number);
							public setPointerSize(param0: number): void;
							public onKeyUp(param0: number, param1: globalAndroid.view.KeyEvent): boolean;
							public open(param0: globalAndroid.graphics.Point): void;
							public sendAccessibilityEventUnchecked(param0: globalAndroid.view.accessibility.AccessibilityEvent): void;
							public unscheduleDrawable(param0: globalAndroid.graphics.drawable.Drawable): void;
							public constructor(param0: globalAndroid.content.Context, param1: com.telerik.android.primitives.widget.tooltip.contracts.TooltipAdapter, param2: number);
							public constructor(param0: globalAndroid.content.Context);
							public pointerLayout(): com.telerik.android.primitives.widget.tooltip.containers.PointerLayout;
						}
					}
				}
			}
		}
	}
}

declare module com {
	export module telerik {
		export module android {
			export module primitives {
				export module widget {
					export module tooltip {
						export module containers {
							export class PointerLayout extends globalAndroid.widget.FrameLayout {
								public static class: java.lang.Class<com.telerik.android.primitives.widget.tooltip.containers.PointerLayout>;
								public requestSendAccessibilityEvent(param0: globalAndroid.view.View, param1: globalAndroid.view.accessibility.AccessibilityEvent): boolean;
								public bringChildToFront(param0: globalAndroid.view.View): void;
								public isLayoutRequested(): boolean;
								public addView(param0: globalAndroid.view.View): void;
								public onKeyMultiple(param0: number, param1: number, param2: globalAndroid.view.KeyEvent): boolean;
								public onKeyDown(param0: number, param1: globalAndroid.view.KeyEvent): boolean;
								public constructor(param0: globalAndroid.content.Context, param1: globalAndroid.util.AttributeSet, param2: number);
								public requestChildRectangleOnScreen(param0: globalAndroid.view.View, param1: globalAndroid.graphics.Rect, param2: boolean): boolean;
								public setAlignPointerVertically(param0: boolean): void;
								public getParentForAccessibility(): globalAndroid.view.ViewParent;
								public scheduleDrawable(param0: globalAndroid.graphics.drawable.Drawable, param1: java.lang.Runnable, param2: number): void;
								public invalidateChild(param0: globalAndroid.view.View, param1: globalAndroid.graphics.Rect): void;
								public onDraw(param0: globalAndroid.graphics.Canvas): void;
								public constructor(param0: globalAndroid.content.Context, param1: globalAndroid.util.AttributeSet);
								public addView(param0: globalAndroid.view.View, param1: number, param2: number): void;
								public removeView(param0: globalAndroid.view.View): void;
								public focusSearch(param0: number): globalAndroid.view.View;
								public addView(param0: globalAndroid.view.View, param1: globalAndroid.view.ViewGroup.LayoutParams): void;
								public addView(param0: globalAndroid.view.View, param1: number): void;
								public updateTargetLocation(param0: globalAndroid.graphics.Point): void;
								public setPointerSize(param0: number): void;
								public requestChildFocus(param0: globalAndroid.view.View, param1: globalAndroid.view.View): void;
								public requestLayout(): void;
								public constructor(param0: globalAndroid.content.Context);
								public onKeyLongPress(param0: number, param1: globalAndroid.view.KeyEvent): boolean;
								public createContextMenu(param0: globalAndroid.view.ContextMenu): void;
								public setTooltipMargin(param0: number): void;
								public requestFitSystemWindows(): void;
								public recomputeViewAttributes(param0: globalAndroid.view.View): void;
								public focusSearch(param0: globalAndroid.view.View, param1: number): globalAndroid.view.View;
								public showContextMenuForChild(param0: globalAndroid.view.View): boolean;
								public getParent(): globalAndroid.view.ViewParent;
								public requestDisallowInterceptTouchEvent(param0: boolean): void;
								public addView(param0: globalAndroid.view.View, param1: number, param2: globalAndroid.view.ViewGroup.LayoutParams): void;
								public getTooltipMargin(): number;
								public updateViewLayout(param0: globalAndroid.view.View, param1: globalAndroid.view.ViewGroup.LayoutParams): void;
								public updateContainerLocation(param0: globalAndroid.graphics.Point): void;
								public invalidateChildInParent(param0: native.Array<number>, param1: globalAndroid.graphics.Rect): globalAndroid.view.ViewParent;
								public getChildVisibleRect(param0: globalAndroid.view.View, param1: globalAndroid.graphics.Rect, param2: globalAndroid.graphics.Point): boolean;
								public invalidateDrawable(param0: globalAndroid.graphics.drawable.Drawable): void;
								public setPadding(param0: number, param1: number, param2: number, param3: number): void;
								public getPointerColor(): number;
								public requestTransparentRegion(param0: globalAndroid.view.View): void;
								public getAlignPointerVertically(): boolean;
								public unscheduleDrawable(param0: globalAndroid.graphics.drawable.Drawable): void;
								public sendAccessibilityEvent(param0: number): void;
								public unscheduleDrawable(param0: globalAndroid.graphics.drawable.Drawable, param1: java.lang.Runnable): void;
								public setPointerColor(param0: number): void;
								public sendAccessibilityEventUnchecked(param0: globalAndroid.view.accessibility.AccessibilityEvent): void;
								public clearChildFocus(param0: globalAndroid.view.View): void;
								public onKeyUp(param0: number, param1: globalAndroid.view.KeyEvent): boolean;
								public getPointerSize(): number;
								public startActionModeForChild(param0: globalAndroid.view.View, param1: globalAndroid.view.ActionMode.Callback): globalAndroid.view.ActionMode;
								public childDrawableStateChanged(param0: globalAndroid.view.View): void;
								public focusableViewAvailable(param0: globalAndroid.view.View): void;
							}
						}
					}
				}
			}
		}
	}
}

declare module com {
	export module telerik {
		export module android {
			export module primitives {
				export module widget {
					export module tooltip {
						export module contracts {
							export class DrawListener extends java.lang.Object {
								public static class: java.lang.Class<com.telerik.android.primitives.widget.tooltip.contracts.DrawListener>;
								/**
								 * Constructs a new instance of the com.telerik.android.primitives.widget.tooltip.contracts.DrawListener interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
								 */
								public constructor(implementation: {
									notifyDraw(param0: globalAndroid.graphics.Canvas): void;
								});
								public constructor();
								public notifyDraw(param0: globalAndroid.graphics.Canvas): void;
							}
						}
					}
				}
			}
		}
	}
}

declare module com {
	export module telerik {
		export module android {
			export module primitives {
				export module widget {
					export module tooltip {
						export module contracts {
							export class TooltipAdapter extends java.lang.Object {
								public static class: java.lang.Class<com.telerik.android.primitives.widget.tooltip.contracts.TooltipAdapter>;
								/**
								 * Constructs a new instance of the com.telerik.android.primitives.widget.tooltip.contracts.TooltipAdapter interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
								 */
								public constructor(implementation: {
									rawOffset(): globalAndroid.graphics.Point;
									availableLayoutSlot(): globalAndroid.graphics.RectF;
									alignTooltipVertically(): boolean;
									getTooltipData(param0: any): native.Array<any>;
									getPlotAreaClip(): com.telerik.android.common.math.RadRect;
									contentAdapter(): com.telerik.android.primitives.widget.tooltip.contracts.TooltipContentAdapter;
									setContentAdapter(param0: com.telerik.android.primitives.widget.tooltip.contracts.TooltipContentAdapter): void;
								});
								public constructor();
								public getTooltipData(param0: any): native.Array<any>;
								public contentAdapter(): com.telerik.android.primitives.widget.tooltip.contracts.TooltipContentAdapter;
								public setContentAdapter(param0: com.telerik.android.primitives.widget.tooltip.contracts.TooltipContentAdapter): void;
								public rawOffset(): globalAndroid.graphics.Point;
								public alignTooltipVertically(): boolean;
								public getPlotAreaClip(): com.telerik.android.common.math.RadRect;
								public availableLayoutSlot(): globalAndroid.graphics.RectF;
							}
						}
					}
				}
			}
		}
	}
}

declare module com {
	export module telerik {
		export module android {
			export module primitives {
				export module widget {
					export module tooltip {
						export module contracts {
							export class TooltipContentAdapter extends java.lang.Object {
								public static class: java.lang.Class<com.telerik.android.primitives.widget.tooltip.contracts.TooltipContentAdapter>;
								/**
								 * Constructs a new instance of the com.telerik.android.primitives.widget.tooltip.contracts.TooltipContentAdapter interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
								 */
								public constructor(implementation: {
									getView(param0: native.Array<any>): globalAndroid.view.View;
									getIsApplyDefaultStyles(): boolean;
									setApplyDefaultStyles(param0: boolean): void;
									getValueToStringConverter(): com.telerik.android.common.Function<any,string>;
									setValueToStringConverter(param0: com.telerik.android.common.Function<any,string>): void;
									getCategoryToStringConverter(): com.telerik.android.common.Function<any,string>;
									setCategoryToStringConverter(param0: com.telerik.android.common.Function<any,string>): void;
								});
								public constructor();
								public setApplyDefaultStyles(param0: boolean): void;
								public setValueToStringConverter(param0: com.telerik.android.common.Function<any,string>): void;
								public getCategoryToStringConverter(): com.telerik.android.common.Function<any,string>;
								public getIsApplyDefaultStyles(): boolean;
								public setCategoryToStringConverter(param0: com.telerik.android.common.Function<any,string>): void;
								public getValueToStringConverter(): com.telerik.android.common.Function<any,string>;
								public getView(param0: native.Array<any>): globalAndroid.view.View;
							}
						}
					}
				}
			}
		}
	}
}

declare module com {
	export module telerik {
		export module android {
			export module primitives {
				export module widget {
					export module tooltip {
						export module views {
							export abstract class TooltipPresenterBase extends globalAndroid.view.View implements com.telerik.android.primitives.widget.tooltip.contracts.DrawListener {
								public static class: java.lang.Class<com.telerik.android.primitives.widget.tooltip.views.TooltipPresenterBase>;
								public tooltipContentContainer: globalAndroid.view.ViewGroup;
								public targetContentContainer: globalAndroid.view.ViewGroup;
								public popupWindow: globalAndroid.widget.PopupWindow;
								public tooltipAdapter: com.telerik.android.primitives.widget.tooltip.contracts.TooltipAdapter;
								public targetPoint: globalAndroid.graphics.Point;
								public tooltipBounds: globalAndroid.graphics.RectF;
								public setTouchable(param0: boolean): void;
								public isOpen(): boolean;
								public updateTooltipContent(param0: any): boolean;
								public onKeyMultiple(param0: number, param1: number, param2: globalAndroid.view.KeyEvent): boolean;
								public close(): boolean;
								public onKeyDown(param0: number, param1: globalAndroid.view.KeyEvent): boolean;
								public constructor(param0: globalAndroid.content.Context, param1: globalAndroid.util.AttributeSet, param2: number);
								public constructor(param0: globalAndroid.content.Context, param1: com.telerik.android.primitives.widget.tooltip.contracts.TooltipAdapter, param2: number);
								public getTooltipAnimationStyle(): number;
								public getContentAdapter(): com.telerik.android.primitives.widget.tooltip.contracts.TooltipContentAdapter;
								public scheduleDrawable(param0: globalAndroid.graphics.drawable.Drawable, param1: java.lang.Runnable, param2: number): void;
								public onDraw(param0: globalAndroid.graphics.Canvas): void;
								public calculateTooltipBounds(param0: globalAndroid.graphics.Point): globalAndroid.graphics.RectF;
								public constructor(param0: globalAndroid.content.Context, param1: globalAndroid.util.AttributeSet);
								public invalidateDrawable(param0: globalAndroid.graphics.drawable.Drawable): void;
								public notifyDraw(param0: globalAndroid.graphics.Canvas): void;
								public setContentAdapter(param0: com.telerik.android.primitives.widget.tooltip.contracts.TooltipContentAdapter): void;
								public adjustPosition(param0: globalAndroid.graphics.RectF, param1: globalAndroid.graphics.Point): globalAndroid.graphics.RectF;
								public onDrawCore(param0: globalAndroid.graphics.Canvas): void;
								public unscheduleDrawable(param0: globalAndroid.graphics.drawable.Drawable): void;
								public sendAccessibilityEvent(param0: number): void;
								public unscheduleDrawable(param0: globalAndroid.graphics.drawable.Drawable, param1: java.lang.Runnable): void;
								public getIsTouchable(): boolean;
								public sendAccessibilityEventUnchecked(param0: globalAndroid.view.accessibility.AccessibilityEvent): void;
								public open(param0: globalAndroid.graphics.Point): void;
								public shouldPreventPointOverlap(): boolean;
								public openCore(param0: globalAndroid.graphics.Point): void;
								public onKeyUp(param0: number, param1: globalAndroid.view.KeyEvent): boolean;
								public constructor(param0: globalAndroid.content.Context);
								public setTooltipAnimationStyle(param0: number): void;
								public onKeyLongPress(param0: number, param1: globalAndroid.view.KeyEvent): boolean;
							}
						}
					}
				}
			}
		}
	}
}

declare module com {
	export module telerik {
		export module widget {
			export module chart {
				export class BuildConfig extends java.lang.Object {
					public static class: java.lang.Class<com.telerik.widget.chart.BuildConfig>;
					public static DEBUG: boolean;
					public static APPLICATION_ID: string;
					public static BUILD_TYPE: string;
					public static FLAVOR: string;
					public static VERSION_CODE: number;
					public static VERSION_NAME: string;
					public constructor();
				}
			}
		}
	}
}

declare module com {
	export module telerik {
		export module widget {
			export module chart {
				export module engine {
					export module axes {
						export class AxisLabelLayoutMode {
							public static class: java.lang.Class<com.telerik.widget.chart.engine.axes.AxisLabelLayoutMode>;
							public static OUTER: com.telerik.widget.chart.engine.axes.AxisLabelLayoutMode;
							public static INNER: com.telerik.widget.chart.engine.axes.AxisLabelLayoutMode;
							public static values(): native.Array<com.telerik.widget.chart.engine.axes.AxisLabelLayoutMode>;
							public static valueOf(param0: java.lang.Class<any>, param1: string): java.lang.Enum<any>;
							public static valueOf(param0: string): com.telerik.widget.chart.engine.axes.AxisLabelLayoutMode;
						}
					}
				}
			}
		}
	}
}

declare module com {
	export module telerik {
		export module widget {
			export module chart {
				export module engine {
					export module axes {
						export class AxisLabelModel extends com.telerik.widget.chart.engine.elementTree.ContentNode {
							public static class: java.lang.Class<com.telerik.widget.chart.engine.axes.AxisLabelModel>;
							public constructor();
							public update(param0: com.telerik.widget.chart.visualization.common.LabelSizeInfo): void;
							public getLabelSizeInfo(): com.telerik.widget.chart.visualization.common.LabelSizeInfo;
							public normalizedPosition(): number;
							public untransformedDesiredSize(): com.telerik.android.common.math.RadSize;
							public constructor(param0: number, param1: com.telerik.android.common.math.RadPoint, param2: com.telerik.android.common.math.RadSize);
							public transformOffset(): com.telerik.android.common.math.RadPoint;
						}
					}
				}
			}
		}
	}
}

declare module com {
	export module telerik {
		export module widget {
			export module chart {
				export module engine {
					export module axes {
						export abstract class AxisModel extends com.telerik.widget.chart.engine.elementTree.ChartElement {
							public static class: java.lang.Class<com.telerik.widget.chart.engine.axes.AxisModel>;
							public static PLOT_ORIGIN_PROPERTY_KEY: number;
							public static PLOT_DIRECTION_PROPERTY_KEY: number;
							public generateTicks(param0: com.telerik.widget.chart.engine.axes.continuous.ValueRange<java.lang.Double>): java.lang.Iterable<com.telerik.widget.chart.engine.axes.AxisTickModel>;
							public resetState(): void;
							public buildTicksAndLabels(param0: com.telerik.android.common.math.RadSize): boolean;
							public setLabelFormat(param0: string): void;
							public getShowLabels(): boolean;
							public setVerticalLocation(param0: com.telerik.widget.chart.engine.axes.common.AxisVerticalLocation): void;
							public getNormalizedLabelRotationAngle(): number;
							public getLabelFormat(): string;
							public setShowLabels(param0: boolean): void;
							public ticks(): com.telerik.widget.chart.engine.elementTree.ElementCollection<com.telerik.widget.chart.engine.axes.AxisTickModel>;
							public setMajorTickLength(param0: number): void;
							public convertPhysicalUnitsToData(param0: number): any;
							public generateLastLabel(): com.telerik.widget.chart.engine.axes.AxisLabelModel;
							public getLabelInterval(): number;
							public update(param0: com.telerik.widget.chart.engine.axes.AxisUpdateContext): void;
							public generateLabels(): java.lang.Iterable<com.telerik.widget.chart.engine.axes.AxisLabelModel>;
							public getVerticalLocation(): com.telerik.widget.chart.engine.axes.common.AxisVerticalLocation;
							public getLabels(): com.telerik.widget.chart.engine.elementTree.ElementCollection<com.telerik.widget.chart.engine.axes.AxisLabelModel>;
							public applyLayoutRounding(): void;
							public setLabelInterval(param0: number): void;
							public measure(param0: com.telerik.android.common.math.RadSize): boolean;
							public getLastTick(): com.telerik.widget.chart.engine.axes.AxisTickModel;
							public plot(param0: com.telerik.widget.chart.engine.axes.AxisUpdateContext): void;
							public getLabelLayoutMode(): com.telerik.widget.chart.engine.axes.AxisLabelLayoutMode;
							public setIsPrimary(param0: boolean): void;
							public majorTickCount(): number;
							public getLabelContent(param0: com.telerik.widget.chart.engine.axes.AxisTickModel): any;
							public updateCore(param0: com.telerik.widget.chart.engine.axes.AxisUpdateContext): void;
							public getHorizontalLocation(): com.telerik.widget.chart.engine.axes.common.AxisHorizontalLocation;
							public getMajorTicks(): java.lang.Iterable<com.telerik.widget.chart.engine.axes.AxisTickModel>;
							public getMajorTickOffset(): number;
							public onPropertyChanged(param0: com.telerik.widget.chart.engine.elementTree.events.RadPropertyEventArgs): void;
							public getIsPrimary(): boolean;
							public title(): com.telerik.widget.chart.engine.axes.AxisTitleModel;
							public createLayoutStrategy(): com.telerik.widget.chart.engine.axes.common.layout.AxisModelLayoutStrategy;
							public getCombineGroupKey(param0: com.telerik.widget.chart.engine.dataPoints.DataPoint): any;
							public getMajorTickLength(): number;
							public isUpdated(): boolean;
							public setWidth(param0: number): void;
							public getWidth(): number;
							public getMajorTickTranslate(): number;
							public setMajorTickTranslate(param0: number): void;
							public getMajorTickHidden(): boolean;
							public setMajorTickHidden(param0: boolean): void;
							public onPanOffsetChanged(): void;
							public setLabelOffset(param0: number): void;
							public updateTicksVisibility(param0: com.telerik.android.common.math.RadRect): void;
							public arrangeOverride(param0: com.telerik.android.common.math.RadRect): com.telerik.android.common.math.RadRect;
							public getDesiredSize(): com.telerik.android.common.math.RadSize;
							public getLayoutStrategy(): com.telerik.widget.chart.engine.axes.common.layout.AxisModelLayoutStrategy;
							public setNormalizedLabelRotationAngle(param0: number): void;
							public onZoomChanged(): void;
							public setTickThickness(param0: number): void;
							public setLineThickness(param0: number): void;
							public setLabelValueToStringConverter(param0: com.telerik.android.common.Function<any,string>): void;
							public getStackValue(param0: com.telerik.widget.chart.engine.dataPoints.DataPoint): com.telerik.widget.chart.engine.axes.AxisModel.StackValue;
							public getLabelContentCore(param0: com.telerik.widget.chart.engine.axes.AxisTickModel): any;
							public getLastLabelVisibility(): com.telerik.widget.chart.engine.axes.common.AxisLastLabelVisibility;
							public setLastLabelVisibility(param0: com.telerik.widget.chart.engine.axes.common.AxisLastLabelVisibility): void;
							public plotCore(param0: com.telerik.widget.chart.engine.axes.AxisUpdateContext): void;
							public setLabelMargin(param0: number): void;
							public getType(): com.telerik.widget.chart.engine.axes.AxisType;
							public setType(param0: com.telerik.widget.chart.engine.axes.AxisType): void;
							public constructor();
							public getLabelOffset(): number;
							public setHorizontalLocation(param0: com.telerik.widget.chart.engine.axes.common.AxisHorizontalLocation): void;
							public getActualPlotMode(): com.telerik.widget.chart.engine.axes.common.AxisPlotMode;
							public getLabelFitMode(): com.telerik.widget.chart.engine.axes.common.AxisLabelFitMode;
							public getLabelMargin(): number;
							public getFirstTick(): com.telerik.widget.chart.engine.axes.AxisTickModel;
							public canAddChild(param0: com.telerik.widget.chart.engine.elementTree.ChartNode): com.telerik.widget.chart.engine.elementTree.ModifyChildrenResult;
							public createPlotInfo(param0: any): com.telerik.widget.chart.engine.axes.common.AxisPlotInfo;
							public desiredMargin(): com.telerik.android.common.RadThickness;
							public getLineThickness(): number;
							public getTickThickness(): number;
							public getLabelValueToStringConverter(): com.telerik.android.common.Function<any,string>;
							public isPlotValid(): boolean;
							public setMajorTickOffset(param0: number): void;
							public setLabelLayoutMode(param0: com.telerik.widget.chart.engine.axes.AxisLabelLayoutMode): void;
							public setLabelFitMode(param0: com.telerik.widget.chart.engine.axes.common.AxisLabelFitMode): void;
							public isDataReady(): boolean;
						}
						export module AxisModel {
							export class StackValue extends java.lang.Object {
								public static class: java.lang.Class<com.telerik.widget.chart.engine.axes.AxisModel.StackValue>;
								public value: number;
								public positive: boolean;
								public constructor(param0: com.telerik.widget.chart.engine.axes.AxisModel);
							}
						}
					}
				}
			}
		}
	}
}

declare module com {
	export module telerik {
		export module widget {
			export module chart {
				export module engine {
					export module axes {
						export abstract class AxisTickModel extends com.telerik.widget.chart.engine.elementTree.ChartNode {
							public static class: java.lang.Class<com.telerik.widget.chart.engine.axes.AxisTickModel>;
							public next: com.telerik.widget.chart.engine.axes.AxisTickModel;
							public previous: com.telerik.widget.chart.engine.axes.AxisTickModel;
							public constructor();
							public constructor(param0: number, param1: number, param2: number);
							public virtualIndex(): number;
							public associatedLabel(): com.telerik.widget.chart.engine.axes.AxisLabelModel;
							public getType(): com.telerik.widget.chart.engine.axes.TickType;
							public position(): com.telerik.widget.chart.engine.axes.TickPosition;
							public getNormalizedForwardLength(): number;
							public normalizedValue(): number;
							public getNextMajorTick(): com.telerik.widget.chart.engine.axes.AxisTickModel;
							public getNormalizedBackwardLength(): number;
							public value(): number;
						}
					}
				}
			}
		}
	}
}

declare module com {
	export module telerik {
		export module widget {
			export module chart {
				export module engine {
					export module axes {
						export class AxisTitleModel extends com.telerik.widget.chart.engine.elementTree.ContentNode {
							public static class: java.lang.Class<com.telerik.widget.chart.engine.axes.AxisTitleModel>;
							public constructor();
							public unloadCore(): void;
						}
					}
				}
			}
		}
	}
}

declare module com {
	export module telerik {
		export module widget {
			export module chart {
				export module engine {
					export module axes {
						export class AxisType {
							public static class: java.lang.Class<com.telerik.widget.chart.engine.axes.AxisType>;
							public static FIRST: com.telerik.widget.chart.engine.axes.AxisType;
							public static SECOND: com.telerik.widget.chart.engine.axes.AxisType;
							public static valueOf(param0: string): com.telerik.widget.chart.engine.axes.AxisType;
							public static valueOf(param0: java.lang.Class<any>, param1: string): java.lang.Enum<any>;
							public static values(): native.Array<com.telerik.widget.chart.engine.axes.AxisType>;
						}
					}
				}
			}
		}
	}
}

declare module com {
	export module telerik {
		export module widget {
			export module chart {
				export module engine {
					export module axes {
						export class AxisUpdateContext extends java.lang.Object {
							public static class: java.lang.Class<com.telerik.widget.chart.engine.axes.AxisUpdateContext>;
							public combinedSeries(): java.lang.Iterable<com.telerik.widget.chart.engine.series.combination.CombinedSeries>;
							public isStacked(): boolean;
							public nonCombinedSeries(): java.lang.Iterable<com.telerik.widget.chart.engine.series.ChartSeriesModel<any>>;
							public series(): java.lang.Iterable<com.telerik.widget.chart.engine.series.ChartSeriesModel<any>>;
							public isStacked100(): boolean;
							public constructor(param0: com.telerik.widget.chart.engine.axes.AxisModel, param1: java.util.ArrayList<com.telerik.widget.chart.engine.series.ChartSeriesModel<any>>, param2: java.lang.Iterable<com.telerik.widget.chart.engine.series.combination.ChartSeriesCombineStrategy>);
							public maximumStackSum(): number;
							public getMinimumStackSum(): number;
						}
					}
				}
			}
		}
	}
}

declare module com {
	export module telerik {
		export module widget {
			export module chart {
				export module engine {
					export module axes {
						export class MajorTickModel extends com.telerik.widget.chart.engine.axes.AxisTickModel {
							public static class: java.lang.Class<com.telerik.widget.chart.engine.axes.MajorTickModel>;
							public constructor();
							public constructor(param0: number, param1: number, param2: number);
							public getType(): com.telerik.widget.chart.engine.axes.TickType;
						}
					}
				}
			}
		}
	}
}

declare module com {
	export module telerik {
		export module widget {
			export module chart {
				export module engine {
					export module axes {
						export class MinorTickModel extends com.telerik.widget.chart.engine.axes.AxisTickModel {
							public static class: java.lang.Class<com.telerik.widget.chart.engine.axes.MinorTickModel>;
							public constructor();
							public constructor(param0: number, param1: number, param2: number);
							public getType(): com.telerik.widget.chart.engine.axes.TickType;
						}
					}
				}
			}
		}
	}
}

declare module com {
	export module telerik {
		export module widget {
			export module chart {
				export module engine {
					export module axes {
						export class TickPosition {
							public static class: java.lang.Class<com.telerik.widget.chart.engine.axes.TickPosition>;
							public static FIRST: com.telerik.widget.chart.engine.axes.TickPosition;
							public static INNER: com.telerik.widget.chart.engine.axes.TickPosition;
							public static LAST: com.telerik.widget.chart.engine.axes.TickPosition;
							public static valueOf(param0: java.lang.Class<any>, param1: string): java.lang.Enum<any>;
							public static values(): native.Array<com.telerik.widget.chart.engine.axes.TickPosition>;
							public static valueOf(param0: string): com.telerik.widget.chart.engine.axes.TickPosition;
						}
					}
				}
			}
		}
	}
}

declare module com {
	export module telerik {
		export module widget {
			export module chart {
				export module engine {
					export module axes {
						export class TickType {
							public static class: java.lang.Class<com.telerik.widget.chart.engine.axes.TickType>;
							public static MAJOR: com.telerik.widget.chart.engine.axes.TickType;
							public static MINOR: com.telerik.widget.chart.engine.axes.TickType;
							public static values(): native.Array<com.telerik.widget.chart.engine.axes.TickType>;
							public static valueOf(param0: java.lang.Class<any>, param1: string): java.lang.Enum<any>;
							public static valueOf(param0: string): com.telerik.widget.chart.engine.axes.TickType;
						}
					}
				}
			}
		}
	}
}

declare module com {
	export module telerik {
		export module widget {
			export module chart {
				export module engine {
					export module axes {
						export module categorical {
							export class AxisCategory extends java.lang.Object {
								public static class: java.lang.Class<com.telerik.widget.chart.engine.axes.categorical.AxisCategory>;
								public key: any;
								public keySource: any;
								public points: java.util.ArrayList<com.telerik.widget.chart.engine.dataPoints.DataPoint>;
								public constructor();
							}
						}
					}
				}
			}
		}
	}
}

declare module com {
	export module telerik {
		export module widget {
			export module chart {
				export module engine {
					export module axes {
						export module categorical {
							export class AxisSupportsCombinedSeriesPlot extends java.lang.Object {
								public static class: java.lang.Class<com.telerik.widget.chart.engine.axes.categorical.AxisSupportsCombinedSeriesPlot>;
								/**
								 * Constructs a new instance of the com.telerik.widget.chart.engine.axes.categorical.AxisSupportsCombinedSeriesPlot interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
								 */
								public constructor(implementation: {
								});
								public constructor();
							}
						}
					}
				}
			}
		}
	}
}

declare module com {
	export module telerik {
		export module widget {
			export module chart {
				export module engine {
					export module axes {
						export module categorical {
							export class CategoricalAxisModel extends com.telerik.widget.chart.engine.axes.AxisModel implements com.telerik.widget.chart.engine.axes.categorical.AxisSupportsCombinedSeriesPlot {
								public static class: java.lang.Class<com.telerik.widget.chart.engine.axes.categorical.CategoricalAxisModel>;
								public categories: java.util.ArrayList<com.telerik.widget.chart.engine.axes.categorical.AxisCategory>;
								public getPlotMode(): com.telerik.widget.chart.engine.axes.common.AxisPlotMode;
								public getMajorTickInterval(): number;
								public generateTicks(param0: com.telerik.widget.chart.engine.axes.continuous.ValueRange<java.lang.Double>): java.lang.Iterable<com.telerik.widget.chart.engine.axes.AxisTickModel>;
								public onPropertyChanged(param0: com.telerik.widget.chart.engine.elementTree.events.RadPropertyEventArgs): void;
								public constructor();
								public setMajorTickInterval(param0: number): void;
								public updateCore(param0: com.telerik.widget.chart.engine.axes.AxisUpdateContext): void;
								public generateLastLabel(): com.telerik.widget.chart.engine.axes.AxisLabelModel;
								public setPlotMode(param0: com.telerik.widget.chart.engine.axes.common.AxisPlotMode): void;
								public getGapLength(): number;
								public getCombineGroupKey(param0: com.telerik.widget.chart.engine.dataPoints.DataPoint): any;
								public majorTickCount(): number;
								public getLabelContentCore(param0: com.telerik.widget.chart.engine.axes.AxisTickModel): any;
								public calculateRelativeStep(param0: number): number;
								public plotCore(param0: com.telerik.widget.chart.engine.axes.AxisUpdateContext): void;
								public getActualPlotMode(): com.telerik.widget.chart.engine.axes.common.AxisPlotMode;
								public createPlotInfo(param0: any): com.telerik.widget.chart.engine.axes.common.AxisPlotInfo;
								public setGapLength(param0: number): void;
								public isDataReady(): boolean;
								public convertPhysicalUnitsToData(param0: number): any;
							}
						}
					}
				}
			}
		}
	}
}

declare module com {
	export module telerik {
		export module widget {
			export module chart {
				export module engine {
					export module axes {
						export module categorical {
							export class CategoricalAxisPlotInfo extends com.telerik.widget.chart.engine.axes.common.AxisPlotInfo {
								public static class: java.lang.Class<com.telerik.widget.chart.engine.axes.categorical.CategoricalAxisPlotInfo>;
								public position: number;
								public length: number;
								public rangeLength: number;
								public rangePosition: number;
								public categoryKey: any;
								public centerX(param0: com.telerik.android.common.math.RadRect): number;
								public centerY(param0: com.telerik.android.common.math.RadRect): number;
								public static create(param0: com.telerik.widget.chart.engine.axes.AxisModel, param1: number, param2: number): com.telerik.widget.chart.engine.axes.categorical.CategoricalAxisPlotInfo;
							}
						}
					}
				}
			}
		}
	}
}

declare module com {
	export module telerik {
		export module widget {
			export module chart {
				export module engine {
					export module axes {
						export module categorical {
							export class DateTimeCategoricalAxisModel extends com.telerik.widget.chart.engine.axes.categorical.CategoricalAxisModel implements java.util.Comparator<com.telerik.widget.chart.engine.axes.categorical.AxisCategory>  {
								public static class: java.lang.Class<com.telerik.widget.chart.engine.axes.categorical.DateTimeCategoricalAxisModel>;
								public static defaultDateFormat: java.text.DateFormat;
								public getDateTimeComponent(): com.telerik.widget.chart.engine.axes.common.DateTimeComponent;
								public getLabelContentCore(param0: com.telerik.widget.chart.engine.axes.AxisTickModel): any;
								public setDateFormat(param0: java.text.DateFormat): void;
								public setDateTimeComponent(param0: com.telerik.widget.chart.engine.axes.common.DateTimeComponent): void;
								public compare(param0: com.telerik.widget.chart.engine.axes.categorical.AxisCategory, param1: com.telerik.widget.chart.engine.axes.categorical.AxisCategory): number;
								public equals(param0: any): boolean;
								public constructor();
								public compare(param0: any, param1: any): number;
								public updateCore(param0: com.telerik.widget.chart.engine.axes.AxisUpdateContext): void;
								public getDateFormat(): java.text.DateFormat;
							}
						}
					}
				}
			}
		}
	}
}

declare module com {
	export module telerik {
		export module widget {
			export module chart {
				export module engine {
					export module axes {
						export module common {
							export class AxisHorizontalLocation {
								public static class: java.lang.Class<com.telerik.widget.chart.engine.axes.common.AxisHorizontalLocation>;
								public static LEFT: com.telerik.widget.chart.engine.axes.common.AxisHorizontalLocation;
								public static RIGHT: com.telerik.widget.chart.engine.axes.common.AxisHorizontalLocation;
								public static valueOf(param0: string): com.telerik.widget.chart.engine.axes.common.AxisHorizontalLocation;
								public static valueOf(param0: java.lang.Class<any>, param1: string): java.lang.Enum<any>;
								public static values(): native.Array<com.telerik.widget.chart.engine.axes.common.AxisHorizontalLocation>;
							}
						}
					}
				}
			}
		}
	}
}

declare module com {
	export module telerik {
		export module widget {
			export module chart {
				export module engine {
					export module axes {
						export module common {
							export class AxisLabelFitMode {
								public static class: java.lang.Class<com.telerik.widget.chart.engine.axes.common.AxisLabelFitMode>;
								public static NONE: com.telerik.widget.chart.engine.axes.common.AxisLabelFitMode;
								public static MULTI_LINE: com.telerik.widget.chart.engine.axes.common.AxisLabelFitMode;
								public static ROTATE: com.telerik.widget.chart.engine.axes.common.AxisLabelFitMode;
								public static valueOf(param0: string): com.telerik.widget.chart.engine.axes.common.AxisLabelFitMode;
								public static valueOf(param0: java.lang.Class<any>, param1: string): java.lang.Enum<any>;
								public static values(): native.Array<com.telerik.widget.chart.engine.axes.common.AxisLabelFitMode>;
							}
						}
					}
				}
			}
		}
	}
}

declare module com {
	export module telerik {
		export module widget {
			export module chart {
				export module engine {
					export module axes {
						export module common {
							export class AxisLastLabelVisibility {
								public static class: java.lang.Class<com.telerik.widget.chart.engine.axes.common.AxisLastLabelVisibility>;
								public static VISIBLE: com.telerik.widget.chart.engine.axes.common.AxisLastLabelVisibility;
								public static HIDDEN: com.telerik.widget.chart.engine.axes.common.AxisLastLabelVisibility;
								public static CLIP: com.telerik.widget.chart.engine.axes.common.AxisLastLabelVisibility;
								public static valueOf(param0: java.lang.Class<any>, param1: string): java.lang.Enum<any>;
								public static valueOf(param0: string): com.telerik.widget.chart.engine.axes.common.AxisLastLabelVisibility;
								public static values(): native.Array<com.telerik.widget.chart.engine.axes.common.AxisLastLabelVisibility>;
							}
						}
					}
				}
			}
		}
	}
}

declare module com {
	export module telerik {
		export module widget {
			export module chart {
				export module engine {
					export module axes {
						export module common {
							export class AxisPlotDirection {
								public static class: java.lang.Class<com.telerik.widget.chart.engine.axes.common.AxisPlotDirection>;
								public static VERTICAL: com.telerik.widget.chart.engine.axes.common.AxisPlotDirection;
								public static HORIZONTAL: com.telerik.widget.chart.engine.axes.common.AxisPlotDirection;
								public static values(): native.Array<com.telerik.widget.chart.engine.axes.common.AxisPlotDirection>;
								public static valueOf(param0: string): com.telerik.widget.chart.engine.axes.common.AxisPlotDirection;
								public static valueOf(param0: java.lang.Class<any>, param1: string): java.lang.Enum<any>;
							}
						}
					}
				}
			}
		}
	}
}

declare module com {
	export module telerik {
		export module widget {
			export module chart {
				export module engine {
					export module axes {
						export module common {
							export abstract class AxisPlotInfo extends java.lang.Object {
								public static class: java.lang.Class<com.telerik.widget.chart.engine.axes.common.AxisPlotInfo>;
								public axis: com.telerik.widget.chart.engine.axes.AxisModel;
								public centerX(param0: com.telerik.android.common.math.RadRect): number;
								public getAxis(): com.telerik.widget.chart.engine.axes.AxisModel;
								public centerY(param0: com.telerik.android.common.math.RadRect): number;
								public constructor();
								public getSnapTickIndex(): number;
								public setSnapTickIndex(param0: number): void;
							}
						}
					}
				}
			}
		}
	}
}

declare module com {
	export module telerik {
		export module widget {
			export module chart {
				export module engine {
					export module axes {
						export module common {
							export class AxisPlotMode {
								public static class: java.lang.Class<com.telerik.widget.chart.engine.axes.common.AxisPlotMode>;
								public static BETWEEN_TICKS: com.telerik.widget.chart.engine.axes.common.AxisPlotMode;
								public static ON_TICKS: com.telerik.widget.chart.engine.axes.common.AxisPlotMode;
								public static ON_TICKS_PADDED: com.telerik.widget.chart.engine.axes.common.AxisPlotMode;
								public static valueOf(param0: string): com.telerik.widget.chart.engine.axes.common.AxisPlotMode;
								public static values(): native.Array<com.telerik.widget.chart.engine.axes.common.AxisPlotMode>;
								public static valueOf(param0: java.lang.Class<any>, param1: string): java.lang.Enum<any>;
							}
						}
					}
				}
			}
		}
	}
}

declare module com {
	export module telerik {
		export module widget {
			export module chart {
				export module engine {
					export module axes {
						export module common {
							export class AxisVerticalLocation {
								public static class: java.lang.Class<com.telerik.widget.chart.engine.axes.common.AxisVerticalLocation>;
								public static BOTTOM: com.telerik.widget.chart.engine.axes.common.AxisVerticalLocation;
								public static TOP: com.telerik.widget.chart.engine.axes.common.AxisVerticalLocation;
								public static valueOf(param0: java.lang.Class<any>, param1: string): java.lang.Enum<any>;
								public static values(): native.Array<com.telerik.widget.chart.engine.axes.common.AxisVerticalLocation>;
								public static valueOf(param0: string): com.telerik.widget.chart.engine.axes.common.AxisVerticalLocation;
							}
						}
					}
				}
			}
		}
	}
}

declare module com {
	export module telerik {
		export module widget {
			export module chart {
				export module engine {
					export module axes {
						export module common {
							export class DateTimeComponent {
								public static class: java.lang.Class<com.telerik.widget.chart.engine.axes.common.DateTimeComponent>;
								public static YEAR: com.telerik.widget.chart.engine.axes.common.DateTimeComponent;
								public static QUARTER: com.telerik.widget.chart.engine.axes.common.DateTimeComponent;
								public static MONTH: com.telerik.widget.chart.engine.axes.common.DateTimeComponent;
								public static WEEK: com.telerik.widget.chart.engine.axes.common.DateTimeComponent;
								public static HOUR: com.telerik.widget.chart.engine.axes.common.DateTimeComponent;
								public static MINUTE: com.telerik.widget.chart.engine.axes.common.DateTimeComponent;
								public static SECOND: com.telerik.widget.chart.engine.axes.common.DateTimeComponent;
								public static MILLISECOND: com.telerik.widget.chart.engine.axes.common.DateTimeComponent;
								public static DATE: com.telerik.widget.chart.engine.axes.common.DateTimeComponent;
								public static TIME_OF_DAY: com.telerik.widget.chart.engine.axes.common.DateTimeComponent;
								public static DAY: com.telerik.widget.chart.engine.axes.common.DateTimeComponent;
								public static DAY_OF_WEEK: com.telerik.widget.chart.engine.axes.common.DateTimeComponent;
								public static DAY_OF_YEAR: com.telerik.widget.chart.engine.axes.common.DateTimeComponent;
								public static TIME_IN_MILLIS: com.telerik.widget.chart.engine.axes.common.DateTimeComponent;
								public static values(): native.Array<com.telerik.widget.chart.engine.axes.common.DateTimeComponent>;
								public static valueOf(param0: java.lang.Class<any>, param1: string): java.lang.Enum<any>;
								public static valueOf(param0: string): com.telerik.widget.chart.engine.axes.common.DateTimeComponent;
							}
						}
					}
				}
			}
		}
	}
}

declare module com {
	export module telerik {
		export module widget {
			export module chart {
				export module engine {
					export module axes {
						export module common {
							export abstract class DateTimeHelper extends java.lang.Object {
								public static class: java.lang.Class<com.telerik.widget.chart.engine.axes.common.DateTimeHelper>;
								public constructor();
								public static tryGetDateTime(param0: any, param1: com.telerik.widget.chart.engine.propertyStore.ValueExtractor<java.util.Calendar>): boolean;
							}
						}
					}
				}
			}
		}
	}
}

declare module com {
	export module telerik {
		export module widget {
			export module chart {
				export module engine {
					export module axes {
						export module common {
							export class SeriesModelWithAxes extends java.lang.Object {
								public static class: java.lang.Class<com.telerik.widget.chart.engine.axes.common.SeriesModelWithAxes>;
								/**
								 * Constructs a new instance of the com.telerik.widget.chart.engine.axes.common.SeriesModelWithAxes interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
								 */
								public constructor(implementation: {
									getFirstAxis(): com.telerik.widget.chart.engine.axes.AxisModel;
									getSecondAxis(): com.telerik.widget.chart.engine.axes.AxisModel;
									attachAxis(param0: com.telerik.widget.chart.engine.axes.AxisModel, param1: com.telerik.widget.chart.engine.axes.AxisType): void;
									detachAxis(param0: com.telerik.widget.chart.engine.axes.AxisModel): void;
								});
								public constructor();
								public detachAxis(param0: com.telerik.widget.chart.engine.axes.AxisModel): void;
								public attachAxis(param0: com.telerik.widget.chart.engine.axes.AxisModel, param1: com.telerik.widget.chart.engine.axes.AxisType): void;
								public getSecondAxis(): com.telerik.widget.chart.engine.axes.AxisModel;
								public getFirstAxis(): com.telerik.widget.chart.engine.axes.AxisModel;
							}
						}
					}
				}
			}
		}
	}
}

declare module com {
	export module telerik {
		export module widget {
			export module chart {
				export module engine {
					export module axes {
						export module common {
							export class TimeInterval {
								public static class: java.lang.Class<com.telerik.widget.chart.engine.axes.common.TimeInterval>;
								public static YEAR: com.telerik.widget.chart.engine.axes.common.TimeInterval;
								public static QUARTER: com.telerik.widget.chart.engine.axes.common.TimeInterval;
								public static MONTH: com.telerik.widget.chart.engine.axes.common.TimeInterval;
								public static WEEK: com.telerik.widget.chart.engine.axes.common.TimeInterval;
								public static WEEK_OF_YEAR: com.telerik.widget.chart.engine.axes.common.TimeInterval;
								public static DAY: com.telerik.widget.chart.engine.axes.common.TimeInterval;
								public static DAY_OF_WEEK: com.telerik.widget.chart.engine.axes.common.TimeInterval;
								public static DAY_OF_WEEK_IN_MONTH: com.telerik.widget.chart.engine.axes.common.TimeInterval;
								public static DAY_OF_YEAR: com.telerik.widget.chart.engine.axes.common.TimeInterval;
								public static HOUR: com.telerik.widget.chart.engine.axes.common.TimeInterval;
								public static MINUTE: com.telerik.widget.chart.engine.axes.common.TimeInterval;
								public static SECOND: com.telerik.widget.chart.engine.axes.common.TimeInterval;
								public static MILLISECOND: com.telerik.widget.chart.engine.axes.common.TimeInterval;
								public static TIME_IN_MILLIS: com.telerik.widget.chart.engine.axes.common.TimeInterval;
								public static valueOf(param0: java.lang.Class<any>, param1: string): java.lang.Enum<any>;
								public static values(): native.Array<com.telerik.widget.chart.engine.axes.common.TimeInterval>;
								public static valueOf(param0: string): com.telerik.widget.chart.engine.axes.common.TimeInterval;
							}
						}
					}
				}
			}
		}
	}
}

declare module com {
	export module telerik {
		export module widget {
			export module chart {
				export module engine {
					export module axes {
						export module common {
							export module layout {
								export abstract class AxisModelLayoutStrategy extends java.lang.Object {
									public static class: java.lang.Class<com.telerik.widget.chart.engine.axes.common.layout.AxisModelLayoutStrategy>;
									public maxLabelHeight: number;
									public maxLabelWidth: number;
									public totalLabelWidthToAvailableWidth: number;
									public updateTicksVisibility(param0: com.telerik.android.common.math.RadRect): void;
									public getDesiredSize(param0: com.telerik.android.common.math.RadSize): com.telerik.android.common.math.RadSize;
									public getZoom(): number;
									public getVisibleRange(param0: com.telerik.android.common.math.RadSize): com.telerik.widget.chart.engine.axes.continuous.ValueRange<java.lang.Double>;
									public constructor(param0: com.telerik.widget.chart.engine.axes.AxisModel);
									public owner(): com.telerik.widget.chart.engine.axes.AxisModel;
									public getDesiredMargin(param0: com.telerik.android.common.math.RadSize): com.telerik.android.common.RadThickness;
									public applyLayoutRounding(): void;
									public getDefaultLastLabelVisibility(): com.telerik.widget.chart.engine.axes.common.AxisLastLabelVisibility;
									public arrange(param0: com.telerik.android.common.math.RadRect): void;
									public arrangeLabelNone(param0: com.telerik.widget.chart.engine.axes.AxisLabelModel, param1: com.telerik.android.common.math.RadRect): void;
									public arrangeLabelMultiline(param0: com.telerik.widget.chart.engine.axes.AxisLabelModel, param1: com.telerik.android.common.math.RadRect): void;
								}
							}
						}
					}
				}
			}
		}
	}
}

declare module com {
	export module telerik {
		export module widget {
			export module chart {
				export module engine {
					export module axes {
						export module common {
							export module layout {
								export class HorizontalAxisLayoutStrategy extends com.telerik.widget.chart.engine.axes.common.layout.AxisModelLayoutStrategy {
									public static class: java.lang.Class<com.telerik.widget.chart.engine.axes.common.layout.HorizontalAxisLayoutStrategy>;
									public updateTicksVisibility(param0: com.telerik.android.common.math.RadRect): void;
									public getDesiredSize(param0: com.telerik.android.common.math.RadSize): com.telerik.android.common.math.RadSize;
									public getZoom(): number;
									public getVisibleRange(param0: com.telerik.android.common.math.RadSize): com.telerik.widget.chart.engine.axes.continuous.ValueRange<java.lang.Double>;
									public constructor(param0: com.telerik.widget.chart.engine.axes.AxisModel);
									public getDesiredMargin(param0: com.telerik.android.common.math.RadSize): com.telerik.android.common.RadThickness;
									public applyLayoutRounding(): void;
									public arrangeLabelRotate(param0: com.telerik.widget.chart.engine.axes.AxisLabelModel, param1: com.telerik.android.common.math.RadRect): void;
									public getDefaultLastLabelVisibility(): com.telerik.widget.chart.engine.axes.common.AxisLastLabelVisibility;
									public arrange(param0: com.telerik.android.common.math.RadRect): void;
									public arrangeLabelNone(param0: com.telerik.widget.chart.engine.axes.AxisLabelModel, param1: com.telerik.android.common.math.RadRect): void;
									public arrangeLabelMultiline(param0: com.telerik.widget.chart.engine.axes.AxisLabelModel, param1: com.telerik.android.common.math.RadRect): void;
								}
							}
						}
					}
				}
			}
		}
	}
}

declare module com {
	export module telerik {
		export module widget {
			export module chart {
				export module engine {
					export module axes {
						export module common {
							export module layout {
								export class VerticalAxisLayoutStrategy extends com.telerik.widget.chart.engine.axes.common.layout.AxisModelLayoutStrategy {
									public static class: java.lang.Class<com.telerik.widget.chart.engine.axes.common.layout.VerticalAxisLayoutStrategy>;
									public updateTicksVisibility(param0: com.telerik.android.common.math.RadRect): void;
									public getDesiredSize(param0: com.telerik.android.common.math.RadSize): com.telerik.android.common.math.RadSize;
									public getZoom(): number;
									public getVisibleRange(param0: com.telerik.android.common.math.RadSize): com.telerik.widget.chart.engine.axes.continuous.ValueRange<java.lang.Double>;
									public constructor(param0: com.telerik.widget.chart.engine.axes.AxisModel);
									public getDesiredMargin(param0: com.telerik.android.common.math.RadSize): com.telerik.android.common.RadThickness;
									public applyLayoutRounding(): void;
									public getDefaultLastLabelVisibility(): com.telerik.widget.chart.engine.axes.common.AxisLastLabelVisibility;
									public arrange(param0: com.telerik.android.common.math.RadRect): void;
									public arrangeLabelNone(param0: com.telerik.widget.chart.engine.axes.AxisLabelModel, param1: com.telerik.android.common.math.RadRect): void;
									public arrangeLabelMultiline(param0: com.telerik.widget.chart.engine.axes.AxisLabelModel, param1: com.telerik.android.common.math.RadRect): void;
								}
							}
						}
					}
				}
			}
		}
	}
}

declare module com {
	export module telerik {
		export module widget {
			export module chart {
				export module engine {
					export module axes {
						export module continuous {
							export class ContinuousAxisModel extends java.lang.Object {
								public static class: java.lang.Class<com.telerik.widget.chart.engine.axes.continuous.ContinuousAxisModel>;
								/**
								 * Constructs a new instance of the com.telerik.widget.chart.engine.axes.continuous.ContinuousAxisModel interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
								 */
								public constructor(implementation: {
								});
								public constructor();
							}
						}
					}
				}
			}
		}
	}
}

declare module com {
	export module telerik {
		export module widget {
			export module chart {
				export module engine {
					export module axes {
						export module continuous {
							export class DateTimeContinuousAxisModel extends com.telerik.widget.chart.engine.axes.AxisModel implements com.telerik.widget.chart.engine.axes.continuous.ContinuousAxisModel, com.telerik.widget.chart.engine.axes.categorical.AxisSupportsCombinedSeriesPlot {
								public static class: java.lang.Class<com.telerik.widget.chart.engine.axes.continuous.DateTimeContinuousAxisModel>;
								public getMajorStepUnit(): com.telerik.widget.chart.engine.axes.common.TimeInterval;
								public setMajorStepUnit(param0: com.telerik.widget.chart.engine.axes.common.TimeInterval): void;
								public getDateFormat(): java.text.DateFormat;
								public getSourceDateFormat(): java.text.DateFormat;
								public generateLastLabel(): com.telerik.widget.chart.engine.axes.AxisLabelModel;
								public getGapLength(): number;
								public setPlotMode(param0: com.telerik.widget.chart.engine.axes.common.AxisPlotMode): void;
								public getMinimum(): java.util.Calendar;
								public setSourceDateFormat(param0: java.text.DateFormat): void;
								public getLabelContentCore(param0: com.telerik.widget.chart.engine.axes.AxisTickModel): any;
								public resetState(): void;
								public getActualPlotMode(): com.telerik.widget.chart.engine.axes.common.AxisPlotMode;
								public createPlotInfo(param0: any): com.telerik.widget.chart.engine.axes.common.AxisPlotInfo;
								public setGapLength(param0: number): void;
								public getActualRange(): com.telerik.widget.chart.engine.axes.continuous.ValueRange<java.util.Calendar>;
								public getPlotMode(): com.telerik.widget.chart.engine.axes.common.AxisPlotMode;
								public setMaximumTicks(param0: number): void;
								public generateTicks(param0: com.telerik.widget.chart.engine.axes.continuous.ValueRange<java.lang.Double>): java.lang.Iterable<com.telerik.widget.chart.engine.axes.AxisTickModel>;
								public setDateFormat(param0: java.text.DateFormat): void;
								public setMajorStep(param0: number): void;
								public getMaximumTicks(): number;
								public constructor();
								public updateCore(param0: com.telerik.widget.chart.engine.axes.AxisUpdateContext): void;
								public setMaximum(param0: java.util.Calendar): void;
								public setMinimum(param0: java.util.Calendar): void;
								public getCombineGroupKey(param0: com.telerik.widget.chart.engine.dataPoints.DataPoint): any;
								public majorTickCount(): number;
								public getMaximum(): java.util.Calendar;
								public plotCore(param0: com.telerik.widget.chart.engine.axes.AxisUpdateContext): void;
								public getMajorStep(): number;
								public onZoomChanged(): void;
								public convertPhysicalUnitsToData(param0: number): any;
							}
							export module DateTimeContinuousAxisModel {
								export class DateTimePoint extends java.lang.Comparable<com.telerik.widget.chart.engine.axes.continuous.DateTimeContinuousAxisModel.DateTimePoint> {
									public static class: java.lang.Class<com.telerik.widget.chart.engine.axes.continuous.DateTimeContinuousAxisModel.DateTimePoint>;
									public date: java.util.Calendar;
									public point: com.telerik.widget.chart.engine.dataPoints.DataPoint;
									public slot: com.telerik.widget.chart.engine.axes.continuous.DateTimeContinuousAxisModel.TimeSlot;
									public compareTo(param0: com.telerik.widget.chart.engine.axes.continuous.DateTimeContinuousAxisModel.DateTimePoint): number;
								}
								export class PlotInfo extends java.lang.Object {
									public static class: java.lang.Class<com.telerik.widget.chart.engine.axes.continuous.DateTimeContinuousAxisModel.PlotInfo>;
									public min: number;
									public max: number;
									public extend: number;
								}
								export class TimeSlot extends java.lang.Object {
									public static class: java.lang.Class<com.telerik.widget.chart.engine.axes.continuous.DateTimeContinuousAxisModel.TimeSlot>;
									public startTicks: number;
									public ticks: number;
								}
							}
						}
					}
				}
			}
		}
	}
}

declare module com {
	export module telerik {
		export module widget {
			export module chart {
				export module engine {
					export module axes {
						export module continuous {
							export class LinearAxisModel extends com.telerik.widget.chart.engine.axes.continuous.NumericalAxisModel {
								public static class: java.lang.Class<com.telerik.widget.chart.engine.axes.continuous.LinearAxisModel>;
								public generateLastLabel(): com.telerik.widget.chart.engine.axes.AxisLabelModel;
								public majorTickCount(): number;
								public generateTicks(param0: com.telerik.widget.chart.engine.axes.continuous.ValueRange<java.lang.Double>): java.lang.Iterable<com.telerik.widget.chart.engine.axes.AxisTickModel>;
								public constructor();
								public calculateTickStep(): number;
							}
						}
					}
				}
			}
		}
	}
}

declare module com {
	export module telerik {
		export module widget {
			export module chart {
				export module engine {
					export module axes {
						export module continuous {
							export class LogarithmicAxisModel extends com.telerik.widget.chart.engine.axes.continuous.LinearAxisModel {
								public static class: java.lang.Class<com.telerik.widget.chart.engine.axes.continuous.LogarithmicAxisModel>;
								public setLogarithmBase(param0: number): void;
								public onPropertyChanged(param0: com.telerik.widget.chart.engine.elementTree.events.RadPropertyEventArgs): void;
								public constructor();
								public getLogarithmBase(): number;
							}
						}
					}
				}
			}
		}
	}
}

declare module com {
	export module telerik {
		export module widget {
			export module chart {
				export module engine {
					export module axes {
						export module continuous {
							export abstract class NumericalAxisModel extends com.telerik.widget.chart.engine.axes.AxisModel implements com.telerik.widget.chart.engine.axes.continuous.ContinuousAxisModel {
								public static class: java.lang.Class<com.telerik.widget.chart.engine.axes.continuous.NumericalAxisModel>;
								public actualRange: com.telerik.widget.chart.engine.axes.continuous.ValueRange<java.lang.Double>;
								public pointMinMax: com.telerik.widget.chart.engine.axes.continuous.ValueRange<java.lang.Double>;
								public getActualRange(): com.telerik.widget.chart.engine.axes.continuous.ValueRange<java.lang.Double>;
								public onPropertyChanged(param0: com.telerik.widget.chart.engine.elementTree.events.RadPropertyEventArgs): void;
								public getDesiredTickCount(): number;
								public setMajorStep(param0: number): void;
								public setRangeExtendDirection(param0: number): void;
								public constructor();
								public getMinimum(): number;
								public updateCore(param0: com.telerik.widget.chart.engine.axes.AxisUpdateContext): void;
								public getMaximum(): number;
								public setMinimum(param0: number): void;
								public getLabelContentCore(param0: com.telerik.widget.chart.engine.axes.AxisTickModel): any;
								public getRangeExtendDirection(): number;
								public getStackValue(param0: com.telerik.widget.chart.engine.dataPoints.DataPoint): com.telerik.widget.chart.engine.axes.AxisModel.StackValue;
								public setDesiredTickCount(param0: number): void;
								public plotCore(param0: com.telerik.widget.chart.engine.axes.AxisUpdateContext): void;
								public getMajorStep(): number;
								public setMaximum(param0: number): void;
								public createPlotInfo(param0: any): com.telerik.widget.chart.engine.axes.common.AxisPlotInfo;
								public onZoomChanged(): void;
								public convertPhysicalUnitsToData(param0: number): any;
							}
							export module NumericalAxisModel {
								export class RangeCalculator extends java.lang.Object {
									public static class: java.lang.Class<com.telerik.widget.chart.engine.axes.continuous.NumericalAxisModel.RangeCalculator>;
									public minimum: number;
									public maximum: number;
									public constructor(param0: com.telerik.widget.chart.engine.axes.continuous.NumericalAxisModel, param1: com.telerik.widget.chart.engine.axes.continuous.NumericalAxisModel, param2: boolean, param3: boolean);
									public roundToMajorStep(param0: number): com.telerik.widget.chart.engine.axes.continuous.ValueRange<java.lang.Double>;
									public extend(): com.telerik.widget.chart.engine.axes.continuous.ValueRange<java.lang.Double>;
								}
							}
						}
					}
				}
			}
		}
	}
}

declare module com {
	export module telerik {
		export module widget {
			export module chart {
				export module engine {
					export module axes {
						export module continuous {
							export class NumericalAxisOhlcPlotInfo extends com.telerik.widget.chart.engine.axes.continuous.NumericalAxisPlotInfoBase {
								public static class: java.lang.Class<com.telerik.widget.chart.engine.axes.continuous.NumericalAxisOhlcPlotInfo>;
								public normalizedHigh: number;
								public normalizedLow: number;
								public normalizedOpen: number;
								public normalizedClose: number;
								public physicalOpen: number;
								public physicalClose: number;
								public snapBaseTickIndex: number;
								public snapOpenTickIndex: number;
								public snapCloseTickIndex: number;
								public constructor();
							}
						}
					}
				}
			}
		}
	}
}

declare module com {
	export module telerik {
		export module widget {
			export module chart {
				export module engine {
					export module axes {
						export module continuous {
							export class NumericalAxisPlotInfo extends com.telerik.widget.chart.engine.axes.continuous.NumericalAxisPlotInfoBase {
								public static class: java.lang.Class<com.telerik.widget.chart.engine.axes.continuous.NumericalAxisPlotInfo>;
								public normalizedValue: number;
								public centerX(param0: com.telerik.android.common.math.RadRect): number;
								public centerY(param0: com.telerik.android.common.math.RadRect): number;
								public static create(param0: com.telerik.widget.chart.engine.axes.AxisModel, param1: number, param2: number, param3: number): com.telerik.widget.chart.engine.axes.continuous.NumericalAxisPlotInfo;
								public convertToAngle(): number;
							}
						}
					}
				}
			}
		}
	}
}

declare module com {
	export module telerik {
		export module widget {
			export module chart {
				export module engine {
					export module axes {
						export module continuous {
							export abstract class NumericalAxisPlotInfoBase extends com.telerik.widget.chart.engine.axes.common.AxisPlotInfo {
								public static class: java.lang.Class<com.telerik.widget.chart.engine.axes.continuous.NumericalAxisPlotInfoBase>;
								public plotOriginOffset: number;
								public normalizedOrigin: number;
								public constructor();
							}
						}
					}
				}
			}
		}
	}
}

declare module com {
	export module telerik {
		export module widget {
			export module chart {
				export module engine {
					export module axes {
						export module continuous {
							export class NumericalAxisRangeExtendDirection extends java.lang.Object {
								public static class: java.lang.Class<com.telerik.widget.chart.engine.axes.continuous.NumericalAxisRangeExtendDirection>;
								public static NONE: number;
								public static POSITIVE: number;
								public static NEGATIVE: number;
								public static BOTH: number;
								public constructor();
							}
						}
					}
				}
			}
		}
	}
}

declare module com {
	export module telerik {
		export module widget {
			export module chart {
				export module engine {
					export module axes {
						export module continuous {
							export class NumericalAxisRangePlotInfo extends com.telerik.widget.chart.engine.axes.continuous.NumericalAxisPlotInfoBase {
								public static class: java.lang.Class<com.telerik.widget.chart.engine.axes.continuous.NumericalAxisRangePlotInfo>;
								public normalizedHigh: number;
								public normalizedLow: number;
								public snapBaseTickIndex: number;
							}
						}
					}
				}
			}
		}
	}
}

declare module com {
	export module telerik {
		export module widget {
			export module chart {
				export module engine {
					export module axes {
						export module continuous {
							export class ValueRange<T>  extends java.lang.Object {
								public static class: java.lang.Class<com.telerik.widget.chart.engine.axes.continuous.ValueRange<any>>;
								public clone(): com.telerik.widget.chart.engine.axes.continuous.ValueRange<T>;
								public clone(): any;
								public isInRangeExclusive(param0: T): boolean;
								public isInRangeInclusive(param0: T): boolean;
								public equals(param0: any): boolean;
								public setMinimum(param0: T): void;
								public constructor();
								public setMaximum(param0: T): void;
								public getMaximum(): T;
								public constructor(param0: T, param1: T);
								public getMinimum(): T;
							}
						}
					}
				}
			}
		}
	}
}

declare module com {
	export module telerik {
		export module widget {
			export module chart {
				export module engine {
					export module chartAreas {
						export class AngleRange extends java.lang.Object {
							public static class: java.lang.Class<com.telerik.widget.chart.engine.chartAreas.AngleRange>;
							public getSweepAngle(): number;
							public constructor(param0: number, param1: number);
							public static getDefault(): com.telerik.widget.chart.engine.chartAreas.AngleRange;
							public getStartAngle(): number;
							public equals(param0: any): boolean;
						}
					}
				}
			}
		}
	}
}

declare module com {
	export module telerik {
		export module widget {
			export module chart {
				export module engine {
					export module chartAreas {
						export class CartesianChartAreaModel extends com.telerik.widget.chart.engine.chartAreas.ChartAreaModelWithAxes {
							public static class: java.lang.Class<com.telerik.widget.chart.engine.chartAreas.CartesianChartAreaModel>;
							public constructor();
							public convertPointToData(param0: com.telerik.android.common.math.RadPoint, param1: com.telerik.widget.chart.engine.axes.AxisModel, param2: com.telerik.widget.chart.engine.axes.AxisModel): com.telerik.android.common.DataTuple<any,any,any>;
							public getNotLoadedReasons(): java.lang.Iterable<string>;
							public applyLayoutRounding(): void;
							public getGrid(): com.telerik.widget.chart.engine.decorations.CartesianChartGridModel;
							public arrangeAxes(param0: com.telerik.android.common.math.RadRect): com.telerik.android.common.math.RadRect;
						}
						export module CartesianChartAreaModel {
							export class AxisStack extends java.lang.Object {
								public static class: java.lang.Class<com.telerik.widget.chart.engine.chartAreas.CartesianChartAreaModel.AxisStack>;
								public constructor(param0: java.util.List<com.telerik.widget.chart.engine.axes.AxisModel>);
								public getIsEmpty(): boolean;
								public measure(param0: com.telerik.android.common.math.RadSize): void;
							}
						}
					}
				}
			}
		}
	}
}

declare module com {
	export module telerik {
		export module widget {
			export module chart {
				export module engine {
					export module chartAreas {
						export class ChartAreaModel extends com.telerik.widget.chart.engine.elementTree.ChartElement {
							public static class: java.lang.Class<com.telerik.widget.chart.engine.chartAreas.ChartAreaModel>;
							public constructor();
							public getPlotArea(): com.telerik.widget.chart.engine.chartAreas.ChartPlotAreaModel;
							public previewMessage(param0: com.telerik.widget.chart.engine.elementTree.ChartMessage): void;
							public onPanOffsetChanged(): void;
							public invalidate(param0: number): void;
							public processZoomChanged(): void;
							public beginUpdate(): void;
							public arrangeOverride(param0: com.telerik.android.common.math.RadRect): com.telerik.android.common.math.RadRect;
							public endUpdate(param0: boolean): void;
							public getSeries(): com.telerik.widget.chart.engine.elementTree.ElementCollection<com.telerik.widget.chart.engine.series.ChartSeriesModel<any>>;
							public getView(): com.telerik.widget.chart.engine.view.ChartView;
							public onZoomChanged(): void;
							public canAddChild(param0: com.telerik.widget.chart.engine.elementTree.ChartNode): com.telerik.widget.chart.engine.elementTree.ModifyChildrenResult;
							public isSuspended(): boolean;
							public getDispatcher(): com.telerik.widget.chart.engine.elementTree.MessageDispatcher;
							public getNotLoadedReasons(): java.lang.Iterable<string>;
							public invalidate(): void;
							public invalidateNode(param0: com.telerik.widget.chart.engine.elementTree.ChartNode): void;
							public isTreeLoaded(): boolean;
							public loadElementTree(param0: com.telerik.widget.chart.engine.view.ChartView): void;
							public processPanOffsetChanged(): void;
						}
					}
				}
			}
		}
	}
}

declare module com {
	export module telerik {
		export module widget {
			export module chart {
				export module engine {
					export module chartAreas {
						export abstract class ChartAreaModelWithAxes extends com.telerik.widget.chart.engine.chartAreas.ChartAreaModel {
							public static class: java.lang.Class<com.telerik.widget.chart.engine.chartAreas.ChartAreaModelWithAxes>;
							public firstAxes: java.util.ArrayList<com.telerik.widget.chart.engine.axes.AxisModel>;
							public secondAxes: java.util.ArrayList<com.telerik.widget.chart.engine.axes.AxisModel>;
							public seriesCombineStrategies: java.util.Hashtable<com.telerik.widget.chart.engine.axes.AxisModel,com.telerik.widget.chart.engine.series.combination.ChartSeriesCombineStrategy>;
							public annotations: java.util.ArrayList<com.telerik.widget.chart.engine.decorations.annotations.ChartAnnotationModel>;
							public primaryFirstAxis: com.telerik.widget.chart.engine.axes.AxisModel;
							public primarySecondAxis: com.telerik.widget.chart.engine.axes.AxisModel;
							public constructor();
							public processZoomChanged(): void;
							public arrangeOverride(param0: com.telerik.android.common.math.RadRect): com.telerik.android.common.math.RadRect;
							public setGrid(param0: com.telerik.widget.chart.engine.decorations.ChartGridModel): void;
							public removeAxis(param0: com.telerik.widget.chart.engine.axes.AxisModel): void;
							public detachAxis(param0: com.telerik.widget.chart.engine.axes.AxisModel): void;
							public attachAxis(param0: com.telerik.widget.chart.engine.axes.AxisModel): void;
							public removeAnnotation(param0: com.telerik.widget.chart.engine.decorations.annotations.ChartAnnotationModel): void;
							public addAnnotation(param0: com.telerik.widget.chart.engine.decorations.annotations.ChartAnnotationModel): void;
							public canAddChild(param0: com.telerik.widget.chart.engine.elementTree.ChartNode): com.telerik.widget.chart.engine.elementTree.ModifyChildrenResult;
							public setAxis(param0: com.telerik.widget.chart.engine.axes.AxisModel, param1: com.telerik.widget.chart.engine.axes.AxisType): void;
							public arrangeAxes(param0: com.telerik.android.common.math.RadRect): com.telerik.android.common.math.RadRect;
							public isTreeLoaded(): boolean;
							public processPanOffsetChanged(): void;
						}
					}
				}
			}
		}
	}
}

declare module com {
	export module telerik {
		export module widget {
			export module chart {
				export module engine {
					export module chartAreas {
						export class ChartPlotAreaModel extends com.telerik.widget.chart.engine.elementTree.ChartElement {
							public static class: java.lang.Class<com.telerik.widget.chart.engine.chartAreas.ChartPlotAreaModel>;
							public canAddChild(param0: com.telerik.widget.chart.engine.elementTree.ChartNode): com.telerik.widget.chart.engine.elementTree.ModifyChildrenResult;
							public onChildRemoved(param0: number, param1: com.telerik.widget.chart.engine.elementTree.ChartNode): void;
							public arrangeOverride(param0: com.telerik.android.common.math.RadRect): com.telerik.android.common.math.RadRect;
							public arrange(param0: com.telerik.android.common.math.RadRect, param1: boolean): com.telerik.android.common.math.RadRect;
							public arrange(param0: com.telerik.android.common.math.RadRect): com.telerik.android.common.math.RadRect;
							public getSeries(): com.telerik.widget.chart.engine.elementTree.ElementCollection<com.telerik.widget.chart.engine.series.ChartSeriesModel<any>>;
							public onChildInserted(param0: number, param1: com.telerik.widget.chart.engine.elementTree.ChartNode): void;
						}
					}
				}
			}
		}
	}
}

declare module com {
	export module telerik {
		export module widget {
			export module chart {
				export module engine {
					export module chartAreas {
						export class LoadContext extends java.lang.Object {
							public static class: java.lang.Class<com.telerik.widget.chart.engine.chartAreas.LoadContext>;
							public getChartArea(): com.telerik.widget.chart.engine.chartAreas.ChartAreaModel;
						}
					}
				}
			}
		}
	}
}

declare module com {
	export module telerik {
		export module widget {
			export module chart {
				export module engine {
					export module dataPoints {
						export class CategoricalBubbleDataPoint extends com.telerik.widget.chart.engine.dataPoints.CategoricalDataPoint {
							public static class: java.lang.Class<com.telerik.widget.chart.engine.dataPoints.CategoricalBubbleDataPoint>;
							public constructor();
							public getSize(): number;
							public setSize(param0: number): void;
						}
					}
				}
			}
		}
	}
}

declare module com {
	export module telerik {
		export module widget {
			export module chart {
				export module engine {
					export module dataPoints {
						export class CategoricalDataPoint extends com.telerik.widget.chart.engine.dataPoints.CategoricalDataPointBase {
							public static class: java.lang.Class<com.telerik.widget.chart.engine.dataPoints.CategoricalDataPoint>;
							public static VALUE_PROPERTY_KEY: number;
							public constructor();
							public getValue(param0: number): any;
							public getCenterY(): number;
							public getCenterX(): number;
							public getTooltipTokens(): native.Array<any>;
							public setValue(param0: number, param1: any): boolean;
							public onPropertyChanged(param0: com.telerik.widget.chart.engine.elementTree.events.RadPropertyEventArgs): void;
							public setValue(param0: number): void;
							public setValueFromAxis(param0: com.telerik.widget.chart.engine.axes.AxisModel, param1: any): void;
							public getValue(): number;
							public getValueForAxis(param0: com.telerik.widget.chart.engine.axes.AxisModel): any;
						}
					}
				}
			}
		}
	}
}

declare module com {
	export module telerik {
		export module widget {
			export module chart {
				export module engine {
					export module dataPoints {
						export abstract class CategoricalDataPointBase extends com.telerik.widget.chart.engine.dataPoints.DataPoint {
							public static class: java.lang.Class<com.telerik.widget.chart.engine.dataPoints.CategoricalDataPointBase>;
							public numericalPlot: com.telerik.widget.chart.engine.axes.continuous.NumericalAxisPlotInfoBase;
							public categoricalPlot: com.telerik.widget.chart.engine.axes.categorical.CategoricalAxisPlotInfo;
							public constructor();
							public getCategory(): any;
							public setCategory(param0: any): void;
						}
					}
				}
			}
		}
	}
}

declare module com {
	export module telerik {
		export module widget {
			export module chart {
				export module engine {
					export module dataPoints {
						export abstract class DataPoint extends com.telerik.widget.chart.engine.elementTree.ChartNode {
							public static class: java.lang.Class<com.telerik.widget.chart.engine.dataPoints.DataPoint>;
							public static IS_SELECTED_PROPERTY_KEY: number;
							public static LABEL_PROPERTY_KEY: number;
							public isPositive: boolean;
							public isEmpty: boolean;
							public desiredSize: com.telerik.android.common.math.RadSize;
							public label: any;
							public dataItem: any;
							public constructor();
							public static checkIsEmpty(param0: any): boolean;
							public onPropertyChanged(param0: com.telerik.widget.chart.engine.elementTree.events.RadPropertyEventArgs): void;
							public setValueFromAxis(param0: com.telerik.widget.chart.engine.axes.AxisModel, param1: any): void;
							public setLabel(param0: any): void;
							public getCenterY(): number;
							public getDataItem(): any;
							public getCenterX(): number;
							public setDataItem(param0: any): void;
							public getTooltipTokens(): native.Array<any>;
							public getLabel(): any;
							public getCenter(): globalAndroid.graphics.Point;
							public setIsSelected(param0: boolean): void;
							public getValueForAxis(param0: com.telerik.widget.chart.engine.axes.AxisModel): any;
							public unloadCore(): void;
							public getIsSelected(): boolean;
						}
					}
				}
			}
		}
	}
}

declare module com {
	export module telerik {
		export module widget {
			export module chart {
				export module engine {
					export module dataPoints {
						export class DataPointCollection<T>  extends com.telerik.widget.chart.engine.elementTree.ElementCollection<any> implements java.util.List<any>  {
							public static class: java.lang.Class<com.telerik.widget.chart.engine.dataPoints.DataPointCollection<any>>;
							public subList(param0: number, param1: number): java.util.List<any>;
							public contains(param0: any): boolean;
							public remove(param0: number): any;
							public size(): number;
							public hashCode(): number;
							public toArray(): native.Array<any>;
							public listIterator(): java.util.ListIterator<any>;
							public addAll(param0: java.util.Collection<any>): boolean;
							public set(param0: number, param1: any): any;
							public constructor(param0: java.util.Collection<any>);
							public add(param0: any): boolean;
							public listIterator(param0: number): java.util.ListIterator<any>;
							public removeAll(param0: java.util.Collection<any>): boolean;
							public add(param0: number, param1: any): void;
							public toArray(param0: native.Array<any>): native.Array<any>;
							public retainAll(param0: java.util.Collection<any>): boolean;
							public constructor();
							public containsAll(param0: java.util.Collection<any>): boolean;
							public iterator(): java.util.Iterator<any>;
							public lastIndexOf(param0: any): number;
							public remove(param0: any): boolean;
							public clear(): void;
							public get(param0: number): any;
							public indexOf(param0: any): number;
							public constructor(param0: number);
							public addAll(param0: number, param1: java.util.Collection<any>): boolean;
							public constructor(param0: com.telerik.widget.chart.engine.elementTree.ChartElement);
							public equals(param0: any): boolean;
							public isEmpty(): boolean;
						}
					}
				}
			}
		}
	}
}

declare module com {
	export module telerik {
		export module widget {
			export module chart {
				export module engine {
					export module dataPoints {
						export class OhlcDataPoint extends com.telerik.widget.chart.engine.dataPoints.CategoricalDataPointBase {
							public static class: java.lang.Class<com.telerik.widget.chart.engine.dataPoints.OhlcDataPoint>;
							public constructor();
							public setLow(param0: number): void;
							public getOpen(): number;
							public onPropertyChanged(param0: com.telerik.widget.chart.engine.elementTree.events.RadPropertyEventArgs): void;
							public setValueFromAxis(param0: com.telerik.widget.chart.engine.axes.AxisModel, param1: any): void;
							public setOpen(param0: number): void;
							public isFalling(): boolean;
							public getClose(): number;
							public setClose(param0: number): void;
							public setHigh(param0: number): void;
							public isRising(): boolean;
							public getTooltipTokens(): native.Array<any>;
							public getLow(): number;
							public getHigh(): number;
							public getValueForAxis(param0: com.telerik.widget.chart.engine.axes.AxisModel): any;
							public getNumericalPlot(): com.telerik.widget.chart.engine.axes.continuous.NumericalAxisOhlcPlotInfo;
						}
					}
				}
			}
		}
	}
}

declare module com {
	export module telerik {
		export module widget {
			export module chart {
				export module engine {
					export module dataPoints {
						export class PieDataPoint extends com.telerik.widget.chart.engine.dataPoints.SingleValueDataPoint implements com.telerik.widget.primitives.legend.LegendSelectable {
							public static class: java.lang.Class<com.telerik.widget.chart.engine.dataPoints.PieDataPoint>;
							public constructor();
							public startAngle(): number;
							public percent(): number;
							public setSelectedChangeListener(param0: com.telerik.widget.primitives.legend.LegendSelectableListener): void;
							public setRelativeOffsetFromCenter(param0: number): void;
							public setName(param0: string): void;
							public getSelectedChangeListener(): com.telerik.widget.primitives.legend.LegendSelectableListener;
							public update(param0: number, param1: number, param2: number): void;
							public getName(): string;
							public getRelativeOffsetFromCenter(): number;
							public normalizedValue(): number;
							public sweepAngle(): number;
							public setIsSelected(param0: boolean): void;
							public getIsSelected(): boolean;
						}
					}
				}
			}
		}
	}
}

declare module com {
	export module telerik {
		export module widget {
			export module chart {
				export module engine {
					export module dataPoints {
						export class RangeDataPoint extends com.telerik.widget.chart.engine.dataPoints.CategoricalDataPointBase {
							public static class: java.lang.Class<com.telerik.widget.chart.engine.dataPoints.RangeDataPoint>;
							public constructor();
							public setLow(param0: number): void;
							public setHigh(param0: number): void;
							public getTooltipTokens(): native.Array<any>;
							public onPropertyChanged(param0: com.telerik.widget.chart.engine.elementTree.events.RadPropertyEventArgs): void;
							public numericalRangePlot(): com.telerik.widget.chart.engine.axes.continuous.NumericalAxisRangePlotInfo;
							public setValueFromAxis(param0: com.telerik.widget.chart.engine.axes.AxisModel, param1: any): void;
							public getLow(): number;
							public getHigh(): number;
							public getValueForAxis(param0: com.telerik.widget.chart.engine.axes.AxisModel): any;
						}
					}
				}
			}
		}
	}
}

declare module com {
	export module telerik {
		export module widget {
			export module chart {
				export module engine {
					export module dataPoints {
						export class ScatterBubbleDataPoint extends com.telerik.widget.chart.engine.dataPoints.ScatterDataPoint {
							public static class: java.lang.Class<com.telerik.widget.chart.engine.dataPoints.ScatterBubbleDataPoint>;
							public constructor();
							public getSize(): number;
							public setSize(param0: number): void;
						}
					}
				}
			}
		}
	}
}

declare module com {
	export module telerik {
		export module widget {
			export module chart {
				export module engine {
					export module dataPoints {
						export class ScatterDataPoint extends com.telerik.widget.chart.engine.dataPoints.DataPoint {
							public static class: java.lang.Class<com.telerik.widget.chart.engine.dataPoints.ScatterDataPoint>;
							public constructor();
							public getYPlot(): com.telerik.widget.chart.engine.axes.continuous.NumericalAxisPlotInfo;
							public setYValue(param0: number): void;
							public getYValue(): number;
							public onPropertyChanged(param0: com.telerik.widget.chart.engine.elementTree.events.RadPropertyEventArgs): void;
							public setValueFromAxis(param0: com.telerik.widget.chart.engine.axes.AxisModel, param1: any): void;
							public setyPlot(param0: com.telerik.widget.chart.engine.axes.continuous.NumericalAxisPlotInfo): void;
							public setXValue(param0: number): void;
							public setxPlot(param0: com.telerik.widget.chart.engine.axes.continuous.NumericalAxisPlotInfo): void;
							public getTooltipTokens(): native.Array<any>;
							public getXValue(): number;
							public getXPlot(): com.telerik.widget.chart.engine.axes.continuous.NumericalAxisPlotInfo;
							public getValueForAxis(param0: com.telerik.widget.chart.engine.axes.AxisModel): any;
						}
					}
				}
			}
		}
	}
}

declare module com {
	export module telerik {
		export module widget {
			export module chart {
				export module engine {
					export module dataPoints {
						export abstract class SingleValueDataPoint extends com.telerik.widget.chart.engine.dataPoints.DataPoint {
							public static class: java.lang.Class<com.telerik.widget.chart.engine.dataPoints.SingleValueDataPoint>;
							public constructor();
							public getValue(param0: number): any;
							public getTooltipTokens(): native.Array<any>;
							public setValue(param0: number, param1: any): boolean;
							public onPropertyChanged(param0: com.telerik.widget.chart.engine.elementTree.events.RadPropertyEventArgs): void;
							public setValue(param0: number): void;
							public getValue(): number;
							public getValueForAxis(param0: com.telerik.widget.chart.engine.axes.AxisModel): any;
						}
					}
				}
			}
		}
	}
}

declare module com {
	export module telerik {
		export module widget {
			export module chart {
				export module engine {
					export module databinding {
						export abstract class DataPointBinding extends java.lang.Object {
							public static class: java.lang.Class<com.telerik.widget.chart.engine.databinding.DataPointBinding>;
							public static DATA_POINT_BINDING_NAME: string;
							public constructor();
							public getValue(param0: any): any;
							public setPropertyChangeListener(param0: java.beans.PropertyChangeListener): void;
							public onPropertyChanged(param0: string): void;
						}
					}
				}
			}
		}
	}
}

declare module com {
	export module telerik {
		export module widget {
			export module chart {
				export module engine {
					export module databinding {
						export class DataPointBindingEntry extends java.lang.Object {
							public static class: java.lang.Class<com.telerik.widget.chart.engine.databinding.DataPointBindingEntry>;
							public constructor(param0: any, param1: com.telerik.widget.chart.engine.dataPoints.DataPoint);
							public getDataItem(): any;
							public getDataPoint(): com.telerik.widget.chart.engine.dataPoints.DataPoint;
						}
					}
				}
			}
		}
	}
}

declare module com {
	export module telerik {
		export module widget {
			export module chart {
				export module engine {
					export module databinding {
						export class FieldNameDataPointBinding extends com.telerik.widget.chart.engine.databinding.ReflectiveDataPointBinding {
							public static class: java.lang.Class<com.telerik.widget.chart.engine.databinding.FieldNameDataPointBinding>;
							public constructor();
							public setFieldName(param0: string): void;
							public constructor(param0: string);
							public getMemberValue(param0: any): any;
							public getFieldName(): string;
						}
					}
				}
			}
		}
	}
}

declare module com {
	export module telerik {
		export module widget {
			export module chart {
				export module engine {
					export module databinding {
						export class GenericDataPointBinding<T, U>  extends com.telerik.widget.chart.engine.databinding.DataPointBinding {
							public static class: java.lang.Class<com.telerik.widget.chart.engine.databinding.GenericDataPointBinding<any,any>>;
							public constructor();
							public constructor(param0: com.telerik.android.common.Function<any,any>);
							public getValue(param0: any): any;
						}
					}
				}
			}
		}
	}
}

declare module com {
	export module telerik {
		export module widget {
			export module chart {
				export module engine {
					export module databinding {
						export class PropertyNameDataPointBinding extends com.telerik.widget.chart.engine.databinding.ReflectiveDataPointBinding {
							public static class: java.lang.Class<com.telerik.widget.chart.engine.databinding.PropertyNameDataPointBinding>;
							public constructor();
							public setPropertyName(param0: string): void;
							public constructor(param0: string);
							public getMemberValue(param0: any): any;
							public getPropertyName(): string;
						}
					}
				}
			}
		}
	}
}

declare module com {
	export module telerik {
		export module widget {
			export module chart {
				export module engine {
					export module databinding {
						export abstract class ReflectiveDataPointBinding extends com.telerik.widget.chart.engine.databinding.DataPointBinding {
							public static class: java.lang.Class<com.telerik.widget.chart.engine.databinding.ReflectiveDataPointBinding>;
							public constructor();
							public setName(param0: string): boolean;
							public constructor(param0: string);
							public getName(): string;
							public getValue(param0: any): any;
							public getMemberValue(param0: any): any;
						}
					}
				}
			}
		}
	}
}

declare module com {
	export module telerik {
		export module widget {
			export module chart {
				export module engine {
					export module databinding {
						export module datasources {
							export class CategoricalBubbleSeriesDataSource extends com.telerik.widget.chart.engine.databinding.datasources.CategoricalSeriesDataSource {
								public static class: java.lang.Class<com.telerik.widget.chart.engine.databinding.datasources.CategoricalBubbleSeriesDataSource>;
								public getBubbleSizeBinding(): com.telerik.widget.chart.engine.databinding.DataPointBinding;
								public initializeBinding(param0: com.telerik.widget.chart.engine.databinding.DataPointBindingEntry): void;
								public constructor(param0: com.telerik.widget.chart.engine.series.ChartSeriesModel<any>);
								public collectionChanged(param0: com.telerik.android.common.CollectionChangedEvent<any>): void;
								public setBubbleSizeBinding(param0: com.telerik.widget.chart.engine.databinding.DataPointBinding): void;
								public collectionChanged(param0: com.telerik.android.common.CollectionChangedEvent<any>): void;
								public createDataPoint(): com.telerik.widget.chart.engine.dataPoints.DataPoint;
								public propertyChange(param0: java.beans.PropertyChangeEvent): void;
							}
						}
					}
				}
			}
		}
	}
}

declare module com {
	export module telerik {
		export module widget {
			export module chart {
				export module engine {
					export module databinding {
						export module datasources {
							export class CategoricalSeriesDataSource extends com.telerik.widget.chart.engine.databinding.datasources.CategoricalSeriesDataSourceBase {
								public static class: java.lang.Class<com.telerik.widget.chart.engine.databinding.datasources.CategoricalSeriesDataSource>;
								public valueBinding: com.telerik.widget.chart.engine.databinding.DataPointBinding;
								public getValueBinding(): com.telerik.widget.chart.engine.databinding.DataPointBinding;
								public processSize(param0: com.telerik.widget.chart.engine.dataPoints.DataPoint, param1: com.telerik.android.common.math.RadSize): void;
								public initializeBinding(param0: com.telerik.widget.chart.engine.databinding.DataPointBindingEntry): void;
								public constructor(param0: com.telerik.widget.chart.engine.series.ChartSeriesModel<any>);
								public setValueBinding(param0: com.telerik.widget.chart.engine.databinding.DataPointBinding): void;
								public collectionChanged(param0: com.telerik.android.common.CollectionChangedEvent<any>): void;
								public processDoubleArray(param0: com.telerik.widget.chart.engine.dataPoints.DataPoint, param1: native.Array<number>): void;
								public processDouble(param0: com.telerik.widget.chart.engine.dataPoints.DataPoint, param1: number): void;
								public collectionChanged(param0: com.telerik.android.common.CollectionChangedEvent<any>): void;
								public createDataPoint(): com.telerik.widget.chart.engine.dataPoints.DataPoint;
								public processPoint(param0: com.telerik.widget.chart.engine.dataPoints.DataPoint, param1: globalAndroid.graphics.Point): void;
								public propertyChange(param0: java.beans.PropertyChangeEvent): void;
							}
						}
					}
				}
			}
		}
	}
}

declare module com {
	export module telerik {
		export module widget {
			export module chart {
				export module engine {
					export module databinding {
						export module datasources {
							export abstract class CategoricalSeriesDataSourceBase extends com.telerik.widget.chart.engine.databinding.datasources.ChartSeriesDataSource {
								public static class: java.lang.Class<com.telerik.widget.chart.engine.databinding.datasources.CategoricalSeriesDataSourceBase>;
								public updateBinding(param0: com.telerik.widget.chart.engine.databinding.DataPointBindingEntry): void;
								public setCategoryBinding(param0: com.telerik.widget.chart.engine.databinding.DataPointBinding): void;
								public initializeBinding(param0: com.telerik.widget.chart.engine.databinding.DataPointBindingEntry): void;
								public constructor(param0: com.telerik.widget.chart.engine.series.ChartSeriesModel<any>);
								public collectionChanged(param0: com.telerik.android.common.CollectionChangedEvent<any>): void;
								public getCategoryBinding(): com.telerik.widget.chart.engine.databinding.DataPointBinding;
								public collectionChanged(param0: com.telerik.android.common.CollectionChangedEvent<any>): void;
								public propertyChange(param0: java.beans.PropertyChangeEvent): void;
							}
						}
					}
				}
			}
		}
	}
}

declare module com {
	export module telerik {
		export module widget {
			export module chart {
				export module engine {
					export module databinding {
						export module datasources {
							export abstract class ChartSeriesDataSource extends java.lang.Object implements java.beans.PropertyChangeListener, com.telerik.android.common.CollectionChangeListener<any> {
								public static class: java.lang.Class<com.telerik.widget.chart.engine.databinding.datasources.ChartSeriesDataSource>;
								public itemsSource: java.lang.Iterable<any>;
								public owner: com.telerik.widget.chart.engine.series.ChartSeriesModel<any>;
								public bindings: java.util.ArrayList<com.telerik.widget.chart.engine.databinding.DataPointBindingEntry>;
								public dataChangeScheduled: boolean;
								public addBoundItemPropertyChangedListener(param0: com.telerik.widget.chart.engine.databinding.datasources.DataBindingListener): void;
								public generateDataPoint(param0: any, param1: number): com.telerik.widget.chart.engine.dataPoints.DataPoint;
								public updateBinding(param0: com.telerik.widget.chart.engine.databinding.DataPointBindingEntry): void;
								public constructor(param0: com.telerik.widget.chart.engine.series.ChartSeriesModel<any>);
								public getOwner(): com.telerik.widget.chart.engine.series.ChartSeriesModel<any>;
								public collectionChanged(param0: com.telerik.android.common.CollectionChangedEvent<any>): void;
								public processDoubleArray(param0: com.telerik.widget.chart.engine.dataPoints.DataPoint, param1: native.Array<number>): void;
								public removeBoundItemPropertyChangedListener(param0: com.telerik.widget.chart.engine.databinding.datasources.DataBindingListener): void;
								public setItemsSource(param0: java.lang.Iterable<any>): void;
								public unbind(): void;
								public collectionChanged(param0: com.telerik.android.common.CollectionChangedEvent<any>): void;
								public createDataPoint(): com.telerik.widget.chart.engine.dataPoints.DataPoint;
								public bindCore(): void;
								public processPoint(param0: com.telerik.widget.chart.engine.dataPoints.DataPoint, param1: globalAndroid.graphics.Point): void;
								public propertyChange(param0: java.beans.PropertyChangeEvent): void;
								public getItemsSource(): java.lang.Iterable<any>;
								public getBindings(): java.util.ArrayList<com.telerik.widget.chart.engine.databinding.DataPointBindingEntry>;
								public processSize(param0: com.telerik.widget.chart.engine.dataPoints.DataPoint, param1: com.telerik.android.common.math.RadSize): void;
								public initializeBinding(param0: com.telerik.widget.chart.engine.databinding.DataPointBindingEntry): void;
								public rebind(param0: boolean, param1: java.lang.Iterable<any>): void;
								public processDouble(param0: com.telerik.widget.chart.engine.dataPoints.DataPoint, param1: number): void;
							}
						}
					}
				}
			}
		}
	}
}

declare module com {
	export module telerik {
		export module widget {
			export module chart {
				export module engine {
					export module databinding {
						export module datasources {
							export class DataBindingListener extends java.lang.Object {
								public static class: java.lang.Class<com.telerik.widget.chart.engine.databinding.datasources.DataBindingListener>;
								/**
								 * Constructs a new instance of the com.telerik.widget.chart.engine.databinding.datasources.DataBindingListener interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
								 */
								public constructor(implementation: {
									onDataBindingComplete(): void;
									onBoundItemPropertyChanged(param0: com.telerik.widget.chart.engine.databinding.DataPointBindingEntry, param1: java.beans.PropertyChangeEvent): void;
								});
								public constructor();
								public onBoundItemPropertyChanged(param0: com.telerik.widget.chart.engine.databinding.DataPointBindingEntry, param1: java.beans.PropertyChangeEvent): void;
								public onDataBindingComplete(): void;
							}
						}
					}
				}
			}
		}
	}
}

declare module com {
	export module telerik {
		export module widget {
			export module chart {
				export module engine {
					export module databinding {
						export module datasources {
							export class OhlcSeriesDataSource extends com.telerik.widget.chart.engine.databinding.datasources.CategoricalSeriesDataSourceBase {
								public static class: java.lang.Class<com.telerik.widget.chart.engine.databinding.datasources.OhlcSeriesDataSource>;
								public getHighBinding(): com.telerik.widget.chart.engine.databinding.DataPointBinding;
								public constructor(param0: com.telerik.widget.chart.engine.series.ChartSeriesModel<any>);
								public collectionChanged(param0: com.telerik.android.common.CollectionChangedEvent<any>): void;
								public getLowBinding(): com.telerik.widget.chart.engine.databinding.DataPointBinding;
								public getOpenBinding(): com.telerik.widget.chart.engine.databinding.DataPointBinding;
								public processDoubleArray(param0: com.telerik.widget.chart.engine.dataPoints.DataPoint, param1: native.Array<number>): void;
								public collectionChanged(param0: com.telerik.android.common.CollectionChangedEvent<any>): void;
								public createDataPoint(): com.telerik.widget.chart.engine.dataPoints.DataPoint;
								public processPoint(param0: com.telerik.widget.chart.engine.dataPoints.DataPoint, param1: globalAndroid.graphics.Point): void;
								public propertyChange(param0: java.beans.PropertyChangeEvent): void;
								public getCloseBinding(): com.telerik.widget.chart.engine.databinding.DataPointBinding;
								public processSize(param0: com.telerik.widget.chart.engine.dataPoints.DataPoint, param1: com.telerik.android.common.math.RadSize): void;
								public initializeBinding(param0: com.telerik.widget.chart.engine.databinding.DataPointBindingEntry): void;
								public setCloseBinding(param0: com.telerik.widget.chart.engine.databinding.DataPointBinding): void;
								public setLowBinding(param0: com.telerik.widget.chart.engine.databinding.DataPointBinding): void;
								public setHighBinding(param0: com.telerik.widget.chart.engine.databinding.DataPointBinding): void;
								public processDouble(param0: com.telerik.widget.chart.engine.dataPoints.DataPoint, param1: number): void;
								public setOpenBinding(param0: com.telerik.widget.chart.engine.databinding.DataPointBinding): void;
							}
						}
					}
				}
			}
		}
	}
}

declare module com {
	export module telerik {
		export module widget {
			export module chart {
				export module engine {
					export module databinding {
						export module datasources {
							export class PieSeriesDataSource extends com.telerik.widget.chart.engine.databinding.datasources.SingleValuePointDataSource {
								public static class: java.lang.Class<com.telerik.widget.chart.engine.databinding.datasources.PieSeriesDataSource>;
								public initializeBinding(param0: com.telerik.widget.chart.engine.databinding.DataPointBindingEntry): void;
								public constructor(param0: com.telerik.widget.chart.engine.series.ChartSeriesModel<any>);
								public collectionChanged(param0: com.telerik.android.common.CollectionChangedEvent<any>): void;
								public setNameBinding(param0: com.telerik.widget.chart.engine.databinding.DataPointBinding): void;
								public constructor(param0: com.telerik.widget.chart.engine.series.PieSeriesModel);
								public collectionChanged(param0: com.telerik.android.common.CollectionChangedEvent<any>): void;
								public createDataPoint(): com.telerik.widget.chart.engine.dataPoints.DataPoint;
								public propertyChange(param0: java.beans.PropertyChangeEvent): void;
								public getNameBinding(): com.telerik.widget.chart.engine.databinding.DataPointBinding;
							}
						}
					}
				}
			}
		}
	}
}

declare module com {
	export module telerik {
		export module widget {
			export module chart {
				export module engine {
					export module databinding {
						export module datasources {
							export class RangeSeriesDataSourceBase extends com.telerik.widget.chart.engine.databinding.datasources.CategoricalSeriesDataSourceBase {
								public static class: java.lang.Class<com.telerik.widget.chart.engine.databinding.datasources.RangeSeriesDataSourceBase>;
								public getHighBinding(): com.telerik.widget.chart.engine.databinding.DataPointBinding;
								public constructor(param0: com.telerik.widget.chart.engine.series.ChartSeriesModel<any>);
								public collectionChanged(param0: com.telerik.android.common.CollectionChangedEvent<any>): void;
								public getLowBinding(): com.telerik.widget.chart.engine.databinding.DataPointBinding;
								public processDoubleArray(param0: com.telerik.widget.chart.engine.dataPoints.DataPoint, param1: native.Array<number>): void;
								public collectionChanged(param0: com.telerik.android.common.CollectionChangedEvent<any>): void;
								public createDataPoint(): com.telerik.widget.chart.engine.dataPoints.DataPoint;
								public processPoint(param0: com.telerik.widget.chart.engine.dataPoints.DataPoint, param1: globalAndroid.graphics.Point): void;
								public propertyChange(param0: java.beans.PropertyChangeEvent): void;
								public processSize(param0: com.telerik.widget.chart.engine.dataPoints.DataPoint, param1: com.telerik.android.common.math.RadSize): void;
								public initializeBinding(param0: com.telerik.widget.chart.engine.databinding.DataPointBindingEntry): void;
								public setLowBinding(param0: com.telerik.widget.chart.engine.databinding.DataPointBinding): void;
								public setHighBinding(param0: com.telerik.widget.chart.engine.databinding.DataPointBinding): void;
								public processDouble(param0: com.telerik.widget.chart.engine.dataPoints.DataPoint, param1: number): void;
							}
						}
					}
				}
			}
		}
	}
}

declare module com {
	export module telerik {
		export module widget {
			export module chart {
				export module engine {
					export module databinding {
						export module datasources {
							export class ScatterBubbleSeriesDataSource extends com.telerik.widget.chart.engine.databinding.datasources.ScatterSeriesDataSource {
								public static class: java.lang.Class<com.telerik.widget.chart.engine.databinding.datasources.ScatterBubbleSeriesDataSource>;
								public getBubbleSizeBinding(): com.telerik.widget.chart.engine.databinding.DataPointBinding;
								public initializeBinding(param0: com.telerik.widget.chart.engine.databinding.DataPointBindingEntry): void;
								public constructor(param0: com.telerik.widget.chart.engine.series.ChartSeriesModel<any>);
								public collectionChanged(param0: com.telerik.android.common.CollectionChangedEvent<any>): void;
								public setBubbleSizeBinding(param0: com.telerik.widget.chart.engine.databinding.DataPointBinding): void;
								public processDoubleArray(param0: com.telerik.widget.chart.engine.dataPoints.DataPoint, param1: native.Array<number>): void;
								public collectionChanged(param0: com.telerik.android.common.CollectionChangedEvent<any>): void;
								public createDataPoint(): com.telerik.widget.chart.engine.dataPoints.DataPoint;
								public propertyChange(param0: java.beans.PropertyChangeEvent): void;
							}
						}
					}
				}
			}
		}
	}
}

declare module com {
	export module telerik {
		export module widget {
			export module chart {
				export module engine {
					export module databinding {
						export module datasources {
							export class ScatterSeriesDataSource extends com.telerik.widget.chart.engine.databinding.datasources.ChartSeriesDataSource {
								public static class: java.lang.Class<com.telerik.widget.chart.engine.databinding.datasources.ScatterSeriesDataSource>;
								public constructor(param0: com.telerik.widget.chart.engine.series.ChartSeriesModel<any>);
								public collectionChanged(param0: com.telerik.android.common.CollectionChangedEvent<any>): void;
								public getYValueBinding(): com.telerik.widget.chart.engine.databinding.DataPointBinding;
								public processDoubleArray(param0: com.telerik.widget.chart.engine.dataPoints.DataPoint, param1: native.Array<number>): void;
								public getXValueBinding(): com.telerik.widget.chart.engine.databinding.DataPointBinding;
								public setXValueBinding(param0: com.telerik.widget.chart.engine.databinding.DataPointBinding): void;
								public collectionChanged(param0: com.telerik.android.common.CollectionChangedEvent<any>): void;
								public createDataPoint(): com.telerik.widget.chart.engine.dataPoints.DataPoint;
								public processPoint(param0: com.telerik.widget.chart.engine.dataPoints.DataPoint, param1: globalAndroid.graphics.Point): void;
								public propertyChange(param0: java.beans.PropertyChangeEvent): void;
								public processSize(param0: com.telerik.widget.chart.engine.dataPoints.DataPoint, param1: com.telerik.android.common.math.RadSize): void;
								public initializeBinding(param0: com.telerik.widget.chart.engine.databinding.DataPointBindingEntry): void;
								public setYValueBinding(param0: com.telerik.widget.chart.engine.databinding.DataPointBinding): void;
								public processDouble(param0: com.telerik.widget.chart.engine.dataPoints.DataPoint, param1: number): void;
							}
						}
					}
				}
			}
		}
	}
}

declare module com {
	export module telerik {
		export module widget {
			export module chart {
				export module engine {
					export module databinding {
						export module datasources {
							export abstract class SingleValuePointDataSource extends com.telerik.widget.chart.engine.databinding.datasources.ChartSeriesDataSource {
								public static class: java.lang.Class<com.telerik.widget.chart.engine.databinding.datasources.SingleValuePointDataSource>;
								public getValueBinding(): com.telerik.widget.chart.engine.databinding.DataPointBinding;
								public processSize(param0: com.telerik.widget.chart.engine.dataPoints.DataPoint, param1: com.telerik.android.common.math.RadSize): void;
								public initializeBinding(param0: com.telerik.widget.chart.engine.databinding.DataPointBindingEntry): void;
								public constructor(param0: com.telerik.widget.chart.engine.series.ChartSeriesModel<any>);
								public setValueBinding(param0: com.telerik.widget.chart.engine.databinding.DataPointBinding): void;
								public collectionChanged(param0: com.telerik.android.common.CollectionChangedEvent<any>): void;
								public processDoubleArray(param0: com.telerik.widget.chart.engine.dataPoints.DataPoint, param1: native.Array<number>): void;
								public processDouble(param0: com.telerik.widget.chart.engine.dataPoints.DataPoint, param1: number): void;
								public collectionChanged(param0: com.telerik.android.common.CollectionChangedEvent<any>): void;
								public processPoint(param0: com.telerik.widget.chart.engine.dataPoints.DataPoint, param1: globalAndroid.graphics.Point): void;
								public propertyChange(param0: java.beans.PropertyChangeEvent): void;
							}
						}
					}
				}
			}
		}
	}
}

declare module com {
	export module telerik {
		export module widget {
			export module chart {
				export module engine {
					export module databinding {
						export module datasources {
							export module financial {
								export class AdaptiveMovingAverageKaufmanIndicatorDataSource extends com.telerik.widget.chart.engine.databinding.datasources.financial.ValuePeriodIndicatorDataSourceBase {
									public static class: java.lang.Class<com.telerik.widget.chart.engine.databinding.datasources.financial.AdaptiveMovingAverageKaufmanIndicatorDataSource>;
									public getSlowPeriod(): number;
									public collectionChanged(param0: com.telerik.android.common.CollectionChangedEvent<any>): void;
									public bindCore(): void;
									public propertyChange(param0: java.beans.PropertyChangeEvent): void;
									public setFastPeriod(param0: number): void;
									public constructor(param0: com.telerik.widget.chart.engine.series.ChartSeriesModel<any>);
									public getFastPeriod(): number;
									public collectionChanged(param0: com.telerik.android.common.CollectionChangedEvent<any>): void;
									public updateBinding(param0: com.telerik.widget.chart.engine.databinding.DataPointBindingEntry): void;
									public setSlowPeriod(param0: number): void;
								}
							}
						}
					}
				}
			}
		}
	}
}

declare module com {
	export module telerik {
		export module widget {
			export module chart {
				export module engine {
					export module databinding {
						export module datasources {
							export module financial {
								export class AverageTrueRangeIndicatorDataSource extends com.telerik.widget.chart.engine.databinding.datasources.financial.HighLowClosePeriodIndicatorDataSourceBase {
									public static class: java.lang.Class<com.telerik.widget.chart.engine.databinding.datasources.financial.AverageTrueRangeIndicatorDataSource>;
									public collectionChanged(param0: com.telerik.android.common.CollectionChangedEvent<any>): void;
									public bindCore(): void;
									public propertyChange(param0: java.beans.PropertyChangeEvent): void;
									public constructor(param0: com.telerik.widget.chart.engine.series.ChartSeriesModel<any>);
									public collectionChanged(param0: com.telerik.android.common.CollectionChangedEvent<any>): void;
									public updateBinding(param0: com.telerik.widget.chart.engine.databinding.DataPointBindingEntry): void;
								}
							}
						}
					}
				}
			}
		}
	}
}

declare module com {
	export module telerik {
		export module widget {
			export module chart {
				export module engine {
					export module databinding {
						export module datasources {
							export module financial {
								export class BollingerBandsIndicatorDataSource extends com.telerik.widget.chart.engine.databinding.datasources.financial.ValuePeriodIndicatorDataSourceBase {
									public static class: java.lang.Class<com.telerik.widget.chart.engine.databinding.datasources.financial.BollingerBandsIndicatorDataSource>;
									public unbind(): void;
									public collectionChanged(param0: com.telerik.android.common.CollectionChangedEvent<any>): void;
									public bindCore(): void;
									public propertyChange(param0: java.beans.PropertyChangeEvent): void;
									public constructor(param0: com.telerik.widget.chart.engine.series.ChartSeriesModel<any>);
									public collectionChanged(param0: com.telerik.android.common.CollectionChangedEvent<any>): void;
									public getStandardDeviations(): number;
									public updateBinding(param0: com.telerik.widget.chart.engine.databinding.DataPointBindingEntry): void;
									public setStandardDeviations(param0: number): void;
								}
							}
						}
					}
				}
			}
		}
	}
}

declare module com {
	export module telerik {
		export module widget {
			export module chart {
				export module engine {
					export module databinding {
						export module datasources {
							export module financial {
								export class CommodityChannelIndicatorDataSource extends com.telerik.widget.chart.engine.databinding.datasources.financial.HighLowClosePeriodIndicatorDataSourceBase {
									public static class: java.lang.Class<com.telerik.widget.chart.engine.databinding.datasources.financial.CommodityChannelIndicatorDataSource>;
									public collectionChanged(param0: com.telerik.android.common.CollectionChangedEvent<any>): void;
									public bindCore(): void;
									public propertyChange(param0: java.beans.PropertyChangeEvent): void;
									public constructor(param0: com.telerik.widget.chart.engine.series.ChartSeriesModel<any>);
									public collectionChanged(param0: com.telerik.android.common.CollectionChangedEvent<any>): void;
									public updateBinding(param0: com.telerik.widget.chart.engine.databinding.DataPointBindingEntry): void;
								}
							}
						}
					}
				}
			}
		}
	}
}

declare module com {
	export module telerik {
		export module widget {
			export module chart {
				export module engine {
					export module databinding {
						export module datasources {
							export module financial {
								export class ExponentialMovingAverageIndicatorDataSource extends com.telerik.widget.chart.engine.databinding.datasources.financial.ValuePeriodIndicatorDataSourceBase {
									public static class: java.lang.Class<com.telerik.widget.chart.engine.databinding.datasources.financial.ExponentialMovingAverageIndicatorDataSource>;
									public collectionChanged(param0: com.telerik.android.common.CollectionChangedEvent<any>): void;
									public bindCore(): void;
									public propertyChange(param0: java.beans.PropertyChangeEvent): void;
									public static calculateCurrentValue(param0: boolean, param1: number, param2: number, param3: number): number;
									public constructor(param0: com.telerik.widget.chart.engine.series.ChartSeriesModel<any>);
									public setModified(param0: boolean): void;
									public collectionChanged(param0: com.telerik.android.common.CollectionChangedEvent<any>): void;
									public updateBinding(param0: com.telerik.widget.chart.engine.databinding.DataPointBindingEntry): void;
									public isModified(): boolean;
								}
							}
						}
					}
				}
			}
		}
	}
}

declare module com {
	export module telerik {
		export module widget {
			export module chart {
				export module engine {
					export module databinding {
						export module datasources {
							export module financial {
								export class HighLowCloseIndicatorDataSourceBase extends com.telerik.widget.chart.engine.databinding.datasources.financial.HighLowIndicatorDataSourceBase {
									public static class: java.lang.Class<com.telerik.widget.chart.engine.databinding.datasources.financial.HighLowCloseIndicatorDataSourceBase>;
									public closeBinding: com.telerik.widget.chart.engine.databinding.DataPointBinding;
									public collectionChanged(param0: com.telerik.android.common.CollectionChangedEvent<any>): void;
									public propertyChange(param0: java.beans.PropertyChangeEvent): void;
									public getCloseBinding(): com.telerik.widget.chart.engine.databinding.DataPointBinding;
									public setCloseBinding(param0: com.telerik.widget.chart.engine.databinding.DataPointBinding): void;
									public constructor(param0: com.telerik.widget.chart.engine.series.ChartSeriesModel<any>);
									public collectionChanged(param0: com.telerik.android.common.CollectionChangedEvent<any>): void;
								}
							}
						}
					}
				}
			}
		}
	}
}

declare module com {
	export module telerik {
		export module widget {
			export module chart {
				export module engine {
					export module databinding {
						export module datasources {
							export module financial {
								export class HighLowClosePeriodIndicatorDataSourceBase extends com.telerik.widget.chart.engine.databinding.datasources.financial.HighLowCloseIndicatorDataSourceBase {
									public static class: java.lang.Class<com.telerik.widget.chart.engine.databinding.datasources.financial.HighLowClosePeriodIndicatorDataSourceBase>;
									public getPeriod(): number;
									public collectionChanged(param0: com.telerik.android.common.CollectionChangedEvent<any>): void;
									public propertyChange(param0: java.beans.PropertyChangeEvent): void;
									public setPeriod(param0: number): void;
									public constructor(param0: com.telerik.widget.chart.engine.series.ChartSeriesModel<any>);
									public collectionChanged(param0: com.telerik.android.common.CollectionChangedEvent<any>): void;
								}
							}
						}
					}
				}
			}
		}
	}
}

declare module com {
	export module telerik {
		export module widget {
			export module chart {
				export module engine {
					export module databinding {
						export module datasources {
							export module financial {
								export class HighLowIndicatorDataSourceBase extends com.telerik.widget.chart.engine.databinding.datasources.CategoricalSeriesDataSource {
									public static class: java.lang.Class<com.telerik.widget.chart.engine.databinding.datasources.financial.HighLowIndicatorDataSourceBase>;
									public highBinding: com.telerik.widget.chart.engine.databinding.DataPointBinding;
									public lowBinding: com.telerik.widget.chart.engine.databinding.DataPointBinding;
									public setHighBinding(param0: com.telerik.widget.chart.engine.databinding.DataPointBinding): void;
									public collectionChanged(param0: com.telerik.android.common.CollectionChangedEvent<any>): void;
									public getHighBinding(): com.telerik.widget.chart.engine.databinding.DataPointBinding;
									public propertyChange(param0: java.beans.PropertyChangeEvent): void;
									public setLowBinding(param0: com.telerik.widget.chart.engine.databinding.DataPointBinding): void;
									public constructor(param0: com.telerik.widget.chart.engine.series.ChartSeriesModel<any>);
									public collectionChanged(param0: com.telerik.android.common.CollectionChangedEvent<any>): void;
									public getLowBinding(): com.telerik.widget.chart.engine.databinding.DataPointBinding;
								}
							}
						}
					}
				}
			}
		}
	}
}

declare module com {
	export module telerik {
		export module widget {
			export module chart {
				export module engine {
					export module databinding {
						export module datasources {
							export module financial {
								export class MacdIndicatorDataSource extends com.telerik.widget.chart.engine.databinding.datasources.financial.ShortLongPeriodIndicatorDataSourceBase {
									public static class: java.lang.Class<com.telerik.widget.chart.engine.databinding.datasources.financial.MacdIndicatorDataSource>;
									public static calculateSignal(param0: number, param1: com.telerik.widget.chart.engine.databinding.datasources.financial.SizedQueue, param2: number, param3: number, param4: number): number;
									public getSignalPeriod(): number;
									public unbind(): void;
									public collectionChanged(param0: com.telerik.android.common.CollectionChangedEvent<any>): void;
									public bindCore(): void;
									public propertyChange(param0: java.beans.PropertyChangeEvent): void;
									public constructor(param0: com.telerik.widget.chart.engine.series.ChartSeriesModel<any>);
									public generateDataPoints(param0: number, param1: com.telerik.widget.chart.engine.databinding.datasources.financial.SizedQueue, param2: number, param3: com.telerik.widget.chart.engine.databinding.datasources.financial.SizedQueue, param4: number, param5: com.telerik.widget.chart.engine.databinding.datasources.financial.SizedQueue): void;
									public setSignalPeriod(param0: number): void;
									public collectionChanged(param0: com.telerik.android.common.CollectionChangedEvent<any>): void;
									public updateBinding(param0: com.telerik.widget.chart.engine.databinding.DataPointBindingEntry): void;
									public calculateMacdValue(param0: number, param1: com.telerik.widget.chart.engine.databinding.datasources.financial.SizedQueue, param2: number, param3: com.telerik.widget.chart.engine.databinding.datasources.financial.SizedQueue, param4: number, param5: any): number;
								}
							}
						}
					}
				}
			}
		}
	}
}

declare module com {
	export module telerik {
		export module widget {
			export module chart {
				export module engine {
					export module databinding {
						export module datasources {
							export module financial {
								export class ModifiedMovingAverageIndicatorDataSource extends com.telerik.widget.chart.engine.databinding.datasources.financial.ValuePeriodIndicatorDataSourceBase {
									public static class: java.lang.Class<com.telerik.widget.chart.engine.databinding.datasources.financial.ModifiedMovingAverageIndicatorDataSource>;
									public collectionChanged(param0: com.telerik.android.common.CollectionChangedEvent<any>): void;
									public bindCore(): void;
									public propertyChange(param0: java.beans.PropertyChangeEvent): void;
									public constructor(param0: com.telerik.widget.chart.engine.series.ChartSeriesModel<any>);
									public collectionChanged(param0: com.telerik.android.common.CollectionChangedEvent<any>): void;
									public updateBinding(param0: com.telerik.widget.chart.engine.databinding.DataPointBindingEntry): void;
								}
							}
						}
					}
				}
			}
		}
	}
}

declare module com {
	export module telerik {
		export module widget {
			export module chart {
				export module engine {
					export module databinding {
						export module datasources {
							export module financial {
								export class MomentumIndicatorDataSource extends com.telerik.widget.chart.engine.databinding.datasources.financial.ValuePeriodIndicatorDataSourceBase {
									public static class: java.lang.Class<com.telerik.widget.chart.engine.databinding.datasources.financial.MomentumIndicatorDataSource>;
									public calculateValue(param0: number, param1: number): number;
									public collectionChanged(param0: com.telerik.android.common.CollectionChangedEvent<any>): void;
									public bindCore(): void;
									public propertyChange(param0: java.beans.PropertyChangeEvent): void;
									public constructor(param0: com.telerik.widget.chart.engine.series.ChartSeriesModel<any>);
									public collectionChanged(param0: com.telerik.android.common.CollectionChangedEvent<any>): void;
									public updateBinding(param0: com.telerik.widget.chart.engine.databinding.DataPointBindingEntry): void;
								}
							}
						}
					}
				}
			}
		}
	}
}

declare module com {
	export module telerik {
		export module widget {
			export module chart {
				export module engine {
					export module databinding {
						export module datasources {
							export module financial {
								export class MovingAverageIndicatorDataSource extends com.telerik.widget.chart.engine.databinding.datasources.financial.ValuePeriodIndicatorDataSourceBase {
									public static class: java.lang.Class<com.telerik.widget.chart.engine.databinding.datasources.financial.MovingAverageIndicatorDataSource>;
									public static calculateCurrentValue(param0: com.telerik.widget.chart.engine.databinding.datasources.financial.SizedQueue): number;
									public collectionChanged(param0: com.telerik.android.common.CollectionChangedEvent<any>): void;
									public bindCore(): void;
									public propertyChange(param0: java.beans.PropertyChangeEvent): void;
									public constructor(param0: com.telerik.widget.chart.engine.series.ChartSeriesModel<any>);
									public collectionChanged(param0: com.telerik.android.common.CollectionChangedEvent<any>): void;
									public updateBinding(param0: com.telerik.widget.chart.engine.databinding.DataPointBindingEntry): void;
								}
							}
						}
					}
				}
			}
		}
	}
}

declare module com {
	export module telerik {
		export module widget {
			export module chart {
				export module engine {
					export module databinding {
						export module datasources {
							export module financial {
								export class OscillatorIndicatorDataSource extends com.telerik.widget.chart.engine.databinding.datasources.financial.ShortLongPeriodIndicatorDataSourceBase {
									public static class: java.lang.Class<com.telerik.widget.chart.engine.databinding.datasources.financial.OscillatorIndicatorDataSource>;
									public collectionChanged(param0: com.telerik.android.common.CollectionChangedEvent<any>): void;
									public bindCore(): void;
									public propertyChange(param0: java.beans.PropertyChangeEvent): void;
									public constructor(param0: com.telerik.widget.chart.engine.series.ChartSeriesModel<any>);
									public collectionChanged(param0: com.telerik.android.common.CollectionChangedEvent<any>): void;
									public updateBinding(param0: com.telerik.widget.chart.engine.databinding.DataPointBindingEntry): void;
								}
							}
						}
					}
				}
			}
		}
	}
}

declare module com {
	export module telerik {
		export module widget {
			export module chart {
				export module engine {
					export module databinding {
						export module datasources {
							export module financial {
								export class RateOfChangeIndicatorDataSource extends com.telerik.widget.chart.engine.databinding.datasources.financial.MomentumIndicatorDataSource {
									public static class: java.lang.Class<com.telerik.widget.chart.engine.databinding.datasources.financial.RateOfChangeIndicatorDataSource>;
									public calculateValue(param0: number, param1: number): number;
									public collectionChanged(param0: com.telerik.android.common.CollectionChangedEvent<any>): void;
									public propertyChange(param0: java.beans.PropertyChangeEvent): void;
									public constructor(param0: com.telerik.widget.chart.engine.series.ChartSeriesModel<any>);
									public collectionChanged(param0: com.telerik.android.common.CollectionChangedEvent<any>): void;
								}
							}
						}
					}
				}
			}
		}
	}
}

declare module com {
	export module telerik {
		export module widget {
			export module chart {
				export module engine {
					export module databinding {
						export module datasources {
							export module financial {
								export class RaviIndicatorDataSource extends com.telerik.widget.chart.engine.databinding.datasources.financial.ShortLongPeriodIndicatorDataSourceBase {
									public static class: java.lang.Class<com.telerik.widget.chart.engine.databinding.datasources.financial.RaviIndicatorDataSource>;
									public collectionChanged(param0: com.telerik.android.common.CollectionChangedEvent<any>): void;
									public bindCore(): void;
									public propertyChange(param0: java.beans.PropertyChangeEvent): void;
									public constructor(param0: com.telerik.widget.chart.engine.series.ChartSeriesModel<any>);
									public collectionChanged(param0: com.telerik.android.common.CollectionChangedEvent<any>): void;
									public updateBinding(param0: com.telerik.widget.chart.engine.databinding.DataPointBindingEntry): void;
								}
							}
						}
					}
				}
			}
		}
	}
}

declare module com {
	export module telerik {
		export module widget {
			export module chart {
				export module engine {
					export module databinding {
						export module datasources {
							export module financial {
								export class RelativeMomentumIndexIndicatorDataSource extends com.telerik.widget.chart.engine.databinding.datasources.financial.ValuePeriodIndicatorDataSourceBase {
									public static class: java.lang.Class<com.telerik.widget.chart.engine.databinding.datasources.financial.RelativeMomentumIndexIndicatorDataSource>;
									public getMomentumPeriod(): number;
									public collectionChanged(param0: com.telerik.android.common.CollectionChangedEvent<any>): void;
									public bindCore(): void;
									public propertyChange(param0: java.beans.PropertyChangeEvent): void;
									public setMomentumPeriod(param0: number): void;
									public constructor(param0: com.telerik.widget.chart.engine.series.ChartSeriesModel<any>);
									public collectionChanged(param0: com.telerik.android.common.CollectionChangedEvent<any>): void;
									public updateBinding(param0: com.telerik.widget.chart.engine.databinding.DataPointBindingEntry): void;
								}
							}
						}
					}
				}
			}
		}
	}
}

declare module com {
	export module telerik {
		export module widget {
			export module chart {
				export module engine {
					export module databinding {
						export module datasources {
							export module financial {
								export class RelativeStrengthIndexIndicatorDataSource extends com.telerik.widget.chart.engine.databinding.datasources.financial.ValuePeriodIndicatorDataSourceBase {
									public static class: java.lang.Class<com.telerik.widget.chart.engine.databinding.datasources.financial.RelativeStrengthIndexIndicatorDataSource>;
									public collectionChanged(param0: com.telerik.android.common.CollectionChangedEvent<any>): void;
									public bindCore(): void;
									public propertyChange(param0: java.beans.PropertyChangeEvent): void;
									public constructor(param0: com.telerik.widget.chart.engine.series.ChartSeriesModel<any>);
									public collectionChanged(param0: com.telerik.android.common.CollectionChangedEvent<any>): void;
									public updateBinding(param0: com.telerik.widget.chart.engine.databinding.DataPointBindingEntry): void;
								}
							}
						}
					}
				}
			}
		}
	}
}

declare module com {
	export module telerik {
		export module widget {
			export module chart {
				export module engine {
					export module databinding {
						export module datasources {
							export module financial {
								export abstract class ShortLongPeriodIndicatorDataSourceBase extends com.telerik.widget.chart.engine.databinding.datasources.financial.ValueIndicatorDataSourceBase {
									public static class: java.lang.Class<com.telerik.widget.chart.engine.databinding.datasources.financial.ShortLongPeriodIndicatorDataSourceBase>;
									public getShortPeriod(): number;
									public collectionChanged(param0: com.telerik.android.common.CollectionChangedEvent<any>): void;
									public propertyChange(param0: java.beans.PropertyChangeEvent): void;
									public setShortPeriod(param0: number): void;
									public setLongPeriod(param0: number): void;
									public getLongPeriod(): number;
									public constructor(param0: com.telerik.widget.chart.engine.series.ChartSeriesModel<any>);
									public collectionChanged(param0: com.telerik.android.common.CollectionChangedEvent<any>): void;
								}
							}
						}
					}
				}
			}
		}
	}
}

declare module com {
	export module telerik {
		export module widget {
			export module chart {
				export module engine {
					export module databinding {
						export module datasources {
							export module financial {
								export class SizedQueue extends java.util.ArrayDeque<java.lang.Double> {
									public static class: java.lang.Class<com.telerik.widget.chart.engine.databinding.datasources.financial.SizedQueue>;
									public runningSum: number;
									public queueSize: number;
									public currentItemsCount: number;
									public remove(): any;
									public addLast(param0: any): void;
									public removeFirst(): any;
									public descendingIterator(): java.util.Iterator<any>;
									public add(param0: any): boolean;
									public max(): number;
									public iterator(): java.util.Iterator<any>;
									public offerFirst(param0: any): boolean;
									public peekFirst(): any;
									public enqueueItem(param0: number): number;
									public remove(param0: any): boolean;
									public removeLastOccurrence(param0: any): boolean;
									public getFirst(): any;
									public poll(): any;
									public min(): number;
									public pop(): any;
									public pollFirst(): any;
									public isEmpty(): boolean;
									public offerLast(param0: any): boolean;
									public contains(param0: any): boolean;
									public toArray(): native.Array<any>;
									public constructor();
									public hashCode(): number;
									public size(): number;
									public addAll(param0: java.util.Collection<any>): boolean;
									public element(): any;
									public equals(param0: any): boolean;
									public pollLast(): any;
									public constructor(param0: number);
									public clear(): void;
									public constructor(param0: java.util.Collection<any>);
									public removeLast(): any;
									public addFirst(param0: any): void;
									public push(param0: any): void;
									public removeAll(param0: java.util.Collection<any>): boolean;
									public offer(param0: any): boolean;
									public removeFirstOccurrence(param0: any): boolean;
									public retainAll(param0: java.util.Collection<any>): boolean;
									public dequeueItem(): number;
									public peek(): any;
									public containsAll(param0: java.util.Collection<any>): boolean;
									public peekLast(): any;
									public toArray(param0: native.Array<any>): native.Array<any>;
									public getLast(): any;
								}
							}
						}
					}
				}
			}
		}
	}
}

declare module com {
	export module telerik {
		export module widget {
			export module chart {
				export module engine {
					export module databinding {
						export module datasources {
							export module financial {
								export class StochasticFastIndicatorDataSource extends com.telerik.widget.chart.visualization.cartesianChart.indicators.StochasticIndicatorDataSourceBase {
									public static class: java.lang.Class<com.telerik.widget.chart.engine.databinding.datasources.financial.StochasticFastIndicatorDataSource>;
									public unbind(): void;
									public collectionChanged(param0: com.telerik.android.common.CollectionChangedEvent<any>): void;
									public bindCore(): void;
									public propertyChange(param0: java.beans.PropertyChangeEvent): void;
									public constructor(param0: com.telerik.widget.chart.engine.series.ChartSeriesModel<any>);
									public collectionChanged(param0: com.telerik.android.common.CollectionChangedEvent<any>): void;
									public updateBinding(param0: com.telerik.widget.chart.engine.databinding.DataPointBindingEntry): void;
								}
							}
						}
					}
				}
			}
		}
	}
}

declare module com {
	export module telerik {
		export module widget {
			export module chart {
				export module engine {
					export module databinding {
						export module datasources {
							export module financial {
								export class StochasticSlowIndicatorDataSource extends com.telerik.widget.chart.visualization.cartesianChart.indicators.StochasticIndicatorDataSourceBase {
									public static class: java.lang.Class<com.telerik.widget.chart.engine.databinding.datasources.financial.StochasticSlowIndicatorDataSource>;
									public collectionChanged(param0: com.telerik.android.common.CollectionChangedEvent<any>): void;
									public bindCore(): void;
									public propertyChange(param0: java.beans.PropertyChangeEvent): void;
									public setSlowingPeriod(param0: number): void;
									public getSlowingPeriod(): number;
									public constructor(param0: com.telerik.widget.chart.engine.series.ChartSeriesModel<any>);
									public collectionChanged(param0: com.telerik.android.common.CollectionChangedEvent<any>): void;
									public updateBinding(param0: com.telerik.widget.chart.engine.databinding.DataPointBindingEntry): void;
								}
							}
						}
					}
				}
			}
		}
	}
}

declare module com {
	export module telerik {
		export module widget {
			export module chart {
				export module engine {
					export module databinding {
						export module datasources {
							export module financial {
								export class TrixIndicatorDataSource extends com.telerik.widget.chart.engine.databinding.datasources.financial.ValuePeriodIndicatorDataSourceBase {
									public static class: java.lang.Class<com.telerik.widget.chart.engine.databinding.datasources.financial.TrixIndicatorDataSource>;
									public collectionChanged(param0: com.telerik.android.common.CollectionChangedEvent<any>): void;
									public bindCore(): void;
									public propertyChange(param0: java.beans.PropertyChangeEvent): void;
									public constructor(param0: com.telerik.widget.chart.engine.series.ChartSeriesModel<any>);
									public collectionChanged(param0: com.telerik.android.common.CollectionChangedEvent<any>): void;
									public updateBinding(param0: com.telerik.widget.chart.engine.databinding.DataPointBindingEntry): void;
								}
							}
						}
					}
				}
			}
		}
	}
}

declare module com {
	export module telerik {
		export module widget {
			export module chart {
				export module engine {
					export module databinding {
						export module datasources {
							export module financial {
								export class TrueRangeIndicatorDataSource extends com.telerik.widget.chart.engine.databinding.datasources.financial.HighLowCloseIndicatorDataSourceBase {
									public static class: java.lang.Class<com.telerik.widget.chart.engine.databinding.datasources.financial.TrueRangeIndicatorDataSource>;
									public collectionChanged(param0: com.telerik.android.common.CollectionChangedEvent<any>): void;
									public bindCore(): void;
									public propertyChange(param0: java.beans.PropertyChangeEvent): void;
									public constructor(param0: com.telerik.widget.chart.engine.series.ChartSeriesModel<any>);
									public static calculateValue(param0: com.telerik.widget.chart.engine.databinding.DataPointBinding, param1: com.telerik.widget.chart.engine.databinding.DataPointBinding, param2: com.telerik.widget.chart.engine.databinding.DataPointBinding, param3: any, param4: any): number;
									public collectionChanged(param0: com.telerik.android.common.CollectionChangedEvent<any>): void;
									public updateBinding(param0: com.telerik.widget.chart.engine.databinding.DataPointBindingEntry): void;
								}
							}
						}
					}
				}
			}
		}
	}
}

declare module com {
	export module telerik {
		export module widget {
			export module chart {
				export module engine {
					export module databinding {
						export module datasources {
							export module financial {
								export class UltimateOscillatorIndicatorDataSource extends com.telerik.widget.chart.engine.databinding.datasources.financial.HighLowClosePeriodIndicatorDataSourceBase {
									public static class: java.lang.Class<com.telerik.widget.chart.engine.databinding.datasources.financial.UltimateOscillatorIndicatorDataSource>;
									public static calculateCurrentValue(param0: com.telerik.widget.chart.engine.databinding.datasources.financial.SizedQueue): number;
									public collectionChanged(param0: com.telerik.android.common.CollectionChangedEvent<any>): void;
									public bindCore(): void;
									public propertyChange(param0: java.beans.PropertyChangeEvent): void;
									public setPeriod3(param0: number): void;
									public getPeriod2(): number;
									public constructor(param0: com.telerik.widget.chart.engine.series.ChartSeriesModel<any>);
									public getPeriod3(): number;
									public setPeriod2(param0: number): void;
									public collectionChanged(param0: com.telerik.android.common.CollectionChangedEvent<any>): void;
									public updateBinding(param0: com.telerik.widget.chart.engine.databinding.DataPointBindingEntry): void;
								}
							}
						}
					}
				}
			}
		}
	}
}

declare module com {
	export module telerik {
		export module widget {
			export module chart {
				export module engine {
					export module databinding {
						export module datasources {
							export module financial {
								export abstract class ValueIndicatorDataSourceBase extends com.telerik.widget.chart.engine.databinding.datasources.CategoricalSeriesDataSource {
									public static class: java.lang.Class<com.telerik.widget.chart.engine.databinding.datasources.financial.ValueIndicatorDataSourceBase>;
									public collectionChanged(param0: com.telerik.android.common.CollectionChangedEvent<any>): void;
									public propertyChange(param0: java.beans.PropertyChangeEvent): void;
									public constructor(param0: com.telerik.widget.chart.engine.series.ChartSeriesModel<any>);
									public collectionChanged(param0: com.telerik.android.common.CollectionChangedEvent<any>): void;
								}
							}
						}
					}
				}
			}
		}
	}
}

declare module com {
	export module telerik {
		export module widget {
			export module chart {
				export module engine {
					export module databinding {
						export module datasources {
							export module financial {
								export class ValuePeriodIndicatorDataSourceBase extends com.telerik.widget.chart.engine.databinding.datasources.financial.ValueIndicatorDataSourceBase {
									public static class: java.lang.Class<com.telerik.widget.chart.engine.databinding.datasources.financial.ValuePeriodIndicatorDataSourceBase>;
									public getPeriod(): number;
									public collectionChanged(param0: com.telerik.android.common.CollectionChangedEvent<any>): void;
									public propertyChange(param0: java.beans.PropertyChangeEvent): void;
									public setPeriod(param0: number): void;
									public constructor(param0: com.telerik.widget.chart.engine.series.ChartSeriesModel<any>);
									public collectionChanged(param0: com.telerik.android.common.CollectionChangedEvent<any>): void;
								}
							}
						}
					}
				}
			}
		}
	}
}

declare module com {
	export module telerik {
		export module widget {
			export module chart {
				export module engine {
					export module databinding {
						export module datasources {
							export module financial {
								export class WeightedMovingAverageIndicatorDataSource extends com.telerik.widget.chart.engine.databinding.datasources.financial.ValuePeriodIndicatorDataSourceBase {
									public static class: java.lang.Class<com.telerik.widget.chart.engine.databinding.datasources.financial.WeightedMovingAverageIndicatorDataSource>;
									public collectionChanged(param0: com.telerik.android.common.CollectionChangedEvent<any>): void;
									public bindCore(): void;
									public propertyChange(param0: java.beans.PropertyChangeEvent): void;
									public constructor(param0: com.telerik.widget.chart.engine.series.ChartSeriesModel<any>);
									public collectionChanged(param0: com.telerik.android.common.CollectionChangedEvent<any>): void;
									public updateBinding(param0: com.telerik.widget.chart.engine.databinding.DataPointBindingEntry): void;
								}
							}
						}
					}
				}
			}
		}
	}
}

declare module com {
	export module telerik {
		export module widget {
			export module chart {
				export module engine {
					export module decorations {
						export class CartesianChartGridContext extends java.lang.Object {
							public static class: java.lang.Class<com.telerik.widget.chart.engine.decorations.CartesianChartGridContext>;
							public availableRect(): com.telerik.android.common.math.RadRect;
							public constructor(param0: com.telerik.android.common.math.RadRect, param1: com.telerik.widget.chart.engine.view.ChartView, param2: com.telerik.widget.chart.engine.axes.AxisModel);
							public tickThickness(): number;
							public view(): com.telerik.widget.chart.engine.view.ChartView;
							public majorTicksCount(): number;
							public majorTicks(): java.lang.Iterable<com.telerik.widget.chart.engine.axes.AxisTickModel>;
							public axis(): com.telerik.widget.chart.engine.axes.AxisModel;
						}
					}
				}
			}
		}
	}
}

declare module com {
	export module telerik {
		export module widget {
			export module chart {
				export module engine {
					export module decorations {
						export class CartesianChartGridModel extends com.telerik.widget.chart.engine.decorations.ChartGridModel {
							public static class: java.lang.Class<com.telerik.widget.chart.engine.decorations.CartesianChartGridModel>;
							public xStripes: java.util.ArrayList<com.telerik.widget.chart.engine.decorations.GridStripe>;
							public yStripes: java.util.ArrayList<com.telerik.widget.chart.engine.decorations.GridStripe>;
							public xLines: java.util.ArrayList<com.telerik.widget.chart.engine.decorations.GridLine>;
							public yLines: java.util.ArrayList<com.telerik.widget.chart.engine.decorations.GridLine>;
							public constructor();
							public getPrimaryAxis(): com.telerik.widget.chart.engine.axes.AxisModel;
							public setPrimaryAxis(param0: com.telerik.widget.chart.engine.axes.AxisModel): void;
							public arrangeOverride(param0: com.telerik.android.common.math.RadRect): com.telerik.android.common.math.RadRect;
							public setSecondaryAxis(param0: com.telerik.widget.chart.engine.axes.AxisModel): void;
							public getSecondaryAxis(): com.telerik.widget.chart.engine.axes.AxisModel;
						}
					}
				}
			}
		}
	}
}

declare module com {
	export module telerik {
		export module widget {
			export module chart {
				export module engine {
					export module decorations {
						export abstract class ChartGridModel extends com.telerik.widget.chart.engine.elementTree.ChartElement {
							public static class: java.lang.Class<com.telerik.widget.chart.engine.decorations.ChartGridModel>;
							public constructor();
						}
					}
				}
			}
		}
	}
}

declare module com {
	export module telerik {
		export module widget {
			export module chart {
				export module engine {
					export module decorations {
						export class GridLine extends java.lang.Object {
							public static class: java.lang.Class<com.telerik.widget.chart.engine.decorations.GridLine>;
							public axisTickModel: com.telerik.widget.chart.engine.axes.AxisTickModel;
							public point1: com.telerik.android.common.math.RadPoint;
							public point2: com.telerik.android.common.math.RadPoint;
							public constructor();
						}
					}
				}
			}
		}
	}
}

declare module com {
	export module telerik {
		export module widget {
			export module chart {
				export module engine {
					export module decorations {
						export class GridStripe extends java.lang.Object {
							public static class: java.lang.Class<com.telerik.widget.chart.engine.decorations.GridStripe>;
							public fillRect: com.telerik.android.common.math.RadRect;
							public startTick: com.telerik.widget.chart.engine.axes.AxisTickModel;
							public endTick: com.telerik.widget.chart.engine.axes.AxisTickModel;
							public constructor();
						}
					}
				}
			}
		}
	}
}

declare module com {
	export module telerik {
		export module widget {
			export module chart {
				export module engine {
					export module decorations {
						export module annotations {
							export abstract class ChartAnnotationModel extends com.telerik.widget.chart.engine.elementTree.ChartElement {
								public static class: java.lang.Class<com.telerik.widget.chart.engine.decorations.annotations.ChartAnnotationModel>;
								public arrangeCore(param0: com.telerik.android.common.math.RadRect): com.telerik.android.common.math.RadRect;
								public arrangeOverride(param0: com.telerik.android.common.math.RadRect): com.telerik.android.common.math.RadRect;
								public resetState(): void;
								public update(): void;
								public constructor();
								public isUpdated(): boolean;
								public updateCore(): void;
								public static tryCreatePlotInfo(param0: com.telerik.widget.chart.engine.axes.AxisModel, param1: any, param2: com.telerik.widget.chart.engine.propertyStore.ValueExtractor<com.telerik.widget.chart.engine.axes.common.AxisPlotInfo>): boolean;
							}
						}
					}
				}
			}
		}
	}
}

declare module com {
	export module telerik {
		export module widget {
			export module chart {
				export module engine {
					export module decorations {
						export module annotations {
							export abstract class MultipleAxesAnnotationModel extends com.telerik.widget.chart.engine.decorations.annotations.ChartAnnotationModel {
								public static class: java.lang.Class<com.telerik.widget.chart.engine.decorations.annotations.MultipleAxesAnnotationModel>;
								public onFirstAxisChanged(): void;
								public onPropertyChanged(param0: com.telerik.widget.chart.engine.elementTree.events.RadPropertyEventArgs): void;
								public getSecondAxis(): com.telerik.widget.chart.engine.axes.AxisModel;
								public setSecondAxis(param0: com.telerik.widget.chart.engine.axes.AxisModel): void;
								public getFirstAxis(): com.telerik.widget.chart.engine.axes.AxisModel;
								public constructor();
								public setFirstAxis(param0: com.telerik.widget.chart.engine.axes.AxisModel): void;
								public onSecondAxisChanged(): void;
							}
						}
					}
				}
			}
		}
	}
}

declare module com {
	export module telerik {
		export module widget {
			export module chart {
				export module engine {
					export module decorations {
						export module annotations {
							export abstract class SingleAxisAnnotationModel extends com.telerik.widget.chart.engine.decorations.annotations.ChartAnnotationModel {
								public static class: java.lang.Class<com.telerik.widget.chart.engine.decorations.annotations.SingleAxisAnnotationModel>;
								public getAxis(): com.telerik.widget.chart.engine.axes.AxisModel;
								public constructor();
								public isUpdated(): boolean;
								public setAxis(param0: com.telerik.widget.chart.engine.axes.AxisModel): void;
							}
						}
					}
				}
			}
		}
	}
}

declare module com {
	export module telerik {
		export module widget {
			export module chart {
				export module engine {
					export module decorations {
						export module annotations {
							export module custom {
								export class CartesianCustomAnnotationModel extends com.telerik.widget.chart.engine.decorations.annotations.custom.CustomAnnotationModel {
									public static class: java.lang.Class<com.telerik.widget.chart.engine.decorations.annotations.custom.CartesianCustomAnnotationModel>;
									public constructor();
									public arrangeCore(param0: com.telerik.android.common.math.RadRect): com.telerik.android.common.math.RadRect;
								}
							}
						}
					}
				}
			}
		}
	}
}

declare module com {
	export module telerik {
		export module widget {
			export module chart {
				export module engine {
					export module decorations {
						export module annotations {
							export module custom {
								export abstract class CustomAnnotationModel extends com.telerik.widget.chart.engine.decorations.annotations.MultipleAxesAnnotationModel {
									public static class: java.lang.Class<com.telerik.widget.chart.engine.decorations.annotations.custom.CustomAnnotationModel>;
									public desiredSize: com.telerik.android.common.math.RadSize;
									public constructor();
									public onPropertyChanged(param0: com.telerik.widget.chart.engine.elementTree.events.RadPropertyEventArgs): void;
									public updateCore(): void;
									public onFirstAxisChanged(): void;
									public setSecondValue(param0: any): void;
									public onSecondAxisChanged(): void;
									public isUpdated(): boolean;
									public setFirstValue(param0: any): void;
									public getFirstValue(): any;
									public getSecondValue(): any;
									public resetState(): void;
								}
							}
						}
					}
				}
			}
		}
	}
}

declare module com {
	export module telerik {
		export module widget {
			export module chart {
				export module engine {
					export module decorations {
						export module annotations {
							export module custom {
								export class CustomAnnotationRenderer extends java.lang.Object {
									public static class: java.lang.Class<com.telerik.widget.chart.engine.decorations.annotations.custom.CustomAnnotationRenderer>;
									/**
									 * Constructs a new instance of the com.telerik.widget.chart.engine.decorations.annotations.custom.CustomAnnotationRenderer interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
									 */
									public constructor(implementation: {
										measureContent(param0: any): com.telerik.android.common.math.RadSize;
										render(param0: any, param1: com.telerik.android.common.math.RadRect, param2: globalAndroid.graphics.Canvas, param3: globalAndroid.graphics.Paint): void;
									});
									public constructor();
									public measureContent(param0: any): com.telerik.android.common.math.RadSize;
									public render(param0: any, param1: com.telerik.android.common.math.RadRect, param2: globalAndroid.graphics.Canvas, param3: globalAndroid.graphics.Paint): void;
								}
							}
						}
					}
				}
			}
		}
	}
}

declare module com {
	export module telerik {
		export module widget {
			export module chart {
				export module engine {
					export module decorations {
						export module annotations {
							export module line {
								export class CartesianGridLineAnnotationModel extends com.telerik.widget.chart.engine.decorations.annotations.line.GridLineAnnotationModel {
									public static class: java.lang.Class<com.telerik.widget.chart.engine.decorations.annotations.line.CartesianGridLineAnnotationModel>;
									public constructor();
									public arrangeCore(param0: com.telerik.android.common.math.RadRect): com.telerik.android.common.math.RadRect;
								}
							}
						}
					}
				}
			}
		}
	}
}

declare module com {
	export module telerik {
		export module widget {
			export module chart {
				export module engine {
					export module decorations {
						export module annotations {
							export module line {
								export abstract class GridLineAnnotationModel extends com.telerik.widget.chart.engine.decorations.annotations.SingleAxisAnnotationModel {
									public static class: java.lang.Class<com.telerik.widget.chart.engine.decorations.annotations.line.GridLineAnnotationModel>;
									public static VALUE_PROPERTY_KEY: number;
									public constructor();
									public onPropertyChanged(param0: com.telerik.widget.chart.engine.elementTree.events.RadPropertyEventArgs): void;
									public setValue(param0: any): void;
									public updateCore(): void;
									public getValue(param0: number): any;
									public setValue(param0: number, param1: any): boolean;
									public getValue(): any;
									public resetState(): void;
								}
							}
						}
					}
				}
			}
		}
	}
}

declare module com {
	export module telerik {
		export module widget {
			export module chart {
				export module engine {
					export module decorations {
						export module annotations {
							export module plotBand {
								export class CartesianPlotBandAnnotationModel extends com.telerik.widget.chart.engine.decorations.annotations.plotBand.PlotBandAnnotationModel {
									public static class: java.lang.Class<com.telerik.widget.chart.engine.decorations.annotations.plotBand.CartesianPlotBandAnnotationModel>;
									public constructor();
									public arrangeCore(param0: com.telerik.android.common.math.RadRect): com.telerik.android.common.math.RadRect;
								}
							}
						}
					}
				}
			}
		}
	}
}

declare module com {
	export module telerik {
		export module widget {
			export module chart {
				export module engine {
					export module decorations {
						export module annotations {
							export module plotBand {
								export abstract class PlotBandAnnotationModel extends com.telerik.widget.chart.engine.decorations.annotations.SingleAxisAnnotationModel {
									public static class: java.lang.Class<com.telerik.widget.chart.engine.decorations.annotations.plotBand.PlotBandAnnotationModel>;
									public firstPlotInfo: com.telerik.widget.chart.engine.axes.common.AxisPlotInfo;
									public secondPlotInfo: com.telerik.widget.chart.engine.axes.common.AxisPlotInfo;
									public constructor();
									public onPropertyChanged(param0: com.telerik.widget.chart.engine.elementTree.events.RadPropertyEventArgs): void;
									public getTo(): any;
									public updateCore(): void;
									public getFrom(): any;
									public setFrom(param0: any): void;
									public isUpdated(): boolean;
									public setTo(param0: any): void;
									public resetState(): void;
								}
							}
						}
					}
				}
			}
		}
	}
}

declare module com {
	export module telerik {
		export module widget {
			export module chart {
				export module engine {
					export module elementTree {
						export class ChartAreaInvalidateFlags extends java.lang.Object {
							public static class: java.lang.Class<com.telerik.widget.chart.engine.elementTree.ChartAreaInvalidateFlags>;
							public static NONE: number;
							public static RESET_AXES: number;
							public static INVALIDATE_AXES: number;
							public static INVALIDATE_SERIES: number;
							public static INVALIDATE_GRID: number;
							public static RESET_ANNOTATIONS: number;
							public static INVALIDATE_ANNOTATIONS: number;
							public static INVALIDATE_AXES_AND_GRID: number;
							public static INVALIDATE_ALL: number;
							public static ALL: number;
							public constructor();
						}
					}
				}
			}
		}
	}
}

declare module com {
	export module telerik {
		export module widget {
			export module chart {
				export module engine {
					export module elementTree {
						export abstract class ChartElement extends com.telerik.widget.chart.engine.elementTree.ChartNode {
							public static class: java.lang.Class<com.telerik.widget.chart.engine.elementTree.ChartElement>;
							public children: com.telerik.widget.chart.engine.elementTree.NodeCollection;
							public constructor();
							public arrangeOverride(param0: com.telerik.android.common.math.RadRect): com.telerik.android.common.math.RadRect;
							public enumDescendants(): java.lang.Iterable<com.telerik.widget.chart.engine.elementTree.ChartNode>;
							public isAncestorOf(param0: com.telerik.widget.chart.engine.elementTree.ChartNode): boolean;
							public onChildInserted(param0: number, param1: com.telerik.widget.chart.engine.elementTree.ChartNode): void;
							public loadCore(param0: com.telerik.widget.chart.engine.chartAreas.LoadContext): void;
							public findDescendant(param0: com.telerik.widget.chart.engine.elementTree.ChartElement.Predicate<com.telerik.widget.chart.engine.elementTree.ChartNode>): com.telerik.widget.chart.engine.elementTree.ChartNode;
							public canAddChild(param0: com.telerik.widget.chart.engine.elementTree.ChartNode): com.telerik.widget.chart.engine.elementTree.ModifyChildrenResult;
							public enumDescendants(param0: com.telerik.widget.chart.engine.elementTree.ChartElement.Predicate<com.telerik.widget.chart.engine.elementTree.ChartNode>, param1: com.telerik.widget.chart.engine.elementTree.TreeTraversalMode): java.lang.Iterable<com.telerik.widget.chart.engine.elementTree.ChartNode>;
							public onChildRemoved(param0: number, param1: com.telerik.widget.chart.engine.elementTree.ChartNode): void;
							public setPresenter(param0: com.telerik.widget.chart.engine.view.ChartElementPresenter): void;
							public enumDescendants(param0: com.telerik.widget.chart.engine.elementTree.TreeTraversalMode): java.lang.Iterable<com.telerik.widget.chart.engine.elementTree.ChartNode>;
							public getPresenter(): com.telerik.widget.chart.engine.view.ChartElementPresenter;
							public findAncestor(param0: java.lang.Class<any>): com.telerik.widget.chart.engine.elementTree.ChartElement;
							public canRemoveChild(param0: com.telerik.widget.chart.engine.elementTree.ChartNode): com.telerik.widget.chart.engine.elementTree.ModifyChildrenResult;
							public unloadCore(): void;
						}
						export module ChartElement {
							export class Predicate<T>  extends java.lang.Object {
								public static class: java.lang.Class<com.telerik.widget.chart.engine.elementTree.ChartElement.Predicate<any>>;
								/**
								 * Constructs a new instance of the com.telerik.widget.chart.engine.elementTree.ChartElement$Predicate interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
								 */
								public constructor(implementation: {
									apply(param0: T): boolean;
								});
								public constructor();
								public apply(param0: T): boolean;
							}
						}
					}
				}
			}
		}
	}
}

declare module com {
	export module telerik {
		export module widget {
			export module chart {
				export module engine {
					export module elementTree {
						export class ChartMessage extends java.lang.Object {
							public static class: java.lang.Class<com.telerik.widget.chart.engine.elementTree.ChartMessage>;
							public handled: boolean;
							public stopDispatch: boolean;
							public dispatchPhase: com.telerik.widget.chart.engine.elementTree.MessageDispatchPhase;
							public dispatchMode: java.util.EnumSet<com.telerik.widget.chart.engine.elementTree.MessageDispatchMode>;
							public previousReceiver: com.telerik.widget.chart.engine.elementTree.ChartNode;
							public data: any;
							public constructor(param0: com.telerik.widget.chart.engine.elementTree.ChartNode, param1: number, param2: any, param3: com.telerik.widget.chart.engine.elementTree.MessageDispatchMode);
							public getId(): number;
							public getSender(): com.telerik.widget.chart.engine.elementTree.ChartNode;
							public static register(): number;
						}
					}
				}
			}
		}
	}
}

declare module com {
	export module telerik {
		export module widget {
			export module chart {
				export module engine {
					export module elementTree {
						export abstract class ChartNode extends com.telerik.widget.chart.engine.propertyStore.PropertyBagObject {
							public static class: java.lang.Class<com.telerik.widget.chart.engine.elementTree.ChartNode>;
							public static PROPERTY_CHANGING_MESSAGE: number;
							public static PROPERTY_CHANGED_MESSAGE: number;
							public invalidateScheduled: boolean;
							public trackPropertyChanging: boolean;
							public trackPropertyChanged: boolean;
							public parent: com.telerik.widget.chart.engine.elementTree.ChartElement;
							public processMessage(param0: com.telerik.widget.chart.engine.elementTree.ChartMessage): void;
							public onPropertyChanging(param0: com.telerik.widget.chart.engine.elementTree.events.RadPropertyEventArgs): void;
							public getMessageDispatchMode(param0: number): com.telerik.widget.chart.engine.elementTree.MessageDispatchMode;
							public index(): number;
							public raisePropertyChanged(param0: string, param1: number): void;
							public arrangeOverride(param0: com.telerik.android.common.math.RadRect): com.telerik.android.common.math.RadRect;
							public collectionIndex(): number;
							public arrange(param0: com.telerik.android.common.math.RadRect): com.telerik.android.common.math.RadRect;
							public clearValue(param0: number): boolean;
							public loadCore(param0: com.telerik.widget.chart.engine.chartAreas.LoadContext): void;
							public chartArea(): com.telerik.widget.chart.engine.chartAreas.ChartAreaModel;
							public getParent(): com.telerik.widget.chart.engine.elementTree.ChartElement;
							public invalidate(): void;
							public applyLayoutRounding(): void;
							public unloadCore(): void;
							public constructor();
							public setIsVisible(param0: boolean): void;
							public getLayoutSlot(): com.telerik.android.common.math.RadRect;
							public isVisible(): boolean;
							public setValue(param0: number, param1: any): boolean;
							public onPropertyChanged(param0: com.telerik.widget.chart.engine.elementTree.events.RadPropertyEventArgs): void;
							public setParent(param0: com.telerik.widget.chart.engine.elementTree.ChartElement): void;
							public onParentChanged(param0: com.telerik.widget.chart.engine.elementTree.ChartElement): void;
							public arrange(param0: com.telerik.android.common.math.RadRect, param1: boolean): com.telerik.android.common.math.RadRect;
							public getNodeState(): com.telerik.widget.chart.engine.elementTree.NodeState;
							public getPresenter(): com.telerik.widget.chart.engine.view.ChartElementPresenter;
							public isTreeLoaded(): boolean;
							public load(param0: com.telerik.widget.chart.engine.chartAreas.LoadContext): void;
						}
					}
				}
			}
		}
	}
}

declare module com {
	export module telerik {
		export module widget {
			export module chart {
				export module engine {
					export module elementTree {
						export abstract class ContentNode extends com.telerik.widget.chart.engine.elementTree.ChartNode {
							public static class: java.lang.Class<com.telerik.widget.chart.engine.elementTree.ContentNode>;
							public desiredSize: com.telerik.android.common.math.RadSize;
							public constructor();
							public setContent(param0: any): void;
							public getContent(): any;
							public onPropertyChanged(param0: com.telerik.widget.chart.engine.elementTree.events.RadPropertyEventArgs): void;
						}
					}
				}
			}
		}
	}
}

declare module com {
	export module telerik {
		export module widget {
			export module chart {
				export module engine {
					export module elementTree {
						export class ElementCollection<T>  extends java.util.ArrayList<any> {
							public static class: java.lang.Class<com.telerik.widget.chart.engine.elementTree.ElementCollection<any>>;
							public subList(param0: number, param1: number): java.util.List<any>;
							public remove(param0: number): any;
							public contains(param0: any): boolean;
							public size(): number;
							public hashCode(): number;
							public insertItem(param0: number, param1: any): void;
							public toArray(): native.Array<any>;
							public listIterator(): java.util.ListIterator<any>;
							public addAll(param0: java.util.Collection<any>): boolean;
							public set(param0: number, param1: any): any;
							public constructor(param0: java.util.Collection<any>);
							public add(param0: any): boolean;
							public listIterator(param0: number): java.util.ListIterator<any>;
							public clearItems(): void;
							public removeAll(param0: java.util.Collection<any>): boolean;
							public add(param0: number, param1: any): void;
							public toArray(param0: native.Array<any>): native.Array<any>;
							public retainAll(param0: java.util.Collection<any>): boolean;
							public constructor();
							public containsAll(param0: java.util.Collection<any>): boolean;
							public iterator(): java.util.Iterator<any>;
							public lastIndexOf(param0: any): number;
							public remove(param0: any): boolean;
							public clear(): void;
							public get(param0: number): any;
							public indexOf(param0: any): number;
							public constructor(param0: number);
							public addAll(param0: number, param1: java.util.Collection<any>): boolean;
							public constructor(param0: com.telerik.widget.chart.engine.elementTree.ChartElement);
							public equals(param0: any): boolean;
							public isEmpty(): boolean;
						}
					}
				}
			}
		}
	}
}

declare module com {
	export module telerik {
		export module widget {
			export module chart {
				export module engine {
					export module elementTree {
						export class MessageDispatchMode {
							public static class: java.lang.Class<com.telerik.widget.chart.engine.elementTree.MessageDispatchMode>;
							public static BUBBLE: com.telerik.widget.chart.engine.elementTree.MessageDispatchMode;
							public static TUNNEL: com.telerik.widget.chart.engine.elementTree.MessageDispatchMode;
							public static BUBBLE_AND_TUNNEL: com.telerik.widget.chart.engine.elementTree.MessageDispatchMode;
							public static valueOf(param0: java.lang.Class<any>, param1: string): java.lang.Enum<any>;
							public static valueOf(param0: string): com.telerik.widget.chart.engine.elementTree.MessageDispatchMode;
							public static values(): native.Array<com.telerik.widget.chart.engine.elementTree.MessageDispatchMode>;
						}
					}
				}
			}
		}
	}
}

declare module com {
	export module telerik {
		export module widget {
			export module chart {
				export module engine {
					export module elementTree {
						export class MessageDispatchPhase {
							public static class: java.lang.Class<com.telerik.widget.chart.engine.elementTree.MessageDispatchPhase>;
							public static BUBBLE: com.telerik.widget.chart.engine.elementTree.MessageDispatchPhase;
							public static TUNNEL: com.telerik.widget.chart.engine.elementTree.MessageDispatchPhase;
							public static valueOf(param0: java.lang.Class<any>, param1: string): java.lang.Enum<any>;
							public static valueOf(param0: string): com.telerik.widget.chart.engine.elementTree.MessageDispatchPhase;
							public static values(): native.Array<com.telerik.widget.chart.engine.elementTree.MessageDispatchPhase>;
						}
					}
				}
			}
		}
	}
}

declare module com {
	export module telerik {
		export module widget {
			export module chart {
				export module engine {
					export module elementTree {
						export class MessageDispatcher extends java.lang.Object {
							public static class: java.lang.Class<com.telerik.widget.chart.engine.elementTree.MessageDispatcher>;
							public dispatchMessage(param0: com.telerik.widget.chart.engine.elementTree.ChartMessage): void;
							public isEnabled(): boolean;
							public constructor(param0: com.telerik.widget.chart.engine.chartAreas.ChartAreaModel);
						}
					}
				}
			}
		}
	}
}

declare module com {
	export module telerik {
		export module widget {
			export module chart {
				export module engine {
					export module elementTree {
						export class ModifyChildrenResult {
							public static class: java.lang.Class<com.telerik.widget.chart.engine.elementTree.ModifyChildrenResult>;
							public static ACCEPT: com.telerik.widget.chart.engine.elementTree.ModifyChildrenResult;
							public static CANCEL: com.telerik.widget.chart.engine.elementTree.ModifyChildrenResult;
							public static REFUSE: com.telerik.widget.chart.engine.elementTree.ModifyChildrenResult;
							public static valueOf(param0: java.lang.Class<any>, param1: string): java.lang.Enum<any>;
							public static valueOf(param0: string): com.telerik.widget.chart.engine.elementTree.ModifyChildrenResult;
							public static values(): native.Array<com.telerik.widget.chart.engine.elementTree.ModifyChildrenResult>;
						}
					}
				}
			}
		}
	}
}

declare module com {
	export module telerik {
		export module widget {
			export module chart {
				export module engine {
					export module elementTree {
						export class NodeCollection extends java.util.ArrayList<com.telerik.widget.chart.engine.elementTree.ChartNode> {
							public static class: java.lang.Class<com.telerik.widget.chart.engine.elementTree.NodeCollection>;
							public subList(param0: number, param1: number): java.util.List<any>;
							public remove(param0: number): any;
							public contains(param0: any): boolean;
							public size(): number;
							public remove(param0: number): com.telerik.widget.chart.engine.elementTree.ChartNode;
							public hashCode(): number;
							public toArray(): native.Array<any>;
							public listIterator(): java.util.ListIterator<any>;
							public addAll(param0: java.util.Collection<any>): boolean;
							public getOwner(): com.telerik.widget.chart.engine.elementTree.ChartElement;
							public set(param0: number, param1: any): any;
							public constructor(param0: java.util.Collection<any>);
							public add(param0: any): boolean;
							public listIterator(param0: number): java.util.ListIterator<any>;
							public removeAll(param0: java.util.Collection<any>): boolean;
							public add(param0: number, param1: any): void;
							public toArray(param0: native.Array<any>): native.Array<any>;
							public retainAll(param0: java.util.Collection<any>): boolean;
							public constructor();
							public add(param0: com.telerik.widget.chart.engine.elementTree.ChartNode): boolean;
							public containsAll(param0: java.util.Collection<any>): boolean;
							public iterator(): java.util.Iterator<any>;
							public lastIndexOf(param0: any): number;
							public remove(param0: any): boolean;
							public clear(): void;
							public get(param0: number): any;
							public indexOf(param0: any): number;
							public constructor(param0: number);
							public addAll(param0: number, param1: java.util.Collection<any>): boolean;
							public remove(param0: com.telerik.widget.chart.engine.elementTree.ChartNode): void;
							public constructor(param0: com.telerik.widget.chart.engine.elementTree.ChartElement);
							public equals(param0: any): boolean;
							public isEmpty(): boolean;
						}
					}
				}
			}
		}
	}
}

declare module com {
	export module telerik {
		export module widget {
			export module chart {
				export module engine {
					export module elementTree {
						export class NodeState {
							public static class: java.lang.Class<com.telerik.widget.chart.engine.elementTree.NodeState>;
							public static INITIAL: com.telerik.widget.chart.engine.elementTree.NodeState;
							public static LOADING: com.telerik.widget.chart.engine.elementTree.NodeState;
							public static LOADED: com.telerik.widget.chart.engine.elementTree.NodeState;
							public static UNLOADING: com.telerik.widget.chart.engine.elementTree.NodeState;
							public static UNLOADED: com.telerik.widget.chart.engine.elementTree.NodeState;
							public static valueOf(param0: string): com.telerik.widget.chart.engine.elementTree.NodeState;
							public static values(): native.Array<com.telerik.widget.chart.engine.elementTree.NodeState>;
							public static valueOf(param0: java.lang.Class<any>, param1: string): java.lang.Enum<any>;
						}
					}
				}
			}
		}
	}
}

declare module com {
	export module telerik {
		export module widget {
			export module chart {
				export module engine {
					export module elementTree {
						export class TreeTraversalMode {
							public static class: java.lang.Class<com.telerik.widget.chart.engine.elementTree.TreeTraversalMode>;
							public static DEPTH_FIRST: com.telerik.widget.chart.engine.elementTree.TreeTraversalMode;
							public static BREADTH_FIRST: com.telerik.widget.chart.engine.elementTree.TreeTraversalMode;
							public static values(): native.Array<com.telerik.widget.chart.engine.elementTree.TreeTraversalMode>;
							public static valueOf(param0: java.lang.Class<any>, param1: string): java.lang.Enum<any>;
							public static valueOf(param0: string): com.telerik.widget.chart.engine.elementTree.TreeTraversalMode;
						}
					}
				}
			}
		}
	}
}

declare module com {
	export module telerik {
		export module widget {
			export module chart {
				export module engine {
					export module elementTree {
						export module events {
							export class RadPropertyEventArgs extends java.lang.Object {
								public static class: java.lang.Class<com.telerik.widget.chart.engine.elementTree.events.RadPropertyEventArgs>;
								public Cancel: boolean;
								public getKey(): number;
								public getPropertyName(): string;
								public oldValue(): any;
								public constructor(param0: number, param1: any, param2: any);
								public constructor(param0: string, param1: any, param2: any);
								public newValue(): any;
							}
						}
					}
				}
			}
		}
	}
}

declare module com {
	export module telerik {
		export module widget {
			export module chart {
				export module engine {
					export module propertyStore {
						export class FastPropertyStore extends java.lang.Object {
							public static class: java.lang.Class<com.telerik.widget.chart.engine.propertyStore.FastPropertyStore>;
							public constructor();
							public containsEntry(param0: number): boolean;
							public getEntry(param0: number): any;
							public setEntry(param0: number, param1: any): void;
							public clear(): void;
							public removeEntry(param0: number): void;
						}
						export module FastPropertyStore {
							export class Entry extends java.lang.Object {
								public static class: java.lang.Class<com.telerik.widget.chart.engine.propertyStore.FastPropertyStore.Entry>;
								public getVal(param0: number): any;
							}
						}
					}
				}
			}
		}
	}
}

declare module com {
	export module telerik {
		export module widget {
			export module chart {
				export module engine {
					export module propertyStore {
						export abstract class PropertyBagObject extends java.lang.Object {
							public static class: java.lang.Class<com.telerik.widget.chart.engine.propertyStore.PropertyBagObject>;
							public propertyStore: com.telerik.widget.chart.engine.propertyStore.FastPropertyStore;
							public constructor();
							public getValue(param0: number): any;
							public isLocalValue(param0: number): boolean;
							public setValue(param0: number, param1: any): boolean;
							public clearValue(param0: number): boolean;
							public getTypedValue(param0: number, param1: any): any;
						}
					}
				}
			}
		}
	}
}

declare module com {
	export module telerik {
		export module widget {
			export module chart {
				export module engine {
					export module propertyStore {
						export class PropertyKeyValue extends java.lang.Object {
							public static class: java.lang.Class<com.telerik.widget.chart.engine.propertyStore.PropertyKeyValue>;
							public EntryKey: number;
							public Element: number;
							public constructor(param0: number, param1: number);
						}
					}
				}
			}
		}
	}
}

declare module com {
	export module telerik {
		export module widget {
			export module chart {
				export module engine {
					export module propertyStore {
						export class PropertyKeys extends java.lang.Object {
							public static class: java.lang.Class<com.telerik.widget.chart.engine.propertyStore.PropertyKeys>;
							public static getNameByKey(param0: java.lang.reflect.Type, param1: number): string;
							public static getPropertyFlags(param0: number): number;
							public static register(param0: java.lang.reflect.Type, param1: string): number;
							public static register(param0: java.lang.reflect.Type, param1: string, param2: number): number;
						}
					}
				}
			}
		}
	}
}

declare module com {
	export module telerik {
		export module widget {
			export module chart {
				export module engine {
					export module propertyStore {
						export class PropertyLookup extends java.lang.Object {
							public static class: java.lang.Class<com.telerik.widget.chart.engine.propertyStore.PropertyLookup>;
							public namesByKey: globalAndroid.util.SparseArray<string>;
							public keysByName: java.util.Map<string,java.lang.Integer>;
						}
					}
				}
			}
		}
	}
}

declare module com {
	export module telerik {
		export module widget {
			export module chart {
				export module engine {
					export module propertyStore {
						export class ValueExtractor<T>  extends java.lang.Object {
							public static class: java.lang.Class<com.telerik.widget.chart.engine.propertyStore.ValueExtractor<any>>;
							public value: T;
							public constructor();
						}
					}
				}
			}
		}
	}
}

declare module com {
	export module telerik {
		export module widget {
			export module chart {
				export module engine {
					export module series {
						export class BarSeriesModel extends com.telerik.widget.chart.engine.series.CategoricalSeriesModel {
							public static class: java.lang.Class<com.telerik.widget.chart.engine.series.BarSeriesModel>;
							public constructor();
							public setMinBarWidth(param0: number): void;
							public getMaxBarWidth(): number;
							public arrangeOverride(param0: com.telerik.android.common.math.RadRect): com.telerik.android.common.math.RadRect;
							public getCombinedPlotStrategy(): com.telerik.widget.chart.engine.series.combination.CombinedSeriesPlotStrategy;
							public getStackGroupKey(): any;
							public detachAxis(param0: com.telerik.widget.chart.engine.axes.AxisModel): void;
							public setMaxBarWidth(param0: number): void;
							public getCombinedRoundLayoutStrategy(): com.telerik.widget.chart.engine.series.combination.CombinedSeriesRoundLayoutStrategy;
							public getFirstAxis(): com.telerik.widget.chart.engine.axes.AxisModel;
							public attachAxis(param0: com.telerik.widget.chart.engine.axes.AxisModel, param1: com.telerik.widget.chart.engine.axes.AxisType): void;
							public applyLayoutRounding(): void;
							public getMinBarWidth(): number;
							public getSecondAxis(): com.telerik.widget.chart.engine.axes.AxisModel;
							public getCombineMode(): com.telerik.widget.chart.engine.series.combination.ChartSeriesCombineMode;
						}
					}
				}
			}
		}
	}
}

declare module com {
	export module telerik {
		export module widget {
			export module chart {
				export module engine {
					export module series {
						export abstract class CategoricalSeriesModel extends com.telerik.widget.chart.engine.series.SeriesModelWithAxes<com.telerik.widget.chart.engine.dataPoints.CategoricalDataPointBase> implements com.telerik.widget.chart.engine.series.combination.SupportCombineMode  {
							public static class: java.lang.Class<com.telerik.widget.chart.engine.series.CategoricalSeriesModel>;
							public static COMBINE_MODE_PROPERTY_KEY: number;
							public static STACK_GROUP_KEY_PROPERTY_KEY: number;
							public constructor();
							public setCombineMode(param0: com.telerik.widget.chart.engine.series.combination.ChartSeriesCombineMode): void;
							public getDefaultPlotMode(): com.telerik.widget.chart.engine.axes.common.AxisPlotMode;
							public canAddChild(param0: com.telerik.widget.chart.engine.elementTree.ChartNode): com.telerik.widget.chart.engine.elementTree.ModifyChildrenResult;
							public getFirstAxis(): com.telerik.widget.chart.engine.axes.AxisModel;
							public getStackGroupKey(): any;
							public attachAxis(param0: com.telerik.widget.chart.engine.axes.AxisModel, param1: com.telerik.widget.chart.engine.axes.AxisType): void;
							public detachAxis(param0: com.telerik.widget.chart.engine.axes.AxisModel): void;
							public setStackGroupKey(param0: any): void;
							public getCombineMode(): com.telerik.widget.chart.engine.series.combination.ChartSeriesCombineMode;
							public getSecondAxis(): com.telerik.widget.chart.engine.axes.AxisModel;
						}
					}
				}
			}
		}
	}
}

declare module com {
	export module telerik {
		export module widget {
			export module chart {
				export module engine {
					export module series {
						export class CategoricalSeriesRoundLayoutContext extends java.lang.Object {
							public static class: java.lang.Class<com.telerik.widget.chart.engine.series.CategoricalSeriesRoundLayoutContext>;
							public plotDirection(): com.telerik.widget.chart.engine.axes.common.AxisPlotDirection;
							public plotArea(): com.telerik.android.common.math.RadRect;
							public snapPointToGridLine(param0: com.telerik.widget.chart.engine.dataPoints.CategoricalDataPointBase): void;
							public plotOrigin(): number;
							public plotLine(): number;
							public constructor(param0: com.telerik.widget.chart.engine.series.CategoricalSeriesModel);
							public snapPointToPlotLine(param0: com.telerik.widget.chart.engine.dataPoints.CategoricalDataPointBase): void;
						}
					}
				}
			}
		}
	}
}

declare module com {
	export module telerik {
		export module widget {
			export module chart {
				export module engine {
					export module series {
						export abstract class ChartSeriesModel<T>  extends com.telerik.widget.chart.engine.elementTree.ChartElement {
							public static class: java.lang.Class<com.telerik.widget.chart.engine.series.ChartSeriesModel<any>>;
							public static DATA_POINTS_MODIFIED_MESSAGE_KEY: number;
							public constructor();
							public dataPoints(): com.telerik.widget.chart.engine.dataPoints.DataPointCollection<any>;
							public getCombinedPlotStrategy(): com.telerik.widget.chart.engine.series.combination.CombinedSeriesPlotStrategy;
							public getCombinedRoundLayoutStrategy(): com.telerik.widget.chart.engine.series.combination.CombinedSeriesRoundLayoutStrategy;
							public getDataPointsChangedListener(): com.telerik.widget.chart.engine.series.ChartSeriesModel.DataPointsChangedListener;
							public visibleDataPoints(): java.util.List<any>;
							public onChildInserted(param0: number, param1: com.telerik.widget.chart.engine.elementTree.ChartNode): void;
							public getDefaultPlotMode(): com.telerik.widget.chart.engine.axes.common.AxisPlotMode;
							public static selectPlotMode(param0: java.lang.Iterable<com.telerik.widget.chart.engine.series.ChartSeriesModel<any>>): com.telerik.widget.chart.engine.axes.common.AxisPlotMode;
							public onChildRemoved(param0: number, param1: com.telerik.widget.chart.engine.elementTree.ChartNode): void;
							public setDataPointsChangedListener(param0: com.telerik.widget.chart.engine.series.ChartSeriesModel.DataPointsChangedListener): void;
							public updateVisibleDataPoints(): void;
							public getZoomedRect(param0: com.telerik.android.common.math.RadRect): com.telerik.android.common.math.RadRect;
						}
						export module ChartSeriesModel {
							export class DataPointsChangedListener extends java.lang.Object {
								public static class: java.lang.Class<com.telerik.widget.chart.engine.series.ChartSeriesModel.DataPointsChangedListener>;
								/**
								 * Constructs a new instance of the com.telerik.widget.chart.engine.series.ChartSeriesModel$DataPointsChangedListener interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
								 */
								public constructor(implementation: {
									onPointAdded(param0: number, param1: com.telerik.widget.chart.engine.dataPoints.DataPoint): void;
									onPointRemoved(param0: number, param1: com.telerik.widget.chart.engine.dataPoints.DataPoint): void;
								});
								public constructor();
								public onPointAdded(param0: number, param1: com.telerik.widget.chart.engine.dataPoints.DataPoint): void;
								public onPointRemoved(param0: number, param1: com.telerik.widget.chart.engine.dataPoints.DataPoint): void;
							}
						}
					}
				}
			}
		}
	}
}

declare module com {
	export module telerik {
		export module widget {
			export module chart {
				export module engine {
					export module series {
						export abstract class DataPointSeriesModel<T>  extends com.telerik.widget.chart.engine.series.ChartSeriesModel<any> {
							public static class: java.lang.Class<com.telerik.widget.chart.engine.series.DataPointSeriesModel<any>>;
							public constructor();
							public getVirtualizationEnabled(): boolean;
							public dataPoints(): com.telerik.widget.chart.engine.dataPoints.DataPointCollection<any>;
							public updateVisibleDataPoints(): void;
							public updateVisibleDataPointsCore(): void;
							public visibleDataPoints(): java.util.List<any>;
							public setVirtualizationEnabled(param0: boolean): void;
						}
					}
				}
			}
		}
	}
}

declare module com {
	export module telerik {
		export module widget {
			export module chart {
				export module engine {
					export module series {
						export class Ohlc extends java.lang.Object {
							public static class: java.lang.Class<com.telerik.widget.chart.engine.series.Ohlc>;
							public constructor();
							public open(): number;
							public close(): number;
							public high(): number;
							public low(): number;
							public constructor(param0: number, param1: number, param2: number, param3: number);
						}
					}
				}
			}
		}
	}
}

declare module com {
	export module telerik {
		export module widget {
			export module chart {
				export module engine {
					export module series {
						export class OhlcSeriesModel extends com.telerik.widget.chart.engine.series.SeriesModelWithAxes<com.telerik.widget.chart.engine.dataPoints.OhlcDataPoint> {
							public static class: java.lang.Class<com.telerik.widget.chart.engine.series.OhlcSeriesModel>;
							public constructor();
							public getDefaultPlotMode(): com.telerik.widget.chart.engine.axes.common.AxisPlotMode;
							public canAddChild(param0: com.telerik.widget.chart.engine.elementTree.ChartNode): com.telerik.widget.chart.engine.elementTree.ModifyChildrenResult;
							public arrangeOverride(param0: com.telerik.android.common.math.RadRect): com.telerik.android.common.math.RadRect;
							public getFirstAxis(): com.telerik.widget.chart.engine.axes.AxisModel;
							public attachAxis(param0: com.telerik.widget.chart.engine.axes.AxisModel, param1: com.telerik.widget.chart.engine.axes.AxisType): void;
							public detachAxis(param0: com.telerik.widget.chart.engine.axes.AxisModel): void;
							public getSecondAxis(): com.telerik.widget.chart.engine.axes.AxisModel;
						}
					}
				}
			}
		}
	}
}

declare module com {
	export module telerik {
		export module widget {
			export module chart {
				export module engine {
					export module series {
						export class PieSeriesModel extends com.telerik.widget.chart.engine.series.DataPointSeriesModel<com.telerik.widget.chart.engine.dataPoints.PieDataPoint> {
							public static class: java.lang.Class<com.telerik.widget.chart.engine.series.PieSeriesModel>;
							public static RANGE_PROPERTY_KEY: number;
							public static LABEL_FORMAT_PROPERTY_KEY: number;
							public static DEFAULT_LABEL_FORMAT: string;
							public static DEFAULT_NO_PERCENTAGE_LABEL_FORMAT: string;
							public constructor();
							public processMessage(param0: com.telerik.widget.chart.engine.elementTree.ChartMessage): void;
							public canAddChild(param0: com.telerik.widget.chart.engine.elementTree.ChartNode): com.telerik.widget.chart.engine.elementTree.ModifyChildrenResult;
							public setLabelFormat(param0: string): void;
							public arrangeOverride(param0: com.telerik.android.common.math.RadRect): com.telerik.android.common.math.RadRect;
							public setRange(param0: com.telerik.widget.chart.engine.chartAreas.AngleRange): void;
							public onPropertyChanged(param0: com.telerik.widget.chart.engine.elementTree.events.RadPropertyEventArgs): void;
							public getLabelFormat(): string;
							public maxRelativeOffsetFromCenter(): number;
							public getDisplayPercentage(): boolean;
							public getRange(): com.telerik.widget.chart.engine.chartAreas.AngleRange;
							public setDisplayPercentage(param0: boolean): void;
						}
					}
				}
			}
		}
	}
}

declare module com {
	export module telerik {
		export module widget {
			export module chart {
				export module engine {
					export module series {
						export class PointSeriesModel extends com.telerik.widget.chart.engine.series.CategoricalSeriesModel {
							public static class: java.lang.Class<com.telerik.widget.chart.engine.series.PointSeriesModel>;
							public constructor();
							public getDefaultPlotMode(): com.telerik.widget.chart.engine.axes.common.AxisPlotMode;
							public arrangeOverride(param0: com.telerik.android.common.math.RadRect): com.telerik.android.common.math.RadRect;
							public getFirstAxis(): com.telerik.widget.chart.engine.axes.AxisModel;
							public attachAxis(param0: com.telerik.widget.chart.engine.axes.AxisModel, param1: com.telerik.widget.chart.engine.axes.AxisType): void;
							public getStackGroupKey(): any;
							public detachAxis(param0: com.telerik.widget.chart.engine.axes.AxisModel): void;
							public getSecondAxis(): com.telerik.widget.chart.engine.axes.AxisModel;
							public getCombineMode(): com.telerik.widget.chart.engine.series.combination.ChartSeriesCombineMode;
						}
					}
				}
			}
		}
	}
}

declare module com {
	export module telerik {
		export module widget {
			export module chart {
				export module engine {
					export module series {
						export class ScatterSeriesModel extends com.telerik.widget.chart.engine.series.SeriesModelWithAxes<com.telerik.widget.chart.engine.dataPoints.ScatterDataPoint> {
							public static class: java.lang.Class<com.telerik.widget.chart.engine.series.ScatterSeriesModel>;
							public constructor();
							public canAddChild(param0: com.telerik.widget.chart.engine.elementTree.ChartNode): com.telerik.widget.chart.engine.elementTree.ModifyChildrenResult;
							public arrangeOverride(param0: com.telerik.android.common.math.RadRect): com.telerik.android.common.math.RadRect;
							public getFirstAxis(): com.telerik.widget.chart.engine.axes.AxisModel;
							public attachAxis(param0: com.telerik.widget.chart.engine.axes.AxisModel, param1: com.telerik.widget.chart.engine.axes.AxisType): void;
							public detachAxis(param0: com.telerik.widget.chart.engine.axes.AxisModel): void;
							public getSecondAxis(): com.telerik.widget.chart.engine.axes.AxisModel;
						}
					}
				}
			}
		}
	}
}

declare module com {
	export module telerik {
		export module widget {
			export module chart {
				export module engine {
					export module series {
						export abstract class SeriesModelWithAxes<T>  extends com.telerik.widget.chart.engine.series.DataPointSeriesModel<any> implements com.telerik.widget.chart.engine.axes.common.SeriesModelWithAxes  {
							public static class: java.lang.Class<com.telerik.widget.chart.engine.series.SeriesModelWithAxes<any>>;
							public constructor();
							public getFirstAxis(): com.telerik.widget.chart.engine.axes.AxisModel;
							public attachAxis(param0: com.telerik.widget.chart.engine.axes.AxisModel, param1: com.telerik.widget.chart.engine.axes.AxisType): void;
							public detachAxis(param0: com.telerik.widget.chart.engine.axes.AxisModel): void;
							public getSecondAxis(): com.telerik.widget.chart.engine.axes.AxisModel;
							public updateVisibleDataPointsCore(): void;
						}
					}
				}
			}
		}
	}
}

declare module com {
	export module telerik {
		export module widget {
			export module chart {
				export module engine {
					export module series {
						export module combination {
							export class ChartSeriesCombineMode {
								public static class: java.lang.Class<com.telerik.widget.chart.engine.series.combination.ChartSeriesCombineMode>;
								public static NONE: com.telerik.widget.chart.engine.series.combination.ChartSeriesCombineMode;
								public static CLUSTER: com.telerik.widget.chart.engine.series.combination.ChartSeriesCombineMode;
								public static STACK: com.telerik.widget.chart.engine.series.combination.ChartSeriesCombineMode;
								public static STACK_100: com.telerik.widget.chart.engine.series.combination.ChartSeriesCombineMode;
								public static values(): native.Array<com.telerik.widget.chart.engine.series.combination.ChartSeriesCombineMode>;
								public static valueOf(param0: java.lang.Class<any>, param1: string): java.lang.Enum<any>;
								public static valueOf(param0: string): com.telerik.widget.chart.engine.series.combination.ChartSeriesCombineMode;
							}
						}
					}
				}
			}
		}
	}
}

declare module com {
	export module telerik {
		export module widget {
			export module chart {
				export module engine {
					export module series {
						export module combination {
							export class ChartSeriesCombineStrategy extends java.lang.Object {
								public static class: java.lang.Class<com.telerik.widget.chart.engine.series.combination.ChartSeriesCombineStrategy>;
								public combinedSeries: java.util.ArrayList<com.telerik.widget.chart.engine.series.combination.CombinedSeries>;
								public nonCombinedSeries: java.util.ArrayList<com.telerik.widget.chart.engine.series.ChartSeriesModel<any>>;
								public hasCombination: boolean;
								public maximumStackSums: java.util.Hashtable<com.telerik.widget.chart.engine.axes.AxisModel,java.lang.Double>;
								public minimumStackSums: java.util.Hashtable<com.telerik.widget.chart.engine.axes.AxisModel,java.lang.Double>;
								public stackAxis: com.telerik.widget.chart.engine.axes.AxisModel;
								public stackValueAxes: java.util.ArrayList<com.telerik.widget.chart.engine.axes.AxisModel>;
								public isUpdated: boolean;
								public plot(): void;
								public reset(): void;
								public constructor();
								public update(param0: java.lang.Iterable<com.telerik.widget.chart.engine.series.ChartSeriesModel<any>>, param1: com.telerik.widget.chart.engine.axes.AxisModel): void;
								public applyLayoutRounding(param0: com.telerik.widget.chart.engine.chartAreas.ChartAreaModel): void;
							}
						}
					}
				}
			}
		}
	}
}

declare module com {
	export module telerik {
		export module widget {
			export module chart {
				export module engine {
					export module series {
						export module combination {
							export class CombineGroup extends java.lang.Object {
								public static class: java.lang.Class<com.telerik.widget.chart.engine.series.combination.CombineGroup>;
								public constructor();
								public stacks(): java.util.ArrayList<com.telerik.widget.chart.engine.series.combination.CombineStack>;
								public getStack(param0: com.telerik.widget.chart.engine.series.combination.SupportCombineMode): com.telerik.widget.chart.engine.series.combination.CombineStack;
							}
						}
					}
				}
			}
		}
	}
}

declare module com {
	export module telerik {
		export module widget {
			export module chart {
				export module engine {
					export module series {
						export module combination {
							export class CombineStack extends java.lang.Object {
								public static class: java.lang.Class<com.telerik.widget.chart.engine.series.combination.CombineStack>;
								public key: any;
								public positiveSum: number;
								public negativeSum: number;
								public points(): java.util.ArrayList<com.telerik.widget.chart.engine.dataPoints.DataPoint>;
								public constructor();
							}
						}
					}
				}
			}
		}
	}
}

declare module com {
	export module telerik {
		export module widget {
			export module chart {
				export module engine {
					export module series {
						export module combination {
							export class CombinedSeries extends java.lang.Object {
								public static class: java.lang.Class<com.telerik.widget.chart.engine.series.combination.CombinedSeries>;
								public series(): java.util.ArrayList<com.telerik.widget.chart.engine.series.ChartSeriesModel<any>>;
								public groups(): java.util.ArrayList<com.telerik.widget.chart.engine.series.combination.CombineGroup>;
								public seriesType(): java.lang.reflect.Type;
								public stackValueAxis(): com.telerik.widget.chart.engine.axes.AxisModel;
								public constructor(param0: java.lang.reflect.Type, param1: com.telerik.widget.chart.engine.series.combination.ChartSeriesCombineMode, param2: number, param3: com.telerik.widget.chart.engine.axes.AxisModel, param4: com.telerik.widget.chart.engine.axes.AxisModel);
								public stackAxis(): com.telerik.widget.chart.engine.axes.AxisModel;
								public combineIndex(): number;
								public combineMode(): com.telerik.widget.chart.engine.series.combination.ChartSeriesCombineMode;
							}
						}
					}
				}
			}
		}
	}
}

declare module com {
	export module telerik {
		export module widget {
			export module chart {
				export module engine {
					export module series {
						export module combination {
							export abstract class CombinedSeriesPlotStrategy extends java.lang.Object {
								public static class: java.lang.Class<com.telerik.widget.chart.engine.series.combination.CombinedSeriesPlotStrategy>;
								public constructor();
								public plot(param0: com.telerik.widget.chart.engine.series.combination.CombinedSeries, param1: number): void;
							}
						}
					}
				}
			}
		}
	}
}

declare module com {
	export module telerik {
		export module widget {
			export module chart {
				export module engine {
					export module series {
						export module combination {
							export abstract class CombinedSeriesRoundLayoutStrategy extends java.lang.Object {
								public static class: java.lang.Class<com.telerik.widget.chart.engine.series.combination.CombinedSeriesRoundLayoutStrategy>;
								public constructor();
								public applyLayoutRounding(param0: com.telerik.widget.chart.engine.chartAreas.ChartAreaModel, param1: com.telerik.widget.chart.engine.series.combination.CombinedSeries): void;
							}
						}
					}
				}
			}
		}
	}
}

declare module com {
	export module telerik {
		export module widget {
			export module chart {
				export module engine {
					export module series {
						export module combination {
							export class SupportCombineMode extends java.lang.Object {
								public static class: java.lang.Class<com.telerik.widget.chart.engine.series.combination.SupportCombineMode>;
								/**
								 * Constructs a new instance of the com.telerik.widget.chart.engine.series.combination.SupportCombineMode interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
								 */
								public constructor(implementation: {
									getCombineMode(): com.telerik.widget.chart.engine.series.combination.ChartSeriesCombineMode;
									getStackGroupKey(): any;
								});
								public constructor();
								public getStackGroupKey(): any;
								public getCombineMode(): com.telerik.widget.chart.engine.series.combination.ChartSeriesCombineMode;
							}
						}
					}
				}
			}
		}
	}
}

declare module com {
	export module telerik {
		export module widget {
			export module chart {
				export module engine {
					export module series {
						export module combination {
							export module barSeries {
								export class CombinedBarSeriesPlotStrategy extends com.telerik.widget.chart.engine.series.combination.CombinedSeriesPlotStrategy {
									public static class: java.lang.Class<com.telerik.widget.chart.engine.series.combination.barSeries.CombinedBarSeriesPlotStrategy>;
									public constructor();
									public plot(param0: com.telerik.widget.chart.engine.series.combination.CombinedSeries, param1: number): void;
								}
							}
						}
					}
				}
			}
		}
	}
}

declare module com {
	export module telerik {
		export module widget {
			export module chart {
				export module engine {
					export module series {
						export module combination {
							export module barSeries {
								export class CombinedBarSeriesRoundLayoutStrategy extends com.telerik.widget.chart.engine.series.combination.CombinedSeriesRoundLayoutStrategy {
									public static class: java.lang.Class<com.telerik.widget.chart.engine.series.combination.barSeries.CombinedBarSeriesRoundLayoutStrategy>;
									public constructor();
									public applyLayoutRounding(param0: com.telerik.widget.chart.engine.chartAreas.ChartAreaModel, param1: com.telerik.widget.chart.engine.series.combination.CombinedSeries): void;
								}
							}
						}
					}
				}
			}
		}
	}
}

declare module com {
	export module telerik {
		export module widget {
			export module chart {
				export module engine {
					export module series {
						export module rangeSeries {
							export class CombinedRangeBarSeriesRoundLayoutStrategy extends com.telerik.widget.chart.engine.series.combination.CombinedSeriesRoundLayoutStrategy {
								public static class: java.lang.Class<com.telerik.widget.chart.engine.series.rangeSeries.CombinedRangeBarSeriesRoundLayoutStrategy>;
								public constructor();
								public applyLayoutRounding(param0: com.telerik.widget.chart.engine.chartAreas.ChartAreaModel, param1: com.telerik.widget.chart.engine.series.combination.CombinedSeries): void;
							}
						}
					}
				}
			}
		}
	}
}

declare module com {
	export module telerik {
		export module widget {
			export module chart {
				export module engine {
					export module series {
						export module rangeSeries {
							export class Range extends java.lang.Object {
								public static class: java.lang.Class<com.telerik.widget.chart.engine.series.rangeSeries.Range>;
								public low(): number;
								public constructor(param0: number, param1: number);
								public constructor();
								public high(): number;
							}
						}
					}
				}
			}
		}
	}
}

declare module com {
	export module telerik {
		export module widget {
			export module chart {
				export module engine {
					export module series {
						export module rangeSeries {
							export class RangeBarSeriesModel extends com.telerik.widget.chart.engine.series.rangeSeries.RangeSeriesBaseModel implements com.telerik.widget.chart.engine.series.combination.SupportCombineMode {
								public static class: java.lang.Class<com.telerik.widget.chart.engine.series.rangeSeries.RangeBarSeriesModel>;
								public getCombinedPlotStrategy(): com.telerik.widget.chart.engine.series.combination.CombinedSeriesPlotStrategy;
								public setCombineMode(param0: com.telerik.widget.chart.engine.series.combination.ChartSeriesCombineMode): void;
								public detachAxis(param0: com.telerik.widget.chart.engine.axes.AxisModel): void;
								public getStackGroupKey(): any;
								public attachAxis(param0: com.telerik.widget.chart.engine.axes.AxisModel, param1: com.telerik.widget.chart.engine.axes.AxisType): void;
								public getCombineMode(): com.telerik.widget.chart.engine.series.combination.ChartSeriesCombineMode;
								public getSecondAxis(): com.telerik.widget.chart.engine.axes.AxisModel;
								public getFirstAxis(): com.telerik.widget.chart.engine.axes.AxisModel;
								public getShouldRoundLayout(): boolean;
								public constructor();
								public getDefaultPlotMode(): com.telerik.widget.chart.engine.axes.common.AxisPlotMode;
								public getCombinedRoundLayoutStrategy(): com.telerik.widget.chart.engine.series.combination.CombinedSeriesRoundLayoutStrategy;
							}
						}
					}
				}
			}
		}
	}
}

declare module com {
	export module telerik {
		export module widget {
			export module chart {
				export module engine {
					export module series {
						export module rangeSeries {
							export class RangeSeriesBaseModel extends com.telerik.widget.chart.engine.series.CategoricalSeriesModel {
								public static class: java.lang.Class<com.telerik.widget.chart.engine.series.rangeSeries.RangeSeriesBaseModel>;
								public detachAxis(param0: com.telerik.widget.chart.engine.axes.AxisModel): void;
								public arrangeOverride(param0: com.telerik.android.common.math.RadRect): com.telerik.android.common.math.RadRect;
								public attachAxis(param0: com.telerik.widget.chart.engine.axes.AxisModel, param1: com.telerik.widget.chart.engine.axes.AxisType): void;
								public getStackGroupKey(): any;
								public getSecondAxis(): com.telerik.widget.chart.engine.axes.AxisModel;
								public getCombineMode(): com.telerik.widget.chart.engine.series.combination.ChartSeriesCombineMode;
								public getFirstAxis(): com.telerik.widget.chart.engine.axes.AxisModel;
								public getShouldRoundLayout(): boolean;
								public canAddChild(param0: com.telerik.widget.chart.engine.elementTree.ChartNode): com.telerik.widget.chart.engine.elementTree.ModifyChildrenResult;
								public constructor();
								public getDefaultPlotMode(): com.telerik.widget.chart.engine.axes.common.AxisPlotMode;
							}
						}
					}
				}
			}
		}
	}
}

declare module com {
	export module telerik {
		export module widget {
			export module chart {
				export module engine {
					export module series {
						export module rangeSeries {
							export class RangeSeriesBaseRoundLayoutContext extends java.lang.Object {
								public static class: java.lang.Class<com.telerik.widget.chart.engine.series.rangeSeries.RangeSeriesBaseRoundLayoutContext>;
								public plotLine: number;
								public plotOrigin: number;
								public plotDirection: com.telerik.widget.chart.engine.axes.common.AxisPlotDirection;
								public plotArea: com.telerik.android.common.math.RadRect;
								public constructor(param0: com.telerik.widget.chart.engine.series.rangeSeries.RangeSeriesBaseModel);
								public snapPointToGridLine(param0: com.telerik.widget.chart.engine.dataPoints.RangeDataPoint): void;
							}
						}
					}
				}
			}
		}
	}
}

declare module com {
	export module telerik {
		export module widget {
			export module chart {
				export module engine {
					export module view {
						export class ChartElementPresenter extends java.lang.Object {
							public static class: java.lang.Class<com.telerik.widget.chart.engine.view.ChartElementPresenter>;
							/**
							 * Constructs a new instance of the com.telerik.widget.chart.engine.view.ChartElementPresenter interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
							 */
							public constructor(implementation: {
								refreshNode(param0: com.telerik.widget.chart.engine.elementTree.ChartNode): void;
								measureContent(param0: com.telerik.widget.chart.engine.elementTree.ChartNode, param1: any): com.telerik.android.common.math.RadSize;
								invalidatePalette(): void;
								getCollectionIndex(): number;
							});
							public constructor();
							public invalidatePalette(): void;
							public getCollectionIndex(): number;
							public measureContent(param0: com.telerik.widget.chart.engine.elementTree.ChartNode, param1: any): com.telerik.android.common.math.RadSize;
							public refreshNode(param0: com.telerik.widget.chart.engine.elementTree.ChartNode): void;
						}
					}
				}
			}
		}
	}
}

declare module com {
	export module telerik {
		export module widget {
			export module chart {
				export module engine {
					export module view {
						export class ChartSeries extends java.lang.Object implements com.telerik.widget.chart.engine.view.ChartElementPresenter {
							public static class: java.lang.Class<com.telerik.widget.chart.engine.view.ChartSeries>;
							/**
							 * Constructs a new instance of the com.telerik.widget.chart.engine.view.ChartSeries interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
							 */
							public constructor(implementation: {
								onDataPointIsSelectedChanged(param0: com.telerik.widget.chart.engine.dataPoints.DataPoint): void;
								refreshNode(param0: com.telerik.widget.chart.engine.elementTree.ChartNode): void;
								measureContent(param0: com.telerik.widget.chart.engine.elementTree.ChartNode, param1: any): com.telerik.android.common.math.RadSize;
								invalidatePalette(): void;
								getCollectionIndex(): number;
							});
							public constructor();
							public invalidatePalette(): void;
							public getCollectionIndex(): number;
							public measureContent(param0: com.telerik.widget.chart.engine.elementTree.ChartNode, param1: any): com.telerik.android.common.math.RadSize;
							public onDataPointIsSelectedChanged(param0: com.telerik.widget.chart.engine.dataPoints.DataPoint): void;
							public refreshNode(param0: com.telerik.widget.chart.engine.elementTree.ChartNode): void;
						}
					}
				}
			}
		}
	}
}

declare module com {
	export module telerik {
		export module widget {
			export module chart {
				export module engine {
					export module view {
						export class ChartView extends java.lang.Object implements com.telerik.widget.chart.engine.view.ChartElementPresenter {
							public static class: java.lang.Class<com.telerik.widget.chart.engine.view.ChartView>;
							/**
							 * Constructs a new instance of the com.telerik.widget.chart.engine.view.ChartView interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
							 */
							public constructor(implementation: {
								getViewportWidth(): number;
								getViewportHeight(): number;
								getZoomWidth(): number;
								getZoomHeight(): number;
								getPanOffsetX(): number;
								getPanOffsetY(): number;
								getPlotAreaClip(): com.telerik.android.common.math.RadRect;
								refreshNode(param0: com.telerik.widget.chart.engine.elementTree.ChartNode): void;
								measureContent(param0: com.telerik.widget.chart.engine.elementTree.ChartNode, param1: any): com.telerik.android.common.math.RadSize;
								invalidatePalette(): void;
								getCollectionIndex(): number;
							});
							public constructor();
							public invalidatePalette(): void;
							public getZoomWidth(): number;
							public getCollectionIndex(): number;
							public getPanOffsetY(): number;
							public measureContent(param0: com.telerik.widget.chart.engine.elementTree.ChartNode, param1: any): com.telerik.android.common.math.RadSize;
							public getZoomHeight(): number;
							public getViewportHeight(): number;
							public getPanOffsetX(): number;
							public getViewportWidth(): number;
							public getPlotAreaClip(): com.telerik.android.common.math.RadRect;
							public refreshNode(param0: com.telerik.widget.chart.engine.elementTree.ChartNode): void;
						}
					}
				}
			}
		}
	}
}

declare module com {
	export module telerik {
		export module widget {
			export module chart {
				export module visualization {
					export module annotations {
						export abstract class ChartAnnotation extends com.telerik.widget.chart.visualization.common.ChartElementPresenter {
							public static class: java.lang.Class<com.telerik.widget.chart.visualization.annotations.ChartAnnotation>;
							public static ANNOTATION_Z_INDEX: number;
							public constructor();
							public getElement(): com.telerik.widget.chart.engine.elementTree.ChartElement;
							public applyPaletteCore(param0: com.telerik.widget.palettes.ChartPalette): void;
							public onAttached(): void;
							public getModel(): com.telerik.widget.chart.engine.decorations.annotations.ChartAnnotationModel;
							public onPaletteUpdated(param0: com.telerik.widget.palettes.ChartPalette): void;
							public processPaletteEntry(param0: com.telerik.widget.palettes.PaletteEntry): void;
							public updateUICore(param0: com.telerik.widget.chart.visualization.common.ChartLayoutContext): void;
							public render(param0: globalAndroid.graphics.Canvas): void;
							public invalidatePalette(): void;
							public getCollectionIndex(): number;
							public updatePresenters(): void;
							public measureContent(param0: com.telerik.widget.chart.engine.elementTree.ChartNode, param1: any): com.telerik.android.common.math.RadSize;
							public onDetached(param0: com.telerik.widget.chart.visualization.common.RadChartViewBase<any>): void;
							public setClipToPlotArea(param0: boolean): void;
							public getClipToPlotArea(): boolean;
							public drawCore(param0: globalAndroid.graphics.Canvas): void;
							public getDefaultZIndex(): number;
							public refreshNode(param0: com.telerik.widget.chart.engine.elementTree.ChartNode): void;
						}
					}
				}
			}
		}
	}
}

declare module com {
	export module telerik {
		export module widget {
			export module chart {
				export module visualization {
					export module annotations {
						export class ChartAnnotationLabelLocation {
							public static class: java.lang.Class<com.telerik.widget.chart.visualization.annotations.ChartAnnotationLabelLocation>;
							public static LEFT: com.telerik.widget.chart.visualization.annotations.ChartAnnotationLabelLocation;
							public static TOP: com.telerik.widget.chart.visualization.annotations.ChartAnnotationLabelLocation;
							public static RIGHT: com.telerik.widget.chart.visualization.annotations.ChartAnnotationLabelLocation;
							public static BOTTOM: com.telerik.widget.chart.visualization.annotations.ChartAnnotationLabelLocation;
							public static INSIDE: com.telerik.widget.chart.visualization.annotations.ChartAnnotationLabelLocation;
							public static valueOf(param0: java.lang.Class<any>, param1: string): java.lang.Enum<any>;
							public static valueOf(param0: string): com.telerik.widget.chart.visualization.annotations.ChartAnnotationLabelLocation;
							public static values(): native.Array<com.telerik.widget.chart.visualization.annotations.ChartAnnotationLabelLocation>;
						}
					}
				}
			}
		}
	}
}

declare module com {
	export module telerik {
		export module widget {
			export module chart {
				export module visualization {
					export module annotations {
						export class ChartAnnotationLabelUpdateContext extends java.lang.Object {
							public static class: java.lang.Class<com.telerik.widget.chart.visualization.annotations.ChartAnnotationLabelUpdateContext>;
							public location: com.telerik.android.common.math.RadPoint;
							public layoutSlot: com.telerik.android.common.math.RadRect;
							public constructor(param0: com.telerik.android.common.math.RadPoint);
							public constructor(param0: com.telerik.android.common.math.RadRect);
						}
					}
				}
			}
		}
	}
}

declare module com {
	export module telerik {
		export module widget {
			export module chart {
				export module visualization {
					export module annotations {
						export abstract class ChartLabelAnnotation extends com.telerik.widget.chart.visualization.annotations.ChartAnnotation {
							public static class: java.lang.Class<com.telerik.widget.chart.visualization.annotations.ChartLabelAnnotation>;
							public static LABEL_FORMAT_PROPERTY_KEY: number;
							public static LABEL_LOCATION_PROPERTY_KEY: number;
							public static HORIZONTAL_ALIGNMENT_PROPERTY_KEY: number;
							public static VERTICAL_ALIGNMENT_PROPERTY_KEY: number;
							public static HORIZONTAL_OFFSET_PROPERTY_KEY: number;
							public static VERTICAL_OFFSET_PROPERTY_KEY: number;
							public getLabelLocation(): com.telerik.widget.chart.visualization.annotations.ChartAnnotationLabelLocation;
							public setLabelLocation(param0: com.telerik.widget.chart.visualization.annotations.ChartAnnotationLabelLocation): void;
							public setLabelFormat(param0: string): void;
							public processPaletteEntry(param0: com.telerik.widget.palettes.PaletteEntry): void;
							public getLabel(): string;
							public getLabelFormat(): string;
							public getLabelHorizontalAlignment(): com.telerik.widget.chart.visualization.annotations.HorizontalAlignment;
							public getLabelSize(): number;
							public invalidatePalette(): void;
							public getLabelHorizontalOffset(): number;
							public updatePresenters(): void;
							public measureContent(param0: com.telerik.widget.chart.engine.elementTree.ChartNode, param1: any): com.telerik.android.common.math.RadSize;
							public getLabelVerticalOffset(): number;
							public setLabelVerticalOffset(param0: number): void;
							public setLabelHorizontalAlignment(param0: com.telerik.widget.chart.visualization.annotations.HorizontalAlignment): void;
							public constructor();
							public getLabelVerticalAlignment(): com.telerik.widget.chart.visualization.annotations.VerticalAlignment;
							public onPaletteUpdated(param0: com.telerik.widget.palettes.ChartPalette): void;
							public setLabelVerticalAlignment(param0: com.telerik.widget.chart.visualization.annotations.VerticalAlignment): void;
							public getCollectionIndex(): number;
							public setLabel(param0: string): void;
							public setLabelSize(param0: number): void;
							public drawCore(param0: globalAndroid.graphics.Canvas): void;
							public setLabelHorizontalOffset(param0: number): void;
							public refreshNode(param0: com.telerik.widget.chart.engine.elementTree.ChartNode): void;
						}
					}
				}
			}
		}
	}
}

declare module com {
	export module telerik {
		export module widget {
			export module chart {
				export module visualization {
					export module annotations {
						export class HorizontalAlignment {
							public static class: java.lang.Class<com.telerik.widget.chart.visualization.annotations.HorizontalAlignment>;
							public static LEFT: com.telerik.widget.chart.visualization.annotations.HorizontalAlignment;
							public static CENTER: com.telerik.widget.chart.visualization.annotations.HorizontalAlignment;
							public static RIGHT: com.telerik.widget.chart.visualization.annotations.HorizontalAlignment;
							public static values(): native.Array<com.telerik.widget.chart.visualization.annotations.HorizontalAlignment>;
							public static valueOf(param0: java.lang.Class<any>, param1: string): java.lang.Enum<any>;
							public static valueOf(param0: string): com.telerik.widget.chart.visualization.annotations.HorizontalAlignment;
						}
					}
				}
			}
		}
	}
}

declare module com {
	export module telerik {
		export module widget {
			export module chart {
				export module visualization {
					export module annotations {
						export class VerticalAlignment {
							public static class: java.lang.Class<com.telerik.widget.chart.visualization.annotations.VerticalAlignment>;
							public static TOP: com.telerik.widget.chart.visualization.annotations.VerticalAlignment;
							public static BOTTOM: com.telerik.widget.chart.visualization.annotations.VerticalAlignment;
							public static CENTER: com.telerik.widget.chart.visualization.annotations.VerticalAlignment;
							public static valueOf(param0: java.lang.Class<any>, param1: string): java.lang.Enum<any>;
							public static valueOf(param0: string): com.telerik.widget.chart.visualization.annotations.VerticalAlignment;
							public static values(): native.Array<com.telerik.widget.chart.visualization.annotations.VerticalAlignment>;
						}
					}
				}
			}
		}
	}
}

declare module com {
	export module telerik {
		export module widget {
			export module chart {
				export module visualization {
					export module annotations {
						export module cartesian {
							export abstract class CartesianChartAnnotation extends com.telerik.widget.chart.visualization.annotations.ChartLabelAnnotation {
								public static class: java.lang.Class<com.telerik.widget.chart.visualization.annotations.cartesian.CartesianChartAnnotation>;
								public setAxis(param0: com.telerik.widget.chart.visualization.common.CartesianAxis): void;
								public constructor(param0: com.telerik.widget.chart.visualization.common.CartesianAxis);
								public getAxis(): com.telerik.widget.chart.visualization.common.CartesianAxis;
								public refreshNode(param0: com.telerik.widget.chart.engine.elementTree.ChartNode): void;
								public measureContent(param0: com.telerik.widget.chart.engine.elementTree.ChartNode, param1: any): com.telerik.android.common.math.RadSize;
								public invalidatePalette(): void;
								public constructor();
								public onPaletteUpdated(param0: com.telerik.widget.palettes.ChartPalette): void;
								public getCollectionIndex(): number;
							}
						}
					}
				}
			}
		}
	}
}

declare module com {
	export module telerik {
		export module widget {
			export module chart {
				export module visualization {
					export module annotations {
						export module cartesian {
							export class CartesianCustomAnnotation extends com.telerik.widget.chart.visualization.annotations.cartesian.CartesianChartAnnotation {
								public static class: java.lang.Class<com.telerik.widget.chart.visualization.annotations.cartesian.CartesianCustomAnnotation>;
								public getHorizontalAxis(): com.telerik.widget.chart.visualization.common.CartesianAxis;
								public constructor(param0: com.telerik.widget.chart.visualization.common.CartesianAxis, param1: com.telerik.widget.chart.visualization.common.CartesianAxis, param2: any, param3: any, param4: any);
								public refreshNode(param0: com.telerik.widget.chart.engine.elementTree.ChartNode): void;
								public getHorizontalOffset(): number;
								public getModel(): com.telerik.widget.chart.engine.decorations.annotations.ChartAnnotationModel;
								public onPaletteUpdated(param0: com.telerik.widget.palettes.ChartPalette): void;
								public getCollectionIndex(): number;
								public drawCore(param0: globalAndroid.graphics.Canvas): void;
								public getContent(): any;
								public setVerticalAxis(param0: com.telerik.widget.chart.visualization.common.CartesianAxis): void;
								public getHorizontalValue(): any;
								public measureNodeOverride(param0: com.telerik.widget.chart.engine.elementTree.ChartNode, param1: any): com.telerik.android.common.math.RadSize;
								public measureContent(param0: com.telerik.widget.chart.engine.elementTree.ChartNode, param1: any): com.telerik.android.common.math.RadSize;
								public getHorizontalAlignment(): com.telerik.widget.chart.visualization.annotations.HorizontalAlignment;
								public getVerticalValue(): any;
								public setVerticalOffset(param0: number): void;
								public getVerticalAlignment(): com.telerik.widget.chart.visualization.annotations.VerticalAlignment;
								public defaultPaletteFamily(): string;
								public setContentRenderer(param0: com.telerik.widget.chart.engine.decorations.annotations.custom.CustomAnnotationRenderer): void;
								public invalidatePalette(): void;
								public constructor();
								public onAttached(): void;
								public setContent(param0: any): void;
								public getVerticalOffset(): number;
								public getVerticalAxis(): com.telerik.widget.chart.visualization.common.CartesianAxis;
								public constructor(param0: com.telerik.widget.chart.visualization.common.CartesianAxis);
								public getContentRenderer(): com.telerik.widget.chart.engine.decorations.annotations.custom.CustomAnnotationRenderer;
								public setVerticalAlignment(param0: com.telerik.widget.chart.visualization.annotations.VerticalAlignment): void;
								public setHorizontalOffset(param0: number): void;
								public setHorizontalAlignment(param0: com.telerik.widget.chart.visualization.annotations.HorizontalAlignment): void;
								public setHorizontalValue(param0: any): void;
								public setHorizontalAxis(param0: com.telerik.widget.chart.visualization.common.CartesianAxis): void;
								public setVerticalValue(param0: any): void;
							}
						}
					}
				}
			}
		}
	}
}

declare module com {
	export module telerik {
		export module widget {
			export module chart {
				export module visualization {
					export module annotations {
						export module cartesian {
							export class CartesianGridLineAnnotation extends com.telerik.widget.chart.visualization.annotations.cartesian.CartesianStrokedAnnotation {
								public static class: java.lang.Class<com.telerik.widget.chart.visualization.annotations.cartesian.CartesianGridLineAnnotation>;
								public setValue(param0: number, param1: any): void;
								public constructor(param0: com.telerik.widget.chart.visualization.common.CartesianAxis, param1: any);
								public getValue(): any;
								public refreshNode(param0: com.telerik.widget.chart.engine.elementTree.ChartNode): void;
								public defaultPaletteFamily(): string;
								public getModel(): com.telerik.widget.chart.engine.decorations.annotations.ChartAnnotationModel;
								public invalidatePalette(): void;
								public constructor();
								public onPaletteUpdated(param0: com.telerik.widget.palettes.ChartPalette): void;
								public setValue(param0: any): void;
								public getCollectionIndex(): number;
								public drawCore(param0: globalAndroid.graphics.Canvas): void;
								public constructor(param0: com.telerik.widget.chart.visualization.common.CartesianAxis);
								public getValue(param0: number): any;
								public setValue(param0: number, param1: number, param2: any): void;
								public measureContent(param0: com.telerik.widget.chart.engine.elementTree.ChartNode, param1: any): com.telerik.android.common.math.RadSize;
							}
						}
					}
				}
			}
		}
	}
}

declare module com {
	export module telerik {
		export module widget {
			export module chart {
				export module visualization {
					export module annotations {
						export module cartesian {
							export class CartesianPlotBandAnnotation extends com.telerik.widget.chart.visualization.annotations.cartesian.CartesianStrokedAnnotation {
								public static class: java.lang.Class<com.telerik.widget.chart.visualization.annotations.cartesian.CartesianPlotBandAnnotation>;
								public static FILL_COLOR_PROPERTY_KEY: number;
								public getFrom(): any;
								public setTo(param0: any): void;
								public constructor(param0: com.telerik.widget.chart.visualization.common.CartesianAxis, param1: any, param2: any);
								public refreshNode(param0: com.telerik.widget.chart.engine.elementTree.ChartNode): void;
								public defaultPaletteFamily(): string;
								public getModel(): com.telerik.widget.chart.engine.decorations.annotations.ChartAnnotationModel;
								public invalidatePalette(): void;
								public constructor();
								public onPaletteUpdated(param0: com.telerik.widget.palettes.ChartPalette): void;
								public getCollectionIndex(): number;
								public processPaletteEntry(param0: com.telerik.widget.palettes.PaletteEntry): void;
								public drawCore(param0: globalAndroid.graphics.Canvas): void;
								public isStrokeInset(): boolean;
								public setFrom(param0: any): void;
								public constructor(param0: com.telerik.widget.chart.visualization.common.CartesianAxis);
								public measureContent(param0: com.telerik.widget.chart.engine.elementTree.ChartNode, param1: any): com.telerik.android.common.math.RadSize;
								public setFillColor(param0: number): void;
								public getTo(): any;
								public getFillColor(): number;
							}
						}
					}
				}
			}
		}
	}
}

declare module com {
	export module telerik {
		export module widget {
			export module chart {
				export module visualization {
					export module annotations {
						export module cartesian {
							export abstract class CartesianStrokedAnnotation extends com.telerik.widget.chart.visualization.annotations.cartesian.CartesianChartAnnotation {
								public static class: java.lang.Class<com.telerik.widget.chart.visualization.annotations.cartesian.CartesianStrokedAnnotation>;
								public static STROKE_COLOR_PROPERTY_KEY: number;
								public static STROKE_WIDTH_PROPERTY_KEY: number;
								public strokePaint: globalAndroid.graphics.Paint;
								public getStrokeEffect(): globalAndroid.graphics.PathEffect;
								public refreshNode(param0: com.telerik.widget.chart.engine.elementTree.ChartNode): void;
								public defaultPaletteFamily(): string;
								public invalidatePalette(): void;
								public constructor();
								public onPaletteUpdated(param0: com.telerik.widget.palettes.ChartPalette): void;
								public setStrokeColor(param0: number): void;
								public getStrokeColor(): number;
								public getCollectionIndex(): number;
								public setStrokeEffect(param0: globalAndroid.graphics.PathEffect): void;
								public processPaletteEntry(param0: com.telerik.widget.palettes.PaletteEntry): void;
								public setStrokeWidth(param0: number): void;
								public isStrokeInset(): boolean;
								public constructor(param0: com.telerik.widget.chart.visualization.common.CartesianAxis);
								public measureContent(param0: com.telerik.widget.chart.engine.elementTree.ChartNode, param1: any): com.telerik.android.common.math.RadSize;
								public getStrokeWidth(): number;
							}
						}
					}
				}
			}
		}
	}
}

declare module com {
	export module telerik {
		export module widget {
			export module chart {
				export module visualization {
					export module behaviors {
						export class BehaviorCollectionChangedInfo extends java.lang.Object {
							public static class: java.lang.Class<com.telerik.widget.chart.visualization.behaviors.BehaviorCollectionChangedInfo>;
							public getRemovedBehavior(): com.telerik.widget.chart.visualization.behaviors.ChartBehavior;
							public constructor(param0: com.telerik.widget.chart.visualization.behaviors.ChartBehavior, param1: com.telerik.widget.chart.visualization.behaviors.ChartBehavior, param2: com.telerik.android.common.CollectionChangeAction);
							public setAddedBehavior(param0: com.telerik.widget.chart.visualization.behaviors.ChartBehavior): void;
							public setRemovedBehavior(param0: com.telerik.widget.chart.visualization.behaviors.ChartBehavior): void;
							public getAddedBehavior(): com.telerik.widget.chart.visualization.behaviors.ChartBehavior;
							public setAction(param0: com.telerik.android.common.CollectionChangeAction): void;
							public getAction(): com.telerik.android.common.CollectionChangeAction;
						}
					}
				}
			}
		}
	}
}

declare module com {
	export module telerik {
		export module widget {
			export module chart {
				export module visualization {
					export module behaviors {
						export class ChartAnimationPanel extends globalAndroid.widget.FrameLayout implements com.telerik.widget.chart.engine.series.ChartSeriesModel.DataPointsChangedListener, com.telerik.widget.chart.visualization.behaviors.animations.ChartAnimationFinishedListener, com.telerik.widget.chart.visualization.common.PropertyChangedListener {
							public static class: java.lang.Class<com.telerik.widget.chart.visualization.behaviors.ChartAnimationPanel>;
							public startActionModeForChild(param0: globalAndroid.view.View, param1: globalAndroid.view.ActionMode.Callback): globalAndroid.view.ActionMode;
							public invalidateDrawable(param0: globalAndroid.graphics.drawable.Drawable): void;
							public getParent(): globalAndroid.view.ViewParent;
							public getParentForAccessibility(): globalAndroid.view.ViewParent;
							public onKeyDown(param0: number, param1: globalAndroid.view.KeyEvent): boolean;
							public addView(param0: globalAndroid.view.View, param1: number, param2: globalAndroid.view.ViewGroup.LayoutParams): void;
							public onAnimationFinished(param0: com.telerik.widget.chart.visualization.behaviors.animations.ChartAnimation, param1: com.telerik.widget.chart.visualization.behaviors.views.SeriesAnimationView): void;
							public onKeyLongPress(param0: number, param1: globalAndroid.view.KeyEvent): boolean;
							public showContextMenuForChild(param0: globalAndroid.view.View): boolean;
							public addView(param0: globalAndroid.view.View, param1: number, param2: number): void;
							public isLayoutRequested(): boolean;
							public scheduleDrawable(param0: globalAndroid.graphics.drawable.Drawable, param1: java.lang.Runnable, param2: number): void;
							public requestLayout(): void;
							public onMeasure(param0: number, param1: number): void;
							public removeAnimation(param0: com.telerik.widget.chart.visualization.behaviors.animations.ChartAnimation): boolean;
							public addAnimation(param0: com.telerik.widget.chart.visualization.behaviors.animations.ChartAnimation): void;
							public focusSearch(param0: globalAndroid.view.View, param1: number): globalAndroid.view.View;
							public onDraw(param0: globalAndroid.graphics.Canvas): void;
							public invalidateChild(param0: globalAndroid.view.View, param1: globalAndroid.graphics.Rect): void;
							public requestSendAccessibilityEvent(param0: globalAndroid.view.View, param1: globalAndroid.view.accessibility.AccessibilityEvent): boolean;
							public onPointRemoved(param0: number, param1: com.telerik.widget.chart.engine.dataPoints.DataPoint): void;
							public addView(param0: globalAndroid.view.View): void;
							public focusableViewAvailable(param0: globalAndroid.view.View): void;
							public requestChildRectangleOnScreen(param0: globalAndroid.view.View, param1: globalAndroid.graphics.Rect, param2: boolean): boolean;
							public onKeyMultiple(param0: number, param1: number, param2: globalAndroid.view.KeyEvent): boolean;
							public onCollectionChanged(param0: com.telerik.android.common.CollectionChangedEvent<com.telerik.widget.chart.visualization.common.ChartSeries>): void;
							public getChart(): com.telerik.widget.chart.visualization.common.RadChartViewBase<any>;
							public setChart(param0: com.telerik.widget.chart.visualization.common.RadChartViewBase<any>): void;
							public requestDisallowInterceptTouchEvent(param0: boolean): void;
							public updateViewLayout(param0: globalAndroid.view.View, param1: globalAndroid.view.ViewGroup.LayoutParams): void;
							public onPropertyChanged(param0: any, param1: string, param2: any): void;
							public requestTransparentRegion(param0: globalAndroid.view.View): void;
							public requestFitSystemWindows(): void;
							public unscheduleDrawable(param0: globalAndroid.graphics.drawable.Drawable, param1: java.lang.Runnable): void;
							public recomputeViewAttributes(param0: globalAndroid.view.View): void;
							public bringChildToFront(param0: globalAndroid.view.View): void;
							public requestChildFocus(param0: globalAndroid.view.View, param1: globalAndroid.view.View): void;
							public childDrawableStateChanged(param0: globalAndroid.view.View): void;
							public constructor(param0: globalAndroid.content.Context, param1: globalAndroid.util.AttributeSet, param2: number);
							public onLayout(param0: boolean, param1: number, param2: number, param3: number, param4: number): void;
							public onKeyUp(param0: number, param1: globalAndroid.view.KeyEvent): boolean;
							public invalidateChildInParent(param0: native.Array<number>, param1: globalAndroid.graphics.Rect): globalAndroid.view.ViewParent;
							public clearChildFocus(param0: globalAndroid.view.View): void;
							public onPointAdded(param0: number, param1: com.telerik.widget.chart.engine.dataPoints.DataPoint): void;
							public constructor(param0: globalAndroid.content.Context, param1: globalAndroid.util.AttributeSet);
							public addView(param0: globalAndroid.view.View, param1: number): void;
							public addView(param0: globalAndroid.view.View, param1: globalAndroid.view.ViewGroup.LayoutParams): void;
							public getChildVisibleRect(param0: globalAndroid.view.View, param1: globalAndroid.graphics.Rect, param2: globalAndroid.graphics.Point): boolean;
							public createContextMenu(param0: globalAndroid.view.ContextMenu): void;
							public removeView(param0: globalAndroid.view.View): void;
							public sendAccessibilityEvent(param0: number): void;
							public startAllAnimations(): void;
							public focusSearch(param0: number): globalAndroid.view.View;
							public sendAccessibilityEventUnchecked(param0: globalAndroid.view.accessibility.AccessibilityEvent): void;
							public unscheduleDrawable(param0: globalAndroid.graphics.drawable.Drawable): void;
							public constructor(param0: globalAndroid.content.Context);
						}
					}
				}
			}
		}
	}
}

declare module com {
	export module telerik {
		export module widget {
			export module chart {
				export module visualization {
					export module behaviors {
						export abstract class ChartBehavior extends com.telerik.android.common.PropertyManager {
							public static class: java.lang.Class<com.telerik.widget.chart.visualization.behaviors.ChartBehavior>;
							public constructor();
							public onHold(param0: globalAndroid.view.MotionEvent): boolean;
							public onAttached(): void;
							public onUp(param0: globalAndroid.view.MotionEvent): boolean;
							public onPinch(param0: com.telerik.widget.chart.visualization.behaviors.ChartScaleGestureDetector, param1: globalAndroid.view.MotionEvent): boolean;
							public chart(): com.telerik.widget.chart.visualization.common.RadChartViewBase<any>;
							public getDrawListener(): com.telerik.android.primitives.widget.tooltip.contracts.DrawListener;
							public onDoubleTap(param0: globalAndroid.view.MotionEvent): boolean;
							public getContext(param0: globalAndroid.graphics.Point): com.telerik.widget.chart.visualization.behaviors.ChartDataContext;
							public onPinchComplete(): void;
							public reset(): void;
							public onDown(param0: globalAndroid.view.MotionEvent): boolean;
							public onDrag(param0: globalAndroid.view.MotionEvent, param1: globalAndroid.view.MotionEvent, param2: com.telerik.android.common.math.RadSize, param3: boolean): boolean;
							public detach(): void;
							public attach(param0: com.telerik.widget.chart.visualization.common.RadChartViewBase<any>): void;
							public onDetached(): void;
							public onTap(param0: globalAndroid.view.MotionEvent): boolean;
						}
					}
				}
			}
		}
	}
}

declare module com {
	export module telerik {
		export module widget {
			export module chart {
				export module visualization {
					export module behaviors {
						export class ChartBehaviorCollection extends com.telerik.android.common.ObservableCollection<com.telerik.widget.chart.visualization.behaviors.ChartBehavior> {
							public static class: java.lang.Class<com.telerik.widget.chart.visualization.behaviors.ChartBehaviorCollection>;
							public subList(param0: number, param1: number): java.util.List<any>;
							public remove(param0: number): any;
							public contains(param0: any): boolean;
							public size(): number;
							public hashCode(): number;
							public toArray(): native.Array<any>;
							public listIterator(): java.util.ListIterator<any>;
							public addAll(param0: java.util.Collection<any>): boolean;
							public set(param0: number, param1: any): any;
							public constructor(param0: java.util.Collection<any>);
							public add(param0: any): boolean;
							public listIterator(param0: number): java.util.ListIterator<any>;
							public removeAll(param0: java.util.Collection<any>): boolean;
							public add(param0: number, param1: any): void;
							public toArray(param0: native.Array<any>): native.Array<any>;
							public remove(param0: number): com.telerik.widget.chart.visualization.behaviors.ChartBehavior;
							public constructor(param0: com.telerik.widget.chart.visualization.common.RadChartViewBase<any>);
							public retainAll(param0: java.util.Collection<any>): boolean;
							public constructor();
							public containsAll(param0: java.util.Collection<any>): boolean;
							public iterator(): java.util.Iterator<any>;
							public lastIndexOf(param0: any): number;
							public remove(param0: any): boolean;
							public add(param0: com.telerik.widget.chart.visualization.behaviors.ChartBehavior): boolean;
							public clear(): void;
							public get(param0: number): any;
							public indexOf(param0: any): number;
							public constructor(param0: number);
							public addAll(param0: number, param1: java.util.Collection<any>): boolean;
							public add(param0: number, param1: com.telerik.widget.chart.visualization.behaviors.ChartBehavior): void;
							public equals(param0: any): boolean;
							public isEmpty(): boolean;
							public set(param0: number, param1: com.telerik.widget.chart.visualization.behaviors.ChartBehavior): com.telerik.widget.chart.visualization.behaviors.ChartBehavior;
						}
					}
				}
			}
		}
	}
}

declare module com {
	export module telerik {
		export module widget {
			export module chart {
				export module visualization {
					export module behaviors {
						export class ChartDataContext extends java.lang.Object {
							public static class: java.lang.Class<com.telerik.widget.chart.visualization.behaviors.ChartDataContext>;
							public constructor(param0: com.telerik.widget.chart.visualization.common.RadChartViewBase<any>, param1: java.util.List<com.telerik.widget.chart.visualization.behaviors.DataPointInfo>, param2: java.util.List<com.telerik.widget.chart.engine.dataPoints.DataPoint>, param3: com.telerik.widget.chart.visualization.behaviors.DataPointInfo);
							public getTouchLocation(): globalAndroid.graphics.Point;
							public setTouchLocation(param0: globalAndroid.graphics.Point): void;
							public setDataPointInfos(param0: java.util.List<com.telerik.widget.chart.visualization.behaviors.DataPointInfo>): void;
							public setClosestDataPoint(param0: com.telerik.widget.chart.visualization.behaviors.DataPointInfo): void;
							public getClosestDataPoint(): com.telerik.widget.chart.visualization.behaviors.DataPointInfo;
							public chart(): com.telerik.widget.chart.visualization.common.RadChartViewBase<any>;
							public getDataPoints(): java.util.List<com.telerik.widget.chart.engine.dataPoints.DataPoint>;
							public getDataPointInfos(): java.util.List<com.telerik.widget.chart.visualization.behaviors.DataPointInfo>;
						}
					}
				}
			}
		}
	}
}

declare module com {
	export module telerik {
		export module widget {
			export module chart {
				export module visualization {
					export module behaviors {
						export class ChartPanAndZoomBehavior extends com.telerik.widget.chart.visualization.behaviors.ChartBehavior {
							public static class: java.lang.Class<com.telerik.widget.chart.visualization.behaviors.ChartPanAndZoomBehavior>;
							public getHandleDoubleTap(): boolean;
							public getZoomMode(): number;
							public setZoomToChart(param0: number, param1: number, param2: number, param3: number): void;
							public addPanZoomListener(param0: com.telerik.widget.chart.visualization.behaviors.PanZoomListener): void;
							public onPinch(param0: com.telerik.widget.chart.visualization.behaviors.ChartScaleGestureDetector, param1: globalAndroid.view.MotionEvent): boolean;
							public getDrawListener(): com.telerik.android.primitives.widget.tooltip.contracts.DrawListener;
							public setZoomStrategy(param0: com.telerik.widget.chart.visualization.behaviors.ChartZoomStrategy): void;
							public setHandleDoubleTap(param0: boolean): void;
							public onDoubleTap(param0: globalAndroid.view.MotionEvent): boolean;
							public isZoomed(): boolean;
							public onPinchComplete(): void;
							public reset(): void;
							public getZoomStrategy(): com.telerik.widget.chart.visualization.behaviors.ChartZoomStrategy;
							public getPanMode(): number;
							public setZoomMode(param0: number): void;
							public removePanZoomListener(param0: com.telerik.widget.chart.visualization.behaviors.PanZoomListener): void;
							public constructor();
							public isPinching(): boolean;
							public notifyListenersOnZoom(param0: number, param1: number): void;
							public setPanOffsetToChart(param0: number, param1: number): void;
							public setPanMode(param0: number): void;
							public onDrag(param0: globalAndroid.view.MotionEvent, param1: globalAndroid.view.MotionEvent, param2: com.telerik.android.common.math.RadSize, param3: boolean): boolean;
							public setDeferredZoomPresenter(param0: com.telerik.widget.chart.visualization.behaviors.views.DeferredZoomPresenter): void;
							public getDeferredZoomPresenter(): com.telerik.widget.chart.visualization.behaviors.views.DeferredZoomPresenter;
							public setZoomToChart(param0: number, param1: number, param2: number): void;
							public notifyListenersOnPan(param0: number, param1: number): void;
						}
					}
				}
			}
		}
	}
}

declare module com {
	export module telerik {
		export module widget {
			export module chart {
				export module visualization {
					export module behaviors {
						export class ChartPanZoomMode extends java.lang.Object {
							public static class: java.lang.Class<com.telerik.widget.chart.visualization.behaviors.ChartPanZoomMode>;
							public static NONE: number;
							public static HORIZONTAL: number;
							public static VERTICAL: number;
							public static BOTH: number;
							public constructor();
						}
					}
				}
			}
		}
	}
}

declare module com {
	export module telerik {
		export module widget {
			export module chart {
				export module visualization {
					export module behaviors {
						export abstract class ChartPopupBehavior extends com.telerik.widget.chart.visualization.behaviors.ChartBehavior implements com.telerik.android.primitives.widget.tooltip.contracts.TooltipAdapter {
							public static class: java.lang.Class<com.telerik.widget.chart.visualization.behaviors.ChartPopupBehavior>;
							public tooltipContentAdapter: com.telerik.android.primitives.widget.tooltip.contracts.TooltipContentAdapter;
							public maxTouchDistanceTolerance: number;
							public context: globalAndroid.content.Context;
							public popupPresenter: com.telerik.android.primitives.widget.tooltip.views.TooltipPresenterBase;
							public selectedDataPoint: com.telerik.widget.chart.engine.dataPoints.DataPoint;
							public applyPalette(param0: com.telerik.widget.palettes.ChartPalette): void;
							public availableLayoutSlot(): globalAndroid.graphics.RectF;
							public getDrawListener(): com.telerik.android.primitives.widget.tooltip.contracts.DrawListener;
							public setContentAdapter(param0: com.telerik.android.primitives.widget.tooltip.contracts.TooltipContentAdapter): void;
							public contentAdapter(): com.telerik.android.primitives.widget.tooltip.contracts.TooltipContentAdapter;
							public open(param0: globalAndroid.graphics.Point, param1: globalAndroid.graphics.Point): boolean;
							public createPresenter(param0: globalAndroid.content.Context): com.telerik.android.primitives.widget.tooltip.views.TooltipPresenterBase;
							public getContextNeededListener(): com.telerik.widget.chart.visualization.behaviors.TooltipContextNeededListener;
							public getPopupPresenter(): com.telerik.android.primitives.widget.tooltip.views.TooltipPresenterBase;
							public getPaletteFamilyName(): string;
							public alignTooltipVertically(): boolean;
							public getTooltipData(param0: any): native.Array<any>;
							public validateDataContext(param0: com.telerik.widget.chart.visualization.behaviors.ChartDataContext): boolean;
							public desiredPopupLocation(param0: com.telerik.widget.chart.engine.dataPoints.DataPoint): globalAndroid.graphics.Point;
							public isTooltipDisplayed(): boolean;
							public constructor();
							public open(param0: com.telerik.widget.chart.engine.dataPoints.DataPoint): boolean;
							public setApplyDefaultStyles(param0: boolean): void;
							public extractTooltipContext(param0: com.telerik.widget.chart.engine.dataPoints.DataPoint): com.telerik.widget.chart.visualization.behaviors.ChartDataContext;
							public close(): boolean;
							public getMaxTouchDistanceTolerance(): number;
							public onOpenFailed(): void;
							public setPopupPresenter(param0: com.telerik.android.primitives.widget.tooltip.views.TooltipPresenterBase): void;
							public setMaxTouchDistanceTolerance(param0: number): void;
							public extractTooltipContext(param0: globalAndroid.graphics.Point): com.telerik.widget.chart.visualization.behaviors.ChartDataContext;
							public getApplyDefaultStyles(): boolean;
							public rawOffset(): globalAndroid.graphics.Point;
							public getPlotAreaClip(): com.telerik.android.common.math.RadRect;
							public constructor(param0: globalAndroid.content.Context);
							public getLastChartContext(): com.telerik.widget.chart.visualization.behaviors.ChartDataContext;
							public setTooltipContextNeededListener(param0: com.telerik.widget.chart.visualization.behaviors.TooltipContextNeededListener): void;
						}
					}
				}
			}
		}
	}
}

declare module com {
	export module telerik {
		export module widget {
			export module chart {
				export module visualization {
					export module behaviors {
						export class ChartScaleGestureDetector extends java.lang.Object {
							public static class: java.lang.Class<com.telerik.widget.chart.visualization.behaviors.ChartScaleGestureDetector>;
							public getCurrentSpanX(): number;
							public getEventTime(): number;
							public getScaleFactor(): number;
							public getPreviousSpan(): number;
							public getPreviousSpanY(): number;
							public isInProgress(): boolean;
							public onTouchEvent(param0: globalAndroid.view.MotionEvent): boolean;
							public getCurrentSpanY(): number;
							public isQuickScaleEnabled(): boolean;
							public getFocusY(): number;
							public constructor(param0: globalAndroid.content.Context, param1: com.telerik.widget.chart.visualization.behaviors.ChartScaleGestureDetector.OnScaleGestureListener, param2: globalAndroid.os.Handler);
							public getCurrentSpan(): number;
							public getTimeDelta(): number;
							public setQuickScaleEnabled(param0: boolean): void;
							public getPreviousSpanX(): number;
							public getFocusX(): number;
							public constructor(param0: globalAndroid.content.Context, param1: com.telerik.widget.chart.visualization.behaviors.ChartScaleGestureDetector.OnScaleGestureListener);
						}
						export module ChartScaleGestureDetector {
							export class OnScaleGestureListener extends java.lang.Object {
								public static class: java.lang.Class<com.telerik.widget.chart.visualization.behaviors.ChartScaleGestureDetector.OnScaleGestureListener>;
								/**
								 * Constructs a new instance of the com.telerik.widget.chart.visualization.behaviors.ChartScaleGestureDetector$OnScaleGestureListener interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
								 */
								public constructor(implementation: {
									onScale(param0: com.telerik.widget.chart.visualization.behaviors.ChartScaleGestureDetector): boolean;
									onScaleBegin(param0: com.telerik.widget.chart.visualization.behaviors.ChartScaleGestureDetector): boolean;
									onScaleEnd(param0: com.telerik.widget.chart.visualization.behaviors.ChartScaleGestureDetector): void;
								});
								public constructor();
								public onScale(param0: com.telerik.widget.chart.visualization.behaviors.ChartScaleGestureDetector): boolean;
								public onScaleBegin(param0: com.telerik.widget.chart.visualization.behaviors.ChartScaleGestureDetector): boolean;
								public onScaleEnd(param0: com.telerik.widget.chart.visualization.behaviors.ChartScaleGestureDetector): void;
							}
							export class SimpleOnScaleGestureListener extends java.lang.Object implements com.telerik.widget.chart.visualization.behaviors.ChartScaleGestureDetector.OnScaleGestureListener {
								public static class: java.lang.Class<com.telerik.widget.chart.visualization.behaviors.ChartScaleGestureDetector.SimpleOnScaleGestureListener>;
								public onScale(param0: com.telerik.widget.chart.visualization.behaviors.ChartScaleGestureDetector): boolean;
								public constructor();
								public onScaleBegin(param0: com.telerik.widget.chart.visualization.behaviors.ChartScaleGestureDetector): boolean;
								public onScaleEnd(param0: com.telerik.widget.chart.visualization.behaviors.ChartScaleGestureDetector): void;
							}
						}
					}
				}
			}
		}
	}
}

declare module com {
	export module telerik {
		export module widget {
			export module chart {
				export module visualization {
					export module behaviors {
						export class ChartSelectionBehavior extends com.telerik.widget.chart.visualization.behaviors.ChartBehavior {
							public static class: java.lang.Class<com.telerik.widget.chart.visualization.behaviors.ChartSelectionBehavior>;
							public constructor();
							public selectedDataPoints(): java.lang.Iterable<com.telerik.widget.chart.engine.dataPoints.DataPoint>;
							public setSeriesSelectionMode(param0: com.telerik.widget.chart.visualization.behaviors.ChartSelectionMode): void;
							public selectSeries(param0: com.telerik.widget.chart.visualization.common.ChartSeries): com.telerik.widget.chart.visualization.behaviors.ChartSelectionContext;
							public getDataPointsSelectionMode(): com.telerik.widget.chart.visualization.behaviors.ChartSelectionMode;
							public getSeriesSelectionMode(): com.telerik.widget.chart.visualization.behaviors.ChartSelectionMode;
							public selectDataPoint(param0: com.telerik.widget.chart.engine.dataPoints.DataPoint): com.telerik.widget.chart.visualization.behaviors.ChartSelectionContext;
							public selectedSeries(): java.lang.Iterable<com.telerik.widget.chart.visualization.common.ChartSeries>;
							public select(param0: com.telerik.widget.primitives.legend.LegendSelectable): com.telerik.widget.chart.visualization.behaviors.ChartSelectionContext;
							public setSelectionChangeListener(param0: com.telerik.widget.chart.visualization.behaviors.ChartSelectionChangeListener): void;
							public onDetached(): void;
							public onTap(param0: globalAndroid.view.MotionEvent): boolean;
							public setDataPointsSelectionMode(param0: com.telerik.widget.chart.visualization.behaviors.ChartSelectionMode): void;
						}
					}
				}
			}
		}
	}
}

declare module com {
	export module telerik {
		export module widget {
			export module chart {
				export module visualization {
					export module behaviors {
						export class ChartSelectionChangeListener extends java.lang.Object {
							public static class: java.lang.Class<com.telerik.widget.chart.visualization.behaviors.ChartSelectionChangeListener>;
							/**
							 * Constructs a new instance of the com.telerik.widget.chart.visualization.behaviors.ChartSelectionChangeListener interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
							 */
							public constructor(implementation: {
								onSelectionChanged(param0: com.telerik.widget.chart.visualization.behaviors.ChartSelectionContext): void;
							});
							public constructor();
							public onSelectionChanged(param0: com.telerik.widget.chart.visualization.behaviors.ChartSelectionContext): void;
						}
					}
				}
			}
		}
	}
}

declare module com {
	export module telerik {
		export module widget {
			export module chart {
				export module visualization {
					export module behaviors {
						export class ChartSelectionContext extends java.lang.Object {
							public static class: java.lang.Class<com.telerik.widget.chart.visualization.behaviors.ChartSelectionContext>;
							public previousSelection(): com.telerik.widget.chart.visualization.behaviors.ChartSelectionContext;
							public deselectedDataPoint(): com.telerik.widget.chart.engine.dataPoints.DataPoint;
							public constructor(param0: com.telerik.widget.chart.visualization.behaviors.ChartSelectionBehavior, param1: com.telerik.widget.chart.engine.dataPoints.DataPoint, param2: com.telerik.widget.chart.engine.dataPoints.DataPoint, param3: com.telerik.widget.chart.visualization.common.ChartSeries, param4: com.telerik.widget.chart.visualization.common.ChartSeries, param5: com.telerik.widget.chart.visualization.behaviors.ChartSelectionContext);
							public selectedSeries(): com.telerik.widget.chart.visualization.common.ChartSeries;
							public selectionBehavior(): com.telerik.widget.chart.visualization.behaviors.ChartSelectionBehavior;
							public selectedDataPoint(): com.telerik.widget.chart.engine.dataPoints.DataPoint;
							public deselectedSeries(): com.telerik.widget.chart.visualization.common.ChartSeries;
						}
					}
				}
			}
		}
	}
}

declare module com {
	export module telerik {
		export module widget {
			export module chart {
				export module visualization {
					export module behaviors {
						export class ChartSelectionMode {
							public static class: java.lang.Class<com.telerik.widget.chart.visualization.behaviors.ChartSelectionMode>;
							public static NONE: com.telerik.widget.chart.visualization.behaviors.ChartSelectionMode;
							public static SINGLE: com.telerik.widget.chart.visualization.behaviors.ChartSelectionMode;
							public static MULTIPLE: com.telerik.widget.chart.visualization.behaviors.ChartSelectionMode;
							public static values(): native.Array<com.telerik.widget.chart.visualization.behaviors.ChartSelectionMode>;
							public static valueOf(param0: string): com.telerik.widget.chart.visualization.behaviors.ChartSelectionMode;
							public static valueOf(param0: java.lang.Class<any>, param1: string): java.lang.Enum<any>;
						}
					}
				}
			}
		}
	}
}

declare module com {
	export module telerik {
		export module widget {
			export module chart {
				export module visualization {
					export module behaviors {
						export class ChartTooltipBehavior extends com.telerik.widget.chart.visualization.behaviors.ChartPopupBehavior {
							public static class: java.lang.Class<com.telerik.widget.chart.visualization.behaviors.ChartTooltipBehavior>;
							public static BACKGROUND_PROPERTY_KEY: number;
							public static PADDING_PROPERTY_KEY: number;
							public static CATEGORY_COLOR_PROPERTY_KEY: number;
							public static VALUE_COLOR_PROPERTY_KEY: number;
							public static CATEGORY_SIZE_PROPERTY_KEY: number;
							public static VALUE_SIZE_PROPERTY_KEY: number;
							public triggerMode: com.telerik.widget.chart.visualization.behaviors.TooltipTriggerMode;
							public applyPalette(param0: com.telerik.widget.palettes.ChartPalette): void;
							public onPinch(param0: com.telerik.widget.chart.visualization.behaviors.ChartScaleGestureDetector, param1: globalAndroid.view.MotionEvent): boolean;
							public getValueTextColor(): number;
							public availableLayoutSlot(): globalAndroid.graphics.RectF;
							public getCategoryTextColor(): number;
							public setContentAdapter(param0: com.telerik.android.primitives.widget.tooltip.contracts.TooltipContentAdapter): void;
							public onDoubleTap(param0: globalAndroid.view.MotionEvent): boolean;
							public contentAdapter(): com.telerik.android.primitives.widget.tooltip.contracts.TooltipContentAdapter;
							public reset(): void;
							public createPresenter(param0: globalAndroid.content.Context): com.telerik.android.primitives.widget.tooltip.views.TooltipPresenterBase;
							public getPadding(): number;
							public getTriggerMode(): com.telerik.widget.chart.visualization.behaviors.TooltipTriggerMode;
							public setCategoryTextColor(param0: number): void;
							public setPadding(param0: number): void;
							public setCategoryTextSize(param0: number): void;
							public getPaletteFamilyName(): string;
							public setBackgroundColor(param0: number): void;
							public alignTooltipVertically(): boolean;
							public getBackgroundColor(): number;
							public getTooltipData(param0: any): native.Array<any>;
							public onTap(param0: globalAndroid.view.MotionEvent): boolean;
							public desiredPopupLocation(param0: com.telerik.widget.chart.engine.dataPoints.DataPoint): globalAndroid.graphics.Point;
							public constructor();
							public onHold(param0: globalAndroid.view.MotionEvent): boolean;
							public getValueTextSize(): number;
							public setValueTextColor(param0: number): void;
							public onOpenFailed(): void;
							public onDrag(param0: globalAndroid.view.MotionEvent, param1: globalAndroid.view.MotionEvent, param2: com.telerik.android.common.math.RadSize, param3: boolean): boolean;
							public getCategoryTextSize(): number;
							public setValueTextSize(param0: number): void;
							public setTriggerMode(param0: com.telerik.widget.chart.visualization.behaviors.TooltipTriggerMode): void;
							public rawOffset(): globalAndroid.graphics.Point;
							public getPlotAreaClip(): com.telerik.android.common.math.RadRect;
							public constructor(param0: globalAndroid.content.Context);
						}
					}
				}
			}
		}
	}
}

declare module com {
	export module telerik {
		export module widget {
			export module chart {
				export module visualization {
					export module behaviors {
						export class ChartTooltipContentAdapter extends java.lang.Object implements com.telerik.android.primitives.widget.tooltip.contracts.TooltipContentAdapter {
							public static class: java.lang.Class<com.telerik.widget.chart.visualization.behaviors.ChartTooltipContentAdapter>;
							public applyDefaultStyles: boolean;
							public context: globalAndroid.content.Context;
							public tooltipContentId: number;
							public valueTextSize: number;
							public categoryTextSize: number;
							public valueTextColor: number;
							public categoryTextColor: number;
							public paddingLeft: number;
							public paddingTop: number;
							public paddingRight: number;
							public paddingBottom: number;
							public backgroundColor: number;
							public valueToStringConverter: com.telerik.android.common.Function<any,string>;
							public categoryToStringConverter: com.telerik.android.common.Function<any,string>;
							public getValueTextColor(): number;
							public setCategoryToStringConverter(param0: com.telerik.android.common.Function<any,string>): void;
							public scatterContent(): globalAndroid.view.View;
							public getScatterContent(param0: com.telerik.widget.chart.engine.dataPoints.ScatterDataPoint): globalAndroid.view.View;
							public getCategoryTextColor(): number;
							public setCategoryTextColor(param0: number): void;
							public getView(param0: native.Array<any>): globalAndroid.view.View;
							public initCategoricalPointView(param0: globalAndroid.widget.TextView, param1: globalAndroid.widget.TextView, param2: com.telerik.widget.chart.engine.dataPoints.CategoricalDataPoint): void;
							public setPadding(param0: number): void;
							public setCategoryTextSize(param0: number): void;
							public setBackgroundColor(param0: number): void;
							public getTooltipContent(): number;
							public getCategoryToStringConverter(): com.telerik.android.common.Function<any,string>;
							public getBackgroundColor(): number;
							public setValueToStringConverter(param0: com.telerik.android.common.Function<any,string>): void;
							public setApplyDefaultStyles(param0: boolean): void;
							public setTooltipContent(param0: number): void;
							public setValueTextColor(param0: number): void;
							public getValueTextSize(): number;
							public getValueToStringConverter(): com.telerik.android.common.Function<any,string>;
							public getIsApplyDefaultStyles(): boolean;
							public extractValue(param0: any): string;
							public constructor(param0: globalAndroid.content.Context, param1: number);
							public extractCategory(param0: any): string;
							public getCategoryTextSize(): number;
							public initRangePointView(param0: globalAndroid.widget.TextView, param1: globalAndroid.widget.TextView, param2: com.telerik.widget.chart.engine.dataPoints.RangeDataPoint): void;
							public setValueTextSize(param0: number): void;
							public popupContent(): globalAndroid.view.View;
							public ohlcContent(): globalAndroid.view.View;
							public setPadding(param0: number, param1: number, param2: number, param3: number): void;
							public scatterBubbleContent(): globalAndroid.view.View;
							public initPiePointView(param0: globalAndroid.widget.TextView, param1: com.telerik.widget.chart.engine.dataPoints.PieDataPoint): void;
							public getOhlcContent(param0: com.telerik.widget.chart.engine.dataPoints.OhlcDataPoint): globalAndroid.view.View;
							public constructor(param0: globalAndroid.content.Context);
						}
					}
				}
			}
		}
	}
}

declare module com {
	export module telerik {
		export module widget {
			export module chart {
				export module visualization {
					export module behaviors {
						export class ChartTrackBallBehavior extends com.telerik.widget.chart.visualization.behaviors.ChartPopupBehavior {
							public static class: java.lang.Class<com.telerik.widget.chart.visualization.behaviors.ChartTrackBallBehavior>;
							public static BACKGROUND_PROPERTY_KEY: number;
							public static PADDING_PROPERTY_KEY: number;
							public static CATEGORY_COLOR_PROPERTY_KEY: number;
							public static VALUE_COLOR_PROPERTY_KEY: number;
							public static CATEGORY_SIZE_PROPERTY_KEY: number;
							public static VALUE_SIZE_PROPERTY_KEY: number;
							public applyPalette(param0: com.telerik.widget.palettes.ChartPalette): void;
							public getValueTextColor(): number;
							public setShowIntersectionPoints(param0: boolean): void;
							public availableLayoutSlot(): globalAndroid.graphics.RectF;
							public getCategoryTextColor(): number;
							public getCustomContentProvider(): com.telerik.widget.chart.visualization.behaviors.ChartTrackballContentAdapter.ChartTrackBallContentProvider;
							public setShowTrackInfo(param0: boolean): void;
							public setContentAdapter(param0: com.telerik.android.primitives.widget.tooltip.contracts.TooltipContentAdapter): void;
							public contentAdapter(): com.telerik.android.primitives.widget.tooltip.contracts.TooltipContentAdapter;
							public getContext(param0: globalAndroid.graphics.Point): com.telerik.widget.chart.visualization.behaviors.ChartDataContext;
							public getPadding(): number;
							public createPresenter(param0: globalAndroid.content.Context): com.telerik.android.primitives.widget.tooltip.views.TooltipPresenterBase;
							public setCategoryTextColor(param0: number): void;
							public setPadding(param0: number): void;
							public setCategoryTextSize(param0: number): void;
							public setBackgroundColor(param0: number): void;
							public getPaletteFamilyName(): string;
							public alignTooltipVertically(): boolean;
							public getBackgroundColor(): number;
							public getTooltipData(param0: any): native.Array<any>;
							public desiredPopupLocation(param0: com.telerik.widget.chart.engine.dataPoints.DataPoint): globalAndroid.graphics.Point;
							public validateDataContext(param0: com.telerik.widget.chart.visualization.behaviors.ChartDataContext): boolean;
							public constructor();
							public onHold(param0: globalAndroid.view.MotionEvent): boolean;
							public getValueTextSize(): number;
							public setValueTextColor(param0: number): void;
							public onUp(param0: globalAndroid.view.MotionEvent): boolean;
							public getShowTrackInfo(): boolean;
							public setCustomContentProvider(param0: com.telerik.widget.chart.visualization.behaviors.ChartTrackballContentAdapter.ChartTrackBallContentProvider): void;
							public getPointHitTestMode(): com.telerik.widget.chart.visualization.behaviors.TrackBallHitTestMode;
							public onDrag(param0: globalAndroid.view.MotionEvent, param1: globalAndroid.view.MotionEvent, param2: com.telerik.android.common.math.RadSize, param3: boolean): boolean;
							public getCategoryTextSize(): number;
							public getRelatedDataPoints(): java.util.List<com.telerik.widget.chart.engine.dataPoints.DataPoint>;
							public setValueTextSize(param0: number): void;
							public getShowIntersectionPoints(): boolean;
							public setPointHitTestMode(param0: com.telerik.widget.chart.visualization.behaviors.TrackBallHitTestMode): void;
							public setSnapMode(param0: com.telerik.widget.chart.visualization.behaviors.TrackBallSnapMode): void;
							public rawOffset(): globalAndroid.graphics.Point;
							public getPlotAreaClip(): com.telerik.android.common.math.RadRect;
							public constructor(param0: globalAndroid.content.Context);
							public getSnapMode(): com.telerik.widget.chart.visualization.behaviors.TrackBallSnapMode;
						}
					}
				}
			}
		}
	}
}

declare module com {
	export module telerik {
		export module widget {
			export module chart {
				export module visualization {
					export module behaviors {
						export class ChartTrackballContentAdapter extends com.telerik.widget.chart.visualization.behaviors.ChartTooltipContentAdapter {
							public static class: java.lang.Class<com.telerik.widget.chart.visualization.behaviors.ChartTrackballContentAdapter>;
							public createRangeDataPointView(param0: com.telerik.widget.chart.engine.dataPoints.RangeDataPoint): globalAndroid.view.View;
							public setApplyDefaultStyles(param0: boolean): void;
							public getViewForDataPoint(param0: com.telerik.widget.chart.engine.dataPoints.DataPoint): globalAndroid.view.View;
							public createOhlcDataPointView(param0: com.telerik.widget.chart.engine.dataPoints.OhlcDataPoint): globalAndroid.view.View;
							public setCategoryToStringConverter(param0: com.telerik.android.common.Function<any,string>): void;
							public setCustomContentProvider(param0: com.telerik.widget.chart.visualization.behaviors.ChartTrackballContentAdapter.ChartTrackBallContentProvider): void;
							public getCustomContentProvider(): com.telerik.widget.chart.visualization.behaviors.ChartTrackballContentAdapter.ChartTrackBallContentProvider;
							public getValueToStringConverter(): com.telerik.android.common.Function<any,string>;
							public getIsApplyDefaultStyles(): boolean;
							public constructor(param0: globalAndroid.content.Context, param1: number);
							public createCategoricalDataPointView(param0: com.telerik.widget.chart.engine.dataPoints.CategoricalDataPoint): globalAndroid.view.View;
							public updateCategoryText(param0: globalAndroid.widget.TextView, param1: com.telerik.widget.chart.engine.dataPoints.DataPoint): void;
							public getView(param0: native.Array<any>): globalAndroid.view.View;
							public popupContent(): globalAndroid.view.View;
							public getCategoryToStringConverter(): com.telerik.android.common.Function<any,string>;
							public setValueToStringConverter(param0: com.telerik.android.common.Function<any,string>): void;
							public constructor(param0: globalAndroid.content.Context);
						}
						export module ChartTrackballContentAdapter {
							export class ChartTrackBallContentProvider extends java.lang.Object {
								public static class: java.lang.Class<com.telerik.widget.chart.visualization.behaviors.ChartTrackballContentAdapter.ChartTrackBallContentProvider>;
								/**
								 * Constructs a new instance of the com.telerik.widget.chart.visualization.behaviors.ChartTrackballContentAdapter$ChartTrackBallContentProvider interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
								 */
								public constructor(implementation: {
									resolveContentForDataPoint(param0: com.telerik.widget.chart.engine.dataPoints.DataPoint): string;
									resolveCustomViewForDataPoint(param0: com.telerik.widget.chart.engine.dataPoints.DataPoint): globalAndroid.view.View;
								});
								public constructor();
								public resolveCustomViewForDataPoint(param0: com.telerik.widget.chart.engine.dataPoints.DataPoint): globalAndroid.view.View;
								public resolveContentForDataPoint(param0: com.telerik.widget.chart.engine.dataPoints.DataPoint): string;
							}
						}
					}
				}
			}
		}
	}
}

declare module com {
	export module telerik {
		export module widget {
			export module chart {
				export module visualization {
					export module behaviors {
						export class ChartZoomStrategy {
							public static class: java.lang.Class<com.telerik.widget.chart.visualization.behaviors.ChartZoomStrategy>;
							public static IMMEDIATE: com.telerik.widget.chart.visualization.behaviors.ChartZoomStrategy;
							public static DEFERRED: com.telerik.widget.chart.visualization.behaviors.ChartZoomStrategy;
							public static valueOf(param0: java.lang.Class<any>, param1: string): java.lang.Enum<any>;
							public static valueOf(param0: string): com.telerik.widget.chart.visualization.behaviors.ChartZoomStrategy;
							public static values(): native.Array<com.telerik.widget.chart.visualization.behaviors.ChartZoomStrategy>;
						}
					}
				}
			}
		}
	}
}

declare module com {
	export module telerik {
		export module widget {
			export module chart {
				export module visualization {
					export module behaviors {
						export class DataPointInfo extends java.lang.Object {
							public static class: java.lang.Class<com.telerik.widget.chart.visualization.behaviors.DataPointInfo>;
							public constructor();
							public setDisplayHeader(param0: any): void;
							public getDisplayContent(): any;
							public setSeriesModel(param0: com.telerik.widget.chart.engine.series.ChartSeriesModel<any>): void;
							public setContainsTouchLocation(param0: boolean): void;
							public setDataPoint(param0: com.telerik.widget.chart.engine.dataPoints.DataPoint): void;
							public getPriority(): number;
							public setPriority(param0: number): void;
							public getDisplayHeader(): any;
							public getSeriesModel(): com.telerik.widget.chart.engine.series.ChartSeriesModel<any>;
							public getContainsTouchLocation(): boolean;
							public getDataPoint(): com.telerik.widget.chart.engine.dataPoints.DataPoint;
							public getDistanceToTouchLocation(): number;
							public setDistanceToTouchLocation(param0: number): void;
							public series(): com.telerik.widget.chart.visualization.common.ChartSeries;
							public setDisplayContent(param0: any): void;
						}
					}
				}
			}
		}
	}
}

declare module com {
	export module telerik {
		export module widget {
			export module chart {
				export module visualization {
					export module behaviors {
						export class PanZoomListener extends java.lang.Object {
							public static class: java.lang.Class<com.telerik.widget.chart.visualization.behaviors.PanZoomListener>;
							/**
							 * Constructs a new instance of the com.telerik.widget.chart.visualization.behaviors.PanZoomListener interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
							 */
							public constructor(implementation: {
								onPan(param0: number, param1: number): void;
								onZoom(param0: number, param1: number): void;
							});
							public constructor();
							public onZoom(param0: number, param1: number): void;
							public onPan(param0: number, param1: number): void;
						}
					}
				}
			}
		}
	}
}

declare module com {
	export module telerik {
		export module widget {
			export module chart {
				export module visualization {
					export module behaviors {
						export class TooltipContextNeededEventArgs extends java.lang.Object {
							public static class: java.lang.Class<com.telerik.widget.chart.visualization.behaviors.TooltipContextNeededEventArgs>;
							public getContext(): com.telerik.widget.chart.visualization.behaviors.ChartDataContext;
							public getDefaultContext(): com.telerik.widget.chart.visualization.behaviors.ChartDataContext;
							public setContext(param0: com.telerik.widget.chart.visualization.behaviors.ChartDataContext): void;
							public constructor(param0: com.telerik.widget.chart.visualization.behaviors.ChartDataContext);
						}
					}
				}
			}
		}
	}
}

declare module com {
	export module telerik {
		export module widget {
			export module chart {
				export module visualization {
					export module behaviors {
						export class TooltipContextNeededEventArguments extends java.lang.Object {
							public static class: java.lang.Class<com.telerik.widget.chart.visualization.behaviors.TooltipContextNeededEventArguments>;
							public getContext(): com.telerik.widget.chart.visualization.behaviors.ChartDataContext;
							public getDefaultContext(): com.telerik.widget.chart.visualization.behaviors.ChartDataContext;
							public setContext(param0: com.telerik.widget.chart.visualization.behaviors.ChartDataContext): void;
							public constructor(param0: com.telerik.widget.chart.visualization.behaviors.ChartDataContext);
						}
					}
				}
			}
		}
	}
}

declare module com {
	export module telerik {
		export module widget {
			export module chart {
				export module visualization {
					export module behaviors {
						export class TooltipContextNeededListener extends java.lang.Object {
							public static class: java.lang.Class<com.telerik.widget.chart.visualization.behaviors.TooltipContextNeededListener>;
							/**
							 * Constructs a new instance of the com.telerik.widget.chart.visualization.behaviors.TooltipContextNeededListener interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
							 */
							public constructor(implementation: {
								onContextNeeded(param0: com.telerik.widget.chart.visualization.behaviors.TooltipContextNeededEventArgs): void;
							});
							public constructor();
							public onContextNeeded(param0: com.telerik.widget.chart.visualization.behaviors.TooltipContextNeededEventArgs): void;
						}
					}
				}
			}
		}
	}
}

declare module com {
	export module telerik {
		export module widget {
			export module chart {
				export module visualization {
					export module behaviors {
						export class TooltipTriggerMode {
							public static class: java.lang.Class<com.telerik.widget.chart.visualization.behaviors.TooltipTriggerMode>;
							public static TAP: com.telerik.widget.chart.visualization.behaviors.TooltipTriggerMode;
							public static HOLD: com.telerik.widget.chart.visualization.behaviors.TooltipTriggerMode;
							public static NONE: com.telerik.widget.chart.visualization.behaviors.TooltipTriggerMode;
							public static valueOf(param0: java.lang.Class<any>, param1: string): java.lang.Enum<any>;
							public static values(): native.Array<com.telerik.widget.chart.visualization.behaviors.TooltipTriggerMode>;
							public static valueOf(param0: string): com.telerik.widget.chart.visualization.behaviors.TooltipTriggerMode;
						}
					}
				}
			}
		}
	}
}

declare module com {
	export module telerik {
		export module widget {
			export module chart {
				export module visualization {
					export module behaviors {
						export class TrackBallHitTestMode {
							public static class: java.lang.Class<com.telerik.widget.chart.visualization.behaviors.TrackBallHitTestMode>;
							public static LOGICAL: com.telerik.widget.chart.visualization.behaviors.TrackBallHitTestMode;
							public static PHYSICAL: com.telerik.widget.chart.visualization.behaviors.TrackBallHitTestMode;
							public static valueOf(param0: java.lang.Class<any>, param1: string): java.lang.Enum<any>;
							public static valueOf(param0: string): com.telerik.widget.chart.visualization.behaviors.TrackBallHitTestMode;
							public static values(): native.Array<com.telerik.widget.chart.visualization.behaviors.TrackBallHitTestMode>;
						}
					}
				}
			}
		}
	}
}

declare module com {
	export module telerik {
		export module widget {
			export module chart {
				export module visualization {
					export module behaviors {
						export class TrackBallSnapMode {
							public static class: java.lang.Class<com.telerik.widget.chart.visualization.behaviors.TrackBallSnapMode>;
							public static NONE: com.telerik.widget.chart.visualization.behaviors.TrackBallSnapMode;
							public static CLOSEST_POINT: com.telerik.widget.chart.visualization.behaviors.TrackBallSnapMode;
							public static ALL_CLOSE_POINTS: com.telerik.widget.chart.visualization.behaviors.TrackBallSnapMode;
							public static valueOf(param0: java.lang.Class<any>, param1: string): java.lang.Enum<any>;
							public static valueOf(param0: string): com.telerik.widget.chart.visualization.behaviors.TrackBallSnapMode;
							public static values(): native.Array<com.telerik.widget.chart.visualization.behaviors.TrackBallSnapMode>;
						}
					}
				}
			}
		}
	}
}

declare module com {
	export module telerik {
		export module widget {
			export module chart {
				export module visualization {
					export module behaviors {
						export module animations {
							export class ChartAnimation extends java.lang.Object {
								public static class: java.lang.Class<com.telerik.widget.chart.visualization.behaviors.animations.ChartAnimation>;
								/**
								 * Constructs a new instance of the com.telerik.widget.chart.visualization.behaviors.animations.ChartAnimation interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
								 */
								public constructor(implementation: {
									start(param0: com.telerik.widget.chart.visualization.behaviors.views.SeriesAnimationView): globalAndroid.support.v4.view.ViewPropertyAnimatorCompat;
									setInitialValues(param0: com.telerik.widget.chart.visualization.behaviors.views.SeriesAnimationView): void;
									setDuration(param0: number): void;
									getDuration(): number;
									setInterpolator(param0: globalAndroid.view.animation.Interpolator): void;
									getInterpolator(): globalAndroid.view.animation.Interpolator;
									setInitialDelay(param0: number): void;
									getInitialDelay(): number;
									getSeries(): com.telerik.widget.chart.visualization.common.ChartSeries;
									addAnimationFinishedListener(param0: com.telerik.widget.chart.visualization.behaviors.animations.ChartAnimationFinishedListener): void;
									removeAnimationFinishedListener(param0: com.telerik.widget.chart.visualization.behaviors.animations.ChartAnimationFinishedListener): void;
								});
								public constructor();
								public addAnimationFinishedListener(param0: com.telerik.widget.chart.visualization.behaviors.animations.ChartAnimationFinishedListener): void;
								public getInterpolator(): globalAndroid.view.animation.Interpolator;
								public setInitialValues(param0: com.telerik.widget.chart.visualization.behaviors.views.SeriesAnimationView): void;
								public getDuration(): number;
								public removeAnimationFinishedListener(param0: com.telerik.widget.chart.visualization.behaviors.animations.ChartAnimationFinishedListener): void;
								public setDuration(param0: number): void;
								public setInitialDelay(param0: number): void;
								public getInitialDelay(): number;
								public setInterpolator(param0: globalAndroid.view.animation.Interpolator): void;
								public getSeries(): com.telerik.widget.chart.visualization.common.ChartSeries;
								public start(param0: com.telerik.widget.chart.visualization.behaviors.views.SeriesAnimationView): globalAndroid.support.v4.view.ViewPropertyAnimatorCompat;
							}
						}
					}
				}
			}
		}
	}
}

declare module com {
	export module telerik {
		export module widget {
			export module chart {
				export module visualization {
					export module behaviors {
						export module animations {
							export abstract class ChartAnimationBase extends java.lang.Object implements com.telerik.widget.chart.visualization.behaviors.animations.ChartAnimation, java.lang.Runnable {
								public static class: java.lang.Class<com.telerik.widget.chart.visualization.behaviors.animations.ChartAnimationBase>;
								public animateViewCore(param0: globalAndroid.support.v4.view.ViewPropertyAnimatorCompat): void;
								public getDuration(): number;
								public setInitialValues(param0: com.telerik.widget.chart.visualization.behaviors.views.SeriesAnimationView): void;
								public removeAnimationFinishedListener(param0: com.telerik.widget.chart.visualization.behaviors.animations.ChartAnimationFinishedListener): void;
								public onAnimationFinished(): void;
								public constructor();
								public start(param0: com.telerik.widget.chart.visualization.behaviors.views.SeriesAnimationView): globalAndroid.support.v4.view.ViewPropertyAnimatorCompat;
								public addAnimationFinishedListener(param0: com.telerik.widget.chart.visualization.behaviors.animations.ChartAnimationFinishedListener): void;
								public constructor(param0: com.telerik.widget.chart.visualization.common.ChartSeries);
								public getInterpolator(): globalAndroid.view.animation.Interpolator;
								public setDuration(param0: number): void;
								public setInitialDelay(param0: number): void;
								public getInitialDelay(): number;
								public getSeries(): com.telerik.widget.chart.visualization.common.ChartSeries;
								public setInterpolator(param0: globalAndroid.view.animation.Interpolator): void;
								public run(): void;
							}
						}
					}
				}
			}
		}
	}
}

declare module com {
	export module telerik {
		export module widget {
			export module chart {
				export module visualization {
					export module behaviors {
						export module animations {
							export class ChartAnimationFinishedListener extends java.lang.Object {
								public static class: java.lang.Class<com.telerik.widget.chart.visualization.behaviors.animations.ChartAnimationFinishedListener>;
								/**
								 * Constructs a new instance of the com.telerik.widget.chart.visualization.behaviors.animations.ChartAnimationFinishedListener interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
								 */
								public constructor(implementation: {
									onAnimationFinished(param0: com.telerik.widget.chart.visualization.behaviors.animations.ChartAnimation, param1: com.telerik.widget.chart.visualization.behaviors.views.SeriesAnimationView): void;
								});
								public constructor();
								public onAnimationFinished(param0: com.telerik.widget.chart.visualization.behaviors.animations.ChartAnimation, param1: com.telerik.widget.chart.visualization.behaviors.views.SeriesAnimationView): void;
							}
						}
					}
				}
			}
		}
	}
}

declare module com {
	export module telerik {
		export module widget {
			export module chart {
				export module visualization {
					export module behaviors {
						export module animations {
							export class ChartAnimationGroup extends java.lang.Object implements com.telerik.widget.chart.visualization.behaviors.animations.ChartAnimation, java.lang.Runnable {
								public static class: java.lang.Class<com.telerik.widget.chart.visualization.behaviors.animations.ChartAnimationGroup>;
								public setInitialValues(param0: com.telerik.widget.chart.visualization.behaviors.views.SeriesAnimationView): void;
								public getDuration(): number;
								public getChildDuration(): number;
								public removeAnimationFinishedListener(param0: com.telerik.widget.chart.visualization.behaviors.animations.ChartAnimationFinishedListener): void;
								public start(param0: com.telerik.widget.chart.visualization.behaviors.views.SeriesAnimationView): globalAndroid.support.v4.view.ViewPropertyAnimatorCompat;
								public addAnimationFinishedListener(param0: com.telerik.widget.chart.visualization.behaviors.animations.ChartAnimationFinishedListener): void;
								public constructor(param0: com.telerik.widget.chart.visualization.common.ChartSeries);
								public getInterpolator(): globalAndroid.view.animation.Interpolator;
								public removeAnimation(param0: com.telerik.widget.chart.visualization.behaviors.animations.ChartAnimation): void;
								public setDuration(param0: number): void;
								public setInitialDelay(param0: number): void;
								public setSequenceMode(param0: com.telerik.widget.chart.visualization.behaviors.animations.ChartAnimationSequenceMode): void;
								public getInitialDelay(): number;
								public setInterpolator(param0: globalAndroid.view.animation.Interpolator): void;
								public getSeries(): com.telerik.widget.chart.visualization.common.ChartSeries;
								public run(): void;
								public addAnimation(param0: com.telerik.widget.chart.visualization.behaviors.animations.ChartAnimation): void;
							}
						}
					}
				}
			}
		}
	}
}

declare module com {
	export module telerik {
		export module widget {
			export module chart {
				export module visualization {
					export module behaviors {
						export module animations {
							export class ChartAnimationSequenceMode {
								public static class: java.lang.Class<com.telerik.widget.chart.visualization.behaviors.animations.ChartAnimationSequenceMode>;
								public static CONCURRENT: com.telerik.widget.chart.visualization.behaviors.animations.ChartAnimationSequenceMode;
								public static SEQUENTIAL: com.telerik.widget.chart.visualization.behaviors.animations.ChartAnimationSequenceMode;
								public static values(): native.Array<com.telerik.widget.chart.visualization.behaviors.animations.ChartAnimationSequenceMode>;
								public static valueOf(param0: java.lang.Class<any>, param1: string): java.lang.Enum<any>;
								public static valueOf(param0: string): com.telerik.widget.chart.visualization.behaviors.animations.ChartAnimationSequenceMode;
							}
						}
					}
				}
			}
		}
	}
}

declare module com {
	export module telerik {
		export module widget {
			export module chart {
				export module visualization {
					export module behaviors {
						export module animations {
							export class ChartFadeAnimation extends com.telerik.widget.chart.visualization.behaviors.animations.ChartAnimationBase {
								public static class: java.lang.Class<com.telerik.widget.chart.visualization.behaviors.animations.ChartFadeAnimation>;
								public getStartOpacity(): number;
								public animateViewCore(param0: globalAndroid.support.v4.view.ViewPropertyAnimatorCompat): void;
								public setInitialValues(param0: com.telerik.widget.chart.visualization.behaviors.views.SeriesAnimationView): void;
								public getDuration(): number;
								public removeAnimationFinishedListener(param0: com.telerik.widget.chart.visualization.behaviors.animations.ChartAnimationFinishedListener): void;
								public constructor();
								public start(param0: com.telerik.widget.chart.visualization.behaviors.views.SeriesAnimationView): globalAndroid.support.v4.view.ViewPropertyAnimatorCompat;
								public addAnimationFinishedListener(param0: com.telerik.widget.chart.visualization.behaviors.animations.ChartAnimationFinishedListener): void;
								public constructor(param0: com.telerik.widget.chart.visualization.common.ChartSeries);
								public getInterpolator(): globalAndroid.view.animation.Interpolator;
								public setStartOpacity(param0: number): void;
								public setDuration(param0: number): void;
								public setInitialDelay(param0: number): void;
								public getInitialDelay(): number;
								public setInterpolator(param0: globalAndroid.view.animation.Interpolator): void;
								public getSeries(): com.telerik.widget.chart.visualization.common.ChartSeries;
								public run(): void;
							}
						}
					}
				}
			}
		}
	}
}

declare module com {
	export module telerik {
		export module widget {
			export module chart {
				export module visualization {
					export module behaviors {
						export module animations {
							export class ChartRotateAnimation extends com.telerik.widget.chart.visualization.behaviors.animations.ChartAnimationBase {
								public static class: java.lang.Class<com.telerik.widget.chart.visualization.behaviors.animations.ChartRotateAnimation>;
								public animateViewCore(param0: globalAndroid.support.v4.view.ViewPropertyAnimatorCompat): void;
								public setInitialValues(param0: com.telerik.widget.chart.visualization.behaviors.views.SeriesAnimationView): void;
								public getDuration(): number;
								public removeAnimationFinishedListener(param0: com.telerik.widget.chart.visualization.behaviors.animations.ChartAnimationFinishedListener): void;
								public getPivotY(): number;
								public constructor();
								public setPivotX(param0: number): void;
								public setPivotY(param0: number): void;
								public getStartAngle(): number;
								public start(param0: com.telerik.widget.chart.visualization.behaviors.views.SeriesAnimationView): globalAndroid.support.v4.view.ViewPropertyAnimatorCompat;
								public addAnimationFinishedListener(param0: com.telerik.widget.chart.visualization.behaviors.animations.ChartAnimationFinishedListener): void;
								public constructor(param0: com.telerik.widget.chart.visualization.common.ChartSeries);
								public getInterpolator(): globalAndroid.view.animation.Interpolator;
								public setDuration(param0: number): void;
								public setInitialDelay(param0: number): void;
								public getInitialDelay(): number;
								public setInterpolator(param0: globalAndroid.view.animation.Interpolator): void;
								public getSeries(): com.telerik.widget.chart.visualization.common.ChartSeries;
								public run(): void;
								public setStartAngle(param0: number): void;
								public getPivotX(): number;
							}
						}
					}
				}
			}
		}
	}
}

declare module com {
	export module telerik {
		export module widget {
			export module chart {
				export module visualization {
					export module behaviors {
						export module animations {
							export class ChartScaleAnimation extends com.telerik.widget.chart.visualization.behaviors.animations.ChartAnimationBase {
								public static class: java.lang.Class<com.telerik.widget.chart.visualization.behaviors.animations.ChartScaleAnimation>;
								public animateViewCore(param0: globalAndroid.support.v4.view.ViewPropertyAnimatorCompat): void;
								public setInitialValues(param0: com.telerik.widget.chart.visualization.behaviors.views.SeriesAnimationView): void;
								public getDuration(): number;
								public removeAnimationFinishedListener(param0: com.telerik.widget.chart.visualization.behaviors.animations.ChartAnimationFinishedListener): void;
								public getPivotY(): number;
								public constructor();
								public setPivotX(param0: number): void;
								public setPivotY(param0: number): void;
								public start(param0: com.telerik.widget.chart.visualization.behaviors.views.SeriesAnimationView): globalAndroid.support.v4.view.ViewPropertyAnimatorCompat;
								public getStartScaleX(): number;
								public addAnimationFinishedListener(param0: com.telerik.widget.chart.visualization.behaviors.animations.ChartAnimationFinishedListener): void;
								public constructor(param0: com.telerik.widget.chart.visualization.common.ChartSeries);
								public getInterpolator(): globalAndroid.view.animation.Interpolator;
								public setDuration(param0: number): void;
								public setStartScaleX(param0: number): void;
								public setStartScaleY(param0: number): void;
								public setInitialDelay(param0: number): void;
								public getInitialDelay(): number;
								public setInterpolator(param0: globalAndroid.view.animation.Interpolator): void;
								public getSeries(): com.telerik.widget.chart.visualization.common.ChartSeries;
								public run(): void;
								public getPivotX(): number;
								public getStartScaleY(): number;
							}
						}
					}
				}
			}
		}
	}
}

declare module com {
	export module telerik {
		export module widget {
			export module chart {
				export module visualization {
					export module behaviors {
						export module animations {
							export class ChartTranslateAnimation extends com.telerik.widget.chart.visualization.behaviors.animations.ChartAnimationBase {
								public static class: java.lang.Class<com.telerik.widget.chart.visualization.behaviors.animations.ChartTranslateAnimation>;
								public animateViewCore(param0: globalAndroid.support.v4.view.ViewPropertyAnimatorCompat): void;
								public setInitialValues(param0: com.telerik.widget.chart.visualization.behaviors.views.SeriesAnimationView): void;
								public getDuration(): number;
								public removeAnimationFinishedListener(param0: com.telerik.widget.chart.visualization.behaviors.animations.ChartAnimationFinishedListener): void;
								public constructor();
								public start(param0: com.telerik.widget.chart.visualization.behaviors.views.SeriesAnimationView): globalAndroid.support.v4.view.ViewPropertyAnimatorCompat;
								public getStartY(): number;
								public getStartX(): number;
								public addAnimationFinishedListener(param0: com.telerik.widget.chart.visualization.behaviors.animations.ChartAnimationFinishedListener): void;
								public constructor(param0: com.telerik.widget.chart.visualization.common.ChartSeries);
								public getInterpolator(): globalAndroid.view.animation.Interpolator;
								public setDuration(param0: number): void;
								public setInitialDelay(param0: number): void;
								public getInitialDelay(): number;
								public setInterpolator(param0: globalAndroid.view.animation.Interpolator): void;
								public getSeries(): com.telerik.widget.chart.visualization.common.ChartSeries;
								public setStartX(param0: number): void;
								public run(): void;
								public setStartY(param0: number): void;
							}
						}
					}
				}
			}
		}
	}
}

declare module com {
	export module telerik {
		export module widget {
			export module chart {
				export module visualization {
					export module behaviors {
						export module views {
							export class DeferredZoomPresenter extends com.telerik.android.common.PropertyManager implements com.telerik.android.primitives.widget.tooltip.contracts.DrawListener {
								public static class: java.lang.Class<com.telerik.widget.chart.visualization.behaviors.views.DeferredZoomPresenter>;
								public static FILL_COLOR_PROPERTY_KEY: number;
								public static STROKE_COLOR_PROPERTY_KEY: number;
								public static STROKE_WIDTH_PROPERTY_KEY: number;
								public getOwner(): com.telerik.widget.chart.visualization.behaviors.ChartPanAndZoomBehavior;
								public notifyDraw(param0: globalAndroid.graphics.Canvas): void;
								public setOwner(param0: com.telerik.widget.chart.visualization.behaviors.ChartPanAndZoomBehavior): void;
								public getFillPaint(): globalAndroid.graphics.Paint;
								public setPinchPoints(param0: com.telerik.android.common.math.RadPoint, param1: com.telerik.android.common.math.RadPoint): void;
								public constructor();
								public setCanApplyPalette(param0: boolean): void;
								public setStrokeColor(param0: number): void;
								public getStrokePaint(): globalAndroid.graphics.Paint;
								public getZoomY(): number;
								public getStrokeColor(): number;
								public getPanX(): number;
								public setStrokeWidth(param0: number): void;
								public getZoomX(): number;
								public setFillColor(param0: number): void;
								public applyPalette(param0: com.telerik.widget.palettes.ChartPalette): void;
								public setStrokePaint(param0: globalAndroid.graphics.Paint): void;
								public getFillColor(): number;
								public getCanApplyPalette(): boolean;
								public getPanY(): number;
								public getStrokeWidth(): number;
								public setFillPaint(param0: globalAndroid.graphics.Paint): void;
							}
						}
					}
				}
			}
		}
	}
}

declare module com {
	export module telerik {
		export module widget {
			export module chart {
				export module visualization {
					export module behaviors {
						export module views {
							export class SeriesAnimationView extends globalAndroid.view.View {
								public static class: java.lang.Class<com.telerik.widget.chart.visualization.behaviors.views.SeriesAnimationView>;
								public constructor(param0: globalAndroid.content.Context, param1: globalAndroid.util.AttributeSet);
								public invalidateDrawable(param0: globalAndroid.graphics.drawable.Drawable): void;
								public decrementAnimationCount(): void;
								public incrementAnimationCount(): void;
								public onKeyMultiple(param0: number, param1: number, param2: globalAndroid.view.KeyEvent): boolean;
								public onKeyDown(param0: number, param1: globalAndroid.view.KeyEvent): boolean;
								public constructor(param0: globalAndroid.content.Context, param1: globalAndroid.util.AttributeSet, param2: number);
								public getActiveAnimationCount(): number;
								public unscheduleDrawable(param0: globalAndroid.graphics.drawable.Drawable): void;
								public sendAccessibilityEvent(param0: number): void;
								public unscheduleDrawable(param0: globalAndroid.graphics.drawable.Drawable, param1: java.lang.Runnable): void;
								public sendAccessibilityEventUnchecked(param0: globalAndroid.view.accessibility.AccessibilityEvent): void;
								public onKeyUp(param0: number, param1: globalAndroid.view.KeyEvent): boolean;
								public constructor(param0: globalAndroid.content.Context, param1: com.telerik.widget.chart.visualization.common.ChartSeries);
								public getSeries(): com.telerik.widget.chart.visualization.common.ChartSeries;
								public constructor(param0: globalAndroid.content.Context);
								public scheduleDrawable(param0: globalAndroid.graphics.drawable.Drawable, param1: java.lang.Runnable, param2: number): void;
								public onMeasure(param0: number, param1: number): void;
								public onDraw(param0: globalAndroid.graphics.Canvas): void;
								public onKeyLongPress(param0: number, param1: globalAndroid.view.KeyEvent): boolean;
							}
						}
					}
				}
			}
		}
	}
}

declare module com {
	export module telerik {
		export module widget {
			export module chart {
				export module visualization {
					export module behaviors {
						export module views {
							export class SeriesAnimationViewport extends globalAndroid.view.ViewGroup {
								public static class: java.lang.Class<com.telerik.widget.chart.visualization.behaviors.views.SeriesAnimationViewport>;
								public requestSendAccessibilityEvent(param0: globalAndroid.view.View, param1: globalAndroid.view.accessibility.AccessibilityEvent): boolean;
								public requestFitSystemWindows(): void;
								public bringChildToFront(param0: globalAndroid.view.View): void;
								public recomputeViewAttributes(param0: globalAndroid.view.View): void;
								public focusSearch(param0: globalAndroid.view.View, param1: number): globalAndroid.view.View;
								public showContextMenuForChild(param0: globalAndroid.view.View): boolean;
								public isLayoutRequested(): boolean;
								public getParent(): globalAndroid.view.ViewParent;
								public addView(param0: globalAndroid.view.View): void;
								public onKeyMultiple(param0: number, param1: number, param2: globalAndroid.view.KeyEvent): boolean;
								public requestDisallowInterceptTouchEvent(param0: boolean): void;
								public onKeyDown(param0: number, param1: globalAndroid.view.KeyEvent): boolean;
								public constructor(param0: globalAndroid.content.Context, param1: globalAndroid.util.AttributeSet, param2: number);
								public addView(param0: globalAndroid.view.View, param1: number, param2: globalAndroid.view.ViewGroup.LayoutParams): void;
								public requestChildRectangleOnScreen(param0: globalAndroid.view.View, param1: globalAndroid.graphics.Rect, param2: boolean): boolean;
								public updateViewLayout(param0: globalAndroid.view.View, param1: globalAndroid.view.ViewGroup.LayoutParams): void;
								public invalidateChildInParent(param0: native.Array<number>, param1: globalAndroid.graphics.Rect): globalAndroid.view.ViewParent;
								public getParentForAccessibility(): globalAndroid.view.ViewParent;
								public scheduleDrawable(param0: globalAndroid.graphics.drawable.Drawable, param1: java.lang.Runnable, param2: number): void;
								public invalidateChild(param0: globalAndroid.view.View, param1: globalAndroid.graphics.Rect): void;
								public getChildVisibleRect(param0: globalAndroid.view.View, param1: globalAndroid.graphics.Rect, param2: globalAndroid.graphics.Point): boolean;
								public constructor(param0: globalAndroid.content.Context, param1: globalAndroid.util.AttributeSet);
								public invalidateDrawable(param0: globalAndroid.graphics.drawable.Drawable): void;
								public setChart(param0: com.telerik.widget.chart.visualization.common.RadChartViewBase<any>): void;
								public addView(param0: globalAndroid.view.View, param1: number, param2: number): void;
								public removeView(param0: globalAndroid.view.View): void;
								public onLayout(param0: boolean, param1: number, param2: number, param3: number, param4: number): void;
								public focusSearch(param0: number): globalAndroid.view.View;
								public addView(param0: globalAndroid.view.View, param1: globalAndroid.view.ViewGroup.LayoutParams): void;
								public addView(param0: globalAndroid.view.View, param1: number): void;
								public requestTransparentRegion(param0: globalAndroid.view.View): void;
								public unscheduleDrawable(param0: globalAndroid.graphics.drawable.Drawable): void;
								public sendAccessibilityEvent(param0: number): void;
								public unscheduleDrawable(param0: globalAndroid.graphics.drawable.Drawable, param1: java.lang.Runnable): void;
								public sendAccessibilityEventUnchecked(param0: globalAndroid.view.accessibility.AccessibilityEvent): void;
								public requestChildFocus(param0: globalAndroid.view.View, param1: globalAndroid.view.View): void;
								public clearChildFocus(param0: globalAndroid.view.View): void;
								public onKeyUp(param0: number, param1: globalAndroid.view.KeyEvent): boolean;
								public startActionModeForChild(param0: globalAndroid.view.View, param1: globalAndroid.view.ActionMode.Callback): globalAndroid.view.ActionMode;
								public requestLayout(): void;
								public constructor(param0: globalAndroid.content.Context);
								public onMeasure(param0: number, param1: number): void;
								public childDrawableStateChanged(param0: globalAndroid.view.View): void;
								public onKeyLongPress(param0: number, param1: globalAndroid.view.KeyEvent): boolean;
								public focusableViewAvailable(param0: globalAndroid.view.View): void;
								public createContextMenu(param0: globalAndroid.view.ContextMenu): void;
							}
						}
					}
				}
			}
		}
	}
}

declare module com {
	export module telerik {
		export module widget {
			export module chart {
				export module visualization {
					export module behaviors {
						export module views {
							export class TrackballPresenter extends com.telerik.android.primitives.widget.tooltip.views.TooltipPresenterBase {
								public static class: java.lang.Class<com.telerik.widget.chart.visualization.behaviors.views.TrackballPresenter>;
								public getIntersectionPointPaint(): globalAndroid.graphics.Paint;
								public setIntersectionPointPaint(param0: globalAndroid.graphics.Paint): void;
								public onKeyMultiple(param0: number, param1: number, param2: globalAndroid.view.KeyEvent): boolean;
								public onKeyDown(param0: number, param1: globalAndroid.view.KeyEvent): boolean;
								public constructor(param0: globalAndroid.content.Context, param1: globalAndroid.util.AttributeSet, param2: number);
								public constructor(param0: globalAndroid.content.Context, param1: com.telerik.android.primitives.widget.tooltip.contracts.TooltipAdapter, param2: number);
								public scheduleDrawable(param0: globalAndroid.graphics.drawable.Drawable, param1: java.lang.Runnable, param2: number): void;
								public getLinePaint(): globalAndroid.graphics.Paint;
								public setIndicatorRadius(param0: number): void;
								public drawIntersectionPoints(param0: globalAndroid.graphics.Canvas): void;
								public calculateTooltipBounds(param0: globalAndroid.graphics.Point): globalAndroid.graphics.RectF;
								public constructor(param0: globalAndroid.content.Context, param1: globalAndroid.util.AttributeSet);
								public constructor(param0: globalAndroid.content.Context, param1: com.telerik.android.primitives.widget.tooltip.contracts.TooltipAdapter);
								public invalidateDrawable(param0: globalAndroid.graphics.drawable.Drawable): void;
								public notifyDraw(param0: globalAndroid.graphics.Canvas): void;
								public getIndicatorRadius(): number;
								public onDrawCore(param0: globalAndroid.graphics.Canvas): void;
								public unscheduleDrawable(param0: globalAndroid.graphics.drawable.Drawable): void;
								public sendAccessibilityEvent(param0: number): void;
								public unscheduleDrawable(param0: globalAndroid.graphics.drawable.Drawable, param1: java.lang.Runnable): void;
								public drawLine(param0: globalAndroid.graphics.Canvas): void;
								public sendAccessibilityEventUnchecked(param0: globalAndroid.view.accessibility.AccessibilityEvent): void;
								public openCore(param0: globalAndroid.graphics.Point): void;
								public onKeyUp(param0: number, param1: globalAndroid.view.KeyEvent): boolean;
								public setLinePaint(param0: globalAndroid.graphics.Paint): void;
								public constructor(param0: globalAndroid.content.Context);
								public onKeyLongPress(param0: number, param1: globalAndroid.view.KeyEvent): boolean;
							}
						}
					}
				}
			}
		}
	}
}

declare module com {
	export module telerik {
		export module widget {
			export module chart {
				export module visualization {
					export module cartesianChart {
						export class CartesianChartGrid extends com.telerik.widget.chart.visualization.common.ChartElementPresenter {
							public static class: java.lang.Class<com.telerik.widget.chart.visualization.cartesianChart.CartesianChartGrid>;
							public static MAJOR_LINES_THICKNESS_PROPERTY_KEY: number;
							public static MAJOR_LINES_VISIBILITY_PROPERTY_KEY: number;
							public static STRIP_LINES_VISIBILITY_PROPERTY_KEY: number;
							public static LINE_COLOR_PROPERTY_KEY: number;
							public static VERTICAL_LINE_COLOR_PROPERTY_KEY: number;
							public static MAJOR_X_LINE_DASH_ARRAY_PROPERTY_KEY: number;
							public static MAJOR_Y_LINE_DASH_ARRAY_PROPERTY_KEY: number;
							public static MAJOR_X_LINE_RENDER_MODE_PROPERTY_KEY: number;
							public static MAJOR_Y_LINE_RENDER_MODE_PROPERTY_KEY: number;
							public grid: com.telerik.widget.chart.engine.decorations.CartesianChartGridModel;
							public getElement(): com.telerik.widget.chart.engine.elementTree.ChartElement;
							public applyPaletteCore(param0: com.telerik.widget.palettes.ChartPalette): void;
							public defaultPaletteFamily(): string;
							public getMajorYLinesRenderMode(): number;
							public setVerticalLineColor(param0: number): void;
							public setVerticalLineThickness(param0: number): void;
							public setHorizontalAxis(param0: com.telerik.widget.chart.visualization.common.Axis): void;
							public setMajorYLineDashArray(param0: native.Array<number>): void;
							public render(param0: globalAndroid.graphics.Canvas): void;
							public getMajorLinesVisibility(): number;
							public getMajorYLineDashArray(): native.Array<number>;
							public setLineThickness(param0: number): void;
							public getVerticalLineThickness(): number;
							public invalidatePalette(): void;
							public getMajorXLineDashArray(): native.Array<number>;
							public getMajorXLinesRenderMode(): number;
							public getXStripeBrushes(): com.telerik.android.common.ObservableCollection<globalAndroid.graphics.Paint>;
							public measureContent(param0: com.telerik.widget.chart.engine.elementTree.ChartNode, param1: any): com.telerik.android.common.math.RadSize;
							public setMajorYLinesRenderMode(param0: number): void;
							public setMajorXLinesRenderMode(param0: number): void;
							public getDefaultZIndex(): number;
							public constructor();
							public getVerticalLineColor(): number;
							public onAttached(): void;
							public onPaletteUpdated(param0: com.telerik.widget.palettes.ChartPalette): void;
							public setLineColor(param0: number): void;
							public getCollectionIndex(): number;
							public getLineThickness(): number;
							public setStripLinesVisibility(param0: number): void;
							public onDetached(param0: com.telerik.widget.chart.visualization.common.RadChartViewBase<any>): void;
							public setMajorXLineDashArray(param0: native.Array<number>): void;
							public getLineColor(): number;
							public setMajorLinesVisibility(param0: number): void;
							public getYStripeBrushes(): com.telerik.android.common.ObservableCollection<globalAndroid.graphics.Paint>;
							public setVerticalAxis(param0: com.telerik.widget.chart.visualization.common.Axis): void;
							public getStripLinesVisibility(): number;
							public refreshNode(param0: com.telerik.widget.chart.engine.elementTree.ChartNode): void;
						}
						export module CartesianChartGrid {
							export class GridLinesInfo extends java.lang.Object {
								public static class: java.lang.Class<com.telerik.widget.chart.visualization.cartesianChart.CartesianChartGrid.GridLinesInfo>;
								public dashArray: native.Array<number>;
								public visible: boolean;
								public renderMode: number;
								public lines: java.util.ArrayList<com.telerik.widget.chart.engine.decorations.GridLine>;
								public owner: com.telerik.widget.chart.visualization.cartesianChart.CartesianChartGrid;
								public linePaint: globalAndroid.graphics.Paint;
								public constructor(param0: com.telerik.widget.chart.visualization.cartesianChart.CartesianChartGrid, param1: com.telerik.widget.chart.visualization.cartesianChart.CartesianChartGrid);
								public drawLines(param0: globalAndroid.graphics.Canvas): void;
							}
						}
					}
				}
			}
		}
	}
}

declare module com {
	export module telerik {
		export module widget {
			export module chart {
				export module visualization {
					export module cartesianChart {
						export class GridLineRenderMode extends java.lang.Object {
							public static class: java.lang.Class<com.telerik.widget.chart.visualization.cartesianChart.GridLineRenderMode>;
							public static FIRST: number;
							public static INNER: number;
							public static LAST: number;
							public static FIRST_AND_INNER: number;
							public static INNER_AND_LAST: number;
							public static FIRST_AND_LAST: number;
							public static ALL: number;
							public constructor();
							public static valueOf(param0: string): number;
						}
					}
				}
			}
		}
	}
}

declare module com {
	export module telerik {
		export module widget {
			export module chart {
				export module visualization {
					export module cartesianChart {
						export class GridLineVisibility extends java.lang.Object {
							public static class: java.lang.Class<com.telerik.widget.chart.visualization.cartesianChart.GridLineVisibility>;
							public static NONE: number;
							public static X: number;
							public static Y: number;
							public static XY: number;
							public constructor();
							public static valueOf(param0: string): number;
						}
					}
				}
			}
		}
	}
}

declare module com {
	export module telerik {
		export module widget {
			export module chart {
				export module visualization {
					export module cartesianChart {
						export class RadCartesianChartView extends com.telerik.widget.chart.visualization.common.RadChartViewBase<com.telerik.widget.chart.visualization.cartesianChart.series.CartesianSeries> {
							public static class: java.lang.Class<com.telerik.widget.chart.visualization.cartesianChart.RadCartesianChartView>;
							public invalidateDrawable(param0: globalAndroid.graphics.drawable.Drawable): void;
							public getZoomWidth(): number;
							public onKeyDown(param0: number, param1: globalAndroid.view.KeyEvent): boolean;
							public getAnnotations(): com.telerik.widget.chart.visualization.common.PresenterCollection<com.telerik.widget.chart.visualization.annotations.cartesian.CartesianChartAnnotation>;
							public onKeyLongPress(param0: number, param1: globalAndroid.view.KeyEvent): boolean;
							public unscheduleDrawable(param0: globalAndroid.graphics.drawable.Drawable, param1: java.lang.Runnable): void;
							public getPanOffsetY(): number;
							public getHorizontalAxis(): com.telerik.widget.chart.visualization.common.CartesianAxis;
							public createChartAreaModel(): com.telerik.widget.chart.engine.chartAreas.ChartAreaModel;
							public onDoubleTap(param0: globalAndroid.view.MotionEvent): boolean;
							public scheduleDrawable(param0: globalAndroid.graphics.drawable.Drawable, param1: java.lang.Runnable, param2: number): void;
							public setGrid(param0: com.telerik.widget.chart.visualization.cartesianChart.CartesianChartGrid): void;
							public resolveHorizontalAxis(): com.telerik.widget.chart.visualization.common.CartesianAxis;
							public onDown(param0: globalAndroid.view.MotionEvent): boolean;
							public onSingleTapConfirmed(param0: globalAndroid.view.MotionEvent): boolean;
							public setHorizontalAxis(param0: com.telerik.widget.chart.visualization.common.CartesianAxis): void;
							public setVerticalAxis(param0: com.telerik.widget.chart.visualization.common.CartesianAxis): void;
							public getZoomHeight(): number;
							public constructor(param0: globalAndroid.content.Context, param1: globalAndroid.util.AttributeSet, param2: number);
							public onKeyUp(param0: number, param1: globalAndroid.view.KeyEvent): boolean;
							public getPanOffsetX(): number;
							public onScaleEnd(param0: com.telerik.widget.chart.visualization.behaviors.ChartScaleGestureDetector): void;
							public onScroll(param0: globalAndroid.view.MotionEvent, param1: globalAndroid.view.MotionEvent, param2: number, param3: number): boolean;
							public convertPointToData(param0: globalAndroid.graphics.Point): com.telerik.android.common.DataTuple<any,any,any>;
							public onDoubleTapEvent(param0: globalAndroid.view.MotionEvent): boolean;
							public getVerticalAxis(): com.telerik.widget.chart.visualization.common.CartesianAxis;
							public getGrid(): com.telerik.widget.chart.visualization.cartesianChart.CartesianChartGrid;
							public resolveVerticalAxis(): com.telerik.widget.chart.visualization.common.CartesianAxis;
							public onLongPress(param0: globalAndroid.view.MotionEvent): void;
							public constructor(param0: globalAndroid.content.Context, param1: globalAndroid.util.AttributeSet);
							public onFling(param0: globalAndroid.view.MotionEvent, param1: globalAndroid.view.MotionEvent, param2: number, param3: number): boolean;
							public getViewportHeight(): number;
							public onShowPress(param0: globalAndroid.view.MotionEvent): void;
							public getViewportWidth(): number;
							public getLegendInfos(): com.telerik.android.common.ObservableCollection<com.telerik.widget.primitives.legend.LegendItem>;
							public onKeyMultiple(param0: number, param1: number, param2: globalAndroid.view.KeyEvent): boolean;
							public onScale(param0: com.telerik.widget.chart.visualization.behaviors.ChartScaleGestureDetector): boolean;
							public sendAccessibilityEvent(param0: number): void;
							public onSingleTapUp(param0: globalAndroid.view.MotionEvent): boolean;
							public convertPointToData(param0: globalAndroid.graphics.Point, param1: com.telerik.widget.chart.visualization.common.CartesianAxis, param2: com.telerik.widget.chart.visualization.common.CartesianAxis): com.telerik.android.common.DataTuple<any,any,any>;
							public onScaleBegin(param0: com.telerik.widget.chart.visualization.behaviors.ChartScaleGestureDetector): boolean;
							public sendAccessibilityEventUnchecked(param0: globalAndroid.view.accessibility.AccessibilityEvent): void;
							public unscheduleDrawable(param0: globalAndroid.graphics.drawable.Drawable): void;
							public getPlotAreaClip(): com.telerik.android.common.math.RadRect;
							public constructor(param0: globalAndroid.content.Context);
						}
					}
				}
			}
		}
	}
}

declare module com {
	export module telerik {
		export module widget {
			export module chart {
				export module visualization {
					export module cartesianChart {
						export module axes {
							export class CategoricalAxis extends com.telerik.widget.chart.visualization.common.CartesianAxis {
								public static class: java.lang.Class<com.telerik.widget.chart.visualization.cartesianChart.axes.CategoricalAxis>;
								public getMajorTickInterval(): number;
								public setLabelFont(param0: globalAndroid.graphics.Typeface): void;
								public createModel(): com.telerik.widget.chart.engine.axes.AxisModel;
								public getLabelSize(): number;
								public refreshNode(param0: com.telerik.widget.chart.engine.elementTree.ChartNode): void;
								public getLabelValueToStringConverter(): com.telerik.android.common.Function<any,string>;
								public onPaletteUpdated(param0: com.telerik.widget.palettes.ChartPalette): void;
								public setMajorTickInterval(param0: number): void;
								public setLabelSize(param0: number): void;
								public getLabelTextColor(): number;
								public setLabelValueToStringConverter(param0: com.telerik.android.common.Function<any,string>): void;
								public getCollectionIndex(): number;
								public getLabelFormat(): string;
								public setPlotMode(param0: com.telerik.widget.chart.engine.axes.common.AxisPlotMode): void;
								public getGapLength(): number;
								public getDataPointsForValue(param0: any): java.util.List<com.telerik.widget.chart.engine.dataPoints.DataPoint>;
								public measureContent(param0: com.telerik.widget.chart.engine.elementTree.ChartNode, param1: any): com.telerik.android.common.math.RadSize;
								public setGapLength(param0: number): void;
								public getPlotMode(): com.telerik.widget.chart.engine.axes.common.AxisPlotMode;
								public getLabelFontStyle(): number;
								public getLabelMargin(): number;
								public getLabelFont(): globalAndroid.graphics.Typeface;
								public invalidatePalette(): void;
								public constructor();
								public renderLabel(param0: globalAndroid.graphics.Canvas, param1: com.telerik.widget.chart.engine.elementTree.ChartNode): void;
								public setLabelFontStyle(param0: number): void;
								public setLabelMargin(param0: number): void;
								public setLabelTextColor(param0: number): void;
								public setLabelFormat(param0: string): void;
							}
						}
					}
				}
			}
		}
	}
}

declare module com {
	export module telerik {
		export module widget {
			export module chart {
				export module visualization {
					export module cartesianChart {
						export module axes {
							export class DateTimeCategoricalAxis extends com.telerik.widget.chart.visualization.cartesianChart.axes.CategoricalAxis {
								public static class: java.lang.Class<com.telerik.widget.chart.visualization.cartesianChart.axes.DateTimeCategoricalAxis>;
								public setLabelFont(param0: globalAndroid.graphics.Typeface): void;
								public createModel(): com.telerik.widget.chart.engine.axes.AxisModel;
								public getLabelSize(): number;
								public refreshNode(param0: com.telerik.widget.chart.engine.elementTree.ChartNode): void;
								public getLabelValueToStringConverter(): com.telerik.android.common.Function<any,string>;
								public onPaletteUpdated(param0: com.telerik.widget.palettes.ChartPalette): void;
								public setLabelSize(param0: number): void;
								public getLabelTextColor(): number;
								public setLabelValueToStringConverter(param0: com.telerik.android.common.Function<any,string>): void;
								public getCollectionIndex(): number;
								public getDateFormat(): java.text.DateFormat;
								public getDateTimeFormat(): java.text.DateFormat;
								public getLabelFormat(): string;
								public setDateTimeComponent(param0: com.telerik.widget.chart.engine.axes.common.DateTimeComponent): void;
								public measureContent(param0: com.telerik.widget.chart.engine.elementTree.ChartNode, param1: any): com.telerik.android.common.math.RadSize;
								public getLabelFontStyle(): number;
								public setDateTimeFormat(param0: java.text.DateFormat): void;
								public getLabelMargin(): number;
								public getLabelFont(): globalAndroid.graphics.Typeface;
								public invalidatePalette(): void;
								public constructor();
								public renderLabel(param0: globalAndroid.graphics.Canvas, param1: com.telerik.widget.chart.engine.elementTree.ChartNode): void;
								public setLabelFontStyle(param0: number): void;
								public setLabelMargin(param0: number): void;
								public setLabelTextColor(param0: number): void;
								public getDateTimeComponent(): com.telerik.widget.chart.engine.axes.common.DateTimeComponent;
								public setLabelFormat(param0: string): void;
							}
						}
					}
				}
			}
		}
	}
}

declare module com {
	export module telerik {
		export module widget {
			export module chart {
				export module visualization {
					export module cartesianChart {
						export module axes {
							export class DateTimeContinuousAxis extends com.telerik.widget.chart.visualization.common.CartesianAxis {
								public static class: java.lang.Class<com.telerik.widget.chart.visualization.cartesianChart.axes.DateTimeContinuousAxis>;
								public getMajorStepUnit(): com.telerik.widget.chart.engine.axes.common.TimeInterval;
								public setLabelFont(param0: globalAndroid.graphics.Typeface): void;
								public createModel(): com.telerik.widget.chart.engine.axes.AxisModel;
								public getLabelSize(): number;
								public refreshNode(param0: com.telerik.widget.chart.engine.elementTree.ChartNode): void;
								public setMajorStepUnit(param0: com.telerik.widget.chart.engine.axes.common.TimeInterval): void;
								public getLabelValueToStringConverter(): com.telerik.android.common.Function<any,string>;
								public onPaletteUpdated(param0: com.telerik.widget.palettes.ChartPalette): void;
								public setLabelSize(param0: number): void;
								public getLabelTextColor(): number;
								public setLabelValueToStringConverter(param0: com.telerik.android.common.Function<any,string>): void;
								public getCollectionIndex(): number;
								public getDateComparer(): com.telerik.android.common.Function2<java.util.Calendar,java.util.Calendar,java.lang.Boolean>;
								public getDateTimeFormat(): java.text.DateFormat;
								public getLabelFormat(): string;
								public getGapLength(): number;
								public getMinimum(): java.util.Calendar;
								public setPlotMode(param0: com.telerik.widget.chart.engine.axes.common.AxisPlotMode): void;
								public getDataPointsForValue(param0: any): java.util.List<com.telerik.widget.chart.engine.dataPoints.DataPoint>;
								public measureContent(param0: com.telerik.widget.chart.engine.elementTree.ChartNode, param1: any): com.telerik.android.common.math.RadSize;
								public getSourceDateTimeFormat(): java.text.DateFormat;
								public setGapLength(param0: number): void;
								public getActualRange(): com.telerik.widget.chart.engine.axes.continuous.ValueRange<java.util.Calendar>;
								public setMaximumTicks(param0: number): void;
								public getPlotMode(): com.telerik.widget.chart.engine.axes.common.AxisPlotMode;
								public getLabelFontStyle(): number;
								public setDateTimeFormat(param0: java.text.DateFormat): void;
								public getLabelMargin(): number;
								public getLabelFont(): globalAndroid.graphics.Typeface;
								public setMajorStep(param0: number): void;
								public getMaximumTicks(): number;
								public invalidatePalette(): void;
								public constructor();
								public renderLabel(param0: globalAndroid.graphics.Canvas, param1: com.telerik.widget.chart.engine.elementTree.ChartNode): void;
								public setSourceDateTimeFormat(param0: java.text.DateFormat): void;
								public setLabelFontStyle(param0: number): void;
								public setLabelMargin(param0: number): void;
								public setMaximum(param0: java.util.Calendar): void;
								public setDateComparer(param0: com.telerik.android.common.Function2<java.util.Calendar,java.util.Calendar,java.lang.Boolean>): void;
								public setLabelTextColor(param0: number): void;
								public setMinimum(param0: java.util.Calendar): void;
								public getMaximum(): java.util.Calendar;
								public getMajorStep(): number;
								public setLabelFormat(param0: string): void;
							}
						}
					}
				}
			}
		}
	}
}

declare module com {
	export module telerik {
		export module widget {
			export module chart {
				export module visualization {
					export module cartesianChart {
						export module axes {
							export class LinearAxis extends com.telerik.widget.chart.visualization.cartesianChart.axes.NumericalAxis {
								public static class: java.lang.Class<com.telerik.widget.chart.visualization.cartesianChart.axes.LinearAxis>;
								public getLabelFontStyle(): number;
								public setLabelFont(param0: globalAndroid.graphics.Typeface): void;
								public createModel(): com.telerik.widget.chart.engine.axes.AxisModel;
								public getLabelSize(): number;
								public getLabelMargin(): number;
								public refreshNode(param0: com.telerik.widget.chart.engine.elementTree.ChartNode): void;
								public getLabelFont(): globalAndroid.graphics.Typeface;
								public setMajorStep(param0: number): void;
								public invalidatePalette(): void;
								public constructor();
								public renderLabel(param0: globalAndroid.graphics.Canvas, param1: com.telerik.widget.chart.engine.elementTree.ChartNode): void;
								public getLabelValueToStringConverter(): com.telerik.android.common.Function<any,string>;
								public onPaletteUpdated(param0: com.telerik.widget.palettes.ChartPalette): void;
								public setLabelSize(param0: number): void;
								public setLabelFontStyle(param0: number): void;
								public setLabelMargin(param0: number): void;
								public getLabelTextColor(): number;
								public setLabelValueToStringConverter(param0: com.telerik.android.common.Function<any,string>): void;
								public getCollectionIndex(): number;
								public getLabelFormat(): string;
								public setLabelTextColor(param0: number): void;
								public measureContent(param0: com.telerik.widget.chart.engine.elementTree.ChartNode, param1: any): com.telerik.android.common.math.RadSize;
								public getMajorStep(): number;
								public setLabelFormat(param0: string): void;
							}
						}
					}
				}
			}
		}
	}
}

declare module com {
	export module telerik {
		export module widget {
			export module chart {
				export module visualization {
					export module cartesianChart {
						export module axes {
							export class LogarithmicAxis extends com.telerik.widget.chart.visualization.cartesianChart.axes.NumericalAxis {
								public static class: java.lang.Class<com.telerik.widget.chart.visualization.cartesianChart.axes.LogarithmicAxis>;
								public setLogarithmBase(param0: number): void;
								public setLabelFont(param0: globalAndroid.graphics.Typeface): void;
								public createModel(): com.telerik.widget.chart.engine.axes.AxisModel;
								public getLabelSize(): number;
								public setExponentStep(param0: number): void;
								public refreshNode(param0: com.telerik.widget.chart.engine.elementTree.ChartNode): void;
								public getLabelValueToStringConverter(): com.telerik.android.common.Function<any,string>;
								public onPaletteUpdated(param0: com.telerik.widget.palettes.ChartPalette): void;
								public setLabelSize(param0: number): void;
								public getLabelTextColor(): number;
								public setLabelValueToStringConverter(param0: com.telerik.android.common.Function<any,string>): void;
								public getCollectionIndex(): number;
								public getLabelFormat(): string;
								public measureContent(param0: com.telerik.widget.chart.engine.elementTree.ChartNode, param1: any): com.telerik.android.common.math.RadSize;
								public getLabelFontStyle(): number;
								public getLabelMargin(): number;
								public getLabelFont(): globalAndroid.graphics.Typeface;
								public invalidatePalette(): void;
								public constructor();
								public renderLabel(param0: globalAndroid.graphics.Canvas, param1: com.telerik.widget.chart.engine.elementTree.ChartNode): void;
								public setLabelFontStyle(param0: number): void;
								public setLabelMargin(param0: number): void;
								public setLabelTextColor(param0: number): void;
								public getExponentStep(): number;
								public getLogarithmBase(): number;
								public setLabelFormat(param0: string): void;
							}
						}
					}
				}
			}
		}
	}
}

declare module com {
	export module telerik {
		export module widget {
			export module chart {
				export module visualization {
					export module cartesianChart {
						export module axes {
							export abstract class NumericalAxis extends com.telerik.widget.chart.visualization.common.CartesianAxis {
								public static class: java.lang.Class<com.telerik.widget.chart.visualization.cartesianChart.axes.NumericalAxis>;
								public setLabelFont(param0: globalAndroid.graphics.Typeface): void;
								public getLabelSize(): number;
								public refreshNode(param0: com.telerik.widget.chart.engine.elementTree.ChartNode): void;
								public setRangeExtendDirection(param0: number): void;
								public getLabelValueToStringConverter(): com.telerik.android.common.Function<any,string>;
								public onPaletteUpdated(param0: com.telerik.widget.palettes.ChartPalette): void;
								public setLabelSize(param0: number): void;
								public getLabelTextColor(): number;
								public setLabelValueToStringConverter(param0: com.telerik.android.common.Function<any,string>): void;
								public getCollectionIndex(): number;
								public getLabelFormat(): string;
								public getMaximum(): number;
								public getDataPointsForValue(param0: any): java.util.List<com.telerik.widget.chart.engine.dataPoints.DataPoint>;
								public setMinimum(param0: number): void;
								public getRangeExtendDirection(): number;
								public measureContent(param0: com.telerik.widget.chart.engine.elementTree.ChartNode, param1: any): com.telerik.android.common.math.RadSize;
								public getLabelFontStyle(): number;
								public getLabelMargin(): number;
								public getActualRange(): com.telerik.widget.chart.engine.axes.continuous.ValueRange<java.lang.Double>;
								public getDesiredTickCount(): number;
								public getLabelFont(): globalAndroid.graphics.Typeface;
								public invalidatePalette(): void;
								public constructor();
								public renderLabel(param0: globalAndroid.graphics.Canvas, param1: com.telerik.widget.chart.engine.elementTree.ChartNode): void;
								public getMinimum(): number;
								public setLabelFontStyle(param0: number): void;
								public setLabelMargin(param0: number): void;
								public setLabelTextColor(param0: number): void;
								public setDesiredTickCount(param0: number): void;
								public setMaximum(param0: number): void;
								public setLabelFormat(param0: string): void;
							}
						}
					}
				}
			}
		}
	}
}

declare module com {
	export module telerik {
		export module widget {
			export module chart {
				export module visualization {
					export module cartesianChart {
						export module indicators {
							export class AdaptiveMovingAverageKaufmanIndicator extends com.telerik.widget.chart.visualization.cartesianChart.indicators.ValuePeriodIndicatorBase {
								public static class: java.lang.Class<com.telerik.widget.chart.visualization.cartesianChart.indicators.AdaptiveMovingAverageKaufmanIndicator>;
								public getFastPeriod(): number;
								public setFastPeriod(param0: number): void;
								public toString(): string;
								public onDataPointIsSelectedChanged(param0: com.telerik.widget.chart.engine.dataPoints.DataPoint): void;
								public createDataSourceInstance(): com.telerik.widget.chart.engine.databinding.datasources.ChartSeriesDataSource;
								public onBoundItemPropertyChanged(param0: com.telerik.widget.chart.engine.databinding.DataPointBindingEntry, param1: java.beans.PropertyChangeEvent): void;
								public refreshNode(param0: com.telerik.widget.chart.engine.elementTree.ChartNode): void;
								public invalidatePalette(): void;
								public constructor();
								public onPaletteUpdated(param0: com.telerik.widget.palettes.ChartPalette): void;
								public setIsSelected(param0: boolean): void;
								public onDataBindingComplete(): void;
								public getSelectedChangeListener(): com.telerik.widget.primitives.legend.LegendSelectableListener;
								public getCollectionIndex(): number;
								public onPointRemoved(param0: number, param1: com.telerik.widget.chart.engine.dataPoints.DataPoint): void;
								public setSelectedChangeListener(param0: com.telerik.widget.primitives.legend.LegendSelectableListener): void;
								public setSlowPeriod(param0: number): void;
								public getIsSelected(): boolean;
								public onPointAdded(param0: number, param1: com.telerik.widget.chart.engine.dataPoints.DataPoint): void;
								public measureContent(param0: com.telerik.widget.chart.engine.elementTree.ChartNode, param1: any): com.telerik.android.common.math.RadSize;
								public getSlowPeriod(): number;
							}
						}
					}
				}
			}
		}
	}
}

declare module com {
	export module telerik {
		export module widget {
			export module chart {
				export module visualization {
					export module cartesianChart {
						export module indicators {
							export class AverageTrueRangeIndicator extends com.telerik.widget.chart.visualization.cartesianChart.indicators.HighLowClosePeriodIndicatorBase {
								public static class: java.lang.Class<com.telerik.widget.chart.visualization.cartesianChart.indicators.AverageTrueRangeIndicator>;
								public toString(): string;
								public onDataPointIsSelectedChanged(param0: com.telerik.widget.chart.engine.dataPoints.DataPoint): void;
								public createDataSourceInstance(): com.telerik.widget.chart.engine.databinding.datasources.ChartSeriesDataSource;
								public onBoundItemPropertyChanged(param0: com.telerik.widget.chart.engine.databinding.DataPointBindingEntry, param1: java.beans.PropertyChangeEvent): void;
								public refreshNode(param0: com.telerik.widget.chart.engine.elementTree.ChartNode): void;
								public invalidatePalette(): void;
								public constructor();
								public onPaletteUpdated(param0: com.telerik.widget.palettes.ChartPalette): void;
								public setIsSelected(param0: boolean): void;
								public onDataBindingComplete(): void;
								public getSelectedChangeListener(): com.telerik.widget.primitives.legend.LegendSelectableListener;
								public getCollectionIndex(): number;
								public onPointRemoved(param0: number, param1: com.telerik.widget.chart.engine.dataPoints.DataPoint): void;
								public setSelectedChangeListener(param0: com.telerik.widget.primitives.legend.LegendSelectableListener): void;
								public getIsSelected(): boolean;
								public onPointAdded(param0: number, param1: com.telerik.widget.chart.engine.dataPoints.DataPoint): void;
								public measureContent(param0: com.telerik.widget.chart.engine.elementTree.ChartNode, param1: any): com.telerik.android.common.math.RadSize;
							}
						}
					}
				}
			}
		}
	}
}

declare module com {
	export module telerik {
		export module widget {
			export module chart {
				export module visualization {
					export module cartesianChart {
						export module indicators {
							export abstract class BarIndicatorBase extends com.telerik.widget.chart.visualization.cartesianChart.indicators.ValueIndicatorBase {
								public static class: java.lang.Class<com.telerik.widget.chart.visualization.cartesianChart.indicators.BarIndicatorBase>;
								public onDataPointIsSelectedChanged(param0: com.telerik.widget.chart.engine.dataPoints.DataPoint): void;
								public onBoundItemPropertyChanged(param0: com.telerik.widget.chart.engine.databinding.DataPointBindingEntry, param1: java.beans.PropertyChangeEvent): void;
								public refreshNode(param0: com.telerik.widget.chart.engine.elementTree.ChartNode): void;
								public invalidatePalette(): void;
								public constructor();
								public onPaletteUpdated(param0: com.telerik.widget.palettes.ChartPalette): void;
								public setIsSelected(param0: boolean): void;
								public onDataBindingComplete(): void;
								public getSelectedChangeListener(): com.telerik.widget.primitives.legend.LegendSelectableListener;
								public getCollectionIndex(): number;
								public onPointRemoved(param0: number, param1: com.telerik.widget.chart.engine.dataPoints.DataPoint): void;
								public setSelectedChangeListener(param0: com.telerik.widget.primitives.legend.LegendSelectableListener): void;
								public realizedDataPoints(): java.util.List<globalAndroid.view.View>;
								public getIsSelected(): boolean;
								public onPointAdded(param0: number, param1: com.telerik.widget.chart.engine.dataPoints.DataPoint): void;
								public measureContent(param0: com.telerik.widget.chart.engine.elementTree.ChartNode, param1: any): com.telerik.android.common.math.RadSize;
							}
						}
					}
				}
			}
		}
	}
}

declare module com {
	export module telerik {
		export module widget {
			export module chart {
				export module visualization {
					export module cartesianChart {
						export module indicators {
							export class BollingerBandsIndicator extends com.telerik.widget.chart.visualization.cartesianChart.indicators.ValuePeriodIndicatorBase {
								public static class: java.lang.Class<com.telerik.widget.chart.visualization.cartesianChart.indicators.BollingerBandsIndicator>;
								public standardDeviations: number;
								public lowerBandRenderer: com.telerik.widget.chart.visualization.common.renderers.LineRenderer;
								public elements: java.util.List<com.telerik.widget.chart.engine.elementTree.ChartElement>;
								public getLowerBandStrokeWidth(): number;
								public toString(): string;
								public onDataPointIsSelectedChanged(param0: com.telerik.widget.chart.engine.dataPoints.DataPoint): void;
								public createDataSourceInstance(): com.telerik.widget.chart.engine.databinding.datasources.ChartSeriesDataSource;
								public refreshNode(param0: com.telerik.widget.chart.engine.elementTree.ChartNode): void;
								public onPaletteUpdated(param0: com.telerik.widget.palettes.ChartPalette): void;
								public setIsSelected(param0: boolean): void;
								public onDataBindingComplete(): void;
								public getCollectionIndex(): number;
								public drawCore(param0: globalAndroid.graphics.Canvas): void;
								public onChartAxisChanged(param0: com.telerik.widget.chart.visualization.common.Axis, param1: com.telerik.widget.chart.visualization.common.Axis): void;
								public updateUICore(param0: com.telerik.widget.chart.visualization.common.ChartLayoutContext): void;
								public getIsSelected(): boolean;
								public onPointAdded(param0: number, param1: com.telerik.widget.chart.engine.dataPoints.DataPoint): void;
								public measureContent(param0: com.telerik.widget.chart.engine.elementTree.ChartNode, param1: any): com.telerik.android.common.math.RadSize;
								public applyPaletteCore(param0: com.telerik.widget.palettes.ChartPalette): void;
								public getStandardDeviations(): number;
								public onBoundItemPropertyChanged(param0: com.telerik.widget.chart.engine.databinding.DataPointBindingEntry, param1: java.beans.PropertyChangeEvent): void;
								public invalidatePalette(): void;
								public constructor();
								public lowerBandDataPoints(): com.telerik.widget.chart.engine.dataPoints.DataPointCollection<com.telerik.widget.chart.engine.dataPoints.CategoricalDataPoint>;
								public onAttached(): void;
								public getSelectedChangeListener(): com.telerik.widget.primitives.legend.LegendSelectableListener;
								public onPointRemoved(param0: number, param1: com.telerik.widget.chart.engine.dataPoints.DataPoint): void;
								public setSelectedChangeListener(param0: com.telerik.widget.primitives.legend.LegendSelectableListener): void;
								public onDetached(param0: com.telerik.widget.chart.visualization.common.RadChartViewBase<any>): void;
								public onModelAttached(): void;
								public getLowerBandStrokeColor(): number;
								public setStandardDeviations(param0: number): void;
								public lowerBandModel(): com.telerik.widget.chart.engine.series.ChartSeriesModel<any>;
								public setLowerBandStrokeColor(param0: number): void;
								public setLowerBandStrokeWidth(param0: number): void;
							}
						}
					}
				}
			}
		}
	}
}

declare module com {
	export module telerik {
		export module widget {
			export module chart {
				export module visualization {
					export module cartesianChart {
						export module indicators {
							export class CommodityChannelIndexIndicator extends com.telerik.widget.chart.visualization.cartesianChart.indicators.HighLowClosePeriodIndicatorBase {
								public static class: java.lang.Class<com.telerik.widget.chart.visualization.cartesianChart.indicators.CommodityChannelIndexIndicator>;
								public toString(): string;
								public onDataPointIsSelectedChanged(param0: com.telerik.widget.chart.engine.dataPoints.DataPoint): void;
								public createDataSourceInstance(): com.telerik.widget.chart.engine.databinding.datasources.ChartSeriesDataSource;
								public onBoundItemPropertyChanged(param0: com.telerik.widget.chart.engine.databinding.DataPointBindingEntry, param1: java.beans.PropertyChangeEvent): void;
								public refreshNode(param0: com.telerik.widget.chart.engine.elementTree.ChartNode): void;
								public invalidatePalette(): void;
								public constructor();
								public onPaletteUpdated(param0: com.telerik.widget.palettes.ChartPalette): void;
								public setIsSelected(param0: boolean): void;
								public onDataBindingComplete(): void;
								public getSelectedChangeListener(): com.telerik.widget.primitives.legend.LegendSelectableListener;
								public getCollectionIndex(): number;
								public onPointRemoved(param0: number, param1: com.telerik.widget.chart.engine.dataPoints.DataPoint): void;
								public setSelectedChangeListener(param0: com.telerik.widget.primitives.legend.LegendSelectableListener): void;
								public getIsSelected(): boolean;
								public onPointAdded(param0: number, param1: com.telerik.widget.chart.engine.dataPoints.DataPoint): void;
								public measureContent(param0: com.telerik.widget.chart.engine.elementTree.ChartNode, param1: any): com.telerik.android.common.math.RadSize;
							}
						}
					}
				}
			}
		}
	}
}

declare module com {
	export module telerik {
		export module widget {
			export module chart {
				export module visualization {
					export module cartesianChart {
						export module indicators {
							export class ExponentialMovingAverageIndicator extends com.telerik.widget.chart.visualization.cartesianChart.indicators.ValuePeriodIndicatorBase {
								public static class: java.lang.Class<com.telerik.widget.chart.visualization.cartesianChart.indicators.ExponentialMovingAverageIndicator>;
								public toString(): string;
								public onDataPointIsSelectedChanged(param0: com.telerik.widget.chart.engine.dataPoints.DataPoint): void;
								public createDataSourceInstance(): com.telerik.widget.chart.engine.databinding.datasources.ChartSeriesDataSource;
								public onBoundItemPropertyChanged(param0: com.telerik.widget.chart.engine.databinding.DataPointBindingEntry, param1: java.beans.PropertyChangeEvent): void;
								public refreshNode(param0: com.telerik.widget.chart.engine.elementTree.ChartNode): void;
								public invalidatePalette(): void;
								public constructor();
								public onPaletteUpdated(param0: com.telerik.widget.palettes.ChartPalette): void;
								public setIsSelected(param0: boolean): void;
								public onDataBindingComplete(): void;
								public getSelectedChangeListener(): com.telerik.widget.primitives.legend.LegendSelectableListener;
								public getCollectionIndex(): number;
								public onPointRemoved(param0: number, param1: com.telerik.widget.chart.engine.dataPoints.DataPoint): void;
								public setSelectedChangeListener(param0: com.telerik.widget.primitives.legend.LegendSelectableListener): void;
								public getIsSelected(): boolean;
								public onPointAdded(param0: number, param1: com.telerik.widget.chart.engine.dataPoints.DataPoint): void;
								public measureContent(param0: com.telerik.widget.chart.engine.elementTree.ChartNode, param1: any): com.telerik.android.common.math.RadSize;
							}
						}
					}
				}
			}
		}
	}
}

declare module com {
	export module telerik {
		export module widget {
			export module chart {
				export module visualization {
					export module cartesianChart {
						export module indicators {
							export abstract class HighLowCloseIndicatorBase extends com.telerik.widget.chart.visualization.cartesianChart.indicators.HighLowIndicatorBase {
								public static class: java.lang.Class<com.telerik.widget.chart.visualization.cartesianChart.indicators.HighLowCloseIndicatorBase>;
								public onDataPointIsSelectedChanged(param0: com.telerik.widget.chart.engine.dataPoints.DataPoint): void;
								public onBoundItemPropertyChanged(param0: com.telerik.widget.chart.engine.databinding.DataPointBindingEntry, param1: java.beans.PropertyChangeEvent): void;
								public refreshNode(param0: com.telerik.widget.chart.engine.elementTree.ChartNode): void;
								public initDataBinding(): void;
								public invalidatePalette(): void;
								public constructor();
								public onPaletteUpdated(param0: com.telerik.widget.palettes.ChartPalette): void;
								public setIsSelected(param0: boolean): void;
								public onDataBindingComplete(): void;
								public getSelectedChangeListener(): com.telerik.widget.primitives.legend.LegendSelectableListener;
								public getCollectionIndex(): number;
								public onPointRemoved(param0: number, param1: com.telerik.widget.chart.engine.dataPoints.DataPoint): void;
								public setSelectedChangeListener(param0: com.telerik.widget.primitives.legend.LegendSelectableListener): void;
								public getCloseBinding(): com.telerik.widget.chart.engine.databinding.DataPointBinding;
								public setCloseBinding(param0: com.telerik.widget.chart.engine.databinding.DataPointBinding): void;
								public getIsSelected(): boolean;
								public onPointAdded(param0: number, param1: com.telerik.widget.chart.engine.dataPoints.DataPoint): void;
								public measureContent(param0: com.telerik.widget.chart.engine.elementTree.ChartNode, param1: any): com.telerik.android.common.math.RadSize;
							}
						}
					}
				}
			}
		}
	}
}

declare module com {
	export module telerik {
		export module widget {
			export module chart {
				export module visualization {
					export module cartesianChart {
						export module indicators {
							export abstract class HighLowClosePeriodIndicatorBase extends com.telerik.widget.chart.visualization.cartesianChart.indicators.HighLowCloseIndicatorBase {
								public static class: java.lang.Class<com.telerik.widget.chart.visualization.cartesianChart.indicators.HighLowClosePeriodIndicatorBase>;
								public period: number;
								public onDataPointIsSelectedChanged(param0: com.telerik.widget.chart.engine.dataPoints.DataPoint): void;
								public onBoundItemPropertyChanged(param0: com.telerik.widget.chart.engine.databinding.DataPointBindingEntry, param1: java.beans.PropertyChangeEvent): void;
								public refreshNode(param0: com.telerik.widget.chart.engine.elementTree.ChartNode): void;
								public invalidatePalette(): void;
								public constructor();
								public onPaletteUpdated(param0: com.telerik.widget.palettes.ChartPalette): void;
								public getPeriod(): number;
								public setIsSelected(param0: boolean): void;
								public onDataBindingComplete(): void;
								public getSelectedChangeListener(): com.telerik.widget.primitives.legend.LegendSelectableListener;
								public getCollectionIndex(): number;
								public onPointRemoved(param0: number, param1: com.telerik.widget.chart.engine.dataPoints.DataPoint): void;
								public setSelectedChangeListener(param0: com.telerik.widget.primitives.legend.LegendSelectableListener): void;
								public getIsSelected(): boolean;
								public onPointAdded(param0: number, param1: com.telerik.widget.chart.engine.dataPoints.DataPoint): void;
								public measureContent(param0: com.telerik.widget.chart.engine.elementTree.ChartNode, param1: any): com.telerik.android.common.math.RadSize;
								public setPeriod(param0: number): void;
							}
						}
					}
				}
			}
		}
	}
}

declare module com {
	export module telerik {
		export module widget {
			export module chart {
				export module visualization {
					export module cartesianChart {
						export module indicators {
							export abstract class HighLowIndicatorBase extends com.telerik.widget.chart.visualization.cartesianChart.indicators.LineIndicatorBase {
								public static class: java.lang.Class<com.telerik.widget.chart.visualization.cartesianChart.indicators.HighLowIndicatorBase>;
								public onDataPointIsSelectedChanged(param0: com.telerik.widget.chart.engine.dataPoints.DataPoint): void;
								public getHighBinding(): com.telerik.widget.chart.engine.databinding.DataPointBinding;
								public onBoundItemPropertyChanged(param0: com.telerik.widget.chart.engine.databinding.DataPointBindingEntry, param1: java.beans.PropertyChangeEvent): void;
								public refreshNode(param0: com.telerik.widget.chart.engine.elementTree.ChartNode): void;
								public getLowBinding(): com.telerik.widget.chart.engine.databinding.DataPointBinding;
								public initDataBinding(): void;
								public invalidatePalette(): void;
								public constructor();
								public onPaletteUpdated(param0: com.telerik.widget.palettes.ChartPalette): void;
								public setIsSelected(param0: boolean): void;
								public onDataBindingComplete(): void;
								public getSelectedChangeListener(): com.telerik.widget.primitives.legend.LegendSelectableListener;
								public getCollectionIndex(): number;
								public onPointRemoved(param0: number, param1: com.telerik.widget.chart.engine.dataPoints.DataPoint): void;
								public setSelectedChangeListener(param0: com.telerik.widget.primitives.legend.LegendSelectableListener): void;
								public setLowBinding(param0: com.telerik.widget.chart.engine.databinding.DataPointBinding): void;
								public getIsSelected(): boolean;
								public onPointAdded(param0: number, param1: com.telerik.widget.chart.engine.dataPoints.DataPoint): void;
								public measureContent(param0: com.telerik.widget.chart.engine.elementTree.ChartNode, param1: any): com.telerik.android.common.math.RadSize;
								public setHighBinding(param0: com.telerik.widget.chart.engine.databinding.DataPointBinding): void;
							}
						}
					}
				}
			}
		}
	}
}

declare module com {
	export module telerik {
		export module widget {
			export module chart {
				export module visualization {
					export module cartesianChart {
						export module indicators {
							export abstract class IndicatorBase extends com.telerik.widget.chart.visualization.cartesianChart.series.CartesianSeries {
								public static class: java.lang.Class<com.telerik.widget.chart.visualization.cartesianChart.indicators.IndicatorBase>;
								public static FINANCIAL_INDICATOR_Z_INDEX: number;
								public categoryBinding: com.telerik.widget.chart.engine.databinding.DataPointBinding;
								public onDataPointIsSelectedChanged(param0: com.telerik.widget.chart.engine.dataPoints.DataPoint): void;
								public createDataSourceInstance(): com.telerik.widget.chart.engine.databinding.datasources.ChartSeriesDataSource;
								public refreshNode(param0: com.telerik.widget.chart.engine.elementTree.ChartNode): void;
								public initDataBinding(): void;
								public onPaletteUpdated(param0: com.telerik.widget.palettes.ChartPalette): void;
								public setIsSelected(param0: boolean): void;
								public onDataBindingComplete(): void;
								public getCollectionIndex(): number;
								public createModel(): com.telerik.widget.chart.engine.series.ChartSeriesModel<any>;
								public createIndicatorModel(): com.telerik.widget.chart.engine.series.CategoricalSeriesModel;
								public onChartAxisChanged(param0: com.telerik.widget.chart.visualization.common.Axis, param1: com.telerik.widget.chart.visualization.common.Axis): void;
								public getIsSelected(): boolean;
								public onPointAdded(param0: number, param1: com.telerik.widget.chart.engine.dataPoints.DataPoint): void;
								public measureContent(param0: com.telerik.widget.chart.engine.elementTree.ChartNode, param1: any): com.telerik.android.common.math.RadSize;
								public createLabelRenderer(): com.telerik.widget.chart.visualization.common.renderers.BaseLabelRenderer;
								public setCategoryBinding(param0: com.telerik.widget.chart.engine.databinding.DataPointBinding): void;
								public model(): com.telerik.widget.chart.engine.series.ChartSeriesModel<any>;
								public getDefaultZIndex(): number;
								public onBoundItemPropertyChanged(param0: com.telerik.widget.chart.engine.databinding.DataPointBindingEntry, param1: java.beans.PropertyChangeEvent): void;
								public invalidatePalette(): void;
								public constructor();
								public getDataPoints(): com.telerik.widget.chart.engine.dataPoints.DataPointCollection<com.telerik.widget.chart.engine.dataPoints.CategoricalDataPoint>;
								public onAttached(): void;
								public getSelectedChangeListener(): com.telerik.widget.primitives.legend.LegendSelectableListener;
								public onPointRemoved(param0: number, param1: com.telerik.widget.chart.engine.dataPoints.DataPoint): void;
								public setSelectedChangeListener(param0: com.telerik.widget.primitives.legend.LegendSelectableListener): void;
								public onDetached(param0: com.telerik.widget.chart.visualization.common.RadChartViewBase<any>): void;
								public getCategoryBinding(): com.telerik.widget.chart.engine.databinding.DataPointBinding;
							}
						}
					}
				}
			}
		}
	}
}

declare module com {
	export module telerik {
		export module widget {
			export module chart {
				export module visualization {
					export module cartesianChart {
						export module indicators {
							export abstract class LineIndicatorBase extends com.telerik.widget.chart.visualization.cartesianChart.indicators.IndicatorBase {
								public static class: java.lang.Class<com.telerik.widget.chart.visualization.cartesianChart.indicators.LineIndicatorBase>;
								public onDataPointIsSelectedChanged(param0: com.telerik.widget.chart.engine.dataPoints.DataPoint): void;
								public refreshNode(param0: com.telerik.widget.chart.engine.elementTree.ChartNode): void;
								public getDashArray(): native.Array<number>;
								public onPaletteUpdated(param0: com.telerik.widget.palettes.ChartPalette): void;
								public setStrokeColor(param0: number): void;
								public getLegendFillColor(): number;
								public setIsSelected(param0: boolean): void;
								public onDataBindingComplete(): void;
								public getStrokeColor(): number;
								public getCollectionIndex(): number;
								public drawCore(param0: globalAndroid.graphics.Canvas): void;
								public getRenderer(): com.telerik.widget.chart.visualization.common.renderers.LineRenderer;
								public updateUICore(param0: com.telerik.widget.chart.visualization.common.ChartLayoutContext): void;
								public setStrokeThickness(param0: number): void;
								public getIsSelected(): boolean;
								public onPointAdded(param0: number, param1: com.telerik.widget.chart.engine.dataPoints.DataPoint): void;
								public measureContent(param0: com.telerik.widget.chart.engine.elementTree.ChartNode, param1: any): com.telerik.android.common.math.RadSize;
								public getLegendStrokeColor(): number;
								public applyPaletteCore(param0: com.telerik.widget.palettes.ChartPalette): void;
								public createRenderer(): com.telerik.widget.chart.visualization.common.renderers.LineRenderer;
								public onBoundItemPropertyChanged(param0: com.telerik.widget.chart.engine.databinding.DataPointBindingEntry, param1: java.beans.PropertyChangeEvent): void;
								public defaultPaletteFamily(): string;
								public getStrokeThickness(): number;
								public invalidatePalette(): void;
								public constructor();
								public onAttached(): void;
								public getSelectedChangeListener(): com.telerik.widget.primitives.legend.LegendSelectableListener;
								public onPointRemoved(param0: number, param1: com.telerik.widget.chart.engine.dataPoints.DataPoint): void;
								public setSelectedChangeListener(param0: com.telerik.widget.primitives.legend.LegendSelectableListener): void;
								public onDetached(param0: com.telerik.widget.chart.visualization.common.RadChartViewBase<any>): void;
								public setDashArray(param0: native.Array<number>): void;
							}
						}
					}
				}
			}
		}
	}
}

declare module com {
	export module telerik {
		export module widget {
			export module chart {
				export module visualization {
					export module cartesianChart {
						export module indicators {
							export class MacdIndicator extends com.telerik.widget.chart.visualization.cartesianChart.indicators.ShortLongPeriodIndicatorBase {
								public static class: java.lang.Class<com.telerik.widget.chart.visualization.cartesianChart.indicators.MacdIndicator>;
								public toString(): string;
								public onDataPointIsSelectedChanged(param0: com.telerik.widget.chart.engine.dataPoints.DataPoint): void;
								public signalModel(): com.telerik.widget.chart.engine.series.ChartSeriesModel<any>;
								public createDataSourceInstance(): com.telerik.widget.chart.engine.databinding.datasources.ChartSeriesDataSource;
								public refreshNode(param0: com.telerik.widget.chart.engine.elementTree.ChartNode): void;
								public setSignalPeriod(param0: number): void;
								public onPaletteUpdated(param0: com.telerik.widget.palettes.ChartPalette): void;
								public setStrokeColor(param0: number): void;
								public setIsSelected(param0: boolean): void;
								public onDataBindingComplete(): void;
								public getStrokeColor(): number;
								public getCollectionIndex(): number;
								public drawCore(param0: globalAndroid.graphics.Canvas): void;
								public onChartAxisChanged(param0: com.telerik.widget.chart.visualization.common.Axis, param1: com.telerik.widget.chart.visualization.common.Axis): void;
								public updateUICore(param0: com.telerik.widget.chart.visualization.common.ChartLayoutContext): void;
								public setStrokeThickness(param0: number): void;
								public getIsSelected(): boolean;
								public onPointAdded(param0: number, param1: com.telerik.widget.chart.engine.dataPoints.DataPoint): void;
								public measureContent(param0: com.telerik.widget.chart.engine.elementTree.ChartNode, param1: any): com.telerik.android.common.math.RadSize;
								public getSignalPeriod(): number;
								public createLabelRenderer(): com.telerik.widget.chart.visualization.common.renderers.BaseLabelRenderer;
								public applyPaletteCore(param0: com.telerik.widget.palettes.ChartPalette): void;
								public createRenderer(): com.telerik.widget.chart.visualization.common.renderers.LineRenderer;
								public setSignalPaint(param0: globalAndroid.graphics.Paint): void;
								public onBoundItemPropertyChanged(param0: com.telerik.widget.chart.engine.databinding.DataPointBindingEntry, param1: java.beans.PropertyChangeEvent): void;
								public getStrokeThickness(): number;
								public invalidatePalette(): void;
								public constructor();
								public getSignalPaint(): globalAndroid.graphics.Paint;
								public getSelectedChangeListener(): com.telerik.widget.primitives.legend.LegendSelectableListener;
								public onPointRemoved(param0: number, param1: com.telerik.widget.chart.engine.dataPoints.DataPoint): void;
								public setSelectedChangeListener(param0: com.telerik.widget.primitives.legend.LegendSelectableListener): void;
								public onDetached(param0: com.telerik.widget.chart.visualization.common.RadChartViewBase<any>): void;
								public onModelAttached(): void;
								public signalDataPoints(): com.telerik.widget.chart.engine.dataPoints.DataPointCollection<com.telerik.widget.chart.engine.dataPoints.CategoricalDataPointBase>;
							}
						}
					}
				}
			}
		}
	}
}

declare module com {
	export module telerik {
		export module widget {
			export module chart {
				export module visualization {
					export module cartesianChart {
						export module indicators {
							export class ModifiedExponentialMovingAverageIndicator extends com.telerik.widget.chart.visualization.cartesianChart.indicators.ExponentialMovingAverageIndicator {
								public static class: java.lang.Class<com.telerik.widget.chart.visualization.cartesianChart.indicators.ModifiedExponentialMovingAverageIndicator>;
								public toString(): string;
								public onDataPointIsSelectedChanged(param0: com.telerik.widget.chart.engine.dataPoints.DataPoint): void;
								public createDataSourceInstance(): com.telerik.widget.chart.engine.databinding.datasources.ChartSeriesDataSource;
								public onBoundItemPropertyChanged(param0: com.telerik.widget.chart.engine.databinding.DataPointBindingEntry, param1: java.beans.PropertyChangeEvent): void;
								public refreshNode(param0: com.telerik.widget.chart.engine.elementTree.ChartNode): void;
								public invalidatePalette(): void;
								public constructor();
								public onPaletteUpdated(param0: com.telerik.widget.palettes.ChartPalette): void;
								public setIsSelected(param0: boolean): void;
								public onDataBindingComplete(): void;
								public getSelectedChangeListener(): com.telerik.widget.primitives.legend.LegendSelectableListener;
								public getCollectionIndex(): number;
								public onPointRemoved(param0: number, param1: com.telerik.widget.chart.engine.dataPoints.DataPoint): void;
								public setSelectedChangeListener(param0: com.telerik.widget.primitives.legend.LegendSelectableListener): void;
								public getIsSelected(): boolean;
								public onPointAdded(param0: number, param1: com.telerik.widget.chart.engine.dataPoints.DataPoint): void;
								public measureContent(param0: com.telerik.widget.chart.engine.elementTree.ChartNode, param1: any): com.telerik.android.common.math.RadSize;
							}
						}
					}
				}
			}
		}
	}
}

declare module com {
	export module telerik {
		export module widget {
			export module chart {
				export module visualization {
					export module cartesianChart {
						export module indicators {
							export class ModifiedMovingAverageIndicator extends com.telerik.widget.chart.visualization.cartesianChart.indicators.ValuePeriodIndicatorBase {
								public static class: java.lang.Class<com.telerik.widget.chart.visualization.cartesianChart.indicators.ModifiedMovingAverageIndicator>;
								public toString(): string;
								public onDataPointIsSelectedChanged(param0: com.telerik.widget.chart.engine.dataPoints.DataPoint): void;
								public createDataSourceInstance(): com.telerik.widget.chart.engine.databinding.datasources.ChartSeriesDataSource;
								public onBoundItemPropertyChanged(param0: com.telerik.widget.chart.engine.databinding.DataPointBindingEntry, param1: java.beans.PropertyChangeEvent): void;
								public refreshNode(param0: com.telerik.widget.chart.engine.elementTree.ChartNode): void;
								public invalidatePalette(): void;
								public constructor();
								public onPaletteUpdated(param0: com.telerik.widget.palettes.ChartPalette): void;
								public setIsSelected(param0: boolean): void;
								public onDataBindingComplete(): void;
								public getSelectedChangeListener(): com.telerik.widget.primitives.legend.LegendSelectableListener;
								public getCollectionIndex(): number;
								public onPointRemoved(param0: number, param1: com.telerik.widget.chart.engine.dataPoints.DataPoint): void;
								public setSelectedChangeListener(param0: com.telerik.widget.primitives.legend.LegendSelectableListener): void;
								public getIsSelected(): boolean;
								public onPointAdded(param0: number, param1: com.telerik.widget.chart.engine.dataPoints.DataPoint): void;
								public measureContent(param0: com.telerik.widget.chart.engine.elementTree.ChartNode, param1: any): com.telerik.android.common.math.RadSize;
							}
						}
					}
				}
			}
		}
	}
}

declare module com {
	export module telerik {
		export module widget {
			export module chart {
				export module visualization {
					export module cartesianChart {
						export module indicators {
							export class MomentumIndicator extends com.telerik.widget.chart.visualization.cartesianChart.indicators.ValuePeriodIndicatorBase {
								public static class: java.lang.Class<com.telerik.widget.chart.visualization.cartesianChart.indicators.MomentumIndicator>;
								public toString(): string;
								public onDataPointIsSelectedChanged(param0: com.telerik.widget.chart.engine.dataPoints.DataPoint): void;
								public createDataSourceInstance(): com.telerik.widget.chart.engine.databinding.datasources.ChartSeriesDataSource;
								public onBoundItemPropertyChanged(param0: com.telerik.widget.chart.engine.databinding.DataPointBindingEntry, param1: java.beans.PropertyChangeEvent): void;
								public refreshNode(param0: com.telerik.widget.chart.engine.elementTree.ChartNode): void;
								public invalidatePalette(): void;
								public constructor();
								public onPaletteUpdated(param0: com.telerik.widget.palettes.ChartPalette): void;
								public setIsSelected(param0: boolean): void;
								public onDataBindingComplete(): void;
								public getSelectedChangeListener(): com.telerik.widget.primitives.legend.LegendSelectableListener;
								public getCollectionIndex(): number;
								public onPointRemoved(param0: number, param1: com.telerik.widget.chart.engine.dataPoints.DataPoint): void;
								public setSelectedChangeListener(param0: com.telerik.widget.primitives.legend.LegendSelectableListener): void;
								public getIsSelected(): boolean;
								public onPointAdded(param0: number, param1: com.telerik.widget.chart.engine.dataPoints.DataPoint): void;
								public measureContent(param0: com.telerik.widget.chart.engine.elementTree.ChartNode, param1: any): com.telerik.android.common.math.RadSize;
							}
						}
					}
				}
			}
		}
	}
}

declare module com {
	export module telerik {
		export module widget {
			export module chart {
				export module visualization {
					export module cartesianChart {
						export module indicators {
							export class MovingAverageIndicator extends com.telerik.widget.chart.visualization.cartesianChart.indicators.ValuePeriodIndicatorBase {
								public static class: java.lang.Class<com.telerik.widget.chart.visualization.cartesianChart.indicators.MovingAverageIndicator>;
								public toString(): string;
								public onDataPointIsSelectedChanged(param0: com.telerik.widget.chart.engine.dataPoints.DataPoint): void;
								public createDataSourceInstance(): com.telerik.widget.chart.engine.databinding.datasources.ChartSeriesDataSource;
								public onBoundItemPropertyChanged(param0: com.telerik.widget.chart.engine.databinding.DataPointBindingEntry, param1: java.beans.PropertyChangeEvent): void;
								public refreshNode(param0: com.telerik.widget.chart.engine.elementTree.ChartNode): void;
								public invalidatePalette(): void;
								public constructor();
								public onPaletteUpdated(param0: com.telerik.widget.palettes.ChartPalette): void;
								public setIsSelected(param0: boolean): void;
								public onDataBindingComplete(): void;
								public getSelectedChangeListener(): com.telerik.widget.primitives.legend.LegendSelectableListener;
								public getCollectionIndex(): number;
								public onPointRemoved(param0: number, param1: com.telerik.widget.chart.engine.dataPoints.DataPoint): void;
								public setSelectedChangeListener(param0: com.telerik.widget.primitives.legend.LegendSelectableListener): void;
								public getIsSelected(): boolean;
								public onPointAdded(param0: number, param1: com.telerik.widget.chart.engine.dataPoints.DataPoint): void;
								public measureContent(param0: com.telerik.widget.chart.engine.elementTree.ChartNode, param1: any): com.telerik.android.common.math.RadSize;
							}
						}
					}
				}
			}
		}
	}
}

declare module com {
	export module telerik {
		export module widget {
			export module chart {
				export module visualization {
					export module cartesianChart {
						export module indicators {
							export class OscillatorIndicator extends com.telerik.widget.chart.visualization.cartesianChart.indicators.ShortLongPeriodIndicatorBase {
								public static class: java.lang.Class<com.telerik.widget.chart.visualization.cartesianChart.indicators.OscillatorIndicator>;
								public toString(): string;
								public onDataPointIsSelectedChanged(param0: com.telerik.widget.chart.engine.dataPoints.DataPoint): void;
								public createDataSourceInstance(): com.telerik.widget.chart.engine.databinding.datasources.ChartSeriesDataSource;
								public onBoundItemPropertyChanged(param0: com.telerik.widget.chart.engine.databinding.DataPointBindingEntry, param1: java.beans.PropertyChangeEvent): void;
								public refreshNode(param0: com.telerik.widget.chart.engine.elementTree.ChartNode): void;
								public invalidatePalette(): void;
								public constructor();
								public onPaletteUpdated(param0: com.telerik.widget.palettes.ChartPalette): void;
								public setIsSelected(param0: boolean): void;
								public onDataBindingComplete(): void;
								public getSelectedChangeListener(): com.telerik.widget.primitives.legend.LegendSelectableListener;
								public getCollectionIndex(): number;
								public onPointRemoved(param0: number, param1: com.telerik.widget.chart.engine.dataPoints.DataPoint): void;
								public setSelectedChangeListener(param0: com.telerik.widget.primitives.legend.LegendSelectableListener): void;
								public getIsSelected(): boolean;
								public onPointAdded(param0: number, param1: com.telerik.widget.chart.engine.dataPoints.DataPoint): void;
								public measureContent(param0: com.telerik.widget.chart.engine.elementTree.ChartNode, param1: any): com.telerik.android.common.math.RadSize;
							}
						}
					}
				}
			}
		}
	}
}

declare module com {
	export module telerik {
		export module widget {
			export module chart {
				export module visualization {
					export module cartesianChart {
						export module indicators {
							export class RateOfChangeIndicator extends com.telerik.widget.chart.visualization.cartesianChart.indicators.MomentumIndicator {
								public static class: java.lang.Class<com.telerik.widget.chart.visualization.cartesianChart.indicators.RateOfChangeIndicator>;
								public toString(): string;
								public onDataPointIsSelectedChanged(param0: com.telerik.widget.chart.engine.dataPoints.DataPoint): void;
								public createDataSourceInstance(): com.telerik.widget.chart.engine.databinding.datasources.ChartSeriesDataSource;
								public onBoundItemPropertyChanged(param0: com.telerik.widget.chart.engine.databinding.DataPointBindingEntry, param1: java.beans.PropertyChangeEvent): void;
								public refreshNode(param0: com.telerik.widget.chart.engine.elementTree.ChartNode): void;
								public invalidatePalette(): void;
								public constructor();
								public onPaletteUpdated(param0: com.telerik.widget.palettes.ChartPalette): void;
								public setIsSelected(param0: boolean): void;
								public onDataBindingComplete(): void;
								public getSelectedChangeListener(): com.telerik.widget.primitives.legend.LegendSelectableListener;
								public getCollectionIndex(): number;
								public onPointRemoved(param0: number, param1: com.telerik.widget.chart.engine.dataPoints.DataPoint): void;
								public setSelectedChangeListener(param0: com.telerik.widget.primitives.legend.LegendSelectableListener): void;
								public getIsSelected(): boolean;
								public onPointAdded(param0: number, param1: com.telerik.widget.chart.engine.dataPoints.DataPoint): void;
								public measureContent(param0: com.telerik.widget.chart.engine.elementTree.ChartNode, param1: any): com.telerik.android.common.math.RadSize;
							}
						}
					}
				}
			}
		}
	}
}

declare module com {
	export module telerik {
		export module widget {
			export module chart {
				export module visualization {
					export module cartesianChart {
						export module indicators {
							export class RaviIndicator extends com.telerik.widget.chart.visualization.cartesianChart.indicators.ShortLongPeriodIndicatorBase {
								public static class: java.lang.Class<com.telerik.widget.chart.visualization.cartesianChart.indicators.RaviIndicator>;
								public toString(): string;
								public onDataPointIsSelectedChanged(param0: com.telerik.widget.chart.engine.dataPoints.DataPoint): void;
								public createDataSourceInstance(): com.telerik.widget.chart.engine.databinding.datasources.ChartSeriesDataSource;
								public onBoundItemPropertyChanged(param0: com.telerik.widget.chart.engine.databinding.DataPointBindingEntry, param1: java.beans.PropertyChangeEvent): void;
								public refreshNode(param0: com.telerik.widget.chart.engine.elementTree.ChartNode): void;
								public invalidatePalette(): void;
								public constructor();
								public onPaletteUpdated(param0: com.telerik.widget.palettes.ChartPalette): void;
								public setIsSelected(param0: boolean): void;
								public onDataBindingComplete(): void;
								public getSelectedChangeListener(): com.telerik.widget.primitives.legend.LegendSelectableListener;
								public getCollectionIndex(): number;
								public onPointRemoved(param0: number, param1: com.telerik.widget.chart.engine.dataPoints.DataPoint): void;
								public setSelectedChangeListener(param0: com.telerik.widget.primitives.legend.LegendSelectableListener): void;
								public getIsSelected(): boolean;
								public onPointAdded(param0: number, param1: com.telerik.widget.chart.engine.dataPoints.DataPoint): void;
								public measureContent(param0: com.telerik.widget.chart.engine.elementTree.ChartNode, param1: any): com.telerik.android.common.math.RadSize;
							}
						}
					}
				}
			}
		}
	}
}

declare module com {
	export module telerik {
		export module widget {
			export module chart {
				export module visualization {
					export module cartesianChart {
						export module indicators {
							export class RelativeMomentumIndexIndicator extends com.telerik.widget.chart.visualization.cartesianChart.indicators.ValuePeriodIndicatorBase {
								public static class: java.lang.Class<com.telerik.widget.chart.visualization.cartesianChart.indicators.RelativeMomentumIndexIndicator>;
								public momentumPeriod: number;
								public toString(): string;
								public onDataPointIsSelectedChanged(param0: com.telerik.widget.chart.engine.dataPoints.DataPoint): void;
								public createDataSourceInstance(): com.telerik.widget.chart.engine.databinding.datasources.ChartSeriesDataSource;
								public onBoundItemPropertyChanged(param0: com.telerik.widget.chart.engine.databinding.DataPointBindingEntry, param1: java.beans.PropertyChangeEvent): void;
								public refreshNode(param0: com.telerik.widget.chart.engine.elementTree.ChartNode): void;
								public getMomentumPeriod(): number;
								public invalidatePalette(): void;
								public constructor();
								public onPaletteUpdated(param0: com.telerik.widget.palettes.ChartPalette): void;
								public setIsSelected(param0: boolean): void;
								public onDataBindingComplete(): void;
								public getSelectedChangeListener(): com.telerik.widget.primitives.legend.LegendSelectableListener;
								public getCollectionIndex(): number;
								public onPointRemoved(param0: number, param1: com.telerik.widget.chart.engine.dataPoints.DataPoint): void;
								public setSelectedChangeListener(param0: com.telerik.widget.primitives.legend.LegendSelectableListener): void;
								public getIsSelected(): boolean;
								public onPointAdded(param0: number, param1: com.telerik.widget.chart.engine.dataPoints.DataPoint): void;
								public measureContent(param0: com.telerik.widget.chart.engine.elementTree.ChartNode, param1: any): com.telerik.android.common.math.RadSize;
								public setMomentumPeriod(param0: number): void;
							}
						}
					}
				}
			}
		}
	}
}

declare module com {
	export module telerik {
		export module widget {
			export module chart {
				export module visualization {
					export module cartesianChart {
						export module indicators {
							export class RelativeStrengthIndexIndicator extends com.telerik.widget.chart.visualization.cartesianChart.indicators.ValuePeriodIndicatorBase {
								public static class: java.lang.Class<com.telerik.widget.chart.visualization.cartesianChart.indicators.RelativeStrengthIndexIndicator>;
								public toString(): string;
								public onDataPointIsSelectedChanged(param0: com.telerik.widget.chart.engine.dataPoints.DataPoint): void;
								public createDataSourceInstance(): com.telerik.widget.chart.engine.databinding.datasources.ChartSeriesDataSource;
								public onBoundItemPropertyChanged(param0: com.telerik.widget.chart.engine.databinding.DataPointBindingEntry, param1: java.beans.PropertyChangeEvent): void;
								public refreshNode(param0: com.telerik.widget.chart.engine.elementTree.ChartNode): void;
								public invalidatePalette(): void;
								public constructor();
								public onPaletteUpdated(param0: com.telerik.widget.palettes.ChartPalette): void;
								public setIsSelected(param0: boolean): void;
								public onDataBindingComplete(): void;
								public getSelectedChangeListener(): com.telerik.widget.primitives.legend.LegendSelectableListener;
								public getCollectionIndex(): number;
								public onPointRemoved(param0: number, param1: com.telerik.widget.chart.engine.dataPoints.DataPoint): void;
								public setSelectedChangeListener(param0: com.telerik.widget.primitives.legend.LegendSelectableListener): void;
								public getIsSelected(): boolean;
								public onPointAdded(param0: number, param1: com.telerik.widget.chart.engine.dataPoints.DataPoint): void;
								public measureContent(param0: com.telerik.widget.chart.engine.elementTree.ChartNode, param1: any): com.telerik.android.common.math.RadSize;
							}
						}
					}
				}
			}
		}
	}
}

declare module com {
	export module telerik {
		export module widget {
			export module chart {
				export module visualization {
					export module cartesianChart {
						export module indicators {
							export abstract class ShortLongPeriodIndicatorBase extends com.telerik.widget.chart.visualization.cartesianChart.indicators.ValueIndicatorBase {
								public static class: java.lang.Class<com.telerik.widget.chart.visualization.cartesianChart.indicators.ShortLongPeriodIndicatorBase>;
								public onDataPointIsSelectedChanged(param0: com.telerik.widget.chart.engine.dataPoints.DataPoint): void;
								public setLongPeriod(param0: number): void;
								public onBoundItemPropertyChanged(param0: com.telerik.widget.chart.engine.databinding.DataPointBindingEntry, param1: java.beans.PropertyChangeEvent): void;
								public refreshNode(param0: com.telerik.widget.chart.engine.elementTree.ChartNode): void;
								public invalidatePalette(): void;
								public constructor();
								public onPaletteUpdated(param0: com.telerik.widget.palettes.ChartPalette): void;
								public setIsSelected(param0: boolean): void;
								public onDataBindingComplete(): void;
								public getLongPeriod(): number;
								public getSelectedChangeListener(): com.telerik.widget.primitives.legend.LegendSelectableListener;
								public getCollectionIndex(): number;
								public onPointRemoved(param0: number, param1: com.telerik.widget.chart.engine.dataPoints.DataPoint): void;
								public setSelectedChangeListener(param0: com.telerik.widget.primitives.legend.LegendSelectableListener): void;
								public getIsSelected(): boolean;
								public onPointAdded(param0: number, param1: com.telerik.widget.chart.engine.dataPoints.DataPoint): void;
								public measureContent(param0: com.telerik.widget.chart.engine.elementTree.ChartNode, param1: any): com.telerik.android.common.math.RadSize;
								public getShortPeriod(): number;
								public setShortPeriod(param0: number): void;
							}
						}
					}
				}
			}
		}
	}
}

declare module com {
	export module telerik {
		export module widget {
			export module chart {
				export module visualization {
					export module cartesianChart {
						export module indicators {
							export class StochasticFastIndicator extends com.telerik.widget.chart.visualization.cartesianChart.indicators.HighLowCloseIndicatorBase {
								public static class: java.lang.Class<com.telerik.widget.chart.visualization.cartesianChart.indicators.StochasticFastIndicator>;
								public mainPeriod: number;
								public signalPeriod: number;
								public signalRenderer: com.telerik.widget.chart.visualization.common.renderers.LineRenderer;
								public toString(): string;
								public onDataPointIsSelectedChanged(param0: com.telerik.widget.chart.engine.dataPoints.DataPoint): void;
								public signalModel(): com.telerik.widget.chart.engine.series.ChartSeriesModel<any>;
								public createDataSourceInstance(): com.telerik.widget.chart.engine.databinding.datasources.ChartSeriesDataSource;
								public refreshNode(param0: com.telerik.widget.chart.engine.elementTree.ChartNode): void;
								public setSignalPeriod(param0: number): void;
								public onPaletteUpdated(param0: com.telerik.widget.palettes.ChartPalette): void;
								public getSignalStrokeWidth(): number;
								public setIsSelected(param0: boolean): void;
								public onDataBindingComplete(): void;
								public getCollectionIndex(): number;
								public drawCore(param0: globalAndroid.graphics.Canvas): void;
								public onChartAxisChanged(param0: com.telerik.widget.chart.visualization.common.Axis, param1: com.telerik.widget.chart.visualization.common.Axis): void;
								public updateUICore(param0: com.telerik.widget.chart.visualization.common.ChartLayoutContext): void;
								public getMainPeriod(): number;
								public getIsSelected(): boolean;
								public onPointAdded(param0: number, param1: com.telerik.widget.chart.engine.dataPoints.DataPoint): void;
								public setSignalStroke(param0: number): void;
								public measureContent(param0: com.telerik.widget.chart.engine.elementTree.ChartNode, param1: any): com.telerik.android.common.math.RadSize;
								public getSignalPeriod(): number;
								public getSignalStrokeColor(): number;
								public setSignalStrokeWidth(param0: number): void;
								public applyPaletteCore(param0: com.telerik.widget.palettes.ChartPalette): void;
								public setMainPeriod(param0: number): void;
								public createRenderer(): com.telerik.widget.chart.visualization.common.renderers.LineRenderer;
								public onBoundItemPropertyChanged(param0: com.telerik.widget.chart.engine.databinding.DataPointBindingEntry, param1: java.beans.PropertyChangeEvent): void;
								public getElements(): java.util.List<com.telerik.widget.chart.engine.elementTree.ChartElement>;
								public invalidatePalette(): void;
								public constructor();
								public onAttached(): void;
								public getSelectedChangeListener(): com.telerik.widget.primitives.legend.LegendSelectableListener;
								public onPointRemoved(param0: number, param1: com.telerik.widget.chart.engine.dataPoints.DataPoint): void;
								public setSelectedChangeListener(param0: com.telerik.widget.primitives.legend.LegendSelectableListener): void;
								public onDetached(param0: com.telerik.widget.chart.visualization.common.RadChartViewBase<any>): void;
								public onModelAttached(): void;
								public signalDataPoints(): com.telerik.widget.chart.engine.dataPoints.DataPointCollection<com.telerik.widget.chart.engine.dataPoints.CategoricalDataPointBase>;
							}
						}
					}
				}
			}
		}
	}
}

declare module com {
	export module telerik {
		export module widget {
			export module chart {
				export module visualization {
					export module cartesianChart {
						export module indicators {
							export class StochasticIndicatorDataSourceBase extends com.telerik.widget.chart.engine.databinding.datasources.financial.HighLowCloseIndicatorDataSourceBase {
								public static class: java.lang.Class<com.telerik.widget.chart.visualization.cartesianChart.indicators.StochasticIndicatorDataSourceBase>;
								public setMainPeriod(param0: number): void;
								public constructor(param0: com.telerik.widget.chart.engine.series.ChartSeriesModel<any>);
								public collectionChanged(param0: com.telerik.android.common.CollectionChangedEvent<any>): void;
								public getMainPeriod(): number;
								public setSignalPeriod(param0: number): void;
								public getSignalPeriod(): number;
								public collectionChanged(param0: com.telerik.android.common.CollectionChangedEvent<any>): void;
								public propertyChange(param0: java.beans.PropertyChangeEvent): void;
							}
						}
					}
				}
			}
		}
	}
}

declare module com {
	export module telerik {
		export module widget {
			export module chart {
				export module visualization {
					export module cartesianChart {
						export module indicators {
							export class StochasticSlowIndicator extends com.telerik.widget.chart.visualization.cartesianChart.indicators.StochasticFastIndicator {
								public static class: java.lang.Class<com.telerik.widget.chart.visualization.cartesianChart.indicators.StochasticSlowIndicator>;
								public toString(): string;
								public onDataPointIsSelectedChanged(param0: com.telerik.widget.chart.engine.dataPoints.DataPoint): void;
								public createDataSourceInstance(): com.telerik.widget.chart.engine.databinding.datasources.ChartSeriesDataSource;
								public onBoundItemPropertyChanged(param0: com.telerik.widget.chart.engine.databinding.DataPointBindingEntry, param1: java.beans.PropertyChangeEvent): void;
								public refreshNode(param0: com.telerik.widget.chart.engine.elementTree.ChartNode): void;
								public invalidatePalette(): void;
								public constructor();
								public onPaletteUpdated(param0: com.telerik.widget.palettes.ChartPalette): void;
								public setIsSelected(param0: boolean): void;
								public onDataBindingComplete(): void;
								public getSelectedChangeListener(): com.telerik.widget.primitives.legend.LegendSelectableListener;
								public getCollectionIndex(): number;
								public onPointRemoved(param0: number, param1: com.telerik.widget.chart.engine.dataPoints.DataPoint): void;
								public getSlowingPeriod(): number;
								public setSelectedChangeListener(param0: com.telerik.widget.primitives.legend.LegendSelectableListener): void;
								public setSlowingPeriod(param0: number): void;
								public getIsSelected(): boolean;
								public onPointAdded(param0: number, param1: com.telerik.widget.chart.engine.dataPoints.DataPoint): void;
								public measureContent(param0: com.telerik.widget.chart.engine.elementTree.ChartNode, param1: any): com.telerik.android.common.math.RadSize;
							}
						}
					}
				}
			}
		}
	}
}

declare module com {
	export module telerik {
		export module widget {
			export module chart {
				export module visualization {
					export module cartesianChart {
						export module indicators {
							export class TrixIndicator extends com.telerik.widget.chart.visualization.cartesianChart.indicators.ValuePeriodIndicatorBase {
								public static class: java.lang.Class<com.telerik.widget.chart.visualization.cartesianChart.indicators.TrixIndicator>;
								public onDataPointIsSelectedChanged(param0: com.telerik.widget.chart.engine.dataPoints.DataPoint): void;
								public createDataSourceInstance(): com.telerik.widget.chart.engine.databinding.datasources.ChartSeriesDataSource;
								public onBoundItemPropertyChanged(param0: com.telerik.widget.chart.engine.databinding.DataPointBindingEntry, param1: java.beans.PropertyChangeEvent): void;
								public refreshNode(param0: com.telerik.widget.chart.engine.elementTree.ChartNode): void;
								public invalidatePalette(): void;
								public constructor();
								public onPaletteUpdated(param0: com.telerik.widget.palettes.ChartPalette): void;
								public setIsSelected(param0: boolean): void;
								public onDataBindingComplete(): void;
								public getSelectedChangeListener(): com.telerik.widget.primitives.legend.LegendSelectableListener;
								public getCollectionIndex(): number;
								public onPointRemoved(param0: number, param1: com.telerik.widget.chart.engine.dataPoints.DataPoint): void;
								public setSelectedChangeListener(param0: com.telerik.widget.primitives.legend.LegendSelectableListener): void;
								public getIsSelected(): boolean;
								public onPointAdded(param0: number, param1: com.telerik.widget.chart.engine.dataPoints.DataPoint): void;
								public measureContent(param0: com.telerik.widget.chart.engine.elementTree.ChartNode, param1: any): com.telerik.android.common.math.RadSize;
							}
						}
					}
				}
			}
		}
	}
}

declare module com {
	export module telerik {
		export module widget {
			export module chart {
				export module visualization {
					export module cartesianChart {
						export module indicators {
							export class TrueRangeIndicator extends com.telerik.widget.chart.visualization.cartesianChart.indicators.HighLowCloseIndicatorBase {
								public static class: java.lang.Class<com.telerik.widget.chart.visualization.cartesianChart.indicators.TrueRangeIndicator>;
								public toString(): string;
								public onDataPointIsSelectedChanged(param0: com.telerik.widget.chart.engine.dataPoints.DataPoint): void;
								public createDataSourceInstance(): com.telerik.widget.chart.engine.databinding.datasources.ChartSeriesDataSource;
								public onBoundItemPropertyChanged(param0: com.telerik.widget.chart.engine.databinding.DataPointBindingEntry, param1: java.beans.PropertyChangeEvent): void;
								public refreshNode(param0: com.telerik.widget.chart.engine.elementTree.ChartNode): void;
								public invalidatePalette(): void;
								public constructor();
								public onPaletteUpdated(param0: com.telerik.widget.palettes.ChartPalette): void;
								public setIsSelected(param0: boolean): void;
								public onDataBindingComplete(): void;
								public getSelectedChangeListener(): com.telerik.widget.primitives.legend.LegendSelectableListener;
								public getCollectionIndex(): number;
								public onPointRemoved(param0: number, param1: com.telerik.widget.chart.engine.dataPoints.DataPoint): void;
								public setSelectedChangeListener(param0: com.telerik.widget.primitives.legend.LegendSelectableListener): void;
								public getIsSelected(): boolean;
								public onPointAdded(param0: number, param1: com.telerik.widget.chart.engine.dataPoints.DataPoint): void;
								public measureContent(param0: com.telerik.widget.chart.engine.elementTree.ChartNode, param1: any): com.telerik.android.common.math.RadSize;
							}
						}
					}
				}
			}
		}
	}
}

declare module com {
	export module telerik {
		export module widget {
			export module chart {
				export module visualization {
					export module cartesianChart {
						export module indicators {
							export class UltimateOscillatorIndicator extends com.telerik.widget.chart.visualization.cartesianChart.indicators.HighLowClosePeriodIndicatorBase {
								public static class: java.lang.Class<com.telerik.widget.chart.visualization.cartesianChart.indicators.UltimateOscillatorIndicator>;
								public toString(): string;
								public onDataPointIsSelectedChanged(param0: com.telerik.widget.chart.engine.dataPoints.DataPoint): void;
								public setPeriod3(param0: number): void;
								public setPeriod2(param0: number): void;
								public createDataSourceInstance(): com.telerik.widget.chart.engine.databinding.datasources.ChartSeriesDataSource;
								public onBoundItemPropertyChanged(param0: com.telerik.widget.chart.engine.databinding.DataPointBindingEntry, param1: java.beans.PropertyChangeEvent): void;
								public refreshNode(param0: com.telerik.widget.chart.engine.elementTree.ChartNode): void;
								public invalidatePalette(): void;
								public constructor();
								public onPaletteUpdated(param0: com.telerik.widget.palettes.ChartPalette): void;
								public setIsSelected(param0: boolean): void;
								public onDataBindingComplete(): void;
								public getPeriod3(): number;
								public getSelectedChangeListener(): com.telerik.widget.primitives.legend.LegendSelectableListener;
								public getCollectionIndex(): number;
								public onPointRemoved(param0: number, param1: com.telerik.widget.chart.engine.dataPoints.DataPoint): void;
								public setSelectedChangeListener(param0: com.telerik.widget.primitives.legend.LegendSelectableListener): void;
								public getIsSelected(): boolean;
								public onPointAdded(param0: number, param1: com.telerik.widget.chart.engine.dataPoints.DataPoint): void;
								public measureContent(param0: com.telerik.widget.chart.engine.elementTree.ChartNode, param1: any): com.telerik.android.common.math.RadSize;
								public getPeriod2(): number;
							}
						}
					}
				}
			}
		}
	}
}

declare module com {
	export module telerik {
		export module widget {
			export module chart {
				export module visualization {
					export module cartesianChart {
						export module indicators {
							export abstract class ValueIndicatorBase extends com.telerik.widget.chart.visualization.cartesianChart.indicators.LineIndicatorBase {
								public static class: java.lang.Class<com.telerik.widget.chart.visualization.cartesianChart.indicators.ValueIndicatorBase>;
								public onDataPointIsSelectedChanged(param0: com.telerik.widget.chart.engine.dataPoints.DataPoint): void;
								public getValueBinding(): com.telerik.widget.chart.engine.databinding.DataPointBinding;
								public onBoundItemPropertyChanged(param0: com.telerik.widget.chart.engine.databinding.DataPointBindingEntry, param1: java.beans.PropertyChangeEvent): void;
								public refreshNode(param0: com.telerik.widget.chart.engine.elementTree.ChartNode): void;
								public initDataBinding(): void;
								public invalidatePalette(): void;
								public constructor();
								public onPaletteUpdated(param0: com.telerik.widget.palettes.ChartPalette): void;
								public setIsSelected(param0: boolean): void;
								public onDataBindingComplete(): void;
								public getSelectedChangeListener(): com.telerik.widget.primitives.legend.LegendSelectableListener;
								public getCollectionIndex(): number;
								public onPointRemoved(param0: number, param1: com.telerik.widget.chart.engine.dataPoints.DataPoint): void;
								public setSelectedChangeListener(param0: com.telerik.widget.primitives.legend.LegendSelectableListener): void;
								public setValueBinding(param0: com.telerik.widget.chart.engine.databinding.DataPointBinding): void;
								public getIsSelected(): boolean;
								public onPointAdded(param0: number, param1: com.telerik.widget.chart.engine.dataPoints.DataPoint): void;
								public measureContent(param0: com.telerik.widget.chart.engine.elementTree.ChartNode, param1: any): com.telerik.android.common.math.RadSize;
							}
						}
					}
				}
			}
		}
	}
}

declare module com {
	export module telerik {
		export module widget {
			export module chart {
				export module visualization {
					export module cartesianChart {
						export module indicators {
							export abstract class ValuePeriodIndicatorBase extends com.telerik.widget.chart.visualization.cartesianChart.indicators.ValueIndicatorBase {
								public static class: java.lang.Class<com.telerik.widget.chart.visualization.cartesianChart.indicators.ValuePeriodIndicatorBase>;
								public period: number;
								public onDataPointIsSelectedChanged(param0: com.telerik.widget.chart.engine.dataPoints.DataPoint): void;
								public onBoundItemPropertyChanged(param0: com.telerik.widget.chart.engine.databinding.DataPointBindingEntry, param1: java.beans.PropertyChangeEvent): void;
								public refreshNode(param0: com.telerik.widget.chart.engine.elementTree.ChartNode): void;
								public invalidatePalette(): void;
								public constructor();
								public onPaletteUpdated(param0: com.telerik.widget.palettes.ChartPalette): void;
								public getPeriod(): number;
								public setIsSelected(param0: boolean): void;
								public onDataBindingComplete(): void;
								public getSelectedChangeListener(): com.telerik.widget.primitives.legend.LegendSelectableListener;
								public getCollectionIndex(): number;
								public onPointRemoved(param0: number, param1: com.telerik.widget.chart.engine.dataPoints.DataPoint): void;
								public setSelectedChangeListener(param0: com.telerik.widget.primitives.legend.LegendSelectableListener): void;
								public getIsSelected(): boolean;
								public onPointAdded(param0: number, param1: com.telerik.widget.chart.engine.dataPoints.DataPoint): void;
								public measureContent(param0: com.telerik.widget.chart.engine.elementTree.ChartNode, param1: any): com.telerik.android.common.math.RadSize;
								public setPeriod(param0: number): void;
							}
						}
					}
				}
			}
		}
	}
}

declare module com {
	export module telerik {
		export module widget {
			export module chart {
				export module visualization {
					export module cartesianChart {
						export module indicators {
							export class WeightedMovingAverageIndicator extends com.telerik.widget.chart.visualization.cartesianChart.indicators.ValuePeriodIndicatorBase {
								public static class: java.lang.Class<com.telerik.widget.chart.visualization.cartesianChart.indicators.WeightedMovingAverageIndicator>;
								public toString(): string;
								public onDataPointIsSelectedChanged(param0: com.telerik.widget.chart.engine.dataPoints.DataPoint): void;
								public createDataSourceInstance(): com.telerik.widget.chart.engine.databinding.datasources.ChartSeriesDataSource;
								public onBoundItemPropertyChanged(param0: com.telerik.widget.chart.engine.databinding.DataPointBindingEntry, param1: java.beans.PropertyChangeEvent): void;
								public refreshNode(param0: com.telerik.widget.chart.engine.elementTree.ChartNode): void;
								public invalidatePalette(): void;
								public constructor();
								public onPaletteUpdated(param0: com.telerik.widget.palettes.ChartPalette): void;
								public setIsSelected(param0: boolean): void;
								public onDataBindingComplete(): void;
								public getSelectedChangeListener(): com.telerik.widget.primitives.legend.LegendSelectableListener;
								public getCollectionIndex(): number;
								public onPointRemoved(param0: number, param1: com.telerik.widget.chart.engine.dataPoints.DataPoint): void;
								public setSelectedChangeListener(param0: com.telerik.widget.primitives.legend.LegendSelectableListener): void;
								public getIsSelected(): boolean;
								public onPointAdded(param0: number, param1: com.telerik.widget.chart.engine.dataPoints.DataPoint): void;
								public measureContent(param0: com.telerik.widget.chart.engine.elementTree.ChartNode, param1: any): com.telerik.android.common.math.RadSize;
							}
						}
					}
				}
			}
		}
	}
}

declare module com {
	export module telerik {
		export module widget {
			export module chart {
				export module visualization {
					export module cartesianChart {
						export module series {
							export abstract class CartesianSeries extends com.telerik.widget.chart.visualization.common.PointTemplateSeries {
								public static class: java.lang.Class<com.telerik.widget.chart.visualization.cartesianChart.series.CartesianSeries>;
								public getHorizontalAxis(): com.telerik.widget.chart.visualization.common.CartesianAxis;
								public onDataPointIsSelectedChanged(param0: com.telerik.widget.chart.engine.dataPoints.DataPoint): void;
								public onBoundItemPropertyChanged(param0: com.telerik.widget.chart.engine.databinding.DataPointBindingEntry, param1: java.beans.PropertyChangeEvent): void;
								public refreshNode(param0: com.telerik.widget.chart.engine.elementTree.ChartNode): void;
								public invalidatePalette(): void;
								public constructor();
								public onPaletteUpdated(param0: com.telerik.widget.palettes.ChartPalette): void;
								public onAttached(): void;
								public setIsSelected(param0: boolean): void;
								public onDataBindingComplete(): void;
								public getSelectedChangeListener(): com.telerik.widget.primitives.legend.LegendSelectableListener;
								public getCollectionIndex(): number;
								public onPointRemoved(param0: number, param1: com.telerik.widget.chart.engine.dataPoints.DataPoint): void;
								public setSelectedChangeListener(param0: com.telerik.widget.primitives.legend.LegendSelectableListener): void;
								public setVerticalAxis(param0: com.telerik.widget.chart.visualization.common.CartesianAxis): void;
								public onDetached(param0: com.telerik.widget.chart.visualization.common.RadChartViewBase<any>): void;
								public getVerticalAxis(): com.telerik.widget.chart.visualization.common.CartesianAxis;
								public chartAxisChanged(param0: com.telerik.widget.chart.visualization.common.CartesianAxis, param1: com.telerik.widget.chart.visualization.common.CartesianAxis): void;
								public getIsSelected(): boolean;
								public getPaletteMode(): com.telerik.widget.palettes.ChartSeriesPaletteMode;
								public setPaletteMode(param0: com.telerik.widget.palettes.ChartSeriesPaletteMode): void;
								public onPointAdded(param0: number, param1: com.telerik.widget.chart.engine.dataPoints.DataPoint): void;
								public measureContent(param0: com.telerik.widget.chart.engine.elementTree.ChartNode, param1: any): com.telerik.android.common.math.RadSize;
								public setHorizontalAxis(param0: com.telerik.widget.chart.visualization.common.CartesianAxis): void;
							}
						}
					}
				}
			}
		}
	}
}

declare module com {
	export module telerik {
		export module widget {
			export module chart {
				export module visualization {
					export module cartesianChart {
						export module series {
							export module categorical {
								export class AreaSeries extends com.telerik.widget.chart.visualization.cartesianChart.series.categorical.CategoricalStrokedSeries implements com.telerik.widget.chart.visualization.common.FilledSeries {
									public static class: java.lang.Class<com.telerik.widget.chart.visualization.cartesianChart.series.categorical.AreaSeries>;
									public static FILL_COLOR_PROPERTY_KEY: number;
									public getIsSelected(): boolean;
									public measureContent(param0: com.telerik.widget.chart.engine.elementTree.ChartNode, param1: any): com.telerik.android.common.math.RadSize;
									public onPointRemoved(param0: number, param1: com.telerik.widget.chart.engine.dataPoints.DataPoint): void;
									public setIsSelected(param0: boolean): void;
									public setFillColor(param0: number): void;
									public hitTest(param0: globalAndroid.graphics.PointF): boolean;
									public setSelectedChangeListener(param0: com.telerik.widget.primitives.legend.LegendSelectableListener): void;
									public onDataPointIsSelectedChanged(param0: com.telerik.widget.chart.engine.dataPoints.DataPoint): void;
									public onBoundItemPropertyChanged(param0: com.telerik.widget.chart.engine.databinding.DataPointBindingEntry, param1: java.beans.PropertyChangeEvent): void;
									public onPointAdded(param0: number, param1: com.telerik.widget.chart.engine.dataPoints.DataPoint): void;
									public getStrokeThickness(): number;
									public getStrokeColor(): number;
									public onDataBindingComplete(): void;
									public onPaletteUpdated(param0: com.telerik.widget.palettes.ChartPalette): void;
									public getCollectionIndex(): number;
									public refreshNode(param0: com.telerik.widget.chart.engine.elementTree.ChartNode): void;
									public updateUICore(param0: com.telerik.widget.chart.visualization.common.ChartLayoutContext): void;
									public constructor();
									public getLegendFillColor(): number;
									public invalidatePalette(): void;
									public getSelectedChangeListener(): com.telerik.widget.primitives.legend.LegendSelectableListener;
									public defaultPaletteFamily(): string;
									public constructor(param0: com.telerik.widget.chart.engine.databinding.DataPointBinding, param1: java.lang.Iterable<any>);
									public getFillColor(): number;
									public applyPaletteCore(param0: com.telerik.widget.palettes.ChartPalette): void;
									public createRenderer(): com.telerik.widget.chart.visualization.common.renderers.LineRenderer;
									public constructor(param0: com.telerik.widget.chart.engine.databinding.DataPointBinding, param1: com.telerik.widget.chart.engine.databinding.DataPointBinding, param2: java.lang.Iterable<any>);
								}
							}
						}
					}
				}
			}
		}
	}
}

declare module com {
	export module telerik {
		export module widget {
			export module chart {
				export module visualization {
					export module cartesianChart {
						export module series {
							export module categorical {
								export class BarSeries extends com.telerik.widget.chart.visualization.cartesianChart.series.categorical.CategoricalSeries {
									public static class: java.lang.Class<com.telerik.widget.chart.visualization.cartesianChart.series.categorical.BarSeries>;
									public static FILL_COLOR_PROPERTY_KEY: number;
									public static STROKE_COLOR_PROPERTY_KEY: number;
									public static STROKE_WIDTH_PROPERTY_KEY: number;
									public getIsSelected(): boolean;
									public getFillPaint(): globalAndroid.graphics.Paint;
									public getStrokeShader(): globalAndroid.graphics.Shader;
									public setFillColor(param0: number): void;
									public setMinBarWidth(param0: number): void;
									public setStrokeShader(param0: globalAndroid.graphics.Shader): void;
									public onBoundItemPropertyChanged(param0: com.telerik.widget.chart.engine.databinding.DataPointBindingEntry, param1: java.beans.PropertyChangeEvent): void;
									public setData(param0: java.lang.Iterable<any>): void;
									public setCanApplyPalette(param0: boolean): void;
									public setMaxBarWidth(param0: number): void;
									public setAreBarsRounded(param0: boolean): void;
									public getStrokeColor(): number;
									public onDataBindingComplete(): void;
									public onPaletteUpdated(param0: com.telerik.widget.palettes.ChartPalette): void;
									public refreshNode(param0: com.telerik.widget.chart.engine.elementTree.ChartNode): void;
									public getFillShader(): globalAndroid.graphics.Shader;
									public setRoundBarsRadius(param0: number): void;
									public getSelectedChangeListener(): com.telerik.widget.primitives.legend.LegendSelectableListener;
									public getFillColor(): number;
									public applyPaletteCore(param0: com.telerik.widget.palettes.ChartPalette): void;
									public applyPaletteToDefaultVisual(param0: com.telerik.widget.chart.engine.dataPoints.DataPoint, param1: com.telerik.widget.palettes.PaletteEntry): void;
									public getStrokeEffect(): globalAndroid.graphics.PathEffect;
									public setStrokeColor(param0: number): void;
									public setFillShader(param0: globalAndroid.graphics.Shader): void;
									public getLegendStrokeColor(): number;
									public getStrokePaint(): globalAndroid.graphics.Paint;
									public getStrokeWidth(): number;
									public createDataPointRenderer(): com.telerik.widget.chart.visualization.cartesianChart.series.pointrenderers.ChartDataPointRenderer;
									public measureContent(param0: com.telerik.widget.chart.engine.elementTree.ChartNode, param1: any): com.telerik.android.common.math.RadSize;
									public onPointRemoved(param0: number, param1: com.telerik.widget.chart.engine.dataPoints.DataPoint): void;
									public createModel(): com.telerik.widget.chart.engine.series.ChartSeriesModel<any>;
									public setIsSelected(param0: boolean): void;
									public setSelectedChangeListener(param0: com.telerik.widget.primitives.legend.LegendSelectableListener): void;
									public onDataPointIsSelectedChanged(param0: com.telerik.widget.chart.engine.dataPoints.DataPoint): void;
									public getMaxBarWidth(): number;
									public getRoundBarsRadius(): number;
									public onPointAdded(param0: number, param1: com.telerik.widget.chart.engine.dataPoints.DataPoint): void;
									public setStrokeEffect(param0: globalAndroid.graphics.PathEffect): void;
									public getCollectionIndex(): number;
									public constructor();
									public findClosestPoint(param0: globalAndroid.graphics.Point): com.telerik.widget.chart.visualization.behaviors.DataPointInfo;
									public getLegendFillColor(): number;
									public invalidatePalette(): void;
									public defaultPaletteFamily(): string;
									public getAreBarsRounded(): boolean;
									public clearPaletteFromDefaultVisual(param0: com.telerik.widget.chart.engine.dataPoints.DataPoint): void;
									public constructor(param0: com.telerik.widget.chart.engine.databinding.DataPointBinding, param1: java.lang.Iterable<any>);
									public getMinBarWidth(): number;
									public constructor(param0: com.telerik.widget.chart.engine.databinding.DataPointBinding, param1: com.telerik.widget.chart.engine.databinding.DataPointBinding, param2: java.lang.Iterable<any>);
									public setStrokeWidth(param0: number): void;
								}
							}
						}
					}
				}
			}
		}
	}
}

declare module com {
	export module telerik {
		export module widget {
			export module chart {
				export module visualization {
					export module cartesianChart {
						export module series {
							export module categorical {
								export class BubbleSeries extends com.telerik.widget.chart.visualization.cartesianChart.series.categorical.CategoricalSeries {
									public static class: java.lang.Class<com.telerik.widget.chart.visualization.cartesianChart.series.categorical.BubbleSeries>;
									public static FILL_COLOR_PROPERTY_KEY: number;
									public static STROKE_COLOR_PROPERTY_KEY: number;
									public static STROKE_WIDTH_PROPERTY_KEY: number;
									public getStrokeWidth(): number;
									public getIsSelected(): boolean;
									public createDataPointRenderer(): com.telerik.widget.chart.visualization.cartesianChart.series.pointrenderers.ChartDataPointRenderer;
									public getBubbleScale(): number;
									public createLabelRenderer(): com.telerik.widget.chart.visualization.common.renderers.BaseLabelRenderer;
									public hitTestDataPoint(param0: globalAndroid.graphics.PointF, param1: com.telerik.widget.chart.engine.dataPoints.DataPoint): boolean;
									public getFillPaint(): globalAndroid.graphics.Paint;
									public measureContent(param0: com.telerik.widget.chart.engine.elementTree.ChartNode, param1: any): com.telerik.android.common.math.RadSize;
									public onPointRemoved(param0: number, param1: com.telerik.widget.chart.engine.dataPoints.DataPoint): void;
									public createModel(): com.telerik.widget.chart.engine.series.ChartSeriesModel<any>;
									public getStrokeShader(): globalAndroid.graphics.Shader;
									public setIsSelected(param0: boolean): void;
									public setFillColor(param0: number): void;
									public setSelectedChangeListener(param0: com.telerik.widget.primitives.legend.LegendSelectableListener): void;
									public onDataPointIsSelectedChanged(param0: com.telerik.widget.chart.engine.dataPoints.DataPoint): void;
									public setStrokeShader(param0: globalAndroid.graphics.Shader): void;
									public onBoundItemPropertyChanged(param0: com.telerik.widget.chart.engine.databinding.DataPointBindingEntry, param1: java.beans.PropertyChangeEvent): void;
									public onPointAdded(param0: number, param1: com.telerik.widget.chart.engine.dataPoints.DataPoint): void;
									public setCanApplyPalette(param0: boolean): void;
									public getStrokeColor(): number;
									public setStrokeEffect(param0: globalAndroid.graphics.PathEffect): void;
									public onDataBindingComplete(): void;
									public onPaletteUpdated(param0: com.telerik.widget.palettes.ChartPalette): void;
									public getCollectionIndex(): number;
									public refreshNode(param0: com.telerik.widget.chart.engine.elementTree.ChartNode): void;
									public constructor();
									public getLegendFillColor(): number;
									public getFillShader(): globalAndroid.graphics.Shader;
									public invalidatePalette(): void;
									public getSelectedChangeListener(): com.telerik.widget.primitives.legend.LegendSelectableListener;
									public getBubbleSizeBinding(): com.telerik.widget.chart.engine.databinding.DataPointBinding;
									public defaultPaletteFamily(): string;
									public hitTestDataPoint(param0: globalAndroid.graphics.PointF): com.telerik.widget.chart.engine.dataPoints.DataPoint;
									public constructor(param0: com.telerik.widget.chart.engine.databinding.DataPointBinding, param1: java.lang.Iterable<any>);
									public setBubbleScale(param0: number): void;
									public getFillColor(): number;
									public applyPaletteCore(param0: com.telerik.widget.palettes.ChartPalette): void;
									public applyPaletteToDefaultVisual(param0: com.telerik.widget.chart.engine.dataPoints.DataPoint, param1: com.telerik.widget.palettes.PaletteEntry): void;
									public setBubbleSizeBinding(param0: com.telerik.widget.chart.engine.databinding.DataPointBinding): void;
									public setStrokeColor(param0: number): void;
									public getStrokeEffect(): globalAndroid.graphics.PathEffect;
									public setFillShader(param0: globalAndroid.graphics.Shader): void;
									public onBubbleSizeBindingChanged(param0: com.telerik.widget.chart.engine.databinding.DataPointBinding): void;
									public constructor(param0: com.telerik.widget.chart.engine.databinding.DataPointBinding, param1: com.telerik.widget.chart.engine.databinding.DataPointBinding, param2: java.lang.Iterable<any>);
									public createDataSourceInstance(): com.telerik.widget.chart.engine.databinding.datasources.ChartSeriesDataSource;
									public setStrokeWidth(param0: number): void;
									public getLegendStrokeColor(): number;
									public getStrokePaint(): globalAndroid.graphics.Paint;
								}
							}
						}
					}
				}
			}
		}
	}
}

declare module com {
	export module telerik {
		export module widget {
			export module chart {
				export module visualization {
					export module cartesianChart {
						export module series {
							export module categorical {
								export class CandlestickSeries extends com.telerik.widget.chart.visualization.cartesianChart.series.categorical.OhlcSeriesBase {
									public static class: java.lang.Class<com.telerik.widget.chart.visualization.cartesianChart.series.categorical.CandlestickSeries>;
									public getIsSelected(): boolean;
									public constructor();
									public createDataPointRenderer(): com.telerik.widget.chart.visualization.cartesianChart.series.pointrenderers.ChartDataPointRenderer;
									public invalidatePalette(): void;
									public getSelectedChangeListener(): com.telerik.widget.primitives.legend.LegendSelectableListener;
									public measureContent(param0: com.telerik.widget.chart.engine.elementTree.ChartNode, param1: any): com.telerik.android.common.math.RadSize;
									public onPointRemoved(param0: number, param1: com.telerik.widget.chart.engine.dataPoints.DataPoint): void;
									public setIsSelected(param0: boolean): void;
									public setSelectedChangeListener(param0: com.telerik.widget.primitives.legend.LegendSelectableListener): void;
									public onDataPointIsSelectedChanged(param0: com.telerik.widget.chart.engine.dataPoints.DataPoint): void;
									public onStrokeWidthChanged(param0: number): void;
									public onBoundItemPropertyChanged(param0: com.telerik.widget.chart.engine.databinding.DataPointBindingEntry, param1: java.beans.PropertyChangeEvent): void;
									public onPointAdded(param0: number, param1: com.telerik.widget.chart.engine.dataPoints.DataPoint): void;
									public onStrokeChanged(param0: number): void;
									public onDataBindingComplete(): void;
									public onPaletteUpdated(param0: com.telerik.widget.palettes.ChartPalette): void;
									public getCollectionIndex(): number;
									public refreshNode(param0: com.telerik.widget.chart.engine.elementTree.ChartNode): void;
								}
							}
						}
					}
				}
			}
		}
	}
}

declare module com {
	export module telerik {
		export module widget {
			export module chart {
				export module visualization {
					export module cartesianChart {
						export module series {
							export module categorical {
								export abstract class CategoricalSeries extends com.telerik.widget.chart.visualization.cartesianChart.series.categorical.CategoricalSeriesBase {
									public static class: java.lang.Class<com.telerik.widget.chart.visualization.cartesianChart.series.categorical.CategoricalSeries>;
									public getIsSelected(): boolean;
									public constructor();
									public createLabelRenderer(): com.telerik.widget.chart.visualization.common.renderers.BaseLabelRenderer;
									public invalidatePalette(): void;
									public getSelectedChangeListener(): com.telerik.widget.primitives.legend.LegendSelectableListener;
									public measureContent(param0: com.telerik.widget.chart.engine.elementTree.ChartNode, param1: any): com.telerik.android.common.math.RadSize;
									public onPointRemoved(param0: number, param1: com.telerik.widget.chart.engine.dataPoints.DataPoint): void;
									public constructor(param0: com.telerik.widget.chart.engine.databinding.DataPointBinding, param1: java.lang.Iterable<any>);
									public setIsSelected(param0: boolean): void;
									public setSelectedChangeListener(param0: com.telerik.widget.primitives.legend.LegendSelectableListener): void;
									public onDataPointIsSelectedChanged(param0: com.telerik.widget.chart.engine.dataPoints.DataPoint): void;
									public constructor(param0: com.telerik.widget.chart.engine.databinding.DataPointBinding, param1: com.telerik.widget.chart.engine.databinding.DataPointBinding, param2: java.lang.Iterable<any>);
									public createDataSourceInstance(): com.telerik.widget.chart.engine.databinding.datasources.ChartSeriesDataSource;
									public onBoundItemPropertyChanged(param0: com.telerik.widget.chart.engine.databinding.DataPointBindingEntry, param1: java.beans.PropertyChangeEvent): void;
									public onPointAdded(param0: number, param1: com.telerik.widget.chart.engine.dataPoints.DataPoint): void;
									public setValueBinding(param0: com.telerik.widget.chart.engine.databinding.DataPointBinding): void;
									public setValueBinding(param0: com.telerik.android.common.Function<any,any>): void;
									public initDataBinding(): void;
									public onDataBindingComplete(): void;
									public onPaletteUpdated(param0: com.telerik.widget.palettes.ChartPalette): void;
									public getValueBinding(): com.telerik.widget.chart.engine.databinding.DataPointBinding;
									public getCollectionIndex(): number;
									public refreshNode(param0: com.telerik.widget.chart.engine.elementTree.ChartNode): void;
								}
							}
						}
					}
				}
			}
		}
	}
}

declare module com {
	export module telerik {
		export module widget {
			export module chart {
				export module visualization {
					export module cartesianChart {
						export module series {
							export module categorical {
								export abstract class CategoricalSeriesBase extends com.telerik.widget.chart.visualization.cartesianChart.series.CartesianSeries {
									public static class: java.lang.Class<com.telerik.widget.chart.visualization.cartesianChart.series.categorical.CategoricalSeriesBase>;
									public getIsSelected(): boolean;
									public constructor();
									public setCategoryBinding(param0: com.telerik.widget.chart.engine.databinding.DataPointBinding): void;
									public invalidatePalette(): void;
									public getSelectedChangeListener(): com.telerik.widget.primitives.legend.LegendSelectableListener;
									public measureContent(param0: com.telerik.widget.chart.engine.elementTree.ChartNode, param1: any): com.telerik.android.common.math.RadSize;
									public onPointRemoved(param0: number, param1: com.telerik.widget.chart.engine.dataPoints.DataPoint): void;
									public setStackGroupKey(param0: any): void;
									public constructor(param0: com.telerik.widget.chart.engine.databinding.DataPointBinding, param1: java.lang.Iterable<any>);
									public setIsSelected(param0: boolean): void;
									public setCombineMode(param0: com.telerik.widget.chart.engine.series.combination.ChartSeriesCombineMode): void;
									public setSelectedChangeListener(param0: com.telerik.widget.primitives.legend.LegendSelectableListener): void;
									public onDataPointIsSelectedChanged(param0: com.telerik.widget.chart.engine.dataPoints.DataPoint): void;
									public setCategoryBinding(param0: com.telerik.android.common.Function<any,any>): void;
									public getStackGroupKey(): any;
									public onBoundItemPropertyChanged(param0: com.telerik.widget.chart.engine.databinding.DataPointBindingEntry, param1: java.beans.PropertyChangeEvent): void;
									public getCategoryBinding(): com.telerik.widget.chart.engine.databinding.DataPointBinding;
									public onPointAdded(param0: number, param1: com.telerik.widget.chart.engine.dataPoints.DataPoint): void;
									public getCombineMode(): com.telerik.widget.chart.engine.series.combination.ChartSeriesCombineMode;
									public initDataBinding(): void;
									public onDataBindingComplete(): void;
									public onPaletteUpdated(param0: com.telerik.widget.palettes.ChartPalette): void;
									public getCollectionIndex(): number;
									public refreshNode(param0: com.telerik.widget.chart.engine.elementTree.ChartNode): void;
								}
							}
						}
					}
				}
			}
		}
	}
}

declare module com {
	export module telerik {
		export module widget {
			export module chart {
				export module visualization {
					export module cartesianChart {
						export module series {
							export module categorical {
								export class CategoricalSeriesLabelRenderer extends com.telerik.widget.chart.visualization.common.renderers.PointingLabelRenderer {
									public static class: java.lang.Class<com.telerik.widget.chart.visualization.cartesianChart.series.categorical.CategoricalSeriesLabelRenderer>;
									public constructor(param0: com.telerik.widget.chart.visualization.common.ChartSeries);
									public constructor();
									public getLabelSize(): number;
									public setLabelTextColor(param0: number): void;
									public setLabelMargin(param0: number): void;
									public setLabelFont(param0: globalAndroid.graphics.Typeface): void;
									public getLabelValueToStringConverter(): com.telerik.android.common.Function<any,string>;
									public constructor(param0: com.telerik.widget.chart.visualization.common.ChartSeries, param1: number, param2: number);
									public setLabelFontStyle(param0: number): void;
									public setLabelValueToStringConverter(param0: com.telerik.android.common.Function<any,string>): void;
									public getLabelTextColor(): number;
									public setLabelSize(param0: number): void;
									public calculateLabelPoint(param0: com.telerik.widget.chart.engine.dataPoints.DataPoint, param1: globalAndroid.graphics.Rect): com.telerik.android.common.math.RadPoint;
									public getLabelFont(): globalAndroid.graphics.Typeface;
									public setLabelFormat(param0: string): void;
									public getLabelFontStyle(): number;
									public getLabelFormat(): string;
									public getLabelMargin(): number;
									public getLabelText(param0: com.telerik.widget.chart.engine.dataPoints.DataPoint): string;
									public renderLabel(param0: globalAndroid.graphics.Canvas, param1: com.telerik.widget.chart.engine.elementTree.ChartNode): void;
								}
							}
						}
					}
				}
			}
		}
	}
}

declare module com {
	export module telerik {
		export module widget {
			export module chart {
				export module visualization {
					export module cartesianChart {
						export module series {
							export module categorical {
								export abstract class CategoricalStrokedSeries extends com.telerik.widget.chart.visualization.cartesianChart.series.categorical.CategoricalSeries implements com.telerik.widget.chart.visualization.common.StrokedSeries {
									public static class: java.lang.Class<com.telerik.widget.chart.visualization.cartesianChart.series.categorical.CategoricalStrokedSeries>;
									public static STROKE_COLOR_PROPERTY_KEY: number;
									public static STROKE_THICKNESS_PROPERTY_KEY: number;
									public lineTouchSize: number;
									public pointSeriesModel: com.telerik.widget.chart.engine.series.PointSeriesModel;
									public renderer: com.telerik.widget.chart.visualization.common.renderers.LineRenderer;
									public setStrokeThickness(param0: number): void;
									public getIsSelected(): boolean;
									public hitTestDataPoint(param0: globalAndroid.graphics.PointF, param1: com.telerik.widget.chart.engine.dataPoints.DataPoint): boolean;
									public getDataPointIndicatorRenderer(): com.telerik.widget.chart.visualization.cartesianChart.series.categorical.DataPointIndicatorRenderer;
									public measureContent(param0: com.telerik.widget.chart.engine.elementTree.ChartNode, param1: any): com.telerik.android.common.math.RadSize;
									public getLineTouchTargetSize(): number;
									public setTouchTargetRadius(param0: number): void;
									public onPointRemoved(param0: number, param1: com.telerik.widget.chart.engine.dataPoints.DataPoint): void;
									public createModel(): com.telerik.widget.chart.engine.series.ChartSeriesModel<any>;
									public setDataPointIndicatorRenderer(param0: com.telerik.widget.chart.visualization.cartesianChart.series.categorical.DataPointIndicatorRenderer): void;
									public setIsSelected(param0: boolean): void;
									public setSelectedChangeListener(param0: com.telerik.widget.primitives.legend.LegendSelectableListener): void;
									public onDataPointIsSelectedChanged(param0: com.telerik.widget.chart.engine.dataPoints.DataPoint): void;
									public onBoundItemPropertyChanged(param0: com.telerik.widget.chart.engine.databinding.DataPointBindingEntry, param1: java.beans.PropertyChangeEvent): void;
									public onPointAdded(param0: number, param1: com.telerik.widget.chart.engine.dataPoints.DataPoint): void;
									public getStrokeThickness(): number;
									public getStrokeColor(): number;
									public onDataBindingComplete(): void;
									public onPaletteUpdated(param0: com.telerik.widget.palettes.ChartPalette): void;
									public getCollectionIndex(): number;
									public drawCore(param0: globalAndroid.graphics.Canvas): void;
									public refreshNode(param0: com.telerik.widget.chart.engine.elementTree.ChartNode): void;
									public updateUICore(param0: com.telerik.widget.chart.visualization.common.ChartLayoutContext): void;
									public getTouchTargetRadius(): number;
									public constructor();
									public getLegendFillColor(): number;
									public invalidatePalette(): void;
									public getSelectedChangeListener(): com.telerik.widget.primitives.legend.LegendSelectableListener;
									public hitTestDataPoint(param0: globalAndroid.graphics.PointF): com.telerik.widget.chart.engine.dataPoints.DataPoint;
									public constructor(param0: com.telerik.widget.chart.engine.databinding.DataPointBinding, param1: java.lang.Iterable<any>);
									public applyPaletteCore(param0: com.telerik.widget.palettes.ChartPalette): void;
									public setLineTouchTargetSize(param0: number): void;
									public createRenderer(): com.telerik.widget.chart.visualization.common.renderers.LineRenderer;
									public setStrokeColor(param0: number): void;
									public getDashArray(): native.Array<number>;
									public constructor(param0: com.telerik.widget.chart.engine.databinding.DataPointBinding, param1: com.telerik.widget.chart.engine.databinding.DataPointBinding, param2: java.lang.Iterable<any>);
									public getRenderer(): com.telerik.widget.chart.visualization.common.renderers.LineRenderer;
									public getLegendStrokeColor(): number;
									public setDashArray(param0: native.Array<number>): void;
								}
							}
						}
					}
				}
			}
		}
	}
}

declare module com {
	export module telerik {
		export module widget {
			export module chart {
				export module visualization {
					export module cartesianChart {
						export module series {
							export module categorical {
								export abstract class DataPointIndicatorRenderer extends com.telerik.android.common.PropertyManager {
									public static class: java.lang.Class<com.telerik.widget.chart.visualization.cartesianChart.series.categorical.DataPointIndicatorRenderer>;
									public static POINT_INDICATOR_STROKE_COLOR_PROPERTY_KEY: number;
									public static POINT_INDICATOR_COLOR_PROPERTY_KEY: number;
									public static POINT_INDICATOR_STROKE_WIDTH_PROPERTY_KEY: number;
									public PALETTE_FAMILY: string;
									public owner: com.telerik.widget.chart.visualization.common.ChartSeries;
									public pointIndicatorStrokeWidth: number;
									public pointIndicatorColor: number;
									public pointIndicatorStrokePaint: globalAndroid.graphics.Paint;
									public pointIndicatorStrokeColor: number;
									public pointIndicatorPaint: globalAndroid.graphics.Paint;
									public dataPointLocations: java.util.List<globalAndroid.graphics.Point>;
									public getPointIndicatorStrokeWidth(): number;
									public addDataPointLocation(param0: globalAndroid.graphics.Point): void;
									public constructor();
									public constructor(param0: com.telerik.widget.chart.visualization.common.ChartSeries);
									public clearDataPointLocations(): void;
									public invalidatePalette(): void;
									public setPointIndicatorStrokeColor(param0: number): void;
									public addDataPointLocation(param0: number, param1: number): void;
									public drawDataPointIndicators(param0: globalAndroid.graphics.Canvas): void;
									public getPointIndicatorColor(): number;
									public getPointIndicatorStrokeColor(): number;
									public setPointIndicatorStrokeWidth(param0: number): void;
									public drawDataPointIndicator(param0: globalAndroid.graphics.Canvas, param1: number, param2: number): void;
									public applyPalette(param0: com.telerik.widget.palettes.ChartPalette): void;
									public setPointIndicatorColor(param0: number): void;
								}
							}
						}
					}
				}
			}
		}
	}
}

declare module com {
	export module telerik {
		export module widget {
			export module chart {
				export module visualization {
					export module cartesianChart {
						export module series {
							export module categorical {
								export class LineSeries extends com.telerik.widget.chart.visualization.cartesianChart.series.categorical.CategoricalStrokedSeries {
									public static class: java.lang.Class<com.telerik.widget.chart.visualization.cartesianChart.series.categorical.LineSeries>;
									public getIsSelected(): boolean;
									public constructor();
									public invalidatePalette(): void;
									public getSelectedChangeListener(): com.telerik.widget.primitives.legend.LegendSelectableListener;
									public measureContent(param0: com.telerik.widget.chart.engine.elementTree.ChartNode, param1: any): com.telerik.android.common.math.RadSize;
									public defaultPaletteFamily(): string;
									public onPointRemoved(param0: number, param1: com.telerik.widget.chart.engine.dataPoints.DataPoint): void;
									public constructor(param0: com.telerik.widget.chart.engine.databinding.DataPointBinding, param1: java.lang.Iterable<any>);
									public setIsSelected(param0: boolean): void;
									public hitTest(param0: globalAndroid.graphics.PointF): boolean;
									public setSelectedChangeListener(param0: com.telerik.widget.primitives.legend.LegendSelectableListener): void;
									public onDataPointIsSelectedChanged(param0: com.telerik.widget.chart.engine.dataPoints.DataPoint): void;
									public constructor(param0: com.telerik.widget.chart.engine.databinding.DataPointBinding, param1: com.telerik.widget.chart.engine.databinding.DataPointBinding, param2: java.lang.Iterable<any>);
									public onBoundItemPropertyChanged(param0: com.telerik.widget.chart.engine.databinding.DataPointBindingEntry, param1: java.beans.PropertyChangeEvent): void;
									public onPointAdded(param0: number, param1: com.telerik.widget.chart.engine.dataPoints.DataPoint): void;
									public getStrokeThickness(): number;
									public getStrokeColor(): number;
									public onDataBindingComplete(): void;
									public onPaletteUpdated(param0: com.telerik.widget.palettes.ChartPalette): void;
									public getCollectionIndex(): number;
									public refreshNode(param0: com.telerik.widget.chart.engine.elementTree.ChartNode): void;
								}
							}
						}
					}
				}
			}
		}
	}
}

declare module com {
	export module telerik {
		export module widget {
			export module chart {
				export module visualization {
					export module cartesianChart {
						export module series {
							export module categorical {
								export class OhlcSeries extends com.telerik.widget.chart.visualization.cartesianChart.series.categorical.OhlcSeriesBase {
									public static class: java.lang.Class<com.telerik.widget.chart.visualization.cartesianChart.series.categorical.OhlcSeries>;
									public static DOWN_STROKE_COLOR_PROPERTY_KEY: number;
									public static DOWN_STROKE_WIDTH_PROPERTY_KEY: number;
									public getIsSelected(): boolean;
									public constructor();
									public createDataPointRenderer(): com.telerik.widget.chart.visualization.cartesianChart.series.pointrenderers.ChartDataPointRenderer;
									public invalidatePalette(): void;
									public getSelectedChangeListener(): com.telerik.widget.primitives.legend.LegendSelectableListener;
									public measureContent(param0: com.telerik.widget.chart.engine.elementTree.ChartNode, param1: any): com.telerik.android.common.math.RadSize;
									public onPointRemoved(param0: number, param1: com.telerik.widget.chart.engine.dataPoints.DataPoint): void;
									public createModel(): com.telerik.widget.chart.engine.series.ChartSeriesModel<any>;
									public getDownStrokeWidth(): number;
									public setDownStrokeWidth(param0: number): void;
									public setIsSelected(param0: boolean): void;
									public setSelectedChangeListener(param0: com.telerik.widget.primitives.legend.LegendSelectableListener): void;
									public onDataPointIsSelectedChanged(param0: com.telerik.widget.chart.engine.dataPoints.DataPoint): void;
									public setDownStrokeColor(param0: number): void;
									public getDownStrokeColor(): number;
									public onBoundItemPropertyChanged(param0: com.telerik.widget.chart.engine.databinding.DataPointBindingEntry, param1: java.beans.PropertyChangeEvent): void;
									public setStrokeWidth(param0: number): void;
									public onPointAdded(param0: number, param1: com.telerik.widget.chart.engine.dataPoints.DataPoint): void;
									public onDataBindingComplete(): void;
									public onPaletteUpdated(param0: com.telerik.widget.palettes.ChartPalette): void;
									public getCollectionIndex(): number;
									public refreshNode(param0: com.telerik.widget.chart.engine.elementTree.ChartNode): void;
								}
							}
						}
					}
				}
			}
		}
	}
}

declare module com {
	export module telerik {
		export module widget {
			export module chart {
				export module visualization {
					export module cartesianChart {
						export module series {
							export module categorical {
								export abstract class OhlcSeriesBase extends com.telerik.widget.chart.visualization.cartesianChart.series.CartesianSeries {
									public static class: java.lang.Class<com.telerik.widget.chart.visualization.cartesianChart.series.categorical.OhlcSeriesBase>;
									public static STROKE_COLOR_PROPERTY_KEY: number;
									public static STROKE_WIDTH_PROPERTY_KEY: number;
									public renderer: com.telerik.widget.chart.visualization.cartesianChart.series.pointrenderers.OhlcPointRendererBase;
									public getStrokeWidth(): number;
									public getIsSelected(): boolean;
									public setCategoryBinding(param0: com.telerik.widget.chart.engine.databinding.DataPointBinding): void;
									public createLabelRenderer(): com.telerik.widget.chart.visualization.common.renderers.BaseLabelRenderer;
									public setOpenBinding(param0: com.telerik.widget.chart.engine.databinding.DataPointBinding): void;
									public measureContent(param0: com.telerik.widget.chart.engine.elementTree.ChartNode, param1: any): com.telerik.android.common.math.RadSize;
									public onPointRemoved(param0: number, param1: com.telerik.widget.chart.engine.dataPoints.DataPoint): void;
									public createModel(): com.telerik.widget.chart.engine.series.ChartSeriesModel<any>;
									public dataPoints(): com.telerik.widget.chart.engine.dataPoints.DataPointCollection<com.telerik.widget.chart.engine.dataPoints.OhlcDataPoint>;
									public setCloseBinding(param0: com.telerik.widget.chart.engine.databinding.DataPointBinding): void;
									public getLowBinding(): com.telerik.widget.chart.engine.databinding.DataPointBinding;
									public setIsSelected(param0: boolean): void;
									public getOpenBinding(): com.telerik.widget.chart.engine.databinding.DataPointBinding;
									public setSelectedChangeListener(param0: com.telerik.widget.primitives.legend.LegendSelectableListener): void;
									public onDataPointIsSelectedChanged(param0: com.telerik.widget.chart.engine.dataPoints.DataPoint): void;
									public setCategoryBinding(param0: com.telerik.android.common.Function<any,any>): void;
									public onStrokeWidthChanged(param0: number): void;
									public getHighBinding(): com.telerik.widget.chart.engine.databinding.DataPointBinding;
									public setLowBinding(param0: com.telerik.widget.chart.engine.databinding.DataPointBinding): void;
									public onBoundItemPropertyChanged(param0: com.telerik.widget.chart.engine.databinding.DataPointBindingEntry, param1: java.beans.PropertyChangeEvent): void;
									public setData(param0: java.lang.Iterable<any>): void;
									public getCategoryBinding(): com.telerik.widget.chart.engine.databinding.DataPointBinding;
									public onPointAdded(param0: number, param1: com.telerik.widget.chart.engine.dataPoints.DataPoint): void;
									public onStrokeChanged(param0: number): void;
									public getStrokeColor(): number;
									public setLowBinding(param0: com.telerik.android.common.Function<any,any>): void;
									public onDataBindingComplete(): void;
									public onPaletteUpdated(param0: com.telerik.widget.palettes.ChartPalette): void;
									public getCollectionIndex(): number;
									public refreshNode(param0: com.telerik.widget.chart.engine.elementTree.ChartNode): void;
									public constructor();
									public getLegendFillColor(): number;
									public setHighBinding(param0: com.telerik.android.common.Function<any,any>): void;
									public invalidatePalette(): void;
									public getSelectedChangeListener(): com.telerik.widget.primitives.legend.LegendSelectableListener;
									public defaultPaletteFamily(): string;
									public setOpenBinding(param0: com.telerik.android.common.Function<any,any>): void;
									public applyPaletteCore(param0: com.telerik.widget.palettes.ChartPalette): void;
									public applyPaletteToDefaultVisual(param0: com.telerik.widget.chart.engine.dataPoints.DataPoint, param1: com.telerik.widget.palettes.PaletteEntry): void;
									public setHighBinding(param0: com.telerik.widget.chart.engine.databinding.DataPointBinding): void;
									public setStrokeColor(param0: number): void;
									public createDataSourceInstance(): com.telerik.widget.chart.engine.databinding.datasources.ChartSeriesDataSource;
									public getLegendStrokeColor(): number;
									public setStrokeWidth(param0: number): void;
									public getCloseBinding(): com.telerik.widget.chart.engine.databinding.DataPointBinding;
									public setCloseBinding(param0: com.telerik.android.common.Function<any,any>): void;
									public initDataBinding(): void;
								}
							}
						}
					}
				}
			}
		}
	}
}

declare module com {
	export module telerik {
		export module widget {
			export module chart {
				export module visualization {
					export module cartesianChart {
						export module series {
							export module categorical {
								export class OhlcSeriesLabelRenderer extends com.telerik.widget.chart.visualization.cartesianChart.series.categorical.CategoricalSeriesLabelRenderer {
									public static class: java.lang.Class<com.telerik.widget.chart.visualization.cartesianChart.series.categorical.OhlcSeriesLabelRenderer>;
									public static LABEL_FORMAT: string;
									public constructor(param0: com.telerik.widget.chart.visualization.common.ChartSeries);
									public constructor();
									public getLabelSize(): number;
									public setLabelTextColor(param0: number): void;
									public setLabelMargin(param0: number): void;
									public setLabelFont(param0: globalAndroid.graphics.Typeface): void;
									public getLabelValueToStringConverter(): com.telerik.android.common.Function<any,string>;
									public constructor(param0: com.telerik.widget.chart.visualization.common.ChartSeries, param1: number, param2: number);
									public setLabelFontStyle(param0: number): void;
									public setLabelValueToStringConverter(param0: com.telerik.android.common.Function<any,string>): void;
									public getLabelTextColor(): number;
									public setLabelSize(param0: number): void;
									public getLabelFont(): globalAndroid.graphics.Typeface;
									public setLabelFormat(param0: string): void;
									public getLabelFormat(): string;
									public getLabelFontStyle(): number;
									public getLabelMargin(): number;
									public getLabelText(param0: com.telerik.widget.chart.engine.dataPoints.DataPoint): string;
									public renderLabel(param0: globalAndroid.graphics.Canvas, param1: com.telerik.widget.chart.engine.elementTree.ChartNode): void;
								}
							}
						}
					}
				}
			}
		}
	}
}

declare module com {
	export module telerik {
		export module widget {
			export module chart {
				export module visualization {
					export module cartesianChart {
						export module series {
							export module categorical {
								export class RangeBarSeries extends com.telerik.widget.chart.visualization.cartesianChart.series.categorical.RangeSeriesBase {
									public static class: java.lang.Class<com.telerik.widget.chart.visualization.cartesianChart.series.categorical.RangeBarSeries>;
									public static FILL_COLOR_PROPERTY_KEY: number;
									public static STROKE_COLOR_PROPERTY_KEY: number;
									public static STROKE_WIDTH_PROPERTY_KEY: number;
									public getStrokeWidth(): number;
									public getIsSelected(): boolean;
									public createDataPointRenderer(): com.telerik.widget.chart.visualization.cartesianChart.series.pointrenderers.ChartDataPointRenderer;
									public createLabelRenderer(): com.telerik.widget.chart.visualization.common.renderers.BaseLabelRenderer;
									public getFillPaint(): globalAndroid.graphics.Paint;
									public measureContent(param0: com.telerik.widget.chart.engine.elementTree.ChartNode, param1: any): com.telerik.android.common.math.RadSize;
									public onPointRemoved(param0: number, param1: com.telerik.widget.chart.engine.dataPoints.DataPoint): void;
									public createModel(): com.telerik.widget.chart.engine.series.ChartSeriesModel<any>;
									public getStrokeShader(): globalAndroid.graphics.Shader;
									public setIsSelected(param0: boolean): void;
									public setFillColor(param0: number): void;
									public setSelectedChangeListener(param0: com.telerik.widget.primitives.legend.LegendSelectableListener): void;
									public onDataPointIsSelectedChanged(param0: com.telerik.widget.chart.engine.dataPoints.DataPoint): void;
									public getRoundBarsRadius(): number;
									public setStrokeShader(param0: globalAndroid.graphics.Shader): void;
									public onBoundItemPropertyChanged(param0: com.telerik.widget.chart.engine.databinding.DataPointBindingEntry, param1: java.beans.PropertyChangeEvent): void;
									public setData(param0: java.lang.Iterable<any>): void;
									public onPointAdded(param0: number, param1: com.telerik.widget.chart.engine.dataPoints.DataPoint): void;
									public setCanApplyPalette(param0: boolean): void;
									public getStrokeColor(): number;
									public setAreBarsRounded(param0: boolean): void;
									public setStrokeEffect(param0: globalAndroid.graphics.PathEffect): void;
									public onDataBindingComplete(): void;
									public onPaletteUpdated(param0: com.telerik.widget.palettes.ChartPalette): void;
									public getCollectionIndex(): number;
									public refreshNode(param0: com.telerik.widget.chart.engine.elementTree.ChartNode): void;
									public constructor();
									public getLegendFillColor(): number;
									public setRoundBarsRadius(param0: number): void;
									public getFillShader(): globalAndroid.graphics.Shader;
									public invalidatePalette(): void;
									public getSelectedChangeListener(): com.telerik.widget.primitives.legend.LegendSelectableListener;
									public defaultPaletteFamily(): string;
									public getAreBarsRounded(): boolean;
									public clearPaletteFromDefaultVisual(param0: com.telerik.widget.chart.engine.dataPoints.DataPoint): void;
									public constructor(param0: com.telerik.widget.chart.engine.databinding.DataPointBinding, param1: java.lang.Iterable<any>);
									public getFillColor(): number;
									public applyPaletteCore(param0: com.telerik.widget.palettes.ChartPalette): void;
									public applyPaletteToDefaultVisual(param0: com.telerik.widget.chart.engine.dataPoints.DataPoint, param1: com.telerik.widget.palettes.PaletteEntry): void;
									public setStrokeColor(param0: number): void;
									public getStrokeEffect(): globalAndroid.graphics.PathEffect;
									public setFillShader(param0: globalAndroid.graphics.Shader): void;
									public getLegendStrokeColor(): number;
									public setStrokeWidth(param0: number): void;
									public getStrokePaint(): globalAndroid.graphics.Paint;
								}
							}
						}
					}
				}
			}
		}
	}
}

declare module com {
	export module telerik {
		export module widget {
			export module chart {
				export module visualization {
					export module cartesianChart {
						export module series {
							export module categorical {
								export class RangeBarSeriesLabelRenderer extends com.telerik.widget.chart.visualization.common.renderers.BaseLabelRenderer {
									public static class: java.lang.Class<com.telerik.widget.chart.visualization.cartesianChart.series.categorical.RangeBarSeriesLabelRenderer>;
									public constructor(param0: com.telerik.widget.chart.visualization.common.ChartSeries);
									public constructor();
									public getLabelSize(): number;
									public setLabelTextColor(param0: number): void;
									public setLabelMargin(param0: number): void;
									public setLabelFont(param0: globalAndroid.graphics.Typeface): void;
									public getLabelValueToStringConverter(): com.telerik.android.common.Function<any,string>;
									public setLabelFontStyle(param0: number): void;
									public setLabelValueToStringConverter(param0: com.telerik.android.common.Function<any,string>): void;
									public getLabelTextColor(): number;
									public setLabelSize(param0: number): void;
									public getLabelFont(): globalAndroid.graphics.Typeface;
									public setLabelFormat(param0: string): void;
									public getLabelFontStyle(): number;
									public getLabelFormat(): string;
									public getLabelMargin(): number;
									public renderLabel(param0: globalAndroid.graphics.Canvas, param1: com.telerik.widget.chart.engine.elementTree.ChartNode): void;
								}
							}
						}
					}
				}
			}
		}
	}
}

declare module com {
	export module telerik {
		export module widget {
			export module chart {
				export module visualization {
					export module cartesianChart {
						export module series {
							export module categorical {
								export abstract class RangeSeriesBase extends com.telerik.widget.chart.visualization.cartesianChart.series.categorical.CategoricalSeriesBase {
									public static class: java.lang.Class<com.telerik.widget.chart.visualization.cartesianChart.series.categorical.RangeSeriesBase>;
									public getIsSelected(): boolean;
									public constructor();
									public setHighBinding(param0: com.telerik.android.common.Function<any,any>): void;
									public invalidatePalette(): void;
									public getSelectedChangeListener(): com.telerik.widget.primitives.legend.LegendSelectableListener;
									public measureContent(param0: com.telerik.widget.chart.engine.elementTree.ChartNode, param1: any): com.telerik.android.common.math.RadSize;
									public onPointRemoved(param0: number, param1: com.telerik.widget.chart.engine.dataPoints.DataPoint): void;
									public constructor(param0: com.telerik.widget.chart.engine.databinding.DataPointBinding, param1: java.lang.Iterable<any>);
									public getLowBinding(): com.telerik.widget.chart.engine.databinding.DataPointBinding;
									public setIsSelected(param0: boolean): void;
									public setSelectedChangeListener(param0: com.telerik.widget.primitives.legend.LegendSelectableListener): void;
									public onDataPointIsSelectedChanged(param0: com.telerik.widget.chart.engine.dataPoints.DataPoint): void;
									public setHighBinding(param0: com.telerik.widget.chart.engine.databinding.DataPointBinding): void;
									public getHighBinding(): com.telerik.widget.chart.engine.databinding.DataPointBinding;
									public setLowBinding(param0: com.telerik.widget.chart.engine.databinding.DataPointBinding): void;
									public createDataSourceInstance(): com.telerik.widget.chart.engine.databinding.datasources.ChartSeriesDataSource;
									public onBoundItemPropertyChanged(param0: com.telerik.widget.chart.engine.databinding.DataPointBindingEntry, param1: java.beans.PropertyChangeEvent): void;
									public onPointAdded(param0: number, param1: com.telerik.widget.chart.engine.dataPoints.DataPoint): void;
									public setLowBinding(param0: com.telerik.android.common.Function<any,any>): void;
									public initDataBinding(): void;
									public onDataBindingComplete(): void;
									public onPaletteUpdated(param0: com.telerik.widget.palettes.ChartPalette): void;
									public getCollectionIndex(): number;
									public refreshNode(param0: com.telerik.widget.chart.engine.elementTree.ChartNode): void;
								}
							}
						}
					}
				}
			}
		}
	}
}

declare module com {
	export module telerik {
		export module widget {
			export module chart {
				export module visualization {
					export module cartesianChart {
						export module series {
							export module categorical {
								export class RangeSeriesStrokeMode {
									public static class: java.lang.Class<com.telerik.widget.chart.visualization.cartesianChart.series.categorical.RangeSeriesStrokeMode>;
									public static NONE: com.telerik.widget.chart.visualization.cartesianChart.series.categorical.RangeSeriesStrokeMode;
									public static LOW_POINTS: com.telerik.widget.chart.visualization.cartesianChart.series.categorical.RangeSeriesStrokeMode;
									public static HIGH_POINTS: com.telerik.widget.chart.visualization.cartesianChart.series.categorical.RangeSeriesStrokeMode;
									public static LOW_AND_HIGH_POINTS: com.telerik.widget.chart.visualization.cartesianChart.series.categorical.RangeSeriesStrokeMode;
									public static valueOf(param0: java.lang.Class<any>, param1: string): java.lang.Enum<any>;
									public static values(): native.Array<com.telerik.widget.chart.visualization.cartesianChart.series.categorical.RangeSeriesStrokeMode>;
									public static valueOf(param0: string): com.telerik.widget.chart.visualization.cartesianChart.series.categorical.RangeSeriesStrokeMode;
								}
							}
						}
					}
				}
			}
		}
	}
}

declare module com {
	export module telerik {
		export module widget {
			export module chart {
				export module visualization {
					export module cartesianChart {
						export module series {
							export module categorical {
								export class SphericalDataPointIndicatorRenderer extends com.telerik.widget.chart.visualization.cartesianChart.series.categorical.DataPointIndicatorRenderer {
									public static class: java.lang.Class<com.telerik.widget.chart.visualization.cartesianChart.series.categorical.SphericalDataPointIndicatorRenderer>;
									public pointerIndicatorRadius: number;
									public constructor(param0: com.telerik.widget.chart.visualization.common.ChartSeries);
									public constructor();
									public drawDataPointIndicator(param0: globalAndroid.graphics.Canvas, param1: number, param2: number): void;
									public setPointerIndicatorRadius(param0: number): void;
									public getPointerIndicatorRadius(): number;
								}
							}
						}
					}
				}
			}
		}
	}
}

declare module com {
	export module telerik {
		export module widget {
			export module chart {
				export module visualization {
					export module cartesianChart {
						export module series {
							export module categorical {
								export class SplineAreaSeries extends com.telerik.widget.chart.visualization.cartesianChart.series.categorical.AreaSeries {
									public static class: java.lang.Class<com.telerik.widget.chart.visualization.cartesianChart.series.categorical.SplineAreaSeries>;
									public getIsSelected(): boolean;
									public constructor();
									public invalidatePalette(): void;
									public getSelectedChangeListener(): com.telerik.widget.primitives.legend.LegendSelectableListener;
									public measureContent(param0: com.telerik.widget.chart.engine.elementTree.ChartNode, param1: any): com.telerik.android.common.math.RadSize;
									public onPointRemoved(param0: number, param1: com.telerik.widget.chart.engine.dataPoints.DataPoint): void;
									public constructor(param0: com.telerik.widget.chart.engine.databinding.DataPointBinding, param1: java.lang.Iterable<any>);
									public getFillColor(): number;
									public setIsSelected(param0: boolean): void;
									public setSelectedChangeListener(param0: com.telerik.widget.primitives.legend.LegendSelectableListener): void;
									public onDataPointIsSelectedChanged(param0: com.telerik.widget.chart.engine.dataPoints.DataPoint): void;
									public createRenderer(): com.telerik.widget.chart.visualization.common.renderers.LineRenderer;
									public constructor(param0: com.telerik.widget.chart.engine.databinding.DataPointBinding, param1: com.telerik.widget.chart.engine.databinding.DataPointBinding, param2: java.lang.Iterable<any>);
									public onBoundItemPropertyChanged(param0: com.telerik.widget.chart.engine.databinding.DataPointBindingEntry, param1: java.beans.PropertyChangeEvent): void;
									public onPointAdded(param0: number, param1: com.telerik.widget.chart.engine.dataPoints.DataPoint): void;
									public getStrokeThickness(): number;
									public getStrokeColor(): number;
									public onDataBindingComplete(): void;
									public onPaletteUpdated(param0: com.telerik.widget.palettes.ChartPalette): void;
									public getCollectionIndex(): number;
									public refreshNode(param0: com.telerik.widget.chart.engine.elementTree.ChartNode): void;
								}
							}
						}
					}
				}
			}
		}
	}
}

declare module com {
	export module telerik {
		export module widget {
			export module chart {
				export module visualization {
					export module cartesianChart {
						export module series {
							export module categorical {
								export class SplineSeries extends com.telerik.widget.chart.visualization.cartesianChart.series.categorical.LineSeries {
									public static class: java.lang.Class<com.telerik.widget.chart.visualization.cartesianChart.series.categorical.SplineSeries>;
									public getIsSelected(): boolean;
									public constructor();
									public invalidatePalette(): void;
									public getSelectedChangeListener(): com.telerik.widget.primitives.legend.LegendSelectableListener;
									public measureContent(param0: com.telerik.widget.chart.engine.elementTree.ChartNode, param1: any): com.telerik.android.common.math.RadSize;
									public onPointRemoved(param0: number, param1: com.telerik.widget.chart.engine.dataPoints.DataPoint): void;
									public constructor(param0: com.telerik.widget.chart.engine.databinding.DataPointBinding, param1: java.lang.Iterable<any>);
									public setIsSelected(param0: boolean): void;
									public setSelectedChangeListener(param0: com.telerik.widget.primitives.legend.LegendSelectableListener): void;
									public onDataPointIsSelectedChanged(param0: com.telerik.widget.chart.engine.dataPoints.DataPoint): void;
									public createRenderer(): com.telerik.widget.chart.visualization.common.renderers.LineRenderer;
									public constructor(param0: com.telerik.widget.chart.engine.databinding.DataPointBinding, param1: com.telerik.widget.chart.engine.databinding.DataPointBinding, param2: java.lang.Iterable<any>);
									public onBoundItemPropertyChanged(param0: com.telerik.widget.chart.engine.databinding.DataPointBindingEntry, param1: java.beans.PropertyChangeEvent): void;
									public onPointAdded(param0: number, param1: com.telerik.widget.chart.engine.dataPoints.DataPoint): void;
									public getStrokeThickness(): number;
									public getStrokeColor(): number;
									public onDataBindingComplete(): void;
									public onPaletteUpdated(param0: com.telerik.widget.palettes.ChartPalette): void;
									public getCollectionIndex(): number;
									public refreshNode(param0: com.telerik.widget.chart.engine.elementTree.ChartNode): void;
								}
							}
						}
					}
				}
			}
		}
	}
}

declare module com {
	export module telerik {
		export module widget {
			export module chart {
				export module visualization {
					export module cartesianChart {
						export module series {
							export module pointrenderers {
								export class BarPointRenderer extends com.telerik.widget.chart.visualization.cartesianChart.series.pointrenderers.ChartDataPointRendererBase<com.telerik.widget.chart.visualization.cartesianChart.series.categorical.BarSeries> {
									public static class: java.lang.Class<com.telerik.widget.chart.visualization.cartesianChart.series.pointrenderers.BarPointRenderer>;
									public pointColors(): java.util.HashMap<com.telerik.widget.chart.engine.dataPoints.DataPoint,com.telerik.widget.palettes.PaletteEntry>;
									public renderPoint(param0: globalAndroid.graphics.Canvas, param1: com.telerik.widget.chart.engine.dataPoints.DataPoint): void;
									public renderPointCore(param0: globalAndroid.graphics.Canvas, param1: com.telerik.widget.chart.engine.dataPoints.DataPoint): void;
									public constructor(param0: any);
									public constructor(param0: com.telerik.widget.chart.visualization.cartesianChart.series.categorical.BarSeries);
								}
							}
						}
					}
				}
			}
		}
	}
}

declare module com {
	export module telerik {
		export module widget {
			export module chart {
				export module visualization {
					export module cartesianChart {
						export module series {
							export module pointrenderers {
								export class BubblePointRenderer extends com.telerik.widget.chart.visualization.cartesianChart.series.pointrenderers.ScatterPointRenderer {
									public static class: java.lang.Class<com.telerik.widget.chart.visualization.cartesianChart.series.pointrenderers.BubblePointRenderer>;
									public pointColors(): java.util.HashMap<com.telerik.widget.chart.engine.dataPoints.DataPoint,com.telerik.widget.palettes.PaletteEntry>;
									public renderPoint(param0: globalAndroid.graphics.Canvas, param1: com.telerik.widget.chart.engine.dataPoints.DataPoint): void;
									public renderPointCore(param0: globalAndroid.graphics.Canvas, param1: com.telerik.widget.chart.engine.dataPoints.DataPoint): void;
									public constructor(param0: com.telerik.widget.chart.visualization.cartesianChart.series.scatter.ScatterPointSeries);
									public constructor(param0: any);
								}
							}
						}
					}
				}
			}
		}
	}
}

declare module com {
	export module telerik {
		export module widget {
			export module chart {
				export module visualization {
					export module cartesianChart {
						export module series {
							export module pointrenderers {
								export class CandlestickPointRenderer extends com.telerik.widget.chart.visualization.cartesianChart.series.pointrenderers.OhlcPointRendererBase {
									public static class: java.lang.Class<com.telerik.widget.chart.visualization.cartesianChart.series.pointrenderers.CandlestickPointRenderer>;
									public renderPoint(param0: globalAndroid.graphics.Canvas, param1: com.telerik.widget.chart.engine.dataPoints.DataPoint): void;
									public renderPointCore(param0: globalAndroid.graphics.Canvas, param1: com.telerik.widget.chart.engine.dataPoints.DataPoint): void;
									public constructor(param0: com.telerik.widget.chart.visualization.cartesianChart.series.categorical.OhlcSeriesBase);
									public constructor(param0: any);
									public constructor(param0: com.telerik.widget.chart.visualization.cartesianChart.series.categorical.CandlestickSeries);
									public getBodyPaint(): globalAndroid.graphics.Paint;
									public setBodyPaint(param0: globalAndroid.graphics.Paint): void;
								}
							}
						}
					}
				}
			}
		}
	}
}

declare module com {
	export module telerik {
		export module widget {
			export module chart {
				export module visualization {
					export module cartesianChart {
						export module series {
							export module pointrenderers {
								export class CategoricalBubblePointRenderer extends com.telerik.widget.chart.visualization.cartesianChart.series.pointrenderers.ChartDataPointRendererBase<com.telerik.widget.chart.visualization.cartesianChart.series.categorical.BubbleSeries> {
									public static class: java.lang.Class<com.telerik.widget.chart.visualization.cartesianChart.series.pointrenderers.CategoricalBubblePointRenderer>;
									public pointColors(): java.util.HashMap<com.telerik.widget.chart.engine.dataPoints.DataPoint,com.telerik.widget.palettes.PaletteEntry>;
									public constructor(param0: com.telerik.widget.chart.visualization.cartesianChart.series.categorical.BubbleSeries);
									public renderPoint(param0: globalAndroid.graphics.Canvas, param1: com.telerik.widget.chart.engine.dataPoints.DataPoint): void;
									public renderPointCore(param0: globalAndroid.graphics.Canvas, param1: com.telerik.widget.chart.engine.dataPoints.DataPoint): void;
									public getPointRadius(param0: com.telerik.widget.chart.engine.dataPoints.CategoricalBubbleDataPoint): number;
									public constructor(param0: any);
								}
							}
						}
					}
				}
			}
		}
	}
}

declare module com {
	export module telerik {
		export module widget {
			export module chart {
				export module visualization {
					export module cartesianChart {
						export module series {
							export module pointrenderers {
								export class ChartDataPointRenderer extends java.lang.Object {
									public static class: java.lang.Class<com.telerik.widget.chart.visualization.cartesianChart.series.pointrenderers.ChartDataPointRenderer>;
									/**
									 * Constructs a new instance of the com.telerik.widget.chart.visualization.cartesianChart.series.pointrenderers.ChartDataPointRenderer interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
									 */
									public constructor(implementation: {
										renderPoint(param0: globalAndroid.graphics.Canvas, param1: com.telerik.widget.chart.engine.dataPoints.DataPoint): void;
									});
									public constructor();
									public renderPoint(param0: globalAndroid.graphics.Canvas, param1: com.telerik.widget.chart.engine.dataPoints.DataPoint): void;
								}
							}
						}
					}
				}
			}
		}
	}
}

declare module com {
	export module telerik {
		export module widget {
			export module chart {
				export module visualization {
					export module cartesianChart {
						export module series {
							export module pointrenderers {
								export abstract class ChartDataPointRendererBase<T>  extends com.telerik.widget.chart.visualization.cartesianChart.series.pointrenderers.ChartDataPointRenderer {
									public static class: java.lang.Class<com.telerik.widget.chart.visualization.cartesianChart.series.pointrenderers.ChartDataPointRendererBase<any>>;
									public renderPoint(param0: globalAndroid.graphics.Canvas, param1: com.telerik.widget.chart.engine.dataPoints.DataPoint): void;
									public renderPointCore(param0: globalAndroid.graphics.Canvas, param1: com.telerik.widget.chart.engine.dataPoints.DataPoint): void;
									public constructor(param0: any);
									public getSeries(): any;
								}
							}
						}
					}
				}
			}
		}
	}
}

declare module com {
	export module telerik {
		export module widget {
			export module chart {
				export module visualization {
					export module cartesianChart {
						export module series {
							export module pointrenderers {
								export class OhlcPointRenderer extends com.telerik.widget.chart.visualization.cartesianChart.series.pointrenderers.OhlcPointRendererBase {
									public static class: java.lang.Class<com.telerik.widget.chart.visualization.cartesianChart.series.pointrenderers.OhlcPointRenderer>;
									public downStrokePaint: globalAndroid.graphics.Paint;
									public renderPoint(param0: globalAndroid.graphics.Canvas, param1: com.telerik.widget.chart.engine.dataPoints.DataPoint): void;
									public renderPointCore(param0: globalAndroid.graphics.Canvas, param1: com.telerik.widget.chart.engine.dataPoints.DataPoint): void;
									public constructor(param0: com.telerik.widget.chart.visualization.cartesianChart.series.categorical.OhlcSeriesBase);
									public getDownStroke(): globalAndroid.graphics.Paint;
									public constructor(param0: any);
									public setDownStroke(param0: globalAndroid.graphics.Paint): void;
								}
							}
						}
					}
				}
			}
		}
	}
}

declare module com {
	export module telerik {
		export module widget {
			export module chart {
				export module visualization {
					export module cartesianChart {
						export module series {
							export module pointrenderers {
								export abstract class OhlcPointRendererBase extends com.telerik.widget.chart.visualization.cartesianChart.series.pointrenderers.ChartDataPointRendererBase<com.telerik.widget.chart.visualization.cartesianChart.series.categorical.OhlcSeriesBase> {
									public static class: java.lang.Class<com.telerik.widget.chart.visualization.cartesianChart.series.pointrenderers.OhlcPointRendererBase>;
									public strokePaint: globalAndroid.graphics.Paint;
									public pointColors(): java.util.HashMap<com.telerik.widget.chart.engine.dataPoints.DataPoint,com.telerik.widget.palettes.PaletteEntry>;
									public renderPoint(param0: globalAndroid.graphics.Canvas, param1: com.telerik.widget.chart.engine.dataPoints.DataPoint): void;
									public upStrokePaint(): globalAndroid.graphics.Paint;
									public constructor(param0: com.telerik.widget.chart.visualization.cartesianChart.series.categorical.OhlcSeriesBase);
									public constructor(param0: any);
								}
							}
						}
					}
				}
			}
		}
	}
}

declare module com {
	export module telerik {
		export module widget {
			export module chart {
				export module visualization {
					export module cartesianChart {
						export module series {
							export module pointrenderers {
								export class RangeBarPointRenderer extends com.telerik.widget.chart.visualization.cartesianChart.series.pointrenderers.ChartDataPointRendererBase<com.telerik.widget.chart.visualization.cartesianChart.series.categorical.RangeBarSeries> {
									public static class: java.lang.Class<com.telerik.widget.chart.visualization.cartesianChart.series.pointrenderers.RangeBarPointRenderer>;
									public pointColors(): java.util.HashMap<com.telerik.widget.chart.engine.dataPoints.DataPoint,com.telerik.widget.palettes.PaletteEntry>;
									public renderPoint(param0: globalAndroid.graphics.Canvas, param1: com.telerik.widget.chart.engine.dataPoints.DataPoint): void;
									public renderPointCore(param0: globalAndroid.graphics.Canvas, param1: com.telerik.widget.chart.engine.dataPoints.DataPoint): void;
									public constructor(param0: any);
									public constructor(param0: com.telerik.widget.chart.visualization.cartesianChart.series.categorical.RangeBarSeries);
								}
							}
						}
					}
				}
			}
		}
	}
}

declare module com {
	export module telerik {
		export module widget {
			export module chart {
				export module visualization {
					export module cartesianChart {
						export module series {
							export module pointrenderers {
								export class ScatterPointRenderer extends com.telerik.widget.chart.visualization.cartesianChart.series.pointrenderers.ChartDataPointRendererBase<com.telerik.widget.chart.visualization.cartesianChart.series.scatter.ScatterPointSeries> {
									public static class: java.lang.Class<com.telerik.widget.chart.visualization.cartesianChart.series.pointrenderers.ScatterPointRenderer>;
									public pointColors(): java.util.HashMap<com.telerik.widget.chart.engine.dataPoints.DataPoint,com.telerik.widget.palettes.PaletteEntry>;
									public renderPoint(param0: globalAndroid.graphics.Canvas, param1: com.telerik.widget.chart.engine.dataPoints.DataPoint): void;
									public renderPointCore(param0: globalAndroid.graphics.Canvas, param1: com.telerik.widget.chart.engine.dataPoints.DataPoint): void;
									public constructor(param0: com.telerik.widget.chart.visualization.cartesianChart.series.scatter.ScatterPointSeries);
									public constructor(param0: any);
								}
							}
						}
					}
				}
			}
		}
	}
}

declare module com {
	export module telerik {
		export module widget {
			export module chart {
				export module visualization {
					export module cartesianChart {
						export module series {
							export module scatter {
								export class BubbleSeriesLabelRenderer extends com.telerik.widget.chart.visualization.cartesianChart.series.scatter.ScatterSeriesLabelRenderer {
									public static class: java.lang.Class<com.telerik.widget.chart.visualization.cartesianChart.series.scatter.BubbleSeriesLabelRenderer>;
									public constructor(param0: com.telerik.widget.chart.visualization.common.ChartSeries);
									public constructor();
									public getLabelSize(): number;
									public setLabelTextColor(param0: number): void;
									public setLabelMargin(param0: number): void;
									public setLabelFont(param0: globalAndroid.graphics.Typeface): void;
									public getLabelValueToStringConverter(): com.telerik.android.common.Function<any,string>;
									public constructor(param0: com.telerik.widget.chart.visualization.common.ChartSeries, param1: number, param2: number);
									public setLabelFontStyle(param0: number): void;
									public setLabelValueToStringConverter(param0: com.telerik.android.common.Function<any,string>): void;
									public getLabelTextColor(): number;
									public setLabelSize(param0: number): void;
									public getLabelFont(): globalAndroid.graphics.Typeface;
									public setLabelFormat(param0: string): void;
									public getLabelFontStyle(): number;
									public getLabelFormat(): string;
									public getLabelMargin(): number;
									public getLabelText(param0: com.telerik.widget.chart.engine.dataPoints.DataPoint): string;
									public renderLabel(param0: globalAndroid.graphics.Canvas, param1: com.telerik.widget.chart.engine.elementTree.ChartNode): void;
								}
							}
						}
					}
				}
			}
		}
	}
}

declare module com {
	export module telerik {
		export module widget {
			export module chart {
				export module visualization {
					export module cartesianChart {
						export module series {
							export module scatter {
								export class ScatterAreaSeries extends com.telerik.widget.chart.visualization.cartesianChart.series.scatter.ScatterLineSeries implements com.telerik.widget.chart.visualization.common.FilledSeries {
									public static class: java.lang.Class<com.telerik.widget.chart.visualization.cartesianChart.series.scatter.ScatterAreaSeries>;
									public getIsSelected(): boolean;
									public constructor();
									public invalidatePalette(): void;
									public getSelectedChangeListener(): com.telerik.widget.primitives.legend.LegendSelectableListener;
									public measureContent(param0: com.telerik.widget.chart.engine.elementTree.ChartNode, param1: any): com.telerik.android.common.math.RadSize;
									public defaultPaletteFamily(): string;
									public onPointRemoved(param0: number, param1: com.telerik.widget.chart.engine.dataPoints.DataPoint): void;
									public setFillPaint(param0: globalAndroid.graphics.Paint): void;
									public getFillColor(): number;
									public setIsSelected(param0: boolean): void;
									public setFillColor(param0: number): void;
									public setSelectedChangeListener(param0: com.telerik.widget.primitives.legend.LegendSelectableListener): void;
									public onDataPointIsSelectedChanged(param0: com.telerik.widget.chart.engine.dataPoints.DataPoint): void;
									public createRenderer(): com.telerik.widget.chart.visualization.common.renderers.LineRenderer;
									public onBoundItemPropertyChanged(param0: com.telerik.widget.chart.engine.databinding.DataPointBindingEntry, param1: java.beans.PropertyChangeEvent): void;
									public onPointAdded(param0: number, param1: com.telerik.widget.chart.engine.dataPoints.DataPoint): void;
									public getStrokeThickness(): number;
									public getStrokeColor(): number;
									public onDataBindingComplete(): void;
									public onPaletteUpdated(param0: com.telerik.widget.palettes.ChartPalette): void;
									public getCollectionIndex(): number;
									public refreshNode(param0: com.telerik.widget.chart.engine.elementTree.ChartNode): void;
								}
							}
						}
					}
				}
			}
		}
	}
}

declare module com {
	export module telerik {
		export module widget {
			export module chart {
				export module visualization {
					export module cartesianChart {
						export module series {
							export module scatter {
								export class ScatterBubbleSeries extends com.telerik.widget.chart.visualization.cartesianChart.series.scatter.ScatterPointSeries {
									public static class: java.lang.Class<com.telerik.widget.chart.visualization.cartesianChart.series.scatter.ScatterBubbleSeries>;
									public getIsSelected(): boolean;
									public constructor();
									public createDataPointRenderer(): com.telerik.widget.chart.visualization.cartesianChart.series.pointrenderers.ChartDataPointRenderer;
									public getBubbleScale(): number;
									public createLabelRenderer(): com.telerik.widget.chart.visualization.common.renderers.BaseLabelRenderer;
									public invalidatePalette(): void;
									public getSelectedChangeListener(): com.telerik.widget.primitives.legend.LegendSelectableListener;
									public measureContent(param0: com.telerik.widget.chart.engine.elementTree.ChartNode, param1: any): com.telerik.android.common.math.RadSize;
									public getBubbleSizeBinding(): com.telerik.widget.chart.engine.databinding.DataPointBinding;
									public onPointRemoved(param0: number, param1: com.telerik.widget.chart.engine.dataPoints.DataPoint): void;
									public setBubbleScale(param0: number): void;
									public setIsSelected(param0: boolean): void;
									public setSelectedChangeListener(param0: com.telerik.widget.primitives.legend.LegendSelectableListener): void;
									public onDataPointIsSelectedChanged(param0: com.telerik.widget.chart.engine.dataPoints.DataPoint): void;
									public setBubbleSizeBinding(param0: com.telerik.widget.chart.engine.databinding.DataPointBinding): void;
									public onBubbleSizeBindingChanged(param0: com.telerik.widget.chart.engine.databinding.DataPointBinding): void;
									public createDataSourceInstance(): com.telerik.widget.chart.engine.databinding.datasources.ChartSeriesDataSource;
									public onBoundItemPropertyChanged(param0: com.telerik.widget.chart.engine.databinding.DataPointBindingEntry, param1: java.beans.PropertyChangeEvent): void;
									public onPointAdded(param0: number, param1: com.telerik.widget.chart.engine.dataPoints.DataPoint): void;
									public onDataBindingComplete(): void;
									public onPaletteUpdated(param0: com.telerik.widget.palettes.ChartPalette): void;
									public getCollectionIndex(): number;
									public refreshNode(param0: com.telerik.widget.chart.engine.elementTree.ChartNode): void;
								}
							}
						}
					}
				}
			}
		}
	}
}

declare module com {
	export module telerik {
		export module widget {
			export module chart {
				export module visualization {
					export module cartesianChart {
						export module series {
							export module scatter {
								export class ScatterBubbleSeriesLabelRenderer extends com.telerik.widget.chart.visualization.cartesianChart.series.scatter.ScatterSeriesLabelRenderer {
									public static class: java.lang.Class<com.telerik.widget.chart.visualization.cartesianChart.series.scatter.ScatterBubbleSeriesLabelRenderer>;
									public constructor(param0: com.telerik.widget.chart.visualization.common.ChartSeries);
									public constructor();
									public getLabelSize(): number;
									public setLabelTextColor(param0: number): void;
									public setLabelMargin(param0: number): void;
									public setLabelFont(param0: globalAndroid.graphics.Typeface): void;
									public getLabelValueToStringConverter(): com.telerik.android.common.Function<any,string>;
									public constructor(param0: com.telerik.widget.chart.visualization.common.ChartSeries, param1: number, param2: number);
									public setLabelFontStyle(param0: number): void;
									public setLabelValueToStringConverter(param0: com.telerik.android.common.Function<any,string>): void;
									public getLabelTextColor(): number;
									public setLabelSize(param0: number): void;
									public getLabelFont(): globalAndroid.graphics.Typeface;
									public setLabelFormat(param0: string): void;
									public getLabelFontStyle(): number;
									public getLabelFormat(): string;
									public getLabelMargin(): number;
									public getLabelText(param0: com.telerik.widget.chart.engine.dataPoints.DataPoint): string;
									public renderLabel(param0: globalAndroid.graphics.Canvas, param1: com.telerik.widget.chart.engine.elementTree.ChartNode): void;
								}
							}
						}
					}
				}
			}
		}
	}
}

declare module com {
	export module telerik {
		export module widget {
			export module chart {
				export module visualization {
					export module cartesianChart {
						export module series {
							export module scatter {
								export class ScatterLineSeries extends com.telerik.widget.chart.visualization.cartesianChart.series.scatter.ScatterPointSeries implements com.telerik.widget.chart.visualization.common.StrokedSeries {
									public static class: java.lang.Class<com.telerik.widget.chart.visualization.cartesianChart.series.scatter.ScatterLineSeries>;
									public lineTouchSize: number;
									public setStrokeThickness(param0: number): void;
									public getIsSelected(): boolean;
									public createDataPointRenderer(): com.telerik.widget.chart.visualization.cartesianChart.series.pointrenderers.ChartDataPointRenderer;
									public measureContent(param0: com.telerik.widget.chart.engine.elementTree.ChartNode, param1: any): com.telerik.android.common.math.RadSize;
									public initFields(): void;
									public getLineTouchTargetSize(): number;
									public setTouchTargetRadius(param0: number): void;
									public onPointRemoved(param0: number, param1: com.telerik.widget.chart.engine.dataPoints.DataPoint): void;
									public setIsSelected(param0: boolean): void;
									public hitTest(param0: globalAndroid.graphics.PointF): boolean;
									public setSelectedChangeListener(param0: com.telerik.widget.primitives.legend.LegendSelectableListener): void;
									public onDataPointIsSelectedChanged(param0: com.telerik.widget.chart.engine.dataPoints.DataPoint): void;
									public onBoundItemPropertyChanged(param0: com.telerik.widget.chart.engine.databinding.DataPointBindingEntry, param1: java.beans.PropertyChangeEvent): void;
									public onPointAdded(param0: number, param1: com.telerik.widget.chart.engine.dataPoints.DataPoint): void;
									public getStrokeThickness(): number;
									public getStrokeColor(): number;
									public onDataBindingComplete(): void;
									public onPaletteUpdated(param0: com.telerik.widget.palettes.ChartPalette): void;
									public getCollectionIndex(): number;
									public drawCore(param0: globalAndroid.graphics.Canvas): void;
									public refreshNode(param0: com.telerik.widget.chart.engine.elementTree.ChartNode): void;
									public updateUICore(param0: com.telerik.widget.chart.visualization.common.ChartLayoutContext): void;
									public getTouchTargetRadius(): number;
									public constructor();
									public invalidatePalette(): void;
									public setStrokePaint(param0: globalAndroid.graphics.Paint): void;
									public getSelectedChangeListener(): com.telerik.widget.primitives.legend.LegendSelectableListener;
									public defaultPaletteFamily(): string;
									public applyPaletteCore(param0: com.telerik.widget.palettes.ChartPalette): void;
									public setLineTouchTargetSize(param0: number): void;
									public createRenderer(): com.telerik.widget.chart.visualization.common.renderers.LineRenderer;
									public setStrokeColor(param0: number): void;
									public getRenderer(): com.telerik.widget.chart.visualization.common.renderers.LineRenderer;
								}
							}
						}
					}
				}
			}
		}
	}
}

declare module com {
	export module telerik {
		export module widget {
			export module chart {
				export module visualization {
					export module cartesianChart {
						export module series {
							export module scatter {
								export class ScatterPointSeries extends com.telerik.widget.chart.visualization.cartesianChart.series.CartesianSeries {
									public static class: java.lang.Class<com.telerik.widget.chart.visualization.cartesianChart.series.scatter.ScatterPointSeries>;
									public static FILL_COLOR_PROPERTY_KEY: number;
									public static STROKE_COLOR_PROPERTY_KEY: number;
									public static STROKE_THICKNESS_PROPERTY_KEY: number;
									public scatterPointRenderer: com.telerik.widget.chart.visualization.cartesianChart.series.pointrenderers.ScatterPointRenderer;
									public getIsSelected(): boolean;
									public hitTestDataPoint(param0: globalAndroid.graphics.PointF, param1: com.telerik.widget.chart.engine.dataPoints.DataPoint): boolean;
									public getFillPaint(): globalAndroid.graphics.Paint;
									public setFillColor(param0: number): void;
									public getYValueBinding(): com.telerik.widget.chart.engine.databinding.DataPointBinding;
									public setYValueBinding(param0: com.telerik.widget.chart.engine.databinding.DataPointBinding): void;
									public setXValueBinding(param0: com.telerik.android.common.Function<any,any>): void;
									public getDistanceToPoint(param0: globalAndroid.graphics.Point, param1: globalAndroid.graphics.Point): number;
									public onBoundItemPropertyChanged(param0: com.telerik.widget.chart.engine.databinding.DataPointBindingEntry, param1: java.beans.PropertyChangeEvent): void;
									public setData(param0: java.lang.Iterable<any>): void;
									public setCanApplyPalette(param0: boolean): void;
									public getStrokeColor(): number;
									public onDataBindingComplete(): void;
									public onPaletteUpdated(param0: com.telerik.widget.palettes.ChartPalette): void;
									public refreshNode(param0: com.telerik.widget.chart.engine.elementTree.ChartNode): void;
									public getSelectedChangeListener(): com.telerik.widget.primitives.legend.LegendSelectableListener;
									public hitTestDataPoint(param0: globalAndroid.graphics.PointF): com.telerik.widget.chart.engine.dataPoints.DataPoint;
									public getFillColor(): number;
									public applyPaletteCore(param0: com.telerik.widget.palettes.ChartPalette): void;
									public applyPaletteToDefaultVisual(param0: com.telerik.widget.chart.engine.dataPoints.DataPoint, param1: com.telerik.widget.palettes.PaletteEntry): void;
									public setStrokeColor(param0: number): void;
									public getLegendStrokeColor(): number;
									public getStrokePaint(): globalAndroid.graphics.Paint;
									public setStrokeThickness(param0: number): void;
									public createDataPointRenderer(): com.telerik.widget.chart.visualization.cartesianChart.series.pointrenderers.ChartDataPointRenderer;
									public setTouchTargetSize(param0: number): void;
									public createLabelRenderer(): com.telerik.widget.chart.visualization.common.renderers.BaseLabelRenderer;
									public setXValueBinding(param0: com.telerik.widget.chart.engine.databinding.DataPointBinding): void;
									public measureContent(param0: com.telerik.widget.chart.engine.elementTree.ChartNode, param1: any): com.telerik.android.common.math.RadSize;
									public initFields(): void;
									public setPointSize(param0: number): void;
									public onPointRemoved(param0: number, param1: com.telerik.widget.chart.engine.dataPoints.DataPoint): void;
									public createModel(): com.telerik.widget.chart.engine.series.ChartSeriesModel<any>;
									public dataPoints(): com.telerik.widget.chart.engine.dataPoints.DataPointCollection<com.telerik.widget.chart.engine.dataPoints.ScatterDataPoint>;
									public setFillPaint(param0: globalAndroid.graphics.Paint): void;
									public setIsSelected(param0: boolean): void;
									public getTouchTargetSize(): number;
									public setSelectedChangeListener(param0: com.telerik.widget.primitives.legend.LegendSelectableListener): void;
									public onDataPointIsSelectedChanged(param0: com.telerik.widget.chart.engine.dataPoints.DataPoint): void;
									public setYValueBinding(param0: com.telerik.android.common.Function<any,any>): void;
									public onPointAdded(param0: number, param1: com.telerik.widget.chart.engine.dataPoints.DataPoint): void;
									public getStrokeThickness(): number;
									public getCollectionIndex(): number;
									public constructor();
									public getLegendFillColor(): number;
									public invalidatePalette(): void;
									public setStrokePaint(param0: globalAndroid.graphics.Paint): void;
									public defaultPaletteFamily(): string;
									public getXValueBinding(): com.telerik.widget.chart.engine.databinding.DataPointBinding;
									public createDataSourceInstance(): com.telerik.widget.chart.engine.databinding.datasources.ChartSeriesDataSource;
									public initDataBinding(): void;
									public getPointSize(): number;
								}
							}
						}
					}
				}
			}
		}
	}
}

declare module com {
	export module telerik {
		export module widget {
			export module chart {
				export module visualization {
					export module cartesianChart {
						export module series {
							export module scatter {
								export class ScatterSeriesLabelRenderer extends com.telerik.widget.chart.visualization.common.renderers.PointingLabelRenderer {
									public static class: java.lang.Class<com.telerik.widget.chart.visualization.cartesianChart.series.scatter.ScatterSeriesLabelRenderer>;
									public constructor(param0: com.telerik.widget.chart.visualization.common.ChartSeries);
									public constructor();
									public getLabelSize(): number;
									public setLabelTextColor(param0: number): void;
									public setLabelMargin(param0: number): void;
									public setLabelFont(param0: globalAndroid.graphics.Typeface): void;
									public getLabelValueToStringConverter(): com.telerik.android.common.Function<any,string>;
									public constructor(param0: com.telerik.widget.chart.visualization.common.ChartSeries, param1: number, param2: number);
									public setLabelFontStyle(param0: number): void;
									public setLabelValueToStringConverter(param0: com.telerik.android.common.Function<any,string>): void;
									public getLabelTextColor(): number;
									public setLabelSize(param0: number): void;
									public calculateLabelPoint(param0: com.telerik.widget.chart.engine.dataPoints.DataPoint, param1: globalAndroid.graphics.Rect): com.telerik.android.common.math.RadPoint;
									public getLabelFont(): globalAndroid.graphics.Typeface;
									public setLabelFormat(param0: string): void;
									public getLabelFontStyle(): number;
									public getLabelFormat(): string;
									public getLabelMargin(): number;
									public getLabelText(param0: com.telerik.widget.chart.engine.dataPoints.DataPoint): string;
									public renderLabel(param0: globalAndroid.graphics.Canvas, param1: com.telerik.widget.chart.engine.elementTree.ChartNode): void;
								}
							}
						}
					}
				}
			}
		}
	}
}

declare module com {
	export module telerik {
		export module widget {
			export module chart {
				export module visualization {
					export module cartesianChart {
						export module series {
							export module scatter {
								export class ScatterSplineAreaSeries extends com.telerik.widget.chart.visualization.cartesianChart.series.scatter.ScatterAreaSeries {
									public static class: java.lang.Class<com.telerik.widget.chart.visualization.cartesianChart.series.scatter.ScatterSplineAreaSeries>;
									public getIsSelected(): boolean;
									public constructor();
									public invalidatePalette(): void;
									public getSelectedChangeListener(): com.telerik.widget.primitives.legend.LegendSelectableListener;
									public measureContent(param0: com.telerik.widget.chart.engine.elementTree.ChartNode, param1: any): com.telerik.android.common.math.RadSize;
									public onPointRemoved(param0: number, param1: com.telerik.widget.chart.engine.dataPoints.DataPoint): void;
									public getFillColor(): number;
									public setIsSelected(param0: boolean): void;
									public setSelectedChangeListener(param0: com.telerik.widget.primitives.legend.LegendSelectableListener): void;
									public onDataPointIsSelectedChanged(param0: com.telerik.widget.chart.engine.dataPoints.DataPoint): void;
									public createRenderer(): com.telerik.widget.chart.visualization.common.renderers.LineRenderer;
									public onBoundItemPropertyChanged(param0: com.telerik.widget.chart.engine.databinding.DataPointBindingEntry, param1: java.beans.PropertyChangeEvent): void;
									public onPointAdded(param0: number, param1: com.telerik.widget.chart.engine.dataPoints.DataPoint): void;
									public getStrokeThickness(): number;
									public getStrokeColor(): number;
									public onDataBindingComplete(): void;
									public onPaletteUpdated(param0: com.telerik.widget.palettes.ChartPalette): void;
									public getCollectionIndex(): number;
									public refreshNode(param0: com.telerik.widget.chart.engine.elementTree.ChartNode): void;
								}
							}
						}
					}
				}
			}
		}
	}
}

declare module com {
	export module telerik {
		export module widget {
			export module chart {
				export module visualization {
					export module cartesianChart {
						export module series {
							export module scatter {
								export class ScatterSplineSeries extends com.telerik.widget.chart.visualization.cartesianChart.series.scatter.ScatterLineSeries {
									public static class: java.lang.Class<com.telerik.widget.chart.visualization.cartesianChart.series.scatter.ScatterSplineSeries>;
									public getIsSelected(): boolean;
									public constructor();
									public invalidatePalette(): void;
									public getSelectedChangeListener(): com.telerik.widget.primitives.legend.LegendSelectableListener;
									public measureContent(param0: com.telerik.widget.chart.engine.elementTree.ChartNode, param1: any): com.telerik.android.common.math.RadSize;
									public onPointRemoved(param0: number, param1: com.telerik.widget.chart.engine.dataPoints.DataPoint): void;
									public setIsSelected(param0: boolean): void;
									public setSelectedChangeListener(param0: com.telerik.widget.primitives.legend.LegendSelectableListener): void;
									public onDataPointIsSelectedChanged(param0: com.telerik.widget.chart.engine.dataPoints.DataPoint): void;
									public createRenderer(): com.telerik.widget.chart.visualization.common.renderers.LineRenderer;
									public onBoundItemPropertyChanged(param0: com.telerik.widget.chart.engine.databinding.DataPointBindingEntry, param1: java.beans.PropertyChangeEvent): void;
									public onPointAdded(param0: number, param1: com.telerik.widget.chart.engine.dataPoints.DataPoint): void;
									public getStrokeThickness(): number;
									public getStrokeColor(): number;
									public onDataBindingComplete(): void;
									public onPaletteUpdated(param0: com.telerik.widget.palettes.ChartPalette): void;
									public getCollectionIndex(): number;
									public refreshNode(param0: com.telerik.widget.chart.engine.elementTree.ChartNode): void;
								}
							}
						}
					}
				}
			}
		}
	}
}

declare module com {
	export module telerik {
		export module widget {
			export module chart {
				export module visualization {
					export module common {
						export class AnnotationCollection<T>  extends com.telerik.widget.chart.visualization.common.PresenterCollection<any> {
							public static class: java.lang.Class<com.telerik.widget.chart.visualization.common.AnnotationCollection<any>>;
							public subList(param0: number, param1: number): java.util.List<any>;
							public contains(param0: any): boolean;
							public remove(param0: number): any;
							public size(): number;
							public hashCode(): number;
							public toArray(): native.Array<any>;
							public listIterator(): java.util.ListIterator<any>;
							public addAll(param0: java.util.Collection<any>): boolean;
							public set(param0: number, param1: any): any;
							public constructor(param0: java.util.Collection<any>);
							public add(param0: any): boolean;
							public listIterator(param0: number): java.util.ListIterator<any>;
							public removeAll(param0: java.util.Collection<any>): boolean;
							public add(param0: number, param1: any): void;
							public toArray(param0: native.Array<any>): native.Array<any>;
							public constructor(param0: com.telerik.widget.chart.visualization.common.RadChartViewBase<any>);
							public retainAll(param0: java.util.Collection<any>): boolean;
							public constructor();
							public containsAll(param0: java.util.Collection<any>): boolean;
							public iterator(): java.util.Iterator<any>;
							public lastIndexOf(param0: any): number;
							public remove(param0: any): boolean;
							public clear(): void;
							public get(param0: number): any;
							public indexOf(param0: any): number;
							public constructor(param0: number);
							public addAll(param0: number, param1: java.util.Collection<any>): boolean;
							public equals(param0: any): boolean;
							public isEmpty(): boolean;
						}
					}
				}
			}
		}
	}
}

declare module com {
	export module telerik {
		export module widget {
			export module chart {
				export module visualization {
					export module common {
						export abstract class Axis extends com.telerik.widget.chart.visualization.common.ChartElementPresenter implements com.telerik.widget.chart.visualization.common.renderers.ChartLabelRenderer {
							public static class: java.lang.Class<com.telerik.widget.chart.visualization.common.Axis>;
							public static AXIS_Z_INDEX: number;
							public static LINE_THICKNESS_KEY: string;
							public static LINE_COLOR_KEY: string;
							public static LABEL_COLOR: string;
							public static LABEL_SIZE_KEY: string;
							public static LABEL_FONT_KEY: string;
							public static LABEL_FONT_STYLE_KEY: string;
							public static LABEL_FIT_MODE: string;
							public static LABEL_ROTATION_ANGLE: string;
							public static TICK_COLOR_KEY: string;
							public static TICK_THICKNESS_KEY: string;
							public static LABEL_COLOR_PROPERTY_KEY: number;
							public static LABEL_SIZE_PROPERTY_KEY: number;
							public static LABEL_FONT_PROPERTY_KEY: number;
							public static LABEL_FONT_STYLE_PROPERTY_KEY: number;
							public static LABEL_FIT_MODE_PROPERTY_KEY: number;
							public static LABEL_ROTATION_ANGLE_PROPERTY_KEY: number;
							public static TICK_COLOR_PROPERTY_KEY: number;
							public static TICK_THICKNESS_PROPERTY_KEY: number;
							public defaultLabelRenderer: com.telerik.widget.chart.visualization.common.renderers.ChartLabelRenderer;
							public getElement(): com.telerik.widget.chart.engine.elementTree.ChartElement;
							public applyPaletteCore(param0: com.telerik.widget.palettes.ChartPalette): void;
							public getShowLabels(): boolean;
							public setLabelFormat(param0: string): void;
							public renderLabel(param0: globalAndroid.graphics.Canvas, param1: com.telerik.widget.chart.engine.elementTree.ChartNode): void;
							public setShowLabels(param0: boolean): void;
							public getLayoutSlot(param0: com.telerik.widget.chart.engine.elementTree.ChartNode, param1: com.telerik.widget.chart.visualization.common.ChartLayoutContext): com.telerik.android.common.math.RadRect;
							public getLabelFormat(): string;
							public createModel(): com.telerik.widget.chart.engine.axes.AxisModel;
							public getLabelSize(): number;
							public render(param0: globalAndroid.graphics.Canvas): void;
							public setAxisType(param0: com.telerik.widget.chart.engine.axes.AxisType): void;
							public getLabelInterval(): number;
							public measureContent(param0: com.telerik.widget.chart.engine.elementTree.ChartNode, param1: any): com.telerik.android.common.math.RadSize;
							public setLabelInterval(param0: number): void;
							public onAttached(): void;
							public getLabelLayoutMode(): com.telerik.widget.chart.engine.axes.AxisLabelLayoutMode;
							public onPaletteUpdated(param0: com.telerik.widget.palettes.ChartPalette): void;
							public getMajorTickOffset(): number;
							public setTickColor(param0: number): void;
							public getCollectionIndex(): number;
							public getAxisType(): com.telerik.widget.chart.engine.axes.AxisType;
							public onDetached(param0: com.telerik.widget.chart.visualization.common.RadChartViewBase<any>): void;
							public getLabelTextColor(): number;
							public setLabelRenderer(param0: com.telerik.widget.chart.visualization.common.renderers.ChartLabelRenderer): void;
							public setLabelSize(param0: number): void;
							public refreshNode(param0: com.telerik.widget.chart.engine.elementTree.ChartNode): void;
							public createDefaultLabelRenderer(): com.telerik.widget.chart.visualization.common.renderers.ChartLabelRenderer;
							public setLabelTextColor(param0: number): void;
							public setLabelOffset(param0: number): void;
							public defaultPaletteFamily(): string;
							public getLastLayoutContext(): com.telerik.widget.chart.visualization.common.ChartLayoutContext;
							public setVerticalWidth(param0: number): void;
							public getDataPointsForValue(param0: any): java.util.List<com.telerik.widget.chart.engine.dataPoints.DataPoint>;
							public setTickThickness(param0: number): void;
							public setLabelValueToStringConverter(param0: com.telerik.android.common.Function<any,string>): void;
							public invalidatePalette(): void;
							public getModel(): com.telerik.widget.chart.engine.axes.AxisModel;
							public getTickColor(): number;
							public getLabelRenderer(): com.telerik.widget.chart.visualization.common.renderers.ChartLabelRenderer;
							public getLabelFont(): globalAndroid.graphics.Typeface;
							public getLastLabelVisibility(): com.telerik.widget.chart.engine.axes.common.AxisLastLabelVisibility;
							public setLastLabelVisibility(param0: com.telerik.widget.chart.engine.axes.common.AxisLastLabelVisibility): void;
							public setLabelMargin(param0: number): void;
							public getDefaultZIndex(): number;
							public constructor();
							public refreshNodeCore(param0: com.telerik.widget.chart.engine.elementTree.ChartNode): void;
							public getLabelFontStyle(): number;
							public resolveLabelRenderer(): com.telerik.widget.chart.visualization.common.renderers.ChartLabelRenderer;
							public getLabelOffset(): number;
							public getVerticalWidth(): number;
							public setLabelRotationAngle(param0: number): void;
							public getLabelFitMode(): com.telerik.widget.chart.engine.axes.common.AxisLabelFitMode;
							public setLabelFontStyle(param0: number): void;
							public getLabelMargin(): number;
							public getTickThickness(): number;
							public getLabelValueToStringConverter(): com.telerik.android.common.Function<any,string>;
							public setLabelFont(param0: globalAndroid.graphics.Typeface): void;
							public setMajorTickOffset(param0: number): void;
							public setLabelLayoutMode(param0: com.telerik.widget.chart.engine.axes.AxisLabelLayoutMode): void;
							public getLabelRotationAngle(): number;
							public setLabelFitMode(param0: com.telerik.widget.chart.engine.axes.common.AxisLabelFitMode): void;
						}
					}
				}
			}
		}
	}
}

declare module com {
	export module telerik {
		export module widget {
			export module chart {
				export module visualization {
					export module common {
						export abstract class CartesianAxis extends com.telerik.widget.chart.visualization.common.LineAxis {
							public static class: java.lang.Class<com.telerik.widget.chart.visualization.common.CartesianAxis>;
							public linkedSeriesCount: number;
							public createDefaultLabelRenderer(): com.telerik.widget.chart.visualization.common.renderers.ChartLabelRenderer;
							public setLabelTextColor(param0: number): void;
							public setLabelFormat(param0: string): void;
							public setVerticalLocation(param0: com.telerik.widget.chart.engine.axes.common.AxisVerticalLocation): void;
							public renderLabel(param0: globalAndroid.graphics.Canvas, param1: com.telerik.widget.chart.engine.elementTree.ChartNode): void;
							public getLabelFormat(): string;
							public getLabelSize(): number;
							public setLabelValueToStringConverter(param0: com.telerik.android.common.Function<any,string>): void;
							public invalidatePalette(): void;
							public getLabelFont(): globalAndroid.graphics.Typeface;
							public measureContent(param0: com.telerik.widget.chart.engine.elementTree.ChartNode, param1: any): com.telerik.android.common.math.RadSize;
							public getVerticalLocation(): com.telerik.widget.chart.engine.axes.common.AxisVerticalLocation;
							public setLabelMargin(param0: number): void;
							public constructor();
							public getLabelFontStyle(): number;
							public onPaletteUpdated(param0: com.telerik.widget.palettes.ChartPalette): void;
							public getHorizontalLocation(): com.telerik.widget.chart.engine.axes.common.AxisHorizontalLocation;
							public measureNodeOverride(param0: com.telerik.widget.chart.engine.elementTree.ChartNode, param1: any): com.telerik.android.common.math.RadSize;
							public setHorizontalLocation(param0: com.telerik.widget.chart.engine.axes.common.AxisHorizontalLocation): void;
							public setLabelFontStyle(param0: number): void;
							public getLabelMargin(): number;
							public getCollectionIndex(): number;
							public getLabelValueToStringConverter(): com.telerik.android.common.Function<any,string>;
							public setLabelFont(param0: globalAndroid.graphics.Typeface): void;
							public getLabelTextColor(): number;
							public setLabelSize(param0: number): void;
							public refreshNode(param0: com.telerik.widget.chart.engine.elementTree.ChartNode): void;
						}
					}
				}
			}
		}
	}
}

declare module com {
	export module telerik {
		export module widget {
			export module chart {
				export module visualization {
					export module common {
						export abstract class ChartElementPresenter extends com.telerik.widget.chart.visualization.common.PresenterBase {
							public static class: java.lang.Class<com.telerik.widget.chart.visualization.common.ChartElementPresenter>;
							public chart: com.telerik.widget.chart.visualization.common.RadChartViewBase<any>;
							public constructor();
							public getElement(): com.telerik.widget.chart.engine.elementTree.ChartElement;
							public onAttached(): void;
							public onPaletteInvalidated(): void;
							public onPaletteUpdated(param0: com.telerik.widget.palettes.ChartPalette): void;
							public getPalette(): com.telerik.widget.palettes.ChartPalette;
							public setZIndex(param0: number): void;
							public getCanApplyPalette(): boolean;
							public invalidatePalette(): void;
							public updatePalette(param0: boolean): void;
							public requestRender(): void;
							public getCollectionIndex(): number;
							public detach(): void;
							public requestLayout(): void;
							public getChart(): com.telerik.widget.chart.visualization.common.RadChartViewBase<any>;
							public measureContent(param0: com.telerik.widget.chart.engine.elementTree.ChartNode, param1: any): com.telerik.android.common.math.RadSize;
							public onDetached(param0: com.telerik.widget.chart.visualization.common.RadChartViewBase<any>): void;
							public getZIndex(): number;
							public attach(param0: com.telerik.widget.chart.visualization.common.RadChartViewBase<any>): void;
							public processPaletteChanged(): void;
							public getDefaultZIndex(): number;
							public refreshNode(param0: com.telerik.widget.chart.engine.elementTree.ChartNode): void;
						}
					}
				}
			}
		}
	}
}

declare module com {
	export module telerik {
		export module widget {
			export module chart {
				export module visualization {
					export module common {
						export class ChartLayoutContext extends java.lang.Object {
							public static class: java.lang.Class<com.telerik.widget.chart.visualization.common.ChartLayoutContext>;
							public constructor();
							public panOffset(): com.telerik.android.common.math.RadPoint;
							public clipRect(): com.telerik.android.common.math.RadRect;
							public constructor(param0: com.telerik.android.common.math.RadSize, param1: com.telerik.android.common.math.RadSize, param2: com.telerik.android.common.math.RadPoint, param3: com.telerik.android.common.math.RadRect);
							public scale(): com.telerik.android.common.math.RadSize;
							public getAvailableSize(): com.telerik.android.common.math.RadSize;
						}
					}
				}
			}
		}
	}
}

declare module com {
	export module telerik {
		export module widget {
			export module chart {
				export module visualization {
					export module common {
						export class ChartPresenterImpl extends com.telerik.widget.chart.visualization.common.ChartElementPresenter {
							public static class: java.lang.Class<com.telerik.widget.chart.visualization.common.ChartPresenterImpl>;
							public constructor();
							public getElement(): com.telerik.widget.chart.engine.elementTree.ChartElement;
							public onUIUpdated(): void;
							public refreshNodeCore(param0: com.telerik.widget.chart.engine.elementTree.ChartNode): void;
							public defaultPaletteFamily(): string;
							public onPaletteUpdated(param0: com.telerik.widget.palettes.ChartPalette): void;
							public updateUICore(param0: com.telerik.widget.chart.visualization.common.ChartLayoutContext): void;
							public invalidatePalette(): void;
							public getCollectionIndex(): number;
							public measureContent(param0: com.telerik.widget.chart.engine.elementTree.ChartNode, param1: any): com.telerik.android.common.math.RadSize;
							public processPaletteChanged(): void;
							public constructor(param0: com.telerik.widget.chart.visualization.common.RadChartViewBase<any>);
							public getDefaultZIndex(): number;
							public refreshNode(param0: com.telerik.widget.chart.engine.elementTree.ChartNode): void;
						}
					}
				}
			}
		}
	}
}

declare module com {
	export module telerik {
		export module widget {
			export module chart {
				export module visualization {
					export module common {
						export abstract class ChartSeries extends com.telerik.widget.chart.visualization.common.ChartElementPresenter implements com.telerik.widget.chart.engine.view.ChartSeries, com.telerik.widget.chart.engine.databinding.datasources.DataBindingListener, com.telerik.widget.chart.engine.series.ChartSeriesModel.DataPointsChangedListener {
							public static class: java.lang.Class<com.telerik.widget.chart.visualization.common.ChartSeries>;
							public static SERIES_Z_INDEX: number;
							public isVisibleInLegend: boolean;
							public getElement(): com.telerik.widget.chart.engine.elementTree.ChartElement;
							public applyPaletteCore(param0: com.telerik.widget.palettes.ChartPalette): void;
							public setLabelFormat(param0: string): void;
							public getShowLabels(): boolean;
							public removePropertyChangedListener(param0: com.telerik.widget.chart.visualization.common.PropertyChangedListener): void;
							public getData(): java.lang.Iterable<any>;
							public getLabelFormat(): string;
							public setShowLabels(param0: boolean): void;
							public setData(param0: java.lang.Iterable<any>): void;
							public getLabelSize(): number;
							public render(param0: globalAndroid.graphics.Canvas): void;
							public createLabelRenderer(): com.telerik.widget.chart.visualization.common.renderers.BaseLabelRenderer;
							public onBoundItemPropertyChanged(param0: com.telerik.widget.chart.engine.databinding.DataPointBindingEntry, param1: java.beans.PropertyChangeEvent): void;
							public setLabelStrokeColor(param0: number): void;
							public measureContent(param0: com.telerik.widget.chart.engine.elementTree.ChartNode, param1: any): com.telerik.android.common.math.RadSize;
							public getDistanceToPoint(param0: globalAndroid.graphics.Point, param1: globalAndroid.graphics.Point): number;
							public dataSource(): com.telerik.widget.chart.engine.databinding.datasources.ChartSeriesDataSource;
							public postRender(param0: globalAndroid.graphics.Canvas): void;
							public setIsVisibleInLegend(param0: boolean): void;
							public onDataPointIsSelectedChanged(param0: com.telerik.widget.chart.engine.dataPoints.DataPoint): void;
							public onAttached(): void;
							public onPaletteUpdated(param0: com.telerik.widget.palettes.ChartPalette): void;
							public getPlotAreaSize(): com.telerik.android.common.math.RadSize;
							public findClosestPoint(param0: globalAndroid.graphics.Point): com.telerik.widget.chart.visualization.behaviors.DataPointInfo;
							public onPointRemoved(param0: number, param1: com.telerik.widget.chart.engine.dataPoints.DataPoint): void;
							public getLabelFillColor(): number;
							public getCollectionIndex(): number;
							public onModelAttached(): void;
							public hitTestDataPoint(param0: globalAndroid.graphics.PointF, param1: com.telerik.widget.chart.engine.dataPoints.DataPoint): boolean;
							public onDetached(param0: com.telerik.widget.chart.visualization.common.RadChartViewBase<any>): void;
							public setClipToPlotArea(param0: boolean): void;
							public getLabelTextColor(): number;
							public getSelectionMode(): com.telerik.widget.chart.visualization.common.SeriesSelectionMode;
							public setLabelSize(param0: number): void;
							public getClipToPlotArea(): boolean;
							public addPropertyChangedListener(param0: com.telerik.widget.chart.visualization.common.PropertyChangedListener): void;
							public getIsSelected(): boolean;
							public refreshNode(param0: com.telerik.widget.chart.engine.elementTree.ChartNode): void;
							public initDataBinding(): void;
							public setLabelTextColor(param0: number): void;
							public getLabelRenderer(): com.telerik.widget.chart.visualization.common.renderers.BaseLabelRenderer;
							public getIsVisibleInLegend(): boolean;
							public setLabelPadding(param0: number, param1: number, param2: number, param3: number): void;
							public hitTest(param0: globalAndroid.graphics.PointF): boolean;
							public onIsVisibleInLegendChanged(param0: boolean): void;
							public createModel(): com.telerik.widget.chart.engine.series.ChartSeriesModel<any>;
							public setLabelValueToStringConverter(param0: com.telerik.android.common.Function<any,string>): void;
							public invalidatePalette(): void;
							public notifyPropertyChangedListeners(param0: string, param1: any): void;
							public getLabelFont(): globalAndroid.graphics.Typeface;
							public setLabelMargin(param0: number): void;
							public onDataBindingComplete(): void;
							public getDefaultZIndex(): number;
							public constructor();
							public getLabelFontStyle(): number;
							public createDataSourceInstance(): com.telerik.widget.chart.engine.databinding.datasources.ChartSeriesDataSource;
							public onPointAdded(param0: number, param1: com.telerik.widget.chart.engine.dataPoints.DataPoint): void;
							public setLabelFontStyle(param0: number): void;
							public getLabelMargin(): number;
							public model(): com.telerik.widget.chart.engine.series.ChartSeriesModel<any>;
							public setSelectionMode(param0: com.telerik.widget.chart.visualization.common.SeriesSelectionMode): void;
							public setLabelFillColor(param0: number): void;
							public setLabelRenderer(param0: com.telerik.widget.chart.visualization.common.renderers.BaseLabelRenderer): void;
							public getLabelValueToStringConverter(): com.telerik.android.common.Function<any,string>;
							public setLabelFont(param0: globalAndroid.graphics.Typeface): void;
							public hitTestDataPoint(param0: globalAndroid.graphics.PointF): com.telerik.widget.chart.engine.dataPoints.DataPoint;
							public getLabelStrokeColor(): number;
							public drawCore(param0: globalAndroid.graphics.Canvas): void;
							public onIsSelectedChanged(): void;
							public onDataPointSelectionChanged(param0: com.telerik.widget.chart.engine.dataPoints.DataPoint): void;
							public setIsSelected(param0: boolean): void;
						}
					}
				}
			}
		}
	}
}

declare module com {
	export module telerik {
		export module widget {
			export module chart {
				export module visualization {
					export module common {
						export class FilledSeries extends java.lang.Object {
							public static class: java.lang.Class<com.telerik.widget.chart.visualization.common.FilledSeries>;
							/**
							 * Constructs a new instance of the com.telerik.widget.chart.visualization.common.FilledSeries interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
							 */
							public constructor(implementation: {
								getFillColor(): number;
							});
							public constructor();
							public getFillColor(): number;
						}
					}
				}
			}
		}
	}
}

declare module com {
	export module telerik {
		export module widget {
			export module chart {
				export module visualization {
					export module common {
						export class LabelSizeInfo extends java.lang.Object {
							public static class: java.lang.Class<com.telerik.widget.chart.visualization.common.LabelSizeInfo>;
							public textLayout: globalAndroid.text.StaticLayout;
							public size: com.telerik.android.common.math.RadSize;
							public untransformedSize: com.telerik.android.common.math.RadSize;
							public transformOffset: com.telerik.android.common.math.RadPoint;
							public constructor();
						}
					}
				}
			}
		}
	}
}

declare module com {
	export module telerik {
		export module widget {
			export module chart {
				export module visualization {
					export module common {
						export abstract class LineAxis extends com.telerik.widget.chart.visualization.common.Axis {
							public static class: java.lang.Class<com.telerik.widget.chart.visualization.common.LineAxis>;
							public static LINE_COLOR_PROPERTY_KEY: number;
							public static LINE_THICKNESS_PROPERTY_KEY: number;
							public applyPaletteCore(param0: com.telerik.widget.palettes.ChartPalette): void;
							public setLabelTextColor(param0: number): void;
							public setLabelFormat(param0: string): void;
							public setShowLine(param0: boolean): void;
							public setLineDashArray(param0: native.Array<number>): void;
							public renderLabel(param0: globalAndroid.graphics.Canvas, param1: com.telerik.widget.chart.engine.elementTree.ChartNode): void;
							public getShowLine(): boolean;
							public getLabelFormat(): string;
							public getLabelSize(): number;
							public render(param0: globalAndroid.graphics.Canvas): void;
							public setLineThickness(param0: number): void;
							public setLabelValueToStringConverter(param0: com.telerik.android.common.Function<any,string>): void;
							public invalidatePalette(): void;
							public getLabelFont(): globalAndroid.graphics.Typeface;
							public measureContent(param0: com.telerik.widget.chart.engine.elementTree.ChartNode, param1: any): com.telerik.android.common.math.RadSize;
							public setLabelMargin(param0: number): void;
							public constructor();
							public getLabelFontStyle(): number;
							public onPaletteUpdated(param0: com.telerik.widget.palettes.ChartPalette): void;
							public setLineColor(param0: number): void;
							public setLabelFontStyle(param0: number): void;
							public getLabelMargin(): number;
							public getCollectionIndex(): number;
							public getLineThickness(): number;
							public getLabelValueToStringConverter(): com.telerik.android.common.Function<any,string>;
							public getLineDashArray(): native.Array<number>;
							public setLabelFont(param0: globalAndroid.graphics.Typeface): void;
							public getLabelTextColor(): number;
							public setLabelSize(param0: number): void;
							public getLineColor(): number;
							public refreshNode(param0: com.telerik.widget.chart.engine.elementTree.ChartNode): void;
						}
					}
				}
			}
		}
	}
}

declare module com {
	export module telerik {
		export module widget {
			export module chart {
				export module visualization {
					export module common {
						export abstract class PointTemplateSeries extends com.telerik.widget.chart.visualization.common.ChartSeries implements com.telerik.widget.primitives.legend.LegendSelectable {
							public static class: java.lang.Class<com.telerik.widget.chart.visualization.common.PointTemplateSeries>;
							public legendItem: com.telerik.widget.primitives.legend.LegendItem;
							public applyPaletteCore(param0: com.telerik.widget.palettes.ChartPalette): void;
							public setSelectedChangeListener(param0: com.telerik.widget.primitives.legend.LegendSelectableListener): void;
							public onIsVisibleInLegendChanged(param0: boolean): void;
							public getLegendFillColor(): number;
							public getSelectedChangeListener(): com.telerik.widget.primitives.legend.LegendSelectableListener;
							public onBoundItemPropertyChanged(param0: com.telerik.widget.chart.engine.databinding.DataPointBindingEntry, param1: java.beans.PropertyChangeEvent): void;
							public invalidatePalette(): void;
							public getLegendTitle(): string;
							public setLegendTitle(param0: string): void;
							public getLegendStrokeColor(): number;
							public measureContent(param0: com.telerik.widget.chart.engine.elementTree.ChartNode, param1: any): com.telerik.android.common.math.RadSize;
							public setDataPointRenderer(param0: com.telerik.widget.chart.visualization.cartesianChart.series.pointrenderers.ChartDataPointRenderer): void;
							public onDataBindingComplete(): void;
							public onDataPointIsSelectedChanged(param0: com.telerik.widget.chart.engine.dataPoints.DataPoint): void;
							public applyPaletteToDefaultVisual(param0: com.telerik.widget.chart.engine.dataPoints.DataPoint, param1: com.telerik.widget.palettes.PaletteEntry): void;
							public constructor();
							public onUIUpdated(): void;
							public onAttached(): void;
							public onPaletteUpdated(param0: com.telerik.widget.palettes.ChartPalette): void;
							public initFields(): void;
							public onPointAdded(param0: number, param1: com.telerik.widget.chart.engine.dataPoints.DataPoint): void;
							public measureNodeOverride(param0: com.telerik.widget.chart.engine.elementTree.ChartNode, param1: any): com.telerik.android.common.math.RadSize;
							public getDataPointRenderer(): com.telerik.widget.chart.visualization.cartesianChart.series.pointrenderers.ChartDataPointRenderer;
							public getDefaultEntry(): com.telerik.widget.palettes.PaletteEntry;
							public clearPaletteFromDefaultVisual(param0: com.telerik.widget.chart.engine.dataPoints.DataPoint): void;
							public onPointRemoved(param0: number, param1: com.telerik.widget.chart.engine.dataPoints.DataPoint): void;
							public getCollectionIndex(): number;
							public createDataPointRenderer(): com.telerik.widget.chart.visualization.cartesianChart.series.pointrenderers.ChartDataPointRenderer;
							public onDetached(param0: com.telerik.widget.chart.visualization.common.RadChartViewBase<any>): void;
							public drawCore(param0: globalAndroid.graphics.Canvas): void;
							public processPaletteChanged(): void;
							public setIsSelected(param0: boolean): void;
							public getIsSelected(): boolean;
							public refreshNode(param0: com.telerik.widget.chart.engine.elementTree.ChartNode): void;
						}
					}
				}
			}
		}
	}
}

declare module com {
	export module telerik {
		export module widget {
			export module chart {
				export module visualization {
					export module common {
						export abstract class PresenterBase extends com.telerik.android.common.PropertyManager implements com.telerik.widget.chart.engine.view.ChartElementPresenter, com.telerik.widget.palettes.PaletteChangedListener {
							public static class: java.lang.Class<com.telerik.widget.chart.visualization.common.PresenterBase>;
							public lastLayoutContext: com.telerik.widget.chart.visualization.common.ChartLayoutContext;
							public setPaletteFamily(param0: string): void;
							public updateUI(param0: com.telerik.widget.chart.visualization.common.ChartLayoutContext): void;
							public applyPaletteCore(param0: com.telerik.widget.palettes.ChartPalette): void;
							public defaultPaletteFamily(): string;
							public isLoaded(): boolean;
							public setCanApplyPalette(param0: boolean): void;
							public render(param0: globalAndroid.graphics.Canvas): void;
							public invalidatePalette(): void;
							public requestRender(): void;
							public getPaletteFamily(): string;
							public measureContent(param0: com.telerik.widget.chart.engine.elementTree.ChartNode, param1: any): com.telerik.android.common.math.RadSize;
							public postRender(param0: globalAndroid.graphics.Canvas): void;
							public constructor();
							public onUIUpdated(): void;
							public refreshNodeCore(param0: com.telerik.widget.chart.engine.elementTree.ChartNode): void;
							public paletteFamily(): string;
							public setVisible(param0: boolean): void;
							public isPaletteApplied(): boolean;
							public onPaletteUpdated(param0: com.telerik.widget.palettes.ChartPalette): void;
							public isVisible(): boolean;
							public measureNodeOverride(param0: com.telerik.widget.chart.engine.elementTree.ChartNode, param1: any): com.telerik.android.common.math.RadSize;
							public onUnloaded(): void;
							public updateUICore(param0: com.telerik.widget.chart.visualization.common.ChartLayoutContext): void;
							public setVisible(param0: boolean, param1: boolean): void;
							public getPaletteFamilyCore(): string;
							public getCanApplyPalette(): boolean;
							public onLoaded(): void;
							public getCollectionIndex(): number;
							public refreshNode(param0: com.telerik.widget.chart.engine.elementTree.ChartNode): void;
						}
					}
				}
			}
		}
	}
}

declare module com {
	export module telerik {
		export module widget {
			export module chart {
				export module visualization {
					export module common {
						export class PresenterCollection<T>  extends com.telerik.android.common.ObservableCollection<any> {
							public static class: java.lang.Class<com.telerik.widget.chart.visualization.common.PresenterCollection<any>>;
							public subList(param0: number, param1: number): java.util.List<any>;
							public remove(param0: number): any;
							public contains(param0: any): boolean;
							public size(): number;
							public hashCode(): number;
							public toArray(): native.Array<any>;
							public listIterator(): java.util.ListIterator<any>;
							public reset(): void;
							public addAll(param0: java.util.Collection<any>): boolean;
							public set(param0: number, param1: any): any;
							public constructor(param0: java.util.Collection<any>);
							public add(param0: any): boolean;
							public listIterator(param0: number): java.util.ListIterator<any>;
							public removeAll(param0: java.util.Collection<any>): boolean;
							public add(param0: number, param1: any): void;
							public toArray(param0: native.Array<any>): native.Array<any>;
							public constructor(param0: com.telerik.widget.chart.visualization.common.RadChartViewBase<any>);
							public retainAll(param0: java.util.Collection<any>): boolean;
							public constructor();
							public containsAll(param0: java.util.Collection<any>): boolean;
							public iterator(): java.util.Iterator<any>;
							public lastIndexOf(param0: any): number;
							public remove(param0: any): boolean;
							public init(param0: com.telerik.widget.chart.visualization.common.RadChartViewBase<any>): void;
							public clear(): void;
							public get(param0: number): any;
							public indexOf(param0: any): number;
							public constructor(param0: number);
							public addAll(param0: number, param1: java.util.Collection<any>): boolean;
							public owner(): com.telerik.widget.chart.visualization.common.RadChartViewBase<any>;
							public equals(param0: any): boolean;
							public isEmpty(): boolean;
						}
					}
				}
			}
		}
	}
}

declare module com {
	export module telerik {
		export module widget {
			export module chart {
				export module visualization {
					export module common {
						export class PropertyChangedListener extends java.lang.Object {
							public static class: java.lang.Class<com.telerik.widget.chart.visualization.common.PropertyChangedListener>;
							/**
							 * Constructs a new instance of the com.telerik.widget.chart.visualization.common.PropertyChangedListener interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
							 */
							public constructor(implementation: {
								onPropertyChanged(param0: any, param1: string, param2: any): void;
							});
							public constructor();
							public onPropertyChanged(param0: any, param1: string, param2: any): void;
						}
					}
				}
			}
		}
	}
}

declare module com {
	export module telerik {
		export module widget {
			export module chart {
				export module visualization {
					export module common {
						export abstract class RadChartViewBase<T>  extends globalAndroid.view.View {
							public static class: java.lang.Class<com.telerik.widget.chart.visualization.common.RadChartViewBase<any>>;
							public updateSuspended: boolean;
							public renderSuspended: boolean;
							public paddingLeft: number;
							public paddingRight: number;
							public paddingTop: number;
							public paddingBottom: number;
							public clipToBounds: boolean;
							public oldWidth: number;
							public oldHeight: number;
							public setMaxZoom(param0: com.telerik.android.common.math.RadSize): void;
							public setChartPadding(param0: number, param1: number, param2: number, param3: number): void;
							public onKeyDown(param0: number, param1: globalAndroid.view.KeyEvent): boolean;
							public getDataContext(param0: com.telerik.widget.chart.engine.dataPoints.DataPoint): com.telerik.widget.chart.visualization.behaviors.ChartDataContext;
							public createChartAreaModel(): com.telerik.widget.chart.engine.chartAreas.ChartAreaModel;
							public resetBehaviors(): void;
							public getChartArea(): com.telerik.widget.chart.engine.chartAreas.ChartAreaModel;
							public onSingleTapConfirmed(param0: globalAndroid.view.MotionEvent): boolean;
							public measureContent(param0: com.telerik.widget.chart.engine.elementTree.ChartNode, param1: any): com.telerik.android.common.math.RadSize;
							public endUpdate(): void;
							public onScroll(param0: globalAndroid.view.MotionEvent, param1: globalAndroid.view.MotionEvent, param2: number, param3: number): boolean;
							public onDetachedFromWindow(): void;
							public onDraw(param0: globalAndroid.graphics.Canvas): void;
							public setClipToBounds(param0: boolean): void;
							public getViewportHeight(): number;
							public setSelectionPalette(param0: com.telerik.widget.palettes.ChartPalette): void;
							public clampZoom(param0: number, param1: number): com.telerik.android.common.math.RadSize;
							public onKeyMultiple(param0: number, param1: number, param2: globalAndroid.view.KeyEvent): boolean;
							public arrangeOverride(param0: number, param1: number): com.telerik.android.common.math.RadSize;
							public getHoldDelay(): number;
							public processPaletteChanged(): void;
							public getPlotAreaClip(): com.telerik.android.common.math.RadRect;
							public refreshNode(param0: com.telerik.widget.chart.engine.elementTree.ChartNode): void;
							public getBehaviors(): com.telerik.widget.chart.visualization.behaviors.ChartBehaviorCollection;
							public setPanOffset(param0: number, param1: number): void;
							public beginUpdate(): void;
							public removeOnDrawListener(param0: com.telerik.android.primitives.widget.tooltip.contracts.DrawListener): void;
							public setEmptyContent(param0: any): void;
							public unscheduleDrawable(param0: globalAndroid.graphics.drawable.Drawable, param1: java.lang.Runnable): void;
							public getSeries(): com.telerik.widget.chart.visualization.common.PresenterCollection<any>;
							public stackedSeriesContext(): com.telerik.widget.chart.visualization.common.StackedSeriesContext;
							public getDataContext(param0: globalAndroid.graphics.Point, param1: boolean): com.telerik.widget.chart.visualization.behaviors.ChartDataContext;
							public setPalette(param0: com.telerik.widget.palettes.ChartPalette): void;
							public updateChartArea(): void;
							public onDown(param0: globalAndroid.view.MotionEvent): boolean;
							public presenters(): java.util.List<any>;
							public getZoomHeight(): number;
							public onAttachedToWindow(): void;
							public chartAreaModel(): com.telerik.widget.chart.engine.chartAreas.ChartAreaModel;
							public getDataContext(param0: globalAndroid.graphics.Point): com.telerik.widget.chart.visualization.behaviors.ChartDataContext;
							public onFling(param0: globalAndroid.view.MotionEvent, param1: globalAndroid.view.MotionEvent, param2: number, param3: number): boolean;
							public onUnloaded(): void;
							public getLegendInfos(): com.telerik.android.common.ObservableCollection<com.telerik.widget.primitives.legend.LegendItem>;
							public validateBehaviourSupport(param0: com.telerik.widget.chart.visualization.behaviors.ChartBehavior): void;
							public constructor(param0: globalAndroid.content.Context);
							public invalidateDrawable(param0: globalAndroid.graphics.drawable.Drawable): void;
							public addOnDrawListener(param0: com.telerik.android.primitives.widget.tooltip.contracts.DrawListener): void;
							public onKeyLongPress(param0: number, param1: globalAndroid.view.KeyEvent): boolean;
							public scheduleDrawable(param0: globalAndroid.graphics.drawable.Drawable, param1: java.lang.Runnable, param2: number): void;
							public onMeasure(param0: number, param1: number): void;
							public getPanOffsetX(): number;
							public sortPresenters(): void;
							public setChartPadding(param0: number): void;
							public onBehaviorsCollectionChanging(param0: com.telerik.widget.chart.visualization.behaviors.BehaviorCollectionChangedInfo): void;
							public getPanOffset(): com.telerik.android.common.math.RadPoint;
							public onTouchEvent(param0: globalAndroid.view.MotionEvent): boolean;
							public setSeries(param0: com.telerik.widget.chart.visualization.common.PresenterCollection<any>): void;
							public getPalette(): com.telerik.widget.palettes.ChartPalette;
							public getViewportWidth(): number;
							public getMaxZoom(): com.telerik.android.common.math.RadSize;
							public getCollectionIndex(): number;
							public clampTranslate(param0: com.telerik.android.common.math.RadPoint, param1: com.telerik.android.common.math.RadSize): com.telerik.android.common.math.RadPoint;
							public onPanOffsetChanged(): void;
							public getZoomWidth(): number;
							public getPanOffsetY(): number;
							public endUpdate(param0: boolean): void;
							public presenterImpl(): com.telerik.widget.chart.visualization.common.ChartElementPresenter;
							public onDoubleTap(param0: globalAndroid.view.MotionEvent): boolean;
							public generateEmptyContent(): string;
							public onZoomChanged(): void;
							public setHoldDelay(param0: number): void;
							public getZoom(): com.telerik.android.common.math.RadSize;
							public initFromXML(param0: globalAndroid.content.res.TypedArray): void;
							public invalidatePalette(): void;
							public requestRender(): void;
							public onPresenterRemoved(param0: com.telerik.widget.chart.visualization.common.ChartElementPresenter): void;
							public constructor(param0: globalAndroid.content.Context, param1: globalAndroid.util.AttributeSet, param2: number);
							public onScaleEnd(param0: com.telerik.widget.chart.visualization.behaviors.ChartScaleGestureDetector): void;
							public onKeyUp(param0: number, param1: globalAndroid.view.KeyEvent): boolean;
							public setPanOffset(param0: com.telerik.android.common.math.RadPoint): void;
							public onDoubleTapEvent(param0: globalAndroid.view.MotionEvent): boolean;
							public onPresenterAdded(param0: com.telerik.widget.chart.visualization.common.ChartElementPresenter): void;
							public onLongPress(param0: globalAndroid.view.MotionEvent): void;
							public setZoom(param0: number, param1: number): void;
							public constructor(param0: globalAndroid.content.Context, param1: globalAndroid.util.AttributeSet);
							public getSelectionPalette(): com.telerik.widget.palettes.ChartPalette;
							public isClipToBounds(): boolean;
							public setZoom(param0: com.telerik.android.common.math.RadSize): void;
							public onShowPress(param0: globalAndroid.view.MotionEvent): void;
							public onScale(param0: com.telerik.widget.chart.visualization.behaviors.ChartScaleGestureDetector): boolean;
							public sendAccessibilityEvent(param0: number): void;
							public onSingleTapUp(param0: globalAndroid.view.MotionEvent): boolean;
							public getEmptyContent(): any;
							public onScaleBegin(param0: com.telerik.widget.chart.visualization.behaviors.ChartScaleGestureDetector): boolean;
							public sendAccessibilityEventUnchecked(param0: globalAndroid.view.accessibility.AccessibilityEvent): void;
							public unscheduleDrawable(param0: globalAndroid.graphics.drawable.Drawable): void;
							public requestInvalidateArrange(): void;
						}
					}
				}
			}
		}
	}
}

declare module com {
	export module telerik {
		export module widget {
			export module chart {
				export module visualization {
					export module common {
						export class SeriesSelectionMode {
							public static class: java.lang.Class<com.telerik.widget.chart.visualization.common.SeriesSelectionMode>;
							public static SERIES: com.telerik.widget.chart.visualization.common.SeriesSelectionMode;
							public static DATA_POINT_SINGLE: com.telerik.widget.chart.visualization.common.SeriesSelectionMode;
							public static DATA_POINT_MULTIPLE: com.telerik.widget.chart.visualization.common.SeriesSelectionMode;
							public static NONE: com.telerik.widget.chart.visualization.common.SeriesSelectionMode;
							public static NOT_SET: com.telerik.widget.chart.visualization.common.SeriesSelectionMode;
							public static valueOf(param0: string): com.telerik.widget.chart.visualization.common.SeriesSelectionMode;
							public static valueOf(param0: java.lang.Class<any>, param1: string): java.lang.Enum<any>;
							public static values(): native.Array<com.telerik.widget.chart.visualization.common.SeriesSelectionMode>;
						}
					}
				}
			}
		}
	}
}

declare module com {
	export module telerik {
		export module widget {
			export module chart {
				export module visualization {
					export module common {
						export class StackedSeriesContext extends java.lang.Object {
							public static class: java.lang.Class<com.telerik.widget.chart.visualization.common.StackedSeriesContext>;
							public constructor();
							public clear(): void;
							public getPreviousStackedArea(): java.util.List<globalAndroid.graphics.Point>;
							public setPreviousStackedArea(param0: java.util.List<globalAndroid.graphics.Point>): void;
						}
					}
				}
			}
		}
	}
}

declare module com {
	export module telerik {
		export module widget {
			export module chart {
				export module visualization {
					export module common {
						export class StrokedSeries extends java.lang.Object {
							public static class: java.lang.Class<com.telerik.widget.chart.visualization.common.StrokedSeries>;
							/**
							 * Constructs a new instance of the com.telerik.widget.chart.visualization.common.StrokedSeries interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
							 */
							public constructor(implementation: {
								getStrokeColor(): number;
								getStrokeThickness(): number;
							});
							public constructor();
							public getStrokeThickness(): number;
							public getStrokeColor(): number;
						}
					}
				}
			}
		}
	}
}

declare module com {
	export module telerik {
		export module widget {
			export module chart {
				export module visualization {
					export module common {
						export module renderers {
							export class AreaRenderContext extends java.lang.Object {
								public static class: java.lang.Class<com.telerik.widget.chart.visualization.common.renderers.AreaRenderContext>;
							}
						}
					}
				}
			}
		}
	}
}

declare module com {
	export module telerik {
		export module widget {
			export module chart {
				export module visualization {
					export module common {
						export module renderers {
							export class AreaRendererBase extends com.telerik.widget.chart.visualization.common.renderers.LineRenderer {
								public static class: java.lang.Class<com.telerik.widget.chart.visualization.common.renderers.AreaRendererBase>;
								public static FILL_COLOR_PROPERTY_KEY: number;
								public fillPaint: globalAndroid.graphics.Paint;
								public dataPointSegmentsIterator: java.util.ListIterator<any>;
								public currentSegmentNode: com.telerik.widget.chart.visualization.common.renderers.ChartSeriesRenderer.DataPointSegment;
								public topSurfacePoints: java.util.List<globalAndroid.graphics.Point>;
								public hitTest(param0: globalAndroid.graphics.PointF, param1: number): boolean;
								public shouldDrawTopStroke(): boolean;
								public preparePaths(): void;
								public getFillPaint(): globalAndroid.graphics.Paint;
								public points(param0: com.telerik.widget.chart.visualization.common.renderers.AreaRenderContext, param1: com.telerik.android.common.Function<com.telerik.widget.chart.engine.dataPoints.DataPoint,globalAndroid.graphics.Point>): java.util.List<globalAndroid.graphics.Point>;
								public getPath(): globalAndroid.graphics.Path;
								public constructor();
								public prepareTopDrawingForSegment(param0: com.telerik.widget.chart.visualization.common.renderers.AreaRenderContext): void;
								public bottomPoints(param0: com.telerik.widget.chart.visualization.common.renderers.AreaRenderContext): java.util.List<globalAndroid.graphics.Point>;
								public updateContext(param0: com.telerik.widget.chart.visualization.common.renderers.AreaRenderContext, param1: java.util.List<globalAndroid.graphics.Point>): void;
								public renderCore(param0: globalAndroid.graphics.Canvas): void;
								public bottomPointsForStackedSeries(param0: com.telerik.widget.chart.visualization.common.renderers.AreaRenderContext, param1: java.util.List<globalAndroid.graphics.Point>): void;
								public reset(): void;
								public topPoints(param0: com.telerik.widget.chart.visualization.common.renderers.AreaRenderContext): java.util.List<globalAndroid.graphics.Point>;
								public setFillColor(param0: number): void;
								public applyPalette(param0: com.telerik.widget.palettes.ChartPalette): void;
								public getFillColor(): number;
								public setFillPaint(param0: globalAndroid.graphics.Paint): void;
							}
						}
					}
				}
			}
		}
	}
}

declare module com {
	export module telerik {
		export module widget {
			export module chart {
				export module visualization {
					export module common {
						export module renderers {
							export abstract class BaseLabelRenderer extends com.telerik.android.common.PropertyManager implements com.telerik.widget.chart.visualization.common.renderers.ChartLabelRenderer {
								public static class: java.lang.Class<com.telerik.widget.chart.visualization.common.renderers.BaseLabelRenderer>;
								public static LABEL_FILL_COLOR_PROPERTY_KEY: number;
								public static LABEL_STROKE_COLOR_PROPERTY_KEY: number;
								public static LABEL_COLOR_PROPERTY_KEY: number;
								public static PALETTE_FAMILY: string;
								public labelFormat: string;
								public labelMargin: number;
								public labelTextColor: number;
								public labelFillColor: number;
								public labelStrokeColor: number;
								public labelStrokeWidth: number;
								public labelPaddingTop: number;
								public labelPaddingBottom: number;
								public labelPaddingLeft: number;
								public labelPaddingRight: number;
								public fontStyle: number;
								public labelTypeface: globalAndroid.graphics.Typeface;
								public labelTextPaint: globalAndroid.graphics.Paint;
								public labelFillPaint: globalAndroid.graphics.Paint;
								public labelStrokePaint: globalAndroid.graphics.Paint;
								public labelToStringConverter: com.telerik.android.common.Function<any,string>;
								public owner: com.telerik.widget.chart.visualization.common.ChartSeries;
								public setLabelFont(param0: globalAndroid.graphics.Typeface): void;
								public getLabelSize(): number;
								public getLabelStrokeColor(): number;
								public setLabelFillColor(param0: number): void;
								public getLabelValueToStringConverter(): com.telerik.android.common.Function<any,string>;
								public setLabelSize(param0: number): void;
								public getTextBounds(param0: string, param1: globalAndroid.graphics.Paint): globalAndroid.graphics.Rect;
								public getLabelTextColor(): number;
								public setLabelValueToStringConverter(param0: com.telerik.android.common.Function<any,string>): void;
								public getLabelBackgroundBounds(param0: com.telerik.android.common.math.RadPoint, param1: globalAndroid.graphics.Rect): globalAndroid.graphics.Rect;
								public getLabelFormat(): string;
								public offsetRight(param0: globalAndroid.graphics.Rect): number;
								public getLabelFillColor(): number;
								public constructor(param0: com.telerik.widget.chart.visualization.common.ChartSeries);
								public drawLabelBackground(param0: globalAndroid.graphics.Canvas, param1: globalAndroid.graphics.Path, param2: number): void;
								public setLabelStrokeColor(param0: number): void;
								public applyPalette(param0: com.telerik.widget.palettes.ChartPalette): void;
								public calculateLabelPoint(param0: com.telerik.widget.chart.engine.dataPoints.DataPoint, param1: globalAndroid.graphics.Rect): com.telerik.android.common.math.RadPoint;
								public getLabelFontStyle(): number;
								public setLabelPadding(param0: number, param1: number, param2: number, param3: number): void;
								public offsetBottom(): number;
								public preventClippingBottom(param0: number, param1: com.telerik.android.common.math.RadRect): number;
								public getLabelMargin(): number;
								public prepareLabel(param0: globalAndroid.graphics.Path, param1: globalAndroid.graphics.Rect, param2: com.telerik.android.common.math.RadRect): void;
								public offsetLeft(): number;
								public getLabelFont(): globalAndroid.graphics.Typeface;
								public invalidatePalette(): void;
								public preventClippingRight(param0: number, param1: com.telerik.android.common.math.RadRect, param2: globalAndroid.graphics.Rect): number;
								public constructor();
								public renderLabel(param0: globalAndroid.graphics.Canvas, param1: com.telerik.widget.chart.engine.elementTree.ChartNode): void;
								public getLabelText(param0: com.telerik.widget.chart.engine.dataPoints.DataPoint): string;
								public setLabelFontStyle(param0: number): void;
								public setLabelMargin(param0: number): void;
								public getLabelFillPaint(param0: number): globalAndroid.graphics.Paint;
								public offsetTop(param0: globalAndroid.graphics.Rect): number;
								public setLabelTextColor(param0: number): void;
								public isChartZoomedVertically(): boolean;
								public isChartZoomedHorizontally(): boolean;
								public drawLabelText(param0: globalAndroid.graphics.Canvas, param1: string, param2: number, param3: number): void;
								public preventClippingTop(param0: number, param1: com.telerik.android.common.math.RadRect, param2: globalAndroid.graphics.Rect): number;
								public setLabelFormat(param0: string): void;
								public preventClippingLeft(param0: number, param1: com.telerik.android.common.math.RadRect): number;
							}
						}
					}
				}
			}
		}
	}
}

declare module com {
	export module telerik {
		export module widget {
			export module chart {
				export module visualization {
					export module common {
						export module renderers {
							export class CartesianAxisLabelRenderer extends java.lang.Object implements com.telerik.widget.chart.visualization.common.renderers.ChartLabelRenderer {
								public static class: java.lang.Class<com.telerik.widget.chart.visualization.common.renderers.CartesianAxisLabelRenderer>;
								public labelPaint: globalAndroid.text.TextPaint;
								public axis: com.telerik.widget.chart.visualization.common.CartesianAxis;
								public getLabelFontStyle(): number;
								public setLabelFont(param0: globalAndroid.graphics.Typeface): void;
								public measureLabel(param0: com.telerik.widget.chart.engine.axes.AxisLabelModel, param1: any): com.telerik.android.common.math.RadSize;
								public getLabelSize(): number;
								public getLabelMargin(): number;
								public getLabelFont(): globalAndroid.graphics.Typeface;
								public getLabelValueToStringConverter(): com.telerik.android.common.Function<any,string>;
								public renderLabel(param0: globalAndroid.graphics.Canvas, param1: com.telerik.widget.chart.engine.elementTree.ChartNode): void;
								public setLabelSize(param0: number): void;
								public setLabelMargin(param0: number): void;
								public setLabelFontStyle(param0: number): void;
								public getLabelTextColor(): number;
								public setLabelValueToStringConverter(param0: com.telerik.android.common.Function<any,string>): void;
								public getLabelFormat(): string;
								public setLabelTextColor(param0: number): void;
								public renderLabelNoFitMode(param0: globalAndroid.graphics.Canvas, param1: com.telerik.android.common.math.RadRect, param2: string, param3: com.telerik.widget.chart.engine.axes.AxisLabelModel): void;
								public constructor(param0: com.telerik.widget.chart.visualization.common.CartesianAxis);
								public renderLabelRotate(param0: globalAndroid.graphics.Canvas, param1: com.telerik.android.common.math.RadRect, param2: string, param3: com.telerik.widget.chart.engine.axes.AxisLabelModel): void;
								public renderLabelMultiLine(param0: globalAndroid.graphics.Canvas, param1: com.telerik.android.common.math.RadRect, param2: string, param3: com.telerik.widget.chart.engine.axes.AxisLabelModel): void;
								public setLabelFormat(param0: string): void;
							}
						}
					}
				}
			}
		}
	}
}

declare module com {
	export module telerik {
		export module widget {
			export module chart {
				export module visualization {
					export module common {
						export module renderers {
							export class ChartLabelRenderer extends java.lang.Object {
								public static class: java.lang.Class<com.telerik.widget.chart.visualization.common.renderers.ChartLabelRenderer>;
								/**
								 * Constructs a new instance of the com.telerik.widget.chart.visualization.common.renderers.ChartLabelRenderer interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
								 */
								public constructor(implementation: {
									renderLabel(param0: globalAndroid.graphics.Canvas, param1: com.telerik.widget.chart.engine.elementTree.ChartNode): void;
									getLabelTextColor(): number;
									setLabelTextColor(param0: number): void;
									getLabelSize(): number;
									setLabelSize(param0: number): void;
									getLabelFont(): globalAndroid.graphics.Typeface;
									setLabelFont(param0: globalAndroid.graphics.Typeface): void;
									getLabelFontStyle(): number;
									setLabelFontStyle(param0: number): void;
									getLabelFormat(): string;
									setLabelFormat(param0: string): void;
									getLabelMargin(): number;
									setLabelMargin(param0: number): void;
									getLabelValueToStringConverter(): com.telerik.android.common.Function<any,string>;
									setLabelValueToStringConverter(param0: com.telerik.android.common.Function<any,string>): void;
								});
								public constructor();
								public getLabelFontStyle(): number;
								public setLabelFont(param0: globalAndroid.graphics.Typeface): void;
								public getLabelSize(): number;
								public getLabelMargin(): number;
								public getLabelFont(): globalAndroid.graphics.Typeface;
								public renderLabel(param0: globalAndroid.graphics.Canvas, param1: com.telerik.widget.chart.engine.elementTree.ChartNode): void;
								public getLabelValueToStringConverter(): com.telerik.android.common.Function<any,string>;
								public setLabelSize(param0: number): void;
								public setLabelFontStyle(param0: number): void;
								public setLabelMargin(param0: number): void;
								public getLabelTextColor(): number;
								public setLabelValueToStringConverter(param0: com.telerik.android.common.Function<any,string>): void;
								public getLabelFormat(): string;
								public setLabelTextColor(param0: number): void;
								public setLabelFormat(param0: string): void;
							}
						}
					}
				}
			}
		}
	}
}

declare module com {
	export module telerik {
		export module widget {
			export module chart {
				export module visualization {
					export module common {
						export module renderers {
							export abstract class ChartSeriesRenderer extends com.telerik.android.common.PropertyManager {
								public static class: java.lang.Class<com.telerik.widget.chart.visualization.common.renderers.ChartSeriesRenderer>;
								public model: com.telerik.widget.chart.engine.series.ChartSeriesModel<any>;
								public dataPointSegments(): java.util.LinkedList<com.telerik.widget.chart.visualization.common.renderers.ChartSeriesRenderer.DataPointSegment>;
								public preparePaths(): void;
								public renderCore(param0: globalAndroid.graphics.Canvas): void;
								public findPreviousNonEmptyPoint(param0: com.telerik.widget.chart.visualization.common.renderers.ChartSeriesRenderer.DataPointSegment, param1: java.util.ListIterator<com.telerik.widget.chart.visualization.common.renderers.ChartSeriesRenderer.DataPointSegment>): com.telerik.widget.chart.engine.dataPoints.DataPoint;
								public reset(): void;
								public prepare(): void;
								public constructor();
								public applyPalette(param0: com.telerik.widget.palettes.ChartPalette): void;
								public findNextNonEmptyPoint(param0: com.telerik.widget.chart.visualization.common.renderers.ChartSeriesRenderer.DataPointSegment, param1: java.util.ListIterator<com.telerik.widget.chart.visualization.common.renderers.ChartSeriesRenderer.DataPointSegment>): com.telerik.widget.chart.engine.dataPoints.DataPoint;
								public render(param0: globalAndroid.graphics.Canvas): void;
							}
							export module ChartSeriesRenderer {
								export class DataPointSegment extends java.lang.Object {
									public static class: java.lang.Class<com.telerik.widget.chart.visualization.common.renderers.ChartSeriesRenderer.DataPointSegment>;
									public dataPoints: java.util.List<com.telerik.widget.chart.engine.dataPoints.DataPoint>;
									public startIndex: number;
									public constructor(param0: com.telerik.widget.chart.visualization.common.renderers.ChartSeriesRenderer);
								}
							}
						}
					}
				}
			}
		}
	}
}

declare module com {
	export module telerik {
		export module widget {
			export module chart {
				export module visualization {
					export module common {
						export module renderers {
							export class LineRenderer extends com.telerik.widget.chart.visualization.common.renderers.ChartSeriesRenderer {
								public static class: java.lang.Class<com.telerik.widget.chart.visualization.common.renderers.LineRenderer>;
								public static STROKE_COLOR_PROPERTY_KEY: number;
								public static STROKE_THICKNESS_PROPERTY_KEY: number;
								public layoutContext: com.telerik.widget.chart.visualization.common.ChartLayoutContext;
								public indicatorRenderer: com.telerik.widget.chart.visualization.cartesianChart.series.categorical.DataPointIndicatorRenderer;
								public linePaint: globalAndroid.graphics.Paint;
								public linePath: globalAndroid.graphics.Path;
								public strokeColor: number;
								public strokeThickness: number;
								public dashArray: native.Array<number>;
								public setPointIndicatorColor(param0: number): void;
								public preparePaths(): void;
								public getPointIndicatorStrokeColor(): number;
								public setDataPointIndicatorRenderer(param0: com.telerik.widget.chart.visualization.cartesianChart.series.categorical.DataPointIndicatorRenderer): void;
								public setModel(param0: com.telerik.widget.chart.engine.series.ChartSeriesModel<any>): void;
								public getDashArray(): native.Array<number>;
								public getDataPointIndicatorRenderer(): com.telerik.widget.chart.visualization.cartesianChart.series.categorical.DataPointIndicatorRenderer;
								public setStrokeColor(param0: number): void;
								public getStrokeColor(): number;
								public indicateDataPoints(): boolean;
								public setStrokeThickness(param0: number): void;
								public applyPalette(param0: com.telerik.widget.palettes.ChartPalette): void;
								public setStrokePaint(param0: globalAndroid.graphics.Paint): void;
								public getLinePaint(): globalAndroid.graphics.Paint;
								public setPointIndicatorStrokeColor(param0: number): void;
								public hitTest(param0: globalAndroid.graphics.PointF, param1: number): boolean;
								public getPath(): globalAndroid.graphics.Path;
								public getStrokeThickness(): number;
								public constructor();
								public getPointIndicatorColor(): number;
								public prepareDataPointIndicators(param0: java.util.List<com.telerik.widget.chart.engine.dataPoints.DataPoint>): void;
								public renderCore(param0: globalAndroid.graphics.Canvas): void;
								public reset(): void;
								public shouldDrawPoint(param0: com.telerik.widget.chart.engine.dataPoints.DataPoint): boolean;
								public setDashArray(param0: native.Array<number>): void;
							}
						}
					}
				}
			}
		}
	}
}

declare module com {
	export module telerik {
		export module widget {
			export module chart {
				export module visualization {
					export module common {
						export module renderers {
							export class PointingLabelRenderer extends com.telerik.widget.chart.visualization.common.renderers.BaseLabelRenderer {
								public static class: java.lang.Class<com.telerik.widget.chart.visualization.common.renderers.PointingLabelRenderer>;
								public pointerLength: number;
								public pointerWidth: number;
								public constructor(param0: com.telerik.widget.chart.visualization.common.ChartSeries, param1: number, param2: number);
								public setLabelFont(param0: globalAndroid.graphics.Typeface): void;
								public getLabelSize(): number;
								public setPointerWidth(param0: number): void;
								public getLabelValueToStringConverter(): com.telerik.android.common.Function<any,string>;
								public setLabelSize(param0: number): void;
								public getLabelTextColor(): number;
								public setLabelValueToStringConverter(param0: com.telerik.android.common.Function<any,string>): void;
								public getLabelFormat(): string;
								public constructor(param0: com.telerik.widget.chart.visualization.common.ChartSeries);
								public getPointerLength(): number;
								public preparePointer(param0: globalAndroid.graphics.Path, param1: number, param2: number, param3: boolean): void;
								public getLabelFontStyle(): number;
								public offsetBottom(): number;
								public getPointerWidth(): number;
								public prepareLabel(param0: globalAndroid.graphics.Path, param1: globalAndroid.graphics.Rect, param2: com.telerik.android.common.math.RadRect): void;
								public getLabelMargin(): number;
								public getLabelFont(): globalAndroid.graphics.Typeface;
								public constructor();
								public renderLabel(param0: globalAndroid.graphics.Canvas, param1: com.telerik.widget.chart.engine.elementTree.ChartNode): void;
								public setPointerLength(param0: number): void;
								public setLabelFontStyle(param0: number): void;
								public setLabelMargin(param0: number): void;
								public setLabelTextColor(param0: number): void;
								public setLabelFormat(param0: string): void;
							}
						}
					}
				}
			}
		}
	}
}

declare module com {
	export module telerik {
		export module widget {
			export module chart {
				export module visualization {
					export module common {
						export module renderers {
							export class ScatterLineRenderer extends com.telerik.widget.chart.visualization.common.renderers.LineRenderer {
								public static class: java.lang.Class<com.telerik.widget.chart.visualization.common.renderers.ScatterLineRenderer>;
								public shouldDrawPoint(param0: com.telerik.widget.chart.engine.dataPoints.DataPoint): boolean;
								public constructor();
							}
						}
					}
				}
			}
		}
	}
}

declare module com {
	export module telerik {
		export module widget {
			export module chart {
				export module visualization {
					export module common {
						export module renderers {
							export class SplineAreaRenderer extends com.telerik.widget.chart.visualization.common.renderers.AreaRendererBase {
								public static class: java.lang.Class<com.telerik.widget.chart.visualization.common.renderers.SplineAreaRenderer>;
								public bottomPointsForStackedSeries(param0: com.telerik.widget.chart.visualization.common.renderers.AreaRenderContext, param1: java.util.List<globalAndroid.graphics.Point>): void;
								public topPoints(param0: com.telerik.widget.chart.visualization.common.renderers.AreaRenderContext): java.util.List<globalAndroid.graphics.Point>;
								public constructor();
							}
						}
					}
				}
			}
		}
	}
}

declare module com {
	export module telerik {
		export module widget {
			export module chart {
				export module visualization {
					export module common {
						export module renderers {
							export class SplineHelper<T>  extends java.lang.Object {
								public static class: java.lang.Class<com.telerik.widget.chart.visualization.common.renderers.SplineHelper<any>>;
								public getSplinePoints(param0: java.util.List<T>, param1: com.telerik.android.common.math.RadSize, param2: T, param3: T): java.util.List<globalAndroid.graphics.Point>;
							}
						}
					}
				}
			}
		}
	}
}

declare module com {
	export module telerik {
		export module widget {
			export module chart {
				export module visualization {
					export module common {
						export module renderers {
							export class SplineRenderer extends com.telerik.widget.chart.visualization.common.renderers.LineRenderer {
								public static class: java.lang.Class<com.telerik.widget.chart.visualization.common.renderers.SplineRenderer>;
								public preparePaths(): void;
								public constructor();
							}
						}
					}
				}
			}
		}
	}
}

declare module com {
	export module telerik {
		export module widget {
			export module chart {
				export module visualization {
					export module pieChart {
						export class DoughnutSegment extends com.telerik.widget.chart.visualization.pieChart.PieSegment {
							public static class: java.lang.Class<com.telerik.widget.chart.visualization.pieChart.DoughnutSegment>;
						}
					}
				}
			}
		}
	}
}

declare module com {
	export module telerik {
		export module widget {
			export module chart {
				export module visualization {
					export module pieChart {
						export class DoughnutSeries extends com.telerik.widget.chart.visualization.pieChart.PieSeries {
							public static class: java.lang.Class<com.telerik.widget.chart.visualization.pieChart.DoughnutSeries>;
							public constructor();
							public setInnerRadiusFactor(param0: number): void;
							public onPaletteUpdated(param0: com.telerik.widget.palettes.ChartPalette): void;
							public onPointAdded(param0: number, param1: com.telerik.widget.chart.engine.dataPoints.DataPoint): void;
							public getInnerRadiusFactor(): number;
							public createUpdateContext(): com.telerik.widget.chart.visualization.pieChart.PieUpdateContext;
							public onBoundItemPropertyChanged(param0: com.telerik.widget.chart.engine.databinding.DataPointBindingEntry, param1: java.beans.PropertyChangeEvent): void;
							public onPointRemoved(param0: number, param1: com.telerik.widget.chart.engine.dataPoints.DataPoint): void;
							public invalidatePalette(): void;
							public getCollectionIndex(): number;
							public setupUpdateContext(param0: com.telerik.android.common.math.RadRect): void;
							public measureContent(param0: com.telerik.widget.chart.engine.elementTree.ChartNode, param1: any): com.telerik.android.common.math.RadSize;
							public onDataBindingComplete(): void;
							public onDataPointIsSelectedChanged(param0: com.telerik.widget.chart.engine.dataPoints.DataPoint): void;
							public createSegment(): com.telerik.widget.chart.visualization.pieChart.PieSegment;
							public refreshNode(param0: com.telerik.widget.chart.engine.elementTree.ChartNode): void;
						}
					}
				}
			}
		}
	}
}

declare module com {
	export module telerik {
		export module widget {
			export module chart {
				export module visualization {
					export module pieChart {
						export class DoughnutUpdateContext extends com.telerik.widget.chart.visualization.pieChart.PieUpdateContext {
							public static class: java.lang.Class<com.telerik.widget.chart.visualization.pieChart.DoughnutUpdateContext>;
							public constructor();
						}
					}
				}
			}
		}
	}
}

declare module com {
	export module telerik {
		export module widget {
			export module chart {
				export module visualization {
					export module pieChart {
						export class PieSegment extends com.telerik.android.common.PropertyManager {
							public static class: java.lang.Class<com.telerik.widget.chart.visualization.pieChart.PieSegment>;
							public static FILL_COLOR_PROPERTY_KEY: number;
							public static STROKE_COLOR_PROPERTY_KEY: number;
							public static STROKE_THICKNESS_PROPERTY_KEY: number;
							public static ARC_COLOR_PROPERTY_KEY: number;
							public static ARC_THICKNESS_PROPERTY_KEY: number;
							public fillPaint: globalAndroid.graphics.Paint;
							public arcPaint: globalAndroid.graphics.Paint;
							public strokePaint: globalAndroid.graphics.Paint;
							public fillPath: globalAndroid.graphics.Path;
							public arcPath: globalAndroid.graphics.Path;
							public strokePath: globalAndroid.graphics.Path;
							public point: com.telerik.widget.chart.engine.dataPoints.PieDataPoint;
							public series: com.telerik.widget.chart.visualization.pieChart.PieSeries;
							public center: com.telerik.android.common.math.RadPoint;
							public getStrokeThickness(): number;
							public setArcThickness(param0: number): void;
							public getPoint(): com.telerik.widget.chart.engine.dataPoints.PieDataPoint;
							public setPoint(param0: com.telerik.widget.chart.engine.dataPoints.PieDataPoint): void;
							public getArcThickness(): number;
							public setStrokeColor(param0: number): void;
							public setStrokeThickness(param0: number): void;
							public hitTest(param0: globalAndroid.graphics.PointF): boolean;
							public getStrokeColor(): number;
							public setArcColor(param0: number): void;
							public setFillColor(param0: number): void;
							public getArcColor(): number;
							public getFillColor(): number;
							public getLocation(): com.telerik.android.common.math.RadPoint;
						}
					}
				}
			}
		}
	}
}

declare module com {
	export module telerik {
		export module widget {
			export module chart {
				export module visualization {
					export module pieChart {
						export class PieSeries extends com.telerik.widget.chart.visualization.common.ChartSeries {
							public static class: java.lang.Class<com.telerik.widget.chart.visualization.pieChart.PieSeries>;
							public static ARC_STROKE_WIDTH_KEY: string;
							public updateContext: com.telerik.widget.chart.visualization.pieChart.PieUpdateContext;
							public static DEFAULT_SELECTION_OFFSET: number;
							public dataPoints(): com.telerik.widget.chart.engine.elementTree.ElementCollection<com.telerik.widget.chart.engine.dataPoints.PieDataPoint>;
							public setLabelFormat(param0: string): void;
							public setSliceOffset(param0: number): void;
							public getLabelFormat(): string;
							public setData(param0: java.lang.Iterable<any>): void;
							public getDisplayPercentage(): boolean;
							public createUpdateContext(): com.telerik.widget.chart.visualization.pieChart.PieUpdateContext;
							public createLabelRenderer(): com.telerik.widget.chart.visualization.common.renderers.BaseLabelRenderer;
							public onBoundItemPropertyChanged(param0: com.telerik.widget.chart.engine.databinding.DataPointBindingEntry, param1: java.beans.PropertyChangeEvent): void;
							public getDataPointColor(param0: number): number;
							public measureContent(param0: com.telerik.widget.chart.engine.elementTree.ChartNode, param1: any): com.telerik.android.common.math.RadSize;
							public getPointLocation(param0: com.telerik.widget.chart.engine.dataPoints.PieDataPoint): com.telerik.android.common.math.RadPoint;
							public onDataPointIsSelectedChanged(param0: com.telerik.widget.chart.engine.dataPoints.DataPoint): void;
							public onUIUpdated(): void;
							public getLegendTitle(param0: com.telerik.widget.chart.engine.dataPoints.PieDataPoint): string;
							public onPaletteUpdated(param0: com.telerik.widget.palettes.ChartPalette): void;
							public getRadiusFactor(): number;
							public getSliceStyles(): java.util.List<com.telerik.widget.chart.visualization.pieChart.SliceStyle>;
							public setSliceStyles(param0: java.util.List<com.telerik.widget.chart.visualization.pieChart.SliceStyle>): void;
							public findClosestPoint(param0: globalAndroid.graphics.Point): com.telerik.widget.chart.visualization.behaviors.DataPointInfo;
							public onPointRemoved(param0: number, param1: com.telerik.widget.chart.engine.dataPoints.DataPoint): void;
							public getCollectionIndex(): number;
							public updateLegendItems(): void;
							public getValueBinding(): com.telerik.widget.chart.engine.databinding.DataPointBinding;
							public hitTestDataPoint(param0: globalAndroid.graphics.PointF, param1: com.telerik.widget.chart.engine.dataPoints.DataPoint): boolean;
							public createSegment(): com.telerik.widget.chart.visualization.pieChart.PieSegment;
							public refreshNode(param0: com.telerik.widget.chart.engine.elementTree.ChartNode): void;
							public initDataBinding(): void;
							public getSelectedPointOffset(): number;
							public setLabelOffset(param0: number): void;
							public defaultPaletteFamily(): string;
							public onIsVisibleInLegendChanged(param0: boolean): void;
							public createModel(): com.telerik.widget.chart.engine.series.ChartSeriesModel<any>;
							public setNameBinding(param0: com.telerik.widget.chart.engine.databinding.DataPointBinding): void;
							public invalidatePalette(): void;
							public getSliceOffset(): number;
							public setupUpdateContext(param0: com.telerik.android.common.math.RadRect): void;
							public setValueBinding(param0: com.telerik.widget.chart.engine.databinding.DataPointBinding): void;
							public setSelectedPointOffset(param0: number): void;
							public onDataBindingComplete(): void;
							public constructor();
							public model(): com.telerik.widget.chart.engine.series.PieSeriesModel;
							public createDataSourceInstance(): com.telerik.widget.chart.engine.databinding.datasources.ChartSeriesDataSource;
							public onPointAdded(param0: number, param1: com.telerik.widget.chart.engine.dataPoints.DataPoint): void;
							public getLabelOffset(): number;
							public getAngleRange(): com.telerik.widget.chart.engine.chartAreas.AngleRange;
							public updateUICore(param0: com.telerik.widget.chart.visualization.common.ChartLayoutContext): void;
							public model(): com.telerik.widget.chart.engine.series.ChartSeriesModel<any>;
							public getNameBinding(): com.telerik.widget.chart.engine.databinding.DataPointBinding;
							public setRadiusFactor(param0: number): void;
							public setAngleRange(param0: com.telerik.widget.chart.engine.chartAreas.AngleRange): void;
							public hitTestDataPoint(param0: globalAndroid.graphics.PointF): com.telerik.widget.chart.engine.dataPoints.DataPoint;
							public drawCore(param0: globalAndroid.graphics.Canvas): void;
							public onDataPointSelectionChanged(param0: com.telerik.widget.chart.engine.dataPoints.DataPoint): void;
							public setDisplayPercentage(param0: boolean): void;
						}
					}
				}
			}
		}
	}
}

declare module com {
	export module telerik {
		export module widget {
			export module chart {
				export module visualization {
					export module pieChart {
						export class PieSeriesLabelRenderer extends com.telerik.widget.chart.visualization.common.renderers.BaseLabelRenderer {
							public static class: java.lang.Class<com.telerik.widget.chart.visualization.pieChart.PieSeriesLabelRenderer>;
							public static RESET_COLOR: number;
							public constructor();
							public applyPalette(param0: com.telerik.widget.palettes.ChartPalette): void;
							public setLabelTextColor(param0: number): void;
							public getLabelFontStyle(): number;
							public setLabelFormat(param0: string): void;
							public getLabelFillPaint(param0: number): globalAndroid.graphics.Paint;
							public renderLabel(param0: globalAndroid.graphics.Canvas, param1: com.telerik.widget.chart.engine.elementTree.ChartNode): void;
							public constructor(param0: com.telerik.widget.chart.visualization.common.ChartSeries);
							public getLabelFormat(): string;
							public setLabelFontStyle(param0: number): void;
							public calculateLabelPoint(param0: com.telerik.widget.chart.engine.dataPoints.DataPoint, param1: globalAndroid.graphics.Rect): com.telerik.android.common.math.RadPoint;
							public getLabelMargin(): number;
							public getLabelSize(): number;
							public setLabelValueToStringConverter(param0: com.telerik.android.common.Function<any,string>): void;
							public getLabelText(param0: com.telerik.widget.chart.engine.dataPoints.DataPoint): string;
							public getLabelValueToStringConverter(): com.telerik.android.common.Function<any,string>;
							public getLabelFont(): globalAndroid.graphics.Typeface;
							public setLabelFont(param0: globalAndroid.graphics.Typeface): void;
							public getLabelTextColor(): number;
							public constructor(param0: com.telerik.widget.chart.visualization.pieChart.PieSeries);
							public setLabelSize(param0: number): void;
							public setLabelMargin(param0: number): void;
						}
					}
				}
			}
		}
	}
}

declare module com {
	export module telerik {
		export module widget {
			export module chart {
				export module visualization {
					export module pieChart {
						export class PieUpdateContext extends java.lang.Object {
							public static class: java.lang.Class<com.telerik.widget.chart.visualization.pieChart.PieUpdateContext>;
							public constructor();
						}
					}
				}
			}
		}
	}
}

declare module com {
	export module telerik {
		export module widget {
			export module chart {
				export module visualization {
					export module pieChart {
						export class RadPieChartView extends com.telerik.widget.chart.visualization.common.RadChartViewBase<com.telerik.widget.chart.visualization.pieChart.PieSeries> {
							public static class: java.lang.Class<com.telerik.widget.chart.visualization.pieChart.RadPieChartView>;
							public invalidateDrawable(param0: globalAndroid.graphics.drawable.Drawable): void;
							public getZoomWidth(): number;
							public onKeyDown(param0: number, param1: globalAndroid.view.KeyEvent): boolean;
							public onKeyLongPress(param0: number, param1: globalAndroid.view.KeyEvent): boolean;
							public unscheduleDrawable(param0: globalAndroid.graphics.drawable.Drawable, param1: java.lang.Runnable): void;
							public getPanOffsetY(): number;
							public createChartAreaModel(): com.telerik.widget.chart.engine.chartAreas.ChartAreaModel;
							public onDoubleTap(param0: globalAndroid.view.MotionEvent): boolean;
							public scheduleDrawable(param0: globalAndroid.graphics.drawable.Drawable, param1: java.lang.Runnable, param2: number): void;
							public onDown(param0: globalAndroid.view.MotionEvent): boolean;
							public onSingleTapConfirmed(param0: globalAndroid.view.MotionEvent): boolean;
							public getZoomHeight(): number;
							public constructor(param0: globalAndroid.content.Context, param1: globalAndroid.util.AttributeSet, param2: number);
							public onKeyUp(param0: number, param1: globalAndroid.view.KeyEvent): boolean;
							public getPanOffsetX(): number;
							public onScaleEnd(param0: com.telerik.widget.chart.visualization.behaviors.ChartScaleGestureDetector): void;
							public onScroll(param0: globalAndroid.view.MotionEvent, param1: globalAndroid.view.MotionEvent, param2: number, param3: number): boolean;
							public onDoubleTapEvent(param0: globalAndroid.view.MotionEvent): boolean;
							public onLongPress(param0: globalAndroid.view.MotionEvent): void;
							public constructor(param0: globalAndroid.content.Context, param1: globalAndroid.util.AttributeSet);
							public onFling(param0: globalAndroid.view.MotionEvent, param1: globalAndroid.view.MotionEvent, param2: number, param3: number): boolean;
							public getViewportHeight(): number;
							public onShowPress(param0: globalAndroid.view.MotionEvent): void;
							public getViewportWidth(): number;
							public getLegendInfos(): com.telerik.android.common.ObservableCollection<com.telerik.widget.primitives.legend.LegendItem>;
							public onKeyMultiple(param0: number, param1: number, param2: globalAndroid.view.KeyEvent): boolean;
							public validateBehaviourSupport(param0: com.telerik.widget.chart.visualization.behaviors.ChartBehavior): void;
							public onScale(param0: com.telerik.widget.chart.visualization.behaviors.ChartScaleGestureDetector): boolean;
							public sendAccessibilityEvent(param0: number): void;
							public onSingleTapUp(param0: globalAndroid.view.MotionEvent): boolean;
							public onScaleBegin(param0: com.telerik.widget.chart.visualization.behaviors.ChartScaleGestureDetector): boolean;
							public sendAccessibilityEventUnchecked(param0: globalAndroid.view.accessibility.AccessibilityEvent): void;
							public unscheduleDrawable(param0: globalAndroid.graphics.drawable.Drawable): void;
							public getPlotAreaClip(): com.telerik.android.common.math.RadRect;
							public constructor(param0: globalAndroid.content.Context);
						}
					}
				}
			}
		}
	}
}

declare module com {
	export module telerik {
		export module widget {
			export module chart {
				export module visualization {
					export module pieChart {
						export class SliceStyle extends java.lang.Object {
							public static class: java.lang.Class<com.telerik.widget.chart.visualization.pieChart.SliceStyle>;
							public constructor();
							public getStrokeWidth(): number;
							public setArcColor(param0: number): void;
							public getArcWidth(): number;
							public setFillColor(param0: number): void;
							public setStrokeColor(param0: number): void;
							public getArcColor(): number;
							public setStrokeWidth(param0: number): void;
							public setArcWidth(param0: number): void;
							public getFillColor(): number;
							public getStrokeColor(): number;
						}
					}
				}
			}
		}
	}
}

declare module com {
	export module telerik {
		export module widget {
			export module palettes {
				export class ChartColor extends java.lang.Object {
					public static class: java.lang.Class<com.telerik.widget.palettes.ChartColor>;
					public static RED: number;
					public static BLACK: number;
					public static WHITE: number;
					public constructor();
				}
			}
		}
	}
}

declare module com {
	export module telerik {
		export module widget {
			export module palettes {
				export class ChartPalette extends java.lang.Object implements com.telerik.android.common.CollectionChangeListener<any> {
					public static class: java.lang.Class<com.telerik.widget.palettes.ChartPalette>;
					public static PIE_FAMILY: string;
					public static AREA_FAMILY: string;
					public static BAR_FAMILY: string;
					public static LINE_FAMILY: string;
					public static POINT_FAMILY: string;
					public static OHLC_FAMILY: string;
					public static HORIZONTAL_AXIS_FAMILY: string;
					public static VERTICAL_AXIS_FAMILY: string;
					public static CARTESIAN_GRID_LINE_ANNOTATION: string;
					public static CARTESIAN_CUSTOM_ANNOTATION: string;
					public static CARTESIAN_PLOT_BAND_ANNOTATION: string;
					public static CARTESIAN_CHART_GRID: string;
					public static CARTESIAN_CHART_GRID_STRIPES: string;
					public static CARTESIAN_STROKED_ANNOTATION: string;
					public collectionChanged(param0: com.telerik.android.common.CollectionChangedEvent<any>): void;
					public constructor(param0: com.telerik.widget.palettes.ChartPalette);
					public collectionChanged(param0: com.telerik.android.common.CollectionChangedEvent<any>): void;
					public getEntry(param0: com.telerik.widget.chart.visualization.common.PresenterBase, param1: number): com.telerik.widget.palettes.PaletteEntry;
					public getEntry(param0: string): com.telerik.widget.palettes.PaletteEntry;
					public getEntry(param0: string, param1: number): com.telerik.widget.palettes.PaletteEntry;
					public seriesEntries(): com.telerik.android.common.ObservableCollection<com.telerik.widget.palettes.PaletteEntryCollection>;
					public globalEntries(): com.telerik.android.common.ObservableCollection<com.telerik.widget.palettes.PaletteEntry>;
					public clone(): any;
					public constructor();
					public getEntry(param0: com.telerik.widget.chart.visualization.common.PresenterBase): com.telerik.widget.palettes.PaletteEntry;
					public clone(): com.telerik.widget.palettes.ChartPalette;
					public clonePalette(): com.telerik.widget.palettes.ChartPalette;
					public isPredefined(): boolean;
					public entriesForFamily(param0: string): com.telerik.widget.palettes.PaletteEntryCollection;
				}
			}
		}
	}
}

declare module com {
	export module telerik {
		export module widget {
			export module palettes {
				export class ChartPalettes extends java.lang.Object {
					public static class: java.lang.Class<com.telerik.widget.palettes.ChartPalettes>;
					public static init(param0: globalAndroid.content.Context): void;
					public static context(): globalAndroid.content.Context;
					public static darkSelected(): com.telerik.widget.palettes.ChartPalette;
					public static generatePalette(param0: com.telerik.widget.palettes.PaletteEntryCollection): com.telerik.widget.palettes.ChartPalette;
					public static darkSelected(param0: globalAndroid.content.Context): com.telerik.widget.palettes.ChartPalette;
					public static lightSelected(param0: globalAndroid.content.Context): com.telerik.widget.palettes.ChartPalette;
					public static lightSelected(): com.telerik.widget.palettes.ChartPalette;
					public static light(): com.telerik.widget.palettes.ChartPalette;
					public static dark(param0: globalAndroid.content.Context): com.telerik.widget.palettes.ChartPalette;
					public static dark(): com.telerik.widget.palettes.ChartPalette;
					public static light(param0: globalAndroid.content.Context): com.telerik.widget.palettes.ChartPalette;
				}
			}
		}
	}
}

declare module com {
	export module telerik {
		export module widget {
			export module palettes {
				export class ChartSeriesPaletteMode {
					public static class: java.lang.Class<com.telerik.widget.palettes.ChartSeriesPaletteMode>;
					public static SERIES: com.telerik.widget.palettes.ChartSeriesPaletteMode;
					public static ITEM: com.telerik.widget.palettes.ChartSeriesPaletteMode;
					public static valueOf(param0: java.lang.Class<any>, param1: string): java.lang.Enum<any>;
					public static valueOf(param0: string): com.telerik.widget.palettes.ChartSeriesPaletteMode;
					public static values(): native.Array<com.telerik.widget.palettes.ChartSeriesPaletteMode>;
				}
			}
		}
	}
}

declare module com {
	export module telerik {
		export module widget {
			export module palettes {
				export class PaletteChangedListener extends java.lang.Object {
					public static class: java.lang.Class<com.telerik.widget.palettes.PaletteChangedListener>;
					/**
					 * Constructs a new instance of the com.telerik.widget.palettes.PaletteChangedListener interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
					 */
					public constructor(implementation: {
						onPaletteUpdated(param0: com.telerik.widget.palettes.ChartPalette): void;
					});
					public constructor();
					public onPaletteUpdated(param0: com.telerik.widget.palettes.ChartPalette): void;
				}
			}
		}
	}
}

declare module com {
	export module telerik {
		export module widget {
			export module palettes {
				export class PaletteEntry extends java.lang.Object {
					public static class: java.lang.Class<com.telerik.widget.palettes.PaletteEntry>;
					public getStrokeWidth(): number;
					public getAdditionalStroke(): number;
					public getCustomValue(param0: string, param1: string): string;
					public setAdditionalStroke(param0: number): void;
					public setCustomValue(param0: string, param1: any): void;
					public clone(): com.telerik.widget.palettes.PaletteEntry;
					public setCustomValue(param0: string, param1: string): void;
					public constructor(param0: number, param1: number, param2: number, param3: number);
					public constructor(param0: number, param1: number, param2: number, param3: number, param4: number);
					public getAdditionalFill(): number;
					public setAdditionalFill(param0: number): void;
					public clone(): any;
					public getCustomValue(param0: string, param1: any): string;
					public constructor();
					public constructor(param0: number, param1: number, param2: number);
					public setFill(param0: number): void;
					public setStroke(param0: number): void;
					public constructor(param0: com.telerik.widget.palettes.PaletteEntry);
					public getFill(): number;
					public getStroke(): number;
					public constructor(param0: number);
					public setStrokeWidth(param0: number): void;
					public getCustomValue(param0: string): string;
					public constructor(param0: number, param1: number);
				}
			}
		}
	}
}

declare module com {
	export module telerik {
		export module widget {
			export module palettes {
				export class PaletteEntryCollection extends com.telerik.android.common.ObservableCollection<com.telerik.widget.palettes.PaletteEntry> {
					public static class: java.lang.Class<com.telerik.widget.palettes.PaletteEntryCollection>;
					public addAll(param0: java.util.Collection<any>): boolean;
					public isEmpty(): boolean;
					public add(param0: any): boolean;
					public containsAll(param0: java.util.Collection<any>): boolean;
					public size(): number;
					public lastIndexOf(param0: any): number;
					public remove(param0: number): any;
					public iterator(): java.util.Iterator<any>;
					public clone(): any;
					public toArray(param0: native.Array<any>): native.Array<any>;
					public constructor();
					public toArray(): native.Array<any>;
					public clear(): void;
					public get(param0: number): any;
					public subList(param0: number, param1: number): java.util.List<any>;
					public setFamily(param0: string): void;
					public listIterator(param0: number): java.util.ListIterator<any>;
					public clone(): com.telerik.widget.palettes.PaletteEntryCollection;
					public hashCode(): number;
					public constructor(param0: number);
					public contains(param0: any): boolean;
					public remove(param0: any): boolean;
					public removeAll(param0: java.util.Collection<any>): boolean;
					public add(param0: number, param1: any): void;
					public addAll(param0: number, param1: java.util.Collection<any>): boolean;
					public getFamily(): string;
					public constructor(param0: com.telerik.widget.palettes.PaletteEntryCollection);
					public retainAll(param0: java.util.Collection<any>): boolean;
					public indexOf(param0: any): number;
					public equals(param0: any): boolean;
					public set(param0: number, param1: any): any;
					public constructor(param0: java.util.Collection<any>);
					public listIterator(): java.util.ListIterator<any>;
				}
			}
		}
	}
}

declare module com {
	export module telerik {
		export module widget {
			export module primitives {
				export module legend {
					export class LegendInfoProvider extends java.lang.Object {
						public static class: java.lang.Class<com.telerik.widget.primitives.legend.LegendInfoProvider>;
						/**
						 * Constructs a new instance of the com.telerik.widget.primitives.legend.LegendInfoProvider interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
						 */
						public constructor(implementation: {
							getLegendInfos(): com.telerik.android.common.ObservableCollection<com.telerik.widget.primitives.legend.LegendItem>;
						});
						public constructor();
						public getLegendInfos(): com.telerik.android.common.ObservableCollection<com.telerik.widget.primitives.legend.LegendItem>;
					}
				}
			}
		}
	}
}

declare module com {
	export module telerik {
		export module widget {
			export module primitives {
				export module legend {
					export class LegendItem extends java.lang.Object {
						public static class: java.lang.Class<com.telerik.widget.primitives.legend.LegendItem>;
						public representedItem(): any;
						public setPropertyChangeListener(param0: java.beans.PropertyChangeListener): void;
						public setTitle(param0: string): void;
						public getFillColor(): number;
						public getStrokeColor(): number;
						public setFillColor(param0: number): void;
						public setStrokeColor(param0: number): void;
						public constructor(param0: any);
						public getPropertyChangeListener(): java.beans.PropertyChangeListener;
						public toString(): string;
						public getTitle(): string;
					}
				}
			}
		}
	}
}

declare module com {
	export module telerik {
		export module widget {
			export module primitives {
				export module legend {
					export class LegendItemListAdapter extends globalAndroid.support.v7.widget.RecyclerView.Adapter<com.telerik.widget.primitives.legend.LegendItemListAdapter.ViewHolder> {
						public static class: java.lang.Class<com.telerik.widget.primitives.legend.LegendItemListAdapter>;
						public constructor();
						public onBindViewHolder(param0: any, param1: number, param2: java.util.List<any>): void;
						public getItem(param0: number): com.telerik.widget.primitives.legend.LegendItem;
						public getItemCount(): number;
						public onBindViewHolder(param0: com.telerik.widget.primitives.legend.LegendItemListAdapter.ViewHolder, param1: number): void;
						public constructor(param0: globalAndroid.content.Context, param1: java.util.List<com.telerik.widget.primitives.legend.LegendItem>);
						public onCreateViewHolder(param0: globalAndroid.view.ViewGroup, param1: number): any;
						public onCreateViewHolder(param0: globalAndroid.view.ViewGroup, param1: number): com.telerik.widget.primitives.legend.LegendItemListAdapter.ViewHolder;
						public onBindViewHolder(param0: any, param1: number): void;
					}
					export module LegendItemListAdapter {
						export class ViewHolder extends globalAndroid.support.v7.widget.RecyclerView.ViewHolder {
							public static class: java.lang.Class<com.telerik.widget.primitives.legend.LegendItemListAdapter.ViewHolder>;
							public constructor(param0: globalAndroid.view.View);
							public constructor(param0: com.telerik.widget.primitives.legend.RadLegendItemView);
						}
					}
				}
			}
		}
	}
}

declare module com {
	export module telerik {
		export module widget {
			export module primitives {
				export module legend {
					export class LegendLinearLayoutManager extends globalAndroid.support.v7.widget.LinearLayoutManager {
						public static class: java.lang.Class<com.telerik.widget.primitives.legend.LegendLinearLayoutManager>;
						public constructor();
						public constructor(param0: globalAndroid.content.Context);
						public constructor(param0: globalAndroid.content.Context, param1: globalAndroid.util.AttributeSet, param2: number, param3: number);
						public computeScrollVectorForPosition(param0: number): globalAndroid.graphics.PointF;
						public constructor(param0: globalAndroid.content.Context, param1: number, param2: boolean);
						public setCanScrollVertically(param0: boolean): void;
						public setCanScrollHorizontally(param0: boolean): void;
						public canScrollHorizontally(): boolean;
						public prepareForDrop(param0: globalAndroid.view.View, param1: globalAndroid.view.View, param2: number, param3: number): void;
						public canScrollVertically(): boolean;
					}
				}
			}
		}
	}
}

declare module com {
	export module telerik {
		export module widget {
			export module primitives {
				export module legend {
					export class LegendSelectable extends java.lang.Object {
						public static class: java.lang.Class<com.telerik.widget.primitives.legend.LegendSelectable>;
						/**
						 * Constructs a new instance of the com.telerik.widget.primitives.legend.LegendSelectable interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
						 */
						public constructor(implementation: {
							setSelectedChangeListener(param0: com.telerik.widget.primitives.legend.LegendSelectableListener): void;
							getSelectedChangeListener(): com.telerik.widget.primitives.legend.LegendSelectableListener;
							setIsSelected(param0: boolean): void;
							getIsSelected(): boolean;
						});
						public constructor();
						public setSelectedChangeListener(param0: com.telerik.widget.primitives.legend.LegendSelectableListener): void;
						public getSelectedChangeListener(): com.telerik.widget.primitives.legend.LegendSelectableListener;
						public setIsSelected(param0: boolean): void;
						public getIsSelected(): boolean;
					}
				}
			}
		}
	}
}

declare module com {
	export module telerik {
		export module widget {
			export module primitives {
				export module legend {
					export class LegendSelectableListener extends java.lang.Object {
						public static class: java.lang.Class<com.telerik.widget.primitives.legend.LegendSelectableListener>;
						/**
						 * Constructs a new instance of the com.telerik.widget.primitives.legend.LegendSelectableListener interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
						 */
						public constructor(implementation: {
							onLegendObjectSelected(param0: boolean): void;
						});
						public constructor();
						public onLegendObjectSelected(param0: boolean): void;
					}
				}
			}
		}
	}
}

declare module com {
	export module telerik {
		export module widget {
			export module primitives {
				export module legend {
					export class LegendSelectionListener extends java.lang.Object {
						public static class: java.lang.Class<com.telerik.widget.primitives.legend.LegendSelectionListener>;
						/**
						 * Constructs a new instance of the com.telerik.widget.primitives.legend.LegendSelectionListener interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
						 */
						public constructor(implementation: {
							onLegendItemSelected(param0: any): void;
						});
						public constructor();
						public onLegendItemSelected(param0: any): void;
					}
				}
			}
		}
	}
}

declare module com {
	export module telerik {
		export module widget {
			export module primitives {
				export module legend {
					export class LegendTouchListener extends java.lang.Object implements globalAndroid.support.v7.widget.RecyclerView.OnItemTouchListener {
						public static class: java.lang.Class<com.telerik.widget.primitives.legend.LegendTouchListener>;
						public onTouchEvent(param0: globalAndroid.support.v7.widget.RecyclerView, param1: globalAndroid.view.MotionEvent): void;
						public constructor(param0: globalAndroid.content.Context, param1: globalAndroid.support.v7.widget.RecyclerView, param2: com.telerik.widget.primitives.legend.LegendTouchListener.LegendItemClickListener);
						public onInterceptTouchEvent(param0: globalAndroid.support.v7.widget.RecyclerView, param1: globalAndroid.view.MotionEvent): boolean;
						public onRequestDisallowInterceptTouchEvent(param0: boolean): void;
					}
					export module LegendTouchListener {
						export class LegendItemClickListener extends java.lang.Object {
							public static class: java.lang.Class<com.telerik.widget.primitives.legend.LegendTouchListener.LegendItemClickListener>;
							/**
							 * Constructs a new instance of the com.telerik.widget.primitives.legend.LegendTouchListener$LegendItemClickListener interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
							 */
							public constructor(implementation: {
								onItemClick(param0: globalAndroid.view.View, param1: number): void;
							});
							public constructor();
							public onItemClick(param0: globalAndroid.view.View, param1: number): void;
						}
					}
				}
			}
		}
	}
}

declare module com {
	export module telerik {
		export module widget {
			export module primitives {
				export module legend {
					export class RadLegendItemView extends globalAndroid.widget.LinearLayout implements java.beans.PropertyChangeListener, com.telerik.widget.primitives.legend.LegendSelectableListener {
						public static class: java.lang.Class<com.telerik.widget.primitives.legend.RadLegendItemView>;
						public isLayoutRequested(): boolean;
						public constructor(param0: globalAndroid.content.Context);
						public sendAccessibilityEvent(param0: number): void;
						public sendAccessibilityEventUnchecked(param0: globalAndroid.view.accessibility.AccessibilityEvent): void;
						public clearChildFocus(param0: globalAndroid.view.View): void;
						public requestChildFocus(param0: globalAndroid.view.View, param1: globalAndroid.view.View): void;
						public getLegendItem(): com.telerik.widget.primitives.legend.LegendItem;
						public invalidateChild(param0: globalAndroid.view.View, param1: globalAndroid.graphics.Rect): void;
						public addView(param0: globalAndroid.view.View, param1: number, param2: number): void;
						public getTitleView(): globalAndroid.widget.TextView;
						public onKeyMultiple(param0: number, param1: number, param2: globalAndroid.view.KeyEvent): boolean;
						public removeView(param0: globalAndroid.view.View): void;
						public getChildVisibleRect(param0: globalAndroid.view.View, param1: globalAndroid.graphics.Rect, param2: globalAndroid.graphics.Point): boolean;
						public onKeyUp(param0: number, param1: globalAndroid.view.KeyEvent): boolean;
						public getIconView(): globalAndroid.view.View;
						public recomputeViewAttributes(param0: globalAndroid.view.View): void;
						public showContextMenuForChild(param0: globalAndroid.view.View): boolean;
						public unscheduleDrawable(param0: globalAndroid.graphics.drawable.Drawable): void;
						public requestDisallowInterceptTouchEvent(param0: boolean): void;
						public invalidateChildInParent(param0: native.Array<number>, param1: globalAndroid.graphics.Rect): globalAndroid.view.ViewParent;
						public addView(param0: globalAndroid.view.View, param1: globalAndroid.view.ViewGroup.LayoutParams): void;
						public onLegendObjectSelected(param0: boolean): void;
						public onKeyLongPress(param0: number, param1: globalAndroid.view.KeyEvent): boolean;
						public onKeyDown(param0: number, param1: globalAndroid.view.KeyEvent): boolean;
						public requestLayout(): void;
						public bringChildToFront(param0: globalAndroid.view.View): void;
						public startActionModeForChild(param0: globalAndroid.view.View, param1: globalAndroid.view.ActionMode.Callback): globalAndroid.view.ActionMode;
						public addView(param0: globalAndroid.view.View, param1: number): void;
						public propertyChange(param0: java.beans.PropertyChangeEvent): void;
						public requestChildRectangleOnScreen(param0: globalAndroid.view.View, param1: globalAndroid.graphics.Rect, param2: boolean): boolean;
						public focusSearch(param0: globalAndroid.view.View, param1: number): globalAndroid.view.View;
						public invalidateDrawable(param0: globalAndroid.graphics.drawable.Drawable): void;
						public requestTransparentRegion(param0: globalAndroid.view.View): void;
						public addView(param0: globalAndroid.view.View, param1: number, param2: globalAndroid.view.ViewGroup.LayoutParams): void;
						public addView(param0: globalAndroid.view.View): void;
						public createContextMenu(param0: globalAndroid.view.ContextMenu): void;
						public constructor(param0: globalAndroid.content.Context, param1: globalAndroid.util.AttributeSet);
						public childDrawableStateChanged(param0: globalAndroid.view.View): void;
						public unscheduleDrawable(param0: globalAndroid.graphics.drawable.Drawable, param1: java.lang.Runnable): void;
						public requestFitSystemWindows(): void;
						public setLegendItem(param0: com.telerik.widget.primitives.legend.LegendItem): void;
						public updateViewLayout(param0: globalAndroid.view.View, param1: globalAndroid.view.ViewGroup.LayoutParams): void;
						public getParentForAccessibility(): globalAndroid.view.ViewParent;
						public scheduleDrawable(param0: globalAndroid.graphics.drawable.Drawable, param1: java.lang.Runnable, param2: number): void;
						public focusableViewAvailable(param0: globalAndroid.view.View): void;
						public focusSearch(param0: number): globalAndroid.view.View;
						public requestSendAccessibilityEvent(param0: globalAndroid.view.View, param1: globalAndroid.view.accessibility.AccessibilityEvent): boolean;
						public constructor(param0: globalAndroid.content.Context, param1: globalAndroid.util.AttributeSet, param2: number);
						public getParent(): globalAndroid.view.ViewParent;
					}
				}
			}
		}
	}
}

declare module com {
	export module telerik {
		export module widget {
			export module primitives {
				export module legend {
					export class RadLegendView extends globalAndroid.widget.FrameLayout implements com.telerik.android.common.CollectionChangeListener<any> {
						public static class: java.lang.Class<com.telerik.widget.primitives.legend.RadLegendView>;
						public isLayoutRequested(): boolean;
						public constructor(param0: globalAndroid.content.Context);
						public addLegendItemSelectedListener(param0: com.telerik.widget.primitives.legend.LegendSelectionListener): void;
						public sendAccessibilityEvent(param0: number): void;
						public sendAccessibilityEventUnchecked(param0: globalAndroid.view.accessibility.AccessibilityEvent): void;
						public clearChildFocus(param0: globalAndroid.view.View): void;
						public getLegendProvider(): com.telerik.widget.primitives.legend.LegendInfoProvider;
						public collectionChanged(param0: com.telerik.android.common.CollectionChangedEvent<any>): void;
						public requestChildFocus(param0: globalAndroid.view.View, param1: globalAndroid.view.View): void;
						public setLegendOrientation(param0: number): void;
						public invalidateChild(param0: globalAndroid.view.View, param1: globalAndroid.graphics.Rect): void;
						public addView(param0: globalAndroid.view.View, param1: number, param2: number): void;
						public onKeyMultiple(param0: number, param1: number, param2: globalAndroid.view.KeyEvent): boolean;
						public removeView(param0: globalAndroid.view.View): void;
						public getChildVisibleRect(param0: globalAndroid.view.View, param1: globalAndroid.graphics.Rect, param2: globalAndroid.graphics.Point): boolean;
						public onKeyUp(param0: number, param1: globalAndroid.view.KeyEvent): boolean;
						public setLegendProvider(param0: com.telerik.widget.primitives.legend.LegendInfoProvider): void;
						public recomputeViewAttributes(param0: globalAndroid.view.View): void;
						public showContextMenuForChild(param0: globalAndroid.view.View): boolean;
						public unscheduleDrawable(param0: globalAndroid.graphics.drawable.Drawable): void;
						public requestDisallowInterceptTouchEvent(param0: boolean): void;
						public invalidateChildInParent(param0: native.Array<number>, param1: globalAndroid.graphics.Rect): globalAndroid.view.ViewParent;
						public addView(param0: globalAndroid.view.View, param1: globalAndroid.view.ViewGroup.LayoutParams): void;
						public onKeyLongPress(param0: number, param1: globalAndroid.view.KeyEvent): boolean;
						public onKeyDown(param0: number, param1: globalAndroid.view.KeyEvent): boolean;
						public requestLayout(): void;
						public setCanScrollHorizontally(param0: boolean): void;
						public bringChildToFront(param0: globalAndroid.view.View): void;
						public startActionModeForChild(param0: globalAndroid.view.View, param1: globalAndroid.view.ActionMode.Callback): globalAndroid.view.ActionMode;
						public addView(param0: globalAndroid.view.View, param1: number): void;
						public collectionChanged(param0: com.telerik.android.common.CollectionChangedEvent<any>): void;
						public requestChildRectangleOnScreen(param0: globalAndroid.view.View, param1: globalAndroid.graphics.Rect, param2: boolean): boolean;
						public getLegendOrientation(): number;
						public setItemViewLayout(param0: number): void;
						public getLegendTitleView(): globalAndroid.widget.TextView;
						public removeLegendItemSelectedListener(param0: com.telerik.widget.primitives.legend.LegendSelectionListener): void;
						public focusSearch(param0: globalAndroid.view.View, param1: number): globalAndroid.view.View;
						public invalidateDrawable(param0: globalAndroid.graphics.drawable.Drawable): void;
						public requestTransparentRegion(param0: globalAndroid.view.View): void;
						public getItemViewLayout(): number;
						public addView(param0: globalAndroid.view.View, param1: number, param2: globalAndroid.view.ViewGroup.LayoutParams): void;
						public addView(param0: globalAndroid.view.View): void;
						public createContextMenu(param0: globalAndroid.view.ContextMenu): void;
						public constructor(param0: globalAndroid.content.Context, param1: globalAndroid.util.AttributeSet);
						public setCanScrollVertically(param0: boolean): void;
						public childDrawableStateChanged(param0: globalAndroid.view.View): void;
						public notifySelectedListeners(param0: com.telerik.widget.primitives.legend.LegendSelectable): void;
						public unscheduleDrawable(param0: globalAndroid.graphics.drawable.Drawable, param1: java.lang.Runnable): void;
						public requestFitSystemWindows(): void;
						public constructor(param0: globalAndroid.content.Context, param1: globalAndroid.util.AttributeSet, param2: number, param3: number);
						public updateViewLayout(param0: globalAndroid.view.View, param1: globalAndroid.view.ViewGroup.LayoutParams): void;
						public getParentForAccessibility(): globalAndroid.view.ViewParent;
						public scheduleDrawable(param0: globalAndroid.graphics.drawable.Drawable, param1: java.lang.Runnable, param2: number): void;
						public focusableViewAvailable(param0: globalAndroid.view.View): void;
						public focusSearch(param0: number): globalAndroid.view.View;
						public requestSendAccessibilityEvent(param0: globalAndroid.view.View, param1: globalAndroid.view.accessibility.AccessibilityEvent): boolean;
						public constructor(param0: globalAndroid.content.Context, param1: globalAndroid.util.AttributeSet, param2: number);
						public createListViewAdapter(): com.telerik.widget.primitives.legend.LegendItemListAdapter;
						public getParent(): globalAndroid.view.ViewParent;
					}
				}
			}
		}
	}
}

//Generics information:
//com.telerik.widget.chart.engine.axes.continuous.ValueRange:1
//com.telerik.widget.chart.engine.dataPoints.DataPointCollection:1
//com.telerik.widget.chart.engine.databinding.GenericDataPointBinding:2
//com.telerik.widget.chart.engine.elementTree.ChartElement.Predicate:1
//com.telerik.widget.chart.engine.elementTree.ElementCollection:1
//com.telerik.widget.chart.engine.propertyStore.ValueExtractor:1
//com.telerik.widget.chart.engine.series.ChartSeriesModel:1
//com.telerik.widget.chart.engine.series.DataPointSeriesModel:1
//com.telerik.widget.chart.engine.series.SeriesModelWithAxes:1
//com.telerik.widget.chart.visualization.cartesianChart.series.pointrenderers.ChartDataPointRendererBase:1
//com.telerik.widget.chart.visualization.common.AnnotationCollection:1
//com.telerik.widget.chart.visualization.common.PresenterCollection:1
//com.telerik.widget.chart.visualization.common.RadChartViewBase:1
//com.telerik.widget.chart.visualization.common.renderers.SplineHelper:1