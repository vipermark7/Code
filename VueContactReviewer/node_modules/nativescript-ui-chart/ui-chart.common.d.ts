import { View, AddArrayFromBuilder, Property } from "tns-core-modules/ui/core/view";
import { ObservableArray, ChangedData } from "tns-core-modules/data/observable-array";
import { CartesianAxis } from "./visualization/views/chart-axis.common";
import { RadLegendView } from "./visualization/views/chart-legend-view.common";
import { RadCartesianChartGrid } from "./visualization/parts/chart-cartesian-chart-grid.common";
import { Trackball } from "./visualization/parts/chart-track-ball.common";
import { ChartSelectionMode } from "./misc/chart-public-enum";
import * as initializersCommon from "./initializers/chart-initializers.common";
import { Palette } from "./visualization/parts/chart-palette.common";
export declare class RadChartBase extends View implements AddArrayFromBuilder {
    static seriesSelectedEvent: string;
    static seriesDeselectedEvent: string;
    static pointSelectedEvent: string;
    static pointDeselectedEvent: string;
    static chartZoomedEvent: string;
    static chartPannedEvent: string;
    static trackballTrackedSelectionEvent: string;
    legend: RadLegendView;
    series: ObservableArray<any>;
    palettes: ObservableArray<Palette>;
    annotations: ObservableArray<any>;
    seriesSelectionMode: ChartSelectionMode;
    pointSelectionMode: ChartSelectionMode;
    allowAnimations: boolean;
    protected _initializer: initializersCommon.ChartBaseValueMapper;
    constructor();
    readonly androidView: any;
    readonly rootLayout: any;
    reloadPalettes(): void;
    static legendProperty: Property<RadChartBase, RadLegendView>;
    static seriesProperty: Property<RadChartBase, ObservableArray<any>>;
    static palettesProperty: Property<RadChartBase, ObservableArray<Palette>>;
    static annotationsProperty: Property<RadChartBase, ObservableArray<any>>;
    static seriesSelectionModeProperty: Property<RadChartBase, ChartSelectionMode>;
    static pointSelectionModeProperty: Property<RadChartBase, ChartSelectionMode>;
    static allowAnimationsProperty: Property<RadChartBase, boolean>;
    readonly initializer: initializersCommon.ChartBaseValueMapper;
    updateChart(): void;
    _addArrayFromBuilder(name: string, value: Array<any>): void;
    private baseBindingContextChanged;
    getAxisByID(axisID: string): CartesianAxis;
    private onLegendPropertyChanged;
    protected onLegendChanged(oldValue: RadLegendView, newValue: RadLegendView): void;
    private onPalettesPropertyChanged;
    protected onPalettesChanged(oldValue: ObservableArray<Palette>, newValue: ObservableArray<Palette>): void;
    protected PalettesCollectionChangedInternal(data: any): void;
    private onSeriesPropertyChanged;
    protected onSeriesChanged(oldValue: ObservableArray<any>, newValue: ObservableArray<any>): void;
    protected SeriesCollectionChangedInternal(data: ChangedData<any>): void;
    private onAnnotationsPropertyChanged;
    protected onAnnotationsChanged(oldValue: ObservableArray<any>, newValue: ObservableArray<any>): void;
    protected AnnotationsCollectionChangedInternal(data: any): void;
    private onSeriesSelectionModePropertyChanged;
    private onPointSelectionModePropertyChanged;
    private onAllowAnimationsPropertyChanged;
    protected onSeriesSelectionModeChanged(oldValue: ChartSelectionMode, newValue: ChartSelectionMode): void;
    protected onPointSelectionModeChanged(oldValue: ChartSelectionMode, newValue: ChartSelectionMode): void;
    protected onAllowAnimationsChanged(oldValue: boolean, newValue: boolean): void;
}
export declare class RadCartesianChart extends RadChartBase {
    grid: RadCartesianChartGrid;
    horizontalAxis: CartesianAxis;
    verticalAxis: CartesianAxis;
    verticalZoom: number;
    horizontalZoom: number;
    trackball: Trackball;
    constructor();
    static gridProperty: Property<RadCartesianChart, RadCartesianChartGrid>;
    static horizontalAxisProperty: Property<RadCartesianChart, CartesianAxis>;
    static verticalAxisProperty: Property<RadCartesianChart, CartesianAxis>;
    static verticalZoomProperty: Property<RadCartesianChart, number>;
    static horizontalZoomProperty: Property<RadCartesianChart, number>;
    static trackballProperty: Property<RadCartesianChart, Trackball>;
    private onGridPropertyChanged;
    protected onGridChanged(oldValue: RadCartesianChartGrid, newValue: RadCartesianChartGrid): void;
    private onHorizontalAxisPropertyChanged;
    private onVerticalAxisPropertyChanged;
    private onHorizontalZoomPropertyChanged;
    private onVerticalZoomPropertyChanged;
    private onTrackballPropertyChanged;
    protected onHorizontalAxisChanged(oldValue: CartesianAxis, newValue: CartesianAxis): void;
    protected onVerticalAxisChanged(oldValue: CartesianAxis, newValue: CartesianAxis): void;
    protected onHorizontalZoomChanged(oldValue: number, newValue: number): void;
    protected onVerticalZoomChanged(oldValue: number, newValue: number): void;
    protected onTrackballChanged(oldValue: Trackball, newValue: Trackball): void;
    private updateAxisBindingContext;
    private bindingContextChanged;
}
export declare class RadPieChart extends RadChartBase {
}
