Object.defineProperty(exports, "__esModule", { value: true });
var http_1 = require("tns-core-modules/http");
var platform_1 = require("tns-core-modules/platform");
var package_json_1 = require("../../package.json");
function deviceInformation() {
    var platform = platform_1.device.os;
    var version = platform_1.device.osVersion;
    var manufacturer = platform_1.device.manufacturer;
    var parts = ["js-" + package_json_1.name + "/" + version];
    return parts.concat([platform, version, manufacturer]).map(function (part) {
        if (part) {
            return part.toString().replace(/\s/g, '_').toLowerCase();
        }
        return 'unknown';
    }).join(' ');
}
function deviceInfo() {
    return {
        hv: 1,
        md: platform_1.device.model,
        os: platform_1.device.os,
        ov: platform_1.device.osVersion,
        sdk: {
            name: package_json_1.name,
            version: package_json_1.version
        },
        pv: platform_1.device.sdkVersion,
        ty: platform_1.device.deviceType,
        id: platform_1.device.uuid
    };
}
function send(request) {
    return __awaiter(this, void 0, void 0, function () {
        var url, method, headers, body, timeout, kinveyUrlRegex, response, data;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    url = request.url, method = request.method, headers = request.headers, body = request.body, timeout = request.timeout;
                    kinveyUrlRegex = /kinvey\.com/gm;
                    // Add kinvey device information headers
                    if (kinveyUrlRegex.test(url)) {
                        headers['X-Kinvey-Device-Information'] = deviceInformation();
                        headers['X-Kinvey-Device-Info'] = JSON.stringify(deviceInfo());
                    }
                    return [4 /*yield*/, http_1.request({
                            headers: headers,
                            method: method,
                            url: url,
                            content: body,
                            timeout: timeout
                        })];
                case 1:
                    response = _a.sent();
                    if (response.content) {
                        try {
                            data = response.content.toString();
                        }
                        catch (e) {
                            // TODO: log error
                            data = response.content.raw;
                        }
                    }
                    return [2 /*return*/, {
                            statusCode: response.statusCode,
                            headers: response.headers,
                            data: data
                        }];
            }
        });
    });
}
exports.send = send;
//# sourceMappingURL=httpAdapter.js.map