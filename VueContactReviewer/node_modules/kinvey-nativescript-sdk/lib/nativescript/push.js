Object.defineProperty(exports, "__esModule", { value: true });
var messaging_1 = require("nativescript-plugin-firebase/messaging");
var platform_1 = require("tns-core-modules/platform");
var http_1 = require("kinvey-js-sdk/lib/http");
function register(callback, options) {
    if (options === void 0) { options = {}; }
    return __awaiter(this, void 0, void 0, function () {
        var token, request;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    // Init Firebase messaging
                    messaging_1.messaging.initFirebaseMessaging(Object.assign({
                        showNotifications: true,
                        showNotificationsWhenInForeground: true
                    }, options));
                    // Add the callback
                    return [4 /*yield*/, messaging_1.messaging.addOnMessageReceivedCallback(callback)];
                case 1:
                    // Add the callback
                    _a.sent();
                    return [4 /*yield*/, messaging_1.messaging.getCurrentPushToken()];
                case 2:
                    token = _a.sent();
                    request = new http_1.KinveyHttpRequest({
                        method: http_1.HttpRequestMethod.POST,
                        auth: http_1.KinveyHttpAuth.Session,
                        url: http_1.formatKinveyBaasUrl(http_1.KinveyBaasNamespace.Push, '/register-device'),
                        body: {
                            platform: platform_1.device.os.toLowerCase(),
                            framework: 'nativescript',
                            deviceId: token,
                            service: 'firebase'
                        },
                        timeout: options.timeout
                    });
                    return [4 /*yield*/, request.execute()];
                case 3:
                    _a.sent();
                    // Return the token
                    return [2 /*return*/, token];
            }
        });
    });
}
exports.register = register;
function unregister(options) {
    if (options === void 0) { options = {}; }
    return __awaiter(this, void 0, void 0, function () {
        var token, request;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0: return [4 /*yield*/, messaging_1.messaging.getCurrentPushToken()];
                case 1:
                    token = _a.sent();
                    request = new http_1.KinveyHttpRequest({
                        method: http_1.HttpRequestMethod.POST,
                        auth: http_1.KinveyHttpAuth.Session,
                        url: http_1.formatKinveyBaasUrl(http_1.KinveyBaasNamespace.Push, '/unregister-device'),
                        body: {
                            platform: platform_1.device.os.toLowerCase(),
                            framework: 'nativescript',
                            deviceId: token,
                            service: 'firebase'
                        },
                        timeout: options.timeout
                    });
                    return [4 /*yield*/, request.execute()];
                case 2:
                    _a.sent();
                    // Unregister for push notifications
                    return [4 /*yield*/, messaging_1.messaging.unregisterForPushNotifications()];
                case 3:
                    // Unregister for push notifications
                    _a.sent();
                    // Return the token
                    return [2 /*return*/, token];
            }
        });
    });
}
exports.unregister = unregister;
//# sourceMappingURL=push.js.map