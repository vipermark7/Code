Object.defineProperty(exports, "__esModule", { value: true });
var events_1 = require("events");
var color_1 = require("tns-core-modules/color");
var frame_1 = require("tns-core-modules/ui/frame");
var app = __importStar(require("tns-core-modules/application"));
var page_1 = require("tns-core-modules/ui/page");
var grid_layout_1 = require("tns-core-modules/ui/layouts/grid-layout");
var stack_layout_1 = require("tns-core-modules/ui/layouts/stack-layout");
var web_view_1 = require("tns-core-modules/ui/web-view");
var nativescript_urlhandler_1 = require("nativescript-urlhandler");
var LOADED_EVENT = 'loaded';
var CLOSED_EVENT = 'closed';
var ERROR_EVENT = 'error';
var customtabsPackage = global.androidx && global.androidx.browser ? global.androidx.browser : android.support;
var customtabs = customtabsPackage.customtabs || {};
var CustomTabsCallback = customtabs.CustomTabsCallback;
var CustomTabsServiceConnection = customtabs.CustomTabsServiceConnection;
var CustomTabsIntent = customtabs.CustomTabsIntent;
var CustomTabsClient = customtabs.CustomTabsClient;
var Uri = android.net.Uri;
var NavigationEvent = {
    Started: 1,
    Finished: 2,
    Failed: 3,
    Aborted: 4,
    TabShown: 5,
    TabHidden: 6
};
var OAuthPageProvider = /** @class */ (function () {
    function OAuthPageProvider(authUrl, webviewIntercept) {
        this.authUrl = authUrl;
        this.webviewIntercept = webviewIntercept;
    }
    OAuthPageProvider.prototype.createWebViewPage = function () {
        var _this = this;
        var webview = new web_view_1.WebView();
        webview.on(web_view_1.WebView.loadFinishedEvent, function (args) {
            _this.webviewIntercept(webview, args.error, args.url);
        });
        webview.on(web_view_1.WebView.loadStartedEvent, function (args) {
            _this.webviewIntercept(webview, args.error, args.url);
        });
        var grid = new grid_layout_1.GridLayout();
        grid.addChild(webview);
        var stack = new stack_layout_1.StackLayout();
        stack.addChild(grid);
        var page = new page_1.Page();
        page.content = stack;
        webview.src = this.authUrl;
        return page;
    };
    return OAuthPageProvider;
}());
var LegacyPopup = /** @class */ (function (_super) {
    __extends(LegacyPopup, _super);
    function LegacyPopup() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this._open = false;
        return _this;
    }
    LegacyPopup.prototype.open = function (url) {
        var _this = this;
        if (url === void 0) { url = '/'; }
        if (this._open !== true) {
            var webViewIntercept = function (webview, error, url) {
                var urlStr = '';
                try {
                    if (error && error.userInfo && error.userInfo.allValues && error.userInfo.allValues.count > 0) {
                        var val0 = error.userInfo.allValues[0];
                        if (val0.absoluteString) {
                            urlStr = val0.absoluteString;
                        }
                        else if (val0.userInfo && val0.userInfo.allValues && val0.userInfo.allValues.count > 0) {
                            urlStr = val0.userInfo.allValues[0];
                        }
                        else {
                            urlStr = val0;
                        }
                    }
                    else if (webview.request && webview.request.URL && webview.request.URL.absoluteString) {
                        urlStr = webview.request.URL.absoluteString;
                    }
                    else if (url) {
                        urlStr = url;
                    }
                }
                catch (ex) {
                    // Just catch the exception
                }
                _this.emit(LOADED_EVENT, { url: urlStr });
                return true;
            };
            var authPage_1 = new OAuthPageProvider(url, webViewIntercept);
            frame_1.topmost().navigate(function () { return authPage_1.createWebViewPage(); });
            this._open = true;
        }
        return this;
    };
    return LegacyPopup;
}(events_1.EventEmitter));
var Popup = /** @class */ (function (_super) {
    __extends(Popup, _super);
    function Popup() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this._open = false;
        return _this;
    }
    Popup.prototype.isClosed = function () {
        return this._open !== true;
    };
    Popup.prototype.onLoaded = function (listener) {
        return this.on(LOADED_EVENT, listener);
    };
    Popup.prototype.onClosed = function (listener) {
        return this.on(CLOSED_EVENT, listener);
    };
    Popup.prototype.onError = function (listener) {
        return this.on(ERROR_EVENT, listener);
    };
    Popup.prototype.open = function (url, options) {
        if (url === void 0) { url = '/'; }
        if (options === void 0) { options = {}; }
        return __awaiter(this, void 0, void 0, function () {
            var activity_1, shouldClose_1, success, callback_1, serviceConnection, legacyPopup;
            var _this = this;
            return __generator(this, function (_a) {
                if (this._open !== true) {
                    activity_1 = app.android.startActivity || app.android.foregroundActivity;
                    shouldClose_1 = false;
                    success = false;
                    try {
                        callback_1 = CustomTabsCallback.extend({
                            onNavigationEvent: function (navigationEvent) {
                                switch (navigationEvent) {
                                    case NavigationEvent.Finished:
                                    case NavigationEvent.Failed:
                                    case NavigationEvent.Aborted:
                                        if (shouldClose_1) {
                                            setTimeout(function () {
                                                _this.emit(CLOSED_EVENT);
                                            }, 0);
                                        }
                                        break;
                                    case NavigationEvent.TabHidden:
                                        shouldClose_1 = true;
                                        _this._open = false;
                                        break;
                                }
                            }
                        });
                        // Handle redirect uri
                        nativescript_urlhandler_1.handleOpenURL(function (appURL) {
                            _this.emit(LOADED_EVENT, { url: appURL.toString() });
                        });
                        serviceConnection = CustomTabsServiceConnection.extend({
                            onCustomTabsServiceConnected: function (name, client) {
                                // Create a new session
                                var session = client.newSession(new callback_1());
                                // Create a new intent builder
                                var intentBuilder = new CustomTabsIntent.Builder(session);
                                // Toolbar color
                                if (options.toolbarColor) {
                                    intentBuilder.setToolbarColor(new color_1.Color(options.toolbarColor).android);
                                }
                                // Show title
                                if (options.showTitle) {
                                    intentBuilder.setShowTitle(options.showTitle);
                                }
                                intentBuilder.addDefaultShareMenuItem(); // Adds a default share item to the menu.
                                intentBuilder.enableUrlBarHiding(); // Enables the url bar to hide as the user scrolls down on the page.
                                // Launch the url
                                var intent = intentBuilder.build();
                                intent.launchUrl(activity_1, Uri.parse(url));
                                // Set open to true
                                _this._open = true;
                            },
                            onServiceDisconnected: function (name) {
                                // TODO: Do nothing for now. Should this change?
                            }
                        });
                        // Bind to the custom tabs service
                        success = CustomTabsClient.bindCustomTabsService(activity_1, 'com.android.chrome', new serviceConnection());
                    }
                    catch (error) { }
                    if (!success) {
                        legacyPopup = new LegacyPopup();
                        legacyPopup.on(LOADED_EVENT, function (event) { return _this.emit(LOADED_EVENT, event); });
                        legacyPopup.open(url);
                        this._open = true;
                    }
                }
                // Return this
                return [2 /*return*/, this];
            });
        });
    };
    Popup.prototype.close = function () {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                if (this._open === true) {
                    frame_1.topmost().goBack();
                    this._open = false;
                }
                this.emit(CLOSED_EVENT);
                return [2 /*return*/, this];
            });
        });
    };
    Popup.open = function (url, options) {
        var popup = new Popup();
        return popup.open(url, options);
    };
    return Popup;
}(events_1.EventEmitter));
exports.Popup = Popup;
//# sourceMappingURL=popup.android.js.map