Object.defineProperty(exports, "__esModule", { value: true });
var events_1 = require("events");
var color_1 = require("tns-core-modules/color");
var nativescript_urlhandler_1 = require("nativescript-urlhandler");
var utils_1 = require("tns-core-modules/utils/utils");
var LOADED_EVENT = 'loaded';
var CLOSED_EVENT = 'closed';
var ERROR_EVENT = 'error';
var SFSafariViewControllerDelegateImpl = /** @class */ (function (_super) {
    __extends(SFSafariViewControllerDelegateImpl, _super);
    function SFSafariViewControllerDelegateImpl() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    SFSafariViewControllerDelegateImpl.new = function () {
        return _super.new.call(this);
    };
    SFSafariViewControllerDelegateImpl.initWithOwnerCallback = function (owner, callback) {
        var delegate = SFSafariViewControllerDelegateImpl.new();
        delegate._owner = owner;
        delegate._callback = callback;
        return delegate;
    };
    SFSafariViewControllerDelegateImpl.prototype.safariViewControllerDidFinish = function () {
        if (this._callback && typeof this._callback === 'function') {
            this._callback(true);
        }
    };
    SFSafariViewControllerDelegateImpl.ObjCProtocols = [SFSafariViewControllerDelegate];
    return SFSafariViewControllerDelegateImpl;
}(NSObject));
var Popup = /** @class */ (function (_super) {
    __extends(Popup, _super);
    function Popup() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this._open = false;
        _this._viewController = null;
        return _this;
    }
    Popup.prototype.isClosed = function () {
        return this._open !== true;
    };
    Popup.prototype.onLoaded = function (listener) {
        return this.on(LOADED_EVENT, listener);
    };
    Popup.prototype.onClosed = function (listener) {
        return this.on(CLOSED_EVENT, listener);
    };
    Popup.prototype.onError = function (listener) {
        return this.on(ERROR_EVENT, listener);
    };
    Popup.prototype.open = function (url, options) {
        if (url === void 0) { url = '/'; }
        if (options === void 0) { options = {}; }
        return __awaiter(this, void 0, void 0, function () {
            var sfc, app;
            var _this = this;
            return __generator(this, function (_a) {
                // Handle redirect uri
                nativescript_urlhandler_1.handleOpenURL(function (appURL) {
                    _this.emit(LOADED_EVENT, { url: appURL.toString() });
                });
                sfc = SFSafariViewController.alloc().initWithURL(NSURL.URLWithString(url));
                // Toolbar color
                if (options.toolbarColor) {
                    sfc.preferredBarTintColor = new color_1.Color(options.toolbarColor).ios;
                }
                // Delegate
                sfc.delegate = SFSafariViewControllerDelegateImpl.initWithOwnerCallback(new WeakRef(this), function (finish) {
                    if (finish) {
                        // Set open to false
                        _this._open = false;
                        // Emit the exit event
                        _this.emit(CLOSED_EVENT);
                    }
                });
                app = utils_1.ios.getter(UIApplication, UIApplication.sharedApplication);
                this._viewController = app.keyWindow.rootViewController;
                // Get the topmost view controller
                while (this._viewController.presentedViewController) {
                    this._viewController = this._viewController.presentedViewController;
                }
                this._viewController.presentViewControllerAnimatedCompletion(sfc, true, null);
                // Set open to true
                this._open = true;
                // Return this
                return [2 /*return*/, this];
            });
        });
    };
    Popup.prototype.close = function () {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                if (this._open && this._viewController) {
                    this._viewController.dismissViewControllerAnimatedCompletion(true, null);
                    this._viewController = null;
                    this._open = false;
                }
                this.emit(CLOSED_EVENT);
                return [2 /*return*/, this];
            });
        });
    };
    Popup.open = function (url, options) {
        var popup = new Popup();
        return popup.open(url, options);
    };
    return Popup;
}(events_1.EventEmitter));
exports.Popup = Popup;
//# sourceMappingURL=popup.ios.js.map