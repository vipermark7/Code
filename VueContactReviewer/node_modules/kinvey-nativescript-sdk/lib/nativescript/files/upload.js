Object.defineProperty(exports, "__esModule", { value: true });
var isFunction_1 = __importDefault(require("lodash/isFunction"));
var bghttp = __importStar(require("nativescript-background-http"));
var file_system_1 = require("tns-core-modules/file-system");
var upload_1 = require("kinvey-js-sdk/lib/files/upload");
var errors_1 = require("kinvey-js-sdk/lib/errors");
var MAX_BACKOFF = 32 * 1000;
function uploadFile(url, file, metadata, options) {
    if (options === void 0) { options = {}; }
    return new Promise(function (resolve, reject) {
        var session = bghttp.session('file-upload');
        var request = {
            url: url,
            method: 'POST',
            headers: Object.assign({}, options.headers, {
                'Content-Type': metadata.mimeType
            }),
            description: 'Kinvey File Upload'
        };
        var task = session.uploadFile(file.path, request);
        task.on('error', function (e) {
            reject(e.error);
        });
        task.on('cancelled', function (e) {
            reject(new errors_1.KinveyError("File upload for " + file.path + " has been cancelled."));
        });
        if (isFunction_1.default(options.onProgress)) {
            task.on('progress', function (e) {
                options.onProgress(e);
            });
        }
        task.on('complete', function () {
            resolve();
        });
    });
}
function upload(filePath, metadata, options) {
    if (metadata === void 0) { metadata = {}; }
    if (options === void 0) { options = {}; }
    return __awaiter(this, void 0, void 0, function () {
        var file, fileMetadata, kinveyFile;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    if (filePath instanceof file_system_1.File) {
                        file = filePath;
                    }
                    else if (file_system_1.File.exists(filePath)) {
                        file = file_system_1.File.fromPath(filePath);
                    }
                    else {
                        throw new errors_1.KinveyError("A file does not exist at " + filePath + ".");
                    }
                    fileMetadata = upload_1.transformMetadata(file, metadata);
                    return [4 /*yield*/, upload_1.saveFileMetadata(fileMetadata, options)];
                case 1:
                    kinveyFile = _a.sent();
                    return [4 /*yield*/, uploadFile(kinveyFile._uploadURL, file, fileMetadata, {
                            timeout: options.timeout,
                            headers: kinveyFile._requiredHeaders,
                            onProgress: options.onProgress
                        })];
                case 2:
                    _a.sent();
                    delete kinveyFile._expiresAt;
                    delete kinveyFile._requiredHeaders;
                    delete kinveyFile._uploadURL;
                    return [2 /*return*/, kinveyFile];
            }
        });
    });
}
exports.upload = upload;
//# sourceMappingURL=upload.js.map