function __export(m) {
    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
}
Object.defineProperty(exports, "__esModule", { value: true });
var commonModule = require("./ui-dataform.common");
var color_1 = require("tns-core-modules/color");
var utils_1 = require("tns-core-modules/utils/utils");
var observable_1 = require("tns-core-modules/data/observable");
var enums_1 = require("tns-core-modules/ui/enums");
var font_1 = require("tns-core-modules/ui/styling/font");
var nativescript_ui_autocomplete_1 = require("nativescript-ui-autocomplete");
var view_1 = require("tns-core-modules/ui/core/view");
__export(require("./ui-dataform.common"));
var DataFormCreateGroupClass;
var DataFormExpandedChangedListener;
var DataFormValidationListener;
var DataFormEditorCustomizations;
var DataFormEditorGroupCustomizations;
var DataFormEntityPropertyCommitListener;
var DataFormValidationInfoProcedure;
function initializeListeners() {
    if (!DataFormExpandedChangedListener) {
        var DataFormExpandedChangedListenerImpl = /** @class */ (function (_super) {
            __extends(DataFormExpandedChangedListenerImpl, _super);
            function DataFormExpandedChangedListenerImpl(owner, group) {
                var _this = _super.call(this) || this;
                _this.owner = owner;
                _this.group = group;
                return global.__native(_this);
            }
            DataFormExpandedChangedListenerImpl.prototype.onChanged = function (isExpanded) {
                var name = isExpanded ?
                    commonModule.RadDataForm.groupExpandedEvent :
                    commonModule.RadDataForm.groupCollapsedEvent;
                var propertyGroup = this.owner.getGroupByName(this.group.name());
                propertyGroup.collapsed = !isExpanded;
                var args = {
                    eventName: name,
                    object: this.owner,
                    editor: undefined,
                    entityProperty: undefined,
                    propertyName: undefined,
                    group: this.group,
                    groupName: this.group.name(),
                    returnValue: true
                };
                this.owner.notify(args);
            };
            DataFormExpandedChangedListenerImpl = __decorate([
                Interfaces([com.telerik.widget.dataform.visualization.ExpandableEditorGroup.IsExpandedChangedListener]),
                __metadata("design:paramtypes", [RadDataForm, com.telerik.widget.dataform.visualization.ExpandableEditorGroup])
            ], DataFormExpandedChangedListenerImpl);
            return DataFormExpandedChangedListenerImpl;
        }(java.lang.Object));
        DataFormExpandedChangedListener = DataFormExpandedChangedListenerImpl;
    }
    if (!DataFormCreateGroupClass) {
        var DataFormCreateGroupClassImpl = /** @class */ (function (_super) {
            __extends(DataFormCreateGroupClassImpl, _super);
            function DataFormCreateGroupClassImpl(owner) {
                var _this = _super.call(this) || this;
                _this.owner = owner;
                return global.__native(_this);
            }
            DataFormCreateGroupClassImpl.prototype._updateGroupLayout = function (propertyGroup, nativeGroup) {
                var context = nativeGroup.rootLayout().getContext();
                if (propertyGroup.layout instanceof commonModule.DataFormStackLayout) {
                    var nativeLinearLayout = new com.telerik.widget.dataform.visualization.DataFormLinearLayoutManager(context);
                    if (propertyGroup.layout.orientation === enums_1.Orientation.horizontal) {
                        nativeLinearLayout.setOrientation(android.widget.LinearLayout.HORIZONTAL);
                    }
                    else {
                        nativeLinearLayout.setOrientation(android.widget.LinearLayout.VERTICAL);
                    }
                    nativeGroup.setLayoutManager(nativeLinearLayout);
                }
                else if (propertyGroup.layout instanceof commonModule.DataFormGridLayout) {
                    var nativeTableLayout = new com.telerik.widget.dataform.visualization.DataFormTableLayoutManager(context);
                    nativeGroup.setLayoutManager(nativeTableLayout);
                }
            };
            DataFormCreateGroupClassImpl.prototype.apply = function (context, name) {
                var dataForm = this.owner;
                if (dataForm.groups) {
                    for (var i = 0; i < dataForm.groups.length; i++) {
                        var propertyGroup = dataForm.groups[i];
                        if (propertyGroup.name === name.toString()) {
                            var group_1 = new com.telerik.widget.dataform.visualization.ExpandableEditorGroup(context, name.toString());
                            if (!propertyGroup.collapsible) {
                                group_1.setExpandable(false);
                            }
                            var newListener = new DataFormExpandedChangedListener(this.owner, group_1);
                            this.owner.groupListeners.push(newListener);
                            group_1.addIsExpandedChangedListener(newListener);
                            if (propertyGroup.collapsed) {
                                group_1.setIsExpanded(false);
                            }
                            if (propertyGroup.hidden) {
                                group_1.rootLayout().setVisibility(android.view.View.GONE);
                            }
                            if (propertyGroup.titleHidden) {
                                group_1.getHeaderContainer().setVisibility(android.view.View.GONE);
                            }
                            if (!propertyGroup.titleStyle) {
                                propertyGroup.titleStyle = new commonModule.GroupTitleStyle();
                            }
                            if (!propertyGroup.layout) {
                                propertyGroup.layout = new commonModule.DataFormStackLayout();
                            }
                            this._updateGroupLayout(propertyGroup, group_1);
                            dataForm._attachGroupChangeListener(propertyGroup);
                            return group_1;
                        }
                    }
                }
                var group = new com.telerik.widget.dataform.visualization.ExpandableEditorGroup(context, name.toString());
                group.setExpandable(false);
                return group;
            };
            DataFormCreateGroupClassImpl = __decorate([
                Interfaces([com.telerik.android.common.Function2]),
                __metadata("design:paramtypes", [RadDataForm])
            ], DataFormCreateGroupClassImpl);
            return DataFormCreateGroupClassImpl;
        }(java.lang.Object));
        DataFormCreateGroupClass = DataFormCreateGroupClassImpl;
    }
    if (!DataFormValidationListener) {
        var DataFormValidationListenerImpl = /** @class */ (function (_super) {
            __extends(DataFormValidationListenerImpl, _super);
            function DataFormValidationListenerImpl(owner) {
                var _this = _super.call(this) || this;
                _this.owner = owner;
                return global.__native(_this);
            }
            DataFormValidationListenerImpl.prototype.onValidate = function (property) {
                var dataForm = this.owner;
                var entityProperty = dataForm.getPropertyByName(property.name());
                var group = dataForm.getGroupByName(property.getGroupName());
                var args = {
                    eventName: commonModule.RadDataForm.propertyValidateEvent,
                    object: dataForm,
                    editor: entityProperty.editor,
                    entityProperty: entityProperty,
                    propertyName: property.name(),
                    group: group,
                    groupName: property.getGroupName(),
                    returnValue: true
                };
                dataForm.notify(args);
                if (property instanceof com.telerik.widget.dataform.engine.EntityPropertyCore) {
                    var result = Promise.resolve(args.returnValue);
                    property.onValidationStarted();
                    var validationValue_1 = entityProperty.valueCandidate;
                    result.then((function (answer) {
                        if (answer === false) {
                            property.onValidationResult(validationValue_1, false, entityProperty.errorMessage);
                        }
                        else {
                            property.onValidationResult(validationValue_1, true, entityProperty.successMessage);
                        }
                    }));
                }
            };
            DataFormValidationListenerImpl.prototype.onDidValidate = function (property) {
                var dataForm = this.owner;
                if (!dataForm) {
                    return;
                }
                var entityProperty = dataForm.getPropertyByName(property.name());
                var group = dataForm.getGroupByName(property.getGroupName());
                var args = {
                    eventName: commonModule.RadDataForm.propertyValidatedEvent,
                    object: dataForm,
                    editor: entityProperty.editor,
                    entityProperty: entityProperty,
                    propertyName: property.name(),
                    group: group,
                    groupName: property.getGroupName(),
                    returnValue: true
                };
                dataForm.notify(args);
            };
            DataFormValidationListenerImpl = __decorate([
                Interfaces([com.telerik.widget.dataform.engine.EntityPropertyValidationListener]),
                __metadata("design:paramtypes", [RadDataForm])
            ], DataFormValidationListenerImpl);
            return DataFormValidationListenerImpl;
        }(java.lang.Object));
        DataFormValidationListener = DataFormValidationListenerImpl;
    }
    if (!DataFormEditorCustomizations) {
        var DataFormEditorCustomizationsImpl = /** @class */ (function (_super) {
            __extends(DataFormEditorCustomizationsImpl, _super);
            function DataFormEditorCustomizationsImpl(owner) {
                var _this = _super.call(this) || this;
                _this.owner = owner;
                return global.__native(_this);
            }
            DataFormEditorCustomizationsImpl.prototype.apply = function (editor) {
                var dataForm = this.owner;
                var property = dataForm.getPropertyByName(editor.property().name());
                if (property.editor) {
                    PropertyEditorHelper.applyStyle(property.editor);
                }
                var groupName = property.android ? property.android.getGroupName() : undefined;
                var args = {
                    eventName: commonModule.RadDataForm.editorUpdateEvent,
                    object: dataForm,
                    editor: editor,
                    entityProperty: property.android,
                    propertyName: property.name,
                    group: undefined,
                    groupName: groupName,
                    returnValue: true
                };
                dataForm.notify(args);
            };
            DataFormEditorCustomizationsImpl = __decorate([
                Interfaces([com.telerik.android.common.Procedure]),
                __metadata("design:paramtypes", [RadDataForm])
            ], DataFormEditorCustomizationsImpl);
            return DataFormEditorCustomizationsImpl;
        }(java.lang.Object));
        DataFormEditorCustomizations = DataFormEditorCustomizationsImpl;
    }
    if (!DataFormEditorGroupCustomizations) {
        var DataFormEditorGroupCustomizationsImpl = /** @class */ (function (_super) {
            __extends(DataFormEditorGroupCustomizationsImpl, _super);
            function DataFormEditorGroupCustomizationsImpl(owner) {
                var _this = _super.call(this) || this;
                _this.owner = owner;
                return global.__native(_this);
            }
            DataFormEditorGroupCustomizationsImpl.prototype._applyGroupTitleStyle = function (nativeGroup, titleStyle) {
                if (titleStyle.fillColor) {
                    nativeGroup.getHeaderContainer().setBackgroundColor(titleStyle.fillColor.android);
                }
                if (titleStyle.strokeColor || titleStyle.strokeWidth) {
                    var drawable = new android.graphics.drawable.GradientDrawable();
                    var strokeWidthDips = titleStyle.strokeWidth ? titleStyle.strokeWidth : 2;
                    var strokeWidth = strokeWidthDips * utils_1.layout.getDisplayDensity();
                    var strokeColor = titleStyle.strokeColor ?
                        titleStyle.strokeColor.android :
                        android.graphics.Color.BLACK;
                    var fillColor = titleStyle.fillColor ?
                        titleStyle.fillColor.android :
                        android.graphics.Color.TRANSPARENT;
                    drawable.setStroke(strokeWidth, strokeColor);
                    drawable.setColor(fillColor);
                    nativeGroup.getHeaderContainer().setBackgroundDrawable(drawable);
                }
                if (titleStyle.labelTextColor) {
                    nativeGroup.getHeaderView().setTextColor(titleStyle.labelTextColor.android);
                }
                if (titleStyle.labelFontName || titleStyle.labelFontStyle) {
                    var editorTypeface = RadDataForm._makeTypeface(titleStyle.labelFontName, titleStyle.labelFontStyle);
                    nativeGroup.getHeaderView().setTypeface(editorTypeface);
                }
                if (titleStyle.labelTextSize) {
                    nativeGroup.getHeaderView().setTextSize(titleStyle.labelTextSize);
                }
            };
            DataFormEditorGroupCustomizationsImpl.prototype.apply = function (editorGroup) {
                var dataForm = this.owner;
                var group = dataForm.getGroupByName(editorGroup.name());
                if (group !== null && group.titleStyle !== null) {
                    this._applyGroupTitleStyle(editorGroup, group.titleStyle);
                }
                // throw event for additional customizations
                var groupName = editorGroup.name();
                var args = {
                    eventName: commonModule.RadDataForm.groupUpdateEvent,
                    object: dataForm,
                    editor: undefined,
                    entityProperty: undefined,
                    propertyName: undefined,
                    group: editorGroup,
                    groupName: groupName,
                    returnValue: true
                };
                dataForm.notify(args);
            };
            DataFormEditorGroupCustomizationsImpl = __decorate([
                Interfaces([com.telerik.android.common.Procedure]),
                __metadata("design:paramtypes", [RadDataForm])
            ], DataFormEditorGroupCustomizationsImpl);
            return DataFormEditorGroupCustomizationsImpl;
        }(java.lang.Object));
        DataFormEditorGroupCustomizations = DataFormEditorGroupCustomizationsImpl;
    }
    if (!DataFormEntityPropertyCommitListener) {
        var DataFormEntityPropertyCommitListenerImpl = /** @class */ (function (_super) {
            __extends(DataFormEntityPropertyCommitListenerImpl, _super);
            function DataFormEntityPropertyCommitListenerImpl(owner) {
                var _this = _super.call(this) || this;
                _this.owner = owner;
                return global.__native(_this);
            }
            DataFormEntityPropertyCommitListenerImpl.prototype.isUsingDateTimeEditor = function (property) {
                return property.getEditorType() === com.telerik.widget.dataform.visualization.editors.DataFormDateEditor.class ||
                    property.getEditorType() === com.telerik.widget.dataform.visualization.editors.DataFormTimeEditor.class;
            };
            DataFormEntityPropertyCommitListenerImpl.prototype.convertToTypedValue = function (oldValue, newValue, nativeProperty) {
                // The newValue is of type object, we try to deduct the desired type mostly based
                // on the type of the old value, so we can cast the newValue to the correct type
                if (typeof oldValue === "number") {
                    return Number(newValue);
                }
                if (typeof oldValue === "boolean") {
                    return String(newValue) === "true";
                }
                if (this.isUsingDateTimeEditor(nativeProperty)) {
                    // The Date/Time Editors can edit properties of types Date and String.
                    if (typeof oldValue === "string") {
                        return String(newValue);
                    }
                    else {
                        return new Date(newValue);
                    }
                }
                if (newValue instanceof java.util.ArrayList) {
                    var jsArray = [];
                    for (var i = 0; i < newValue.size(); i++) {
                        jsArray.push(newValue.get(i));
                    }
                    return jsArray;
                }
                return newValue;
            };
            DataFormEntityPropertyCommitListenerImpl.prototype.onBeforeCommit = function (property) {
                var dataform = this.owner;
                var entityProperty = dataform.getPropertyByName(property.name());
                var args = {
                    eventName: commonModule.RadDataForm.propertyCommitEvent,
                    object: dataform,
                    editor: undefined,
                    entityProperty: entityProperty,
                    propertyName: property.name(),
                    group: undefined,
                    groupName: property.getGroupName(),
                    returnValue: true
                };
                dataform.notify(args);
                return !args.returnValue;
            };
            DataFormEntityPropertyCommitListenerImpl.prototype.onAfterCommit = function (property) {
                var dataform = this.owner;
                var entityProperty = dataform.getPropertyByName(property.name());
                if (dataform.source.hasOwnProperty(property.name())) {
                    var oldValue = dataform.source[property.name()];
                    var newValue = dataform.android.getEditedObject().get(property.name());
                    var typedValue = this.convertToTypedValue(oldValue, newValue, property);
                    dataform.source[property.name()] = typedValue;
                    var args = {
                        eventName: commonModule.RadDataForm.propertyCommittedEvent,
                        object: dataform,
                        editor: undefined,
                        entityProperty: entityProperty,
                        propertyName: property.name(),
                        group: undefined,
                        groupName: property.getGroupName(),
                        returnValue: true
                    };
                    dataform.notify(args);
                }
            };
            DataFormEntityPropertyCommitListenerImpl = __decorate([
                Interfaces([com.telerik.widget.dataform.engine.EntityPropertyCommitListener]),
                __metadata("design:paramtypes", [RadDataForm])
            ], DataFormEntityPropertyCommitListenerImpl);
            return DataFormEntityPropertyCommitListenerImpl;
        }(java.lang.Object));
        DataFormEntityPropertyCommitListener = DataFormEntityPropertyCommitListenerImpl;
    }
    if (!DataFormValidationInfoProcedure) {
        var DataFormValidationInfoProcedureImpl = /** @class */ (function (_super) {
            __extends(DataFormValidationInfoProcedureImpl, _super);
            function DataFormValidationInfoProcedureImpl(owner) {
                var _this = _super.call(this) || this;
                _this.owner = owner;
                return global.__native(_this);
            }
            DataFormValidationInfoProcedureImpl.prototype.apply = function (info) {
                if (this.validateResolve) {
                    this.validateResolve(!info.hasErrors());
                }
            };
            DataFormValidationInfoProcedureImpl = __decorate([
                Interfaces([com.telerik.android.common.Procedure]),
                __metadata("design:paramtypes", [RadDataForm])
            ], DataFormValidationInfoProcedureImpl);
            return DataFormValidationInfoProcedureImpl;
        }(java.lang.Object));
        DataFormValidationInfoProcedure = DataFormValidationInfoProcedureImpl;
    }
}
var RadDataForm = /** @class */ (function (_super) {
    __extends(RadDataForm, _super);
    function RadDataForm() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this._loaded = false;
        _this._groupListeners = [];
        return _this;
    }
    Object.defineProperty(RadDataForm.prototype, "groupListeners", {
        get: function () {
            return this._groupListeners;
        },
        enumerable: true,
        configurable: true
    });
    RadDataForm.prototype.createNativeView = function () {
        initializeListeners();
        if (!this._android) {
            this._android = new com.telerik.widget.dataform.visualization.RadDataForm(this._context);
            this._layoutManager = new com.telerik.widget.dataform.visualization.DataFormGroupLayoutManager(this._context);
            this._android.setLayoutManager(this._layoutManager);
        }
        this._ngKey = Object.keys(this).find(function (key) { return key.startsWith('_ngcontent'); });
        var _entityPropertyChangedHandler = function (propertyChangeData) {
            var property = propertyChangeData.object;
            if (!property._shouldSkipEditorUpdate || propertyChangeData.propertyName !== "editor") {
                if (!this || !this._android || !this._loaded) {
                    return;
                }
                switch (propertyChangeData.propertyName) {
                    case 'index':
                    case 'hidden':
                    case 'editor':
                        this.reload();
                        break;
                }
            }
        };
        this.entityPropertyChangedHandler = _entityPropertyChangedHandler.bind(this);
        var _groupTitleStylePropertyChangedHandler = function (propertyChangeData) {
            if (!this || !this._android || !this._loaded) {
                return;
            }
            this._layoutManager.applyEditorGroupCustomizations();
        };
        this.groupTitleStylePropertyChangedHandler = _groupTitleStylePropertyChangedHandler.bind(this);
        var _groupLayoutPropertyChangedHandler = function (propertyChangeData) {
            if (!this || !this._android || !this._loaded) {
                return;
            }
            this.android.arrangeEditors();
        };
        this.groupLayoutPropertyChangedHandler = _groupLayoutPropertyChangedHandler.bind(this);
        var _groupPropertyChangedHandler = function (propertyChangeData) {
            if (!this || !this._android || !this._loaded) {
                return;
            }
            switch (propertyChangeData.propertyName) {
                case "collapsed":
                    var propertyGroup = propertyChangeData.object;
                    if (!propertyGroup.collapsible) {
                        // If the group is not collapsible, we don't want to collapse it.
                        if (propertyChangeData.value) {
                            console.log("WARNING: collapsible should be true before collapsing a group.");
                        }
                        return;
                    }
                    var nativeGroup = this.getNativeGroup(propertyGroup.name);
                    nativeGroup.setIsExpanded(!propertyChangeData.value);
                    break;
                case "hidden":
                case "titleHidden":
                case "collapsible":
                case "layout":
                    this._android.arrangeEditors();
                    if (propertyChangeData.propertyName === 'layout') {
                        this._attachGroupLayoutChangeListener(undefined, propertyChangeData.value);
                    }
                    break;
                case "titleStyle":
                    this._layoutManager.applyEditorGroupCustomizations();
                    this._attachGroupTitleStyleChangeListener(undefined, propertyChangeData.value);
                    break;
                case "name":
                    var group_2 = propertyChangeData.object;
                    if (group_2.properties) {
                        for (var i = 0; i < group_2.properties.length; i++) {
                            var property = group_2.properties[i];
                            if (property.android) {
                                property.android.setGroupName(group_2.name);
                            }
                        }
                        this.reload();
                    }
                    break;
            }
        };
        this.groupPropertyChangedHandler = _groupPropertyChangedHandler.bind(this);
        this._setupGroups();
        this._updateEditorStyles();
        this._updateGroupStyles();
        this._updateSource();
        this._updateIsReadOnly();
        this._updateCommitMode();
        this._updateValidationMode();
        this._updateMetadata();
        this._addValidationListener();
        this._addCommitListener();
        this._loaded = true;
        return this._android;
    };
    RadDataForm.prototype.disposeNativeView = function () {
        if (this._android._createGroupFunction) {
            this._android._createGroupFunction.owner = null;
        }
        if (this._android._editorCustomizations) {
            this._android._editorCustomizations.owner = null;
        }
        if (this._android._editorGroupCustomizations) {
            this._android._editorGroupCustomizations.owner = null;
        }
        if (this._android._validationListener) {
            this._android._validationListener.owner = null;
        }
        if (this._android._entityPropertyCommitListener) {
            this._android._entityPropertyCommitListener.owner = null;
        }
        if (this._android._validationInfoProcedure) {
            this._android._validationInfoProcedure.owner = null;
        }
        for (var i = this.groupListeners.length; i >= 0; i--) {
            if (this.groupListeners[i]) {
                this.groupListeners[i].owner = null;
                this.groupListeners[i].group = null;
            }
        }
        _super.prototype.disposeNativeView.call(this);
    };
    RadDataForm.prototype.notifyValidated = function (propertyName, result) {
        var property = this.getPropertyByName(propertyName);
        if (property.android) {
            var message = result ? property.successMessage : property.errorMessage;
            property.android.onValidationResult(property.valueCandidate, result, message);
        }
    };
    RadDataForm.prototype._setupGroups = function () {
        this._android._createGroupFunction = new DataFormCreateGroupClass(this);
        this._layoutManager.setCreateGroup(this._android._createGroupFunction);
        this._android.arrangeEditors();
    };
    RadDataForm.prototype._updateSource = function () {
        if (!this._android || !this.source) {
            return;
        }
        this._android.setReloadSuspended(true);
        var objJSON = JSON.stringify(this.source);
        var jsonObject = new org.json.JSONObject(objJSON);
        this._android.setEntity(jsonObject);
        this._syncPropertiesWithNativeProperties();
        this._updateNativeGroups();
        this._android.setReloadSuspended(false);
        this.reload();
    };
    RadDataForm.prototype._updateMetadata = function () {
        if (!this._android || !this.metadata) {
            return;
        }
        this._android.setReloadSuspended(true);
        var objJSON = JSON.stringify(this.metadata);
        var jsonObject = new org.json.JSONObject(objJSON);
        var metadata = new com.telerik.widget.dataform.engine.DataFormMetadata(jsonObject);
        this._android.setMetadata(metadata);
        this._android.setReloadSuspended(false);
        this.reload();
    };
    RadDataForm.prototype._syncPropertiesWithNativeProperties = function () {
        var nativeEntity = this._android.getEntity();
        var nativeProperties = nativeEntity.properties();
        // We probably need to use the for(let  ) loop here
        var length = nativeProperties.size();
        for (var i = 0; i < length; i++) {
            var nativeProperty = nativeProperties.get(i);
            var property = this.getPropertyByName(nativeProperty.name());
            if (property == null) {
                property = this._createPropertyFromNative(nativeProperty);
                if (!this.properties) {
                    this.properties = new Array();
                }
                this.properties.push(property);
            }
            else {
                property._linkPropertyWithNative(nativeProperty);
            }
            this._attachEntityPropertyPropertyChangeListener(property);
        }
    };
    RadDataForm.prototype.updateNativePropertyEditorDisplayMode = function (editor, value) {
        var nativeValue;
        switch (value) {
            case nativescript_ui_autocomplete_1.AutoCompleteDisplayMode.Plain:
                nativeValue = com.telerik.widget.autocomplete.DisplayMode.PLAIN;
                break;
            case nativescript_ui_autocomplete_1.AutoCompleteDisplayMode.Tokens:
                nativeValue = com.telerik.widget.autocomplete.DisplayMode.TOKENS;
                break;
        }
        if (value && editor) {
            editor.setDisplayMode(nativeValue);
        }
        else {
            console.log("autoCompleteDisplayMode cannot be set to: " + value);
        }
    };
    RadDataForm.prototype._updateNativeGroups = function () {
        if (!this.source) {
            return;
        }
        // go through all groups / entity properties
        if (this.groups) {
            for (var i = 0; i < this.groups.length; i++) {
                if (this.groups[i].properties) {
                    for (var j = 0; j < this.groups[i].properties.length; j++) {
                        var entityProperty = this.groups[i].properties[j];
                        if (entityProperty.android) {
                            entityProperty.android.setGroupName(this.groups[i].name);
                        }
                    }
                }
            }
        }
    };
    RadDataForm.prototype.getNativeGroup = function (name) {
        var groupCount = this._layoutManager.editorGroups().size();
        for (var i = 0; i < groupCount; i++) {
            var group_3 = this._layoutManager.editorGroups().get(i);
            if (group_3.name() === name) {
                return group_3;
            }
        }
        return null;
    };
    RadDataForm.prototype._updateEditorStyles = function () {
        this._android._editorCustomizations = new DataFormEditorCustomizations(this);
        this._android.setEditorCustomizations(this._android._editorCustomizations);
    };
    RadDataForm.prototype._updateGroupStyles = function () {
        this._android._editorGroupCustomizations = new DataFormEditorGroupCustomizations(this);
        this._layoutManager.setEditorGroupCustomizations(this._android._editorGroupCustomizations);
    };
    RadDataForm.prototype._createPropertyFromNative = function (nativeProperty) {
        var entityProperty = new EntityProperty();
        entityProperty.name = nativeProperty.name();
        entityProperty._linkPropertyWithNative(nativeProperty);
        return entityProperty;
    };
    RadDataForm.prototype._addValidationListener = function () {
        this._android._validationListener = new DataFormValidationListener(this);
        this._android.addValidationListener(this._android._validationListener);
    };
    RadDataForm.prototype._addCommitListener = function () {
        this._android._entityPropertyCommitListener = new DataFormEntityPropertyCommitListener(this);
        this._android.addCommitListener(this._android._entityPropertyCommitListener);
    };
    Object.defineProperty(RadDataForm.prototype, "editedObject", {
        get: function () {
            var editedObject = this._android.getEditedObject();
            if (editedObject) {
                return editedObject.toString();
            }
            return null;
        },
        enumerable: true,
        configurable: true
    });
    RadDataForm.prototype._onIsReadOnlyPropertyChanged = function (oldValue, newValue) {
        this._updateIsReadOnly();
    };
    RadDataForm.prototype._onCommitModePropertyChanged = function (oldValue, newValue) {
        this._updateCommitMode();
    };
    RadDataForm.prototype._onValidationModePropertyChanged = function (oldValue, newValue) {
        this._updateValidationMode();
    };
    RadDataForm.prototype._updateIsReadOnly = function () {
        if (!this._android) {
            return;
        }
        this._android.setEnabled(!this.isReadOnly);
    };
    RadDataForm.prototype._updateCommitMode = function () {
        if (!this._android) {
            return;
        }
        switch (this.commitMode) {
            case commonModule.DataFormCommitMode.Immediate:
                this._android.setCommitMode(com.telerik.widget.dataform.visualization.core.CommitMode.IMMEDIATE);
                break;
            case commonModule.DataFormCommitMode.Manual:
                this._android.setCommitMode(com.telerik.widget.dataform.visualization.core.CommitMode.MANUAL);
                break;
            case commonModule.DataFormCommitMode.OnLostFocus:
                this._android.setCommitMode(com.telerik.widget.dataform.visualization.core.CommitMode.ON_LOST_FOCUS);
                break;
        }
    };
    RadDataForm.prototype._updateValidationMode = function () {
        if (!this._android) {
            return;
        }
        switch (this.validationMode) {
            case commonModule.DataFormValidationMode.Immediate:
                this._android.setValidationMode(com.telerik.widget.dataform.visualization.core.ValidationMode.IMMEDIATE);
                break;
            case commonModule.DataFormValidationMode.Manual:
                this._android.setValidationMode(com.telerik.widget.dataform.visualization.core.ValidationMode.MANUAL);
                break;
            case commonModule.DataFormValidationMode.OnLostFocus:
                this._android.setValidationMode(com.telerik.widget.dataform.visualization.core.ValidationMode.ON_LOST_FOCUS);
                break;
        }
    };
    RadDataForm.prototype.reload = function () {
        if (this._android) {
            this._android.reload();
            if (!this._android.isReloadSuspended()) {
                this._syncEditorsWithNativeEditors();
            }
        }
    };
    RadDataForm.prototype.validateAll = function () {
        if (!this._android) {
            return null;
        }
        if (!this._android._validationInfoProcedure || !this._android._validationInfoProcedure.owner) {
            this._android._validationInfoProcedure = new DataFormValidationInfoProcedure(this);
        }
        var promiseResolve = function (resolve) {
            if (this && this._android._validationInfoProcedure) {
                this._android._validationInfoProcedure.validateResolve = resolve;
            }
        };
        var promise = new Promise(promiseResolve.bind(this));
        this._android.validateChanges(this._android._validationInfoProcedure);
        return promise;
    };
    RadDataForm.prototype.validateAndCommitAll = function () {
        if (!this._android) {
            return null;
        }
        var promiseResolve = function (resolve) {
            var _this = this;
            this.validateAll().then(function (result) {
                if (result) {
                    _this.android.commitForced();
                }
                resolve(result);
            });
        };
        return new Promise(promiseResolve.bind(this));
    };
    RadDataForm.prototype.commitAll = function () {
        if (!this._android) {
            return;
        }
        this._android.commitForced();
    };
    RadDataForm.prototype.hasValidationErrors = function () {
        if (this._android) {
            this._android.validateChanges();
            return this._android.hasValidationErrors();
        }
        return false;
    };
    RadDataForm.prototype._onSourcePropertyChanged = function (oldValue, newValue) {
        this._updateSource();
    };
    RadDataForm.prototype._onMetadataPropertyChanged = function (oldValue, newValue) {
        this._updateMetadata();
    };
    RadDataForm.prototype._updateNativeEditor = function (entityProperty) {
        var nativeEditor = this._android.getExistingEditorForProperty(entityProperty.name);
        if (nativeEditor == null) {
            return;
        }
        if (!entityProperty.editor) {
            entityProperty._createEditorFromNative(nativeEditor);
        }
        else {
            PropertyEditorHelper._linkEditorWithNative(entityProperty.editor, nativeEditor);
            if (entityProperty.autoCompleteDisplayMode) {
                this.updateNativePropertyEditorDisplayMode(nativeEditor, entityProperty.autoCompleteDisplayMode);
            }
        }
    };
    RadDataForm.prototype._syncEditorsWithNativeEditors = function () {
        if (!this.source) {
            return;
        }
        if (this.groups) {
            for (var i = 0; i < this.groups.length; i++) {
                if (this.groups[i].properties) {
                    for (var j = 0; j < this.groups[i].properties.length; j++) {
                        var entityProperty = this.groups[i].properties[j];
                        this._updateNativeEditor(entityProperty);
                    }
                }
            }
        }
        if (this.properties) {
            for (var i = 0; i < this.properties.length; i++) {
                var entityProperty = this.properties[i];
                this._updateNativeEditor(entityProperty);
                if (!entityProperty.editor) {
                    // If an EntityProperty is hidden,
                    // the native android never creates an editor for it.
                    continue;
                }
                if (!entityProperty.parent && !entityProperty.editor.parent) {
                    this._addView(entityProperty);
                    entityProperty._addView(entityProperty.editor);
                }
                var ngKey = this._ngKey;
                if (ngKey) {
                    // Add any newly created editors to the same scope as RadDataForm
                    // in order to apply component-specific css in angular
                    var ngValue = this[ngKey];
                    entityProperty[ngKey] = ngValue;
                    entityProperty.editor[ngKey] = ngValue;
                    entityProperty.editor.label[ngKey] = ngValue;
                    entityProperty.editor.editorCore[ngKey] = ngValue;
                }
            }
        }
        this._onCssStateChange();
    };
    RadDataForm._makeTypeface = function (fontName, style) {
        var fontStyle = android.graphics.Typeface.NORMAL;
        switch (style) {
            case commonModule.DataFormFontStyle.Bold:
                fontStyle = android.graphics.Typeface.BOLD;
                break;
            case commonModule.DataFormFontStyle.Italic:
                fontStyle = android.graphics.Typeface.ITALIC;
                break;
            case commonModule.DataFormFontStyle.BoldItalic:
                fontStyle = android.graphics.Typeface.BOLD_ITALIC;
                break;
        }
        return android.graphics.Typeface.create(fontName, fontStyle);
    };
    return RadDataForm;
}(commonModule.RadDataForm));
exports.RadDataForm = RadDataForm;
var EntityProperty = /** @class */ (function (_super) {
    __extends(EntityProperty, _super);
    function EntityProperty() {
        var _this = _super.call(this) || this;
        _this._shouldSkipEditorUpdate = false;
        return _this;
    }
    Object.defineProperty(EntityProperty.prototype, "android", {
        get: function () {
            return this._android;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(EntityProperty.prototype, "isValid", {
        get: function () {
            if (this.android) {
                return this.android.isValid();
            }
            return undefined;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(EntityProperty.prototype, "value", {
        get: function () {
            if (this.android) {
                return this.android.getValue();
            }
            return undefined;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(EntityProperty.prototype, "valueCandidate", {
        get: function () {
            if (this.android) {
                return this.android.getValueCandidate();
            }
            return undefined;
        },
        enumerable: true,
        configurable: true
    });
    EntityProperty.prototype._linkPropertyWithNative = function (value) {
        this._android = value;
        this._onNativeSet();
    };
    EntityProperty.prototype._createEditorFromNative = function (nativeEditor) {
        var type = PropertyEditor._getNativeEditorType(nativeEditor);
        this._shouldSkipEditorUpdate = true;
        var propertyEditor = new PropertyEditor();
        propertyEditor.type = type;
        PropertyEditorHelper._linkEditorWithNative(propertyEditor, nativeEditor);
        this.editor = propertyEditor;
        this._shouldSkipEditorUpdate = false;
    };
    EntityProperty.prototype.onEditorChanged = function (oldValue, newValue) {
        if (oldValue) {
            oldValue.off(observable_1.Observable.propertyChangeEvent);
        }
        if (newValue instanceof commonModule.PropertyEditor) {
            var propertyChangedHandler = function (propertyChangeData) {
                if (propertyChangeData.propertyName === "type") {
                    this._onEditorTypeChanged(propertyChangeData);
                }
            };
            newValue.on(observable_1.Observable.propertyChangeEvent, propertyChangedHandler, this);
            if (!this._shouldSkipEditorUpdate) {
                this.updateNativeEditor(newValue);
            }
        }
    };
    EntityProperty.prototype._onEditorTypeChanged = function (data) {
        var newEditor = new PropertyEditor();
        newEditor.type = this.editor.type;
        newEditor.propertyEditorStyle = this.editor.propertyEditorStyle;
        newEditor.params = this.editor.params;
        this.editor = newEditor;
    };
    EntityProperty.prototype._onNativeSet = function () {
        if (!this._android) {
            return;
        }
        this.updateNativeEditor(this.editor);
        this.updateNativeValidators(this.validators);
        this.updateNativeConverter(this.converter);
        this.updateNativeValuesProvider(this.valuesProviderArray);
        this.updateNativeDisplayName(this.displayName);
        this.updateNativeIndex(this.index);
        this.updateNativeColumnIndex(this.columnIndex);
        this.updateNativeHidden(this.hidden);
        this.updateNativeReadOnly(this.readOnly);
        this.updateNativeRequired(this.required);
        this.updateNativeHintText(this.hintText);
        this.updateNativeImageResource(this.imageResource);
    };
    EntityProperty.prototype.updateNativeEditor = function (value) {
        if (!this._android || !value) {
            return;
        }
        if (value instanceof CustomPropertyEditor) {
            this._android.setEditorType(com.telerik.widget.dataform.visualization.editors.DataFormCustomEditor.class);
            return;
        }
        this._android.setEditorType(value.editorClass);
        this._android.setEditorParams(value.editorParams);
    };
    EntityProperty.prototype.updateNativeValidators = function (value) {
        if (!this._android || !value) {
            return;
        }
        var validatorSet = new com.telerik.widget.dataform.engine.PropertyValidatorSet();
        for (var k = 0; k < value.length; k++) {
            var validatorBase = value[k];
            var aValidator = validatorBase.android;
            validatorSet.add(aValidator);
        }
        this._android.setValidator(validatorSet);
    };
    EntityProperty.prototype.updateNativeValuesProvider = function (value) {
        if (!this._android || !value) {
            return;
        }
        var nativeSource = new java.util.ArrayList();
        for (var i = 0; i < value.length; i++) {
            var nativeValue = value[i];
            if (typeof nativeValue === "string") {
                nativeValue = nativeValue.trim();
            }
            if (typeof nativeValue === "number") {
                nativeValue = new java.lang.Integer(nativeValue);
            }
            nativeSource.add(nativeValue);
        }
        var nativeList = nativeSource.toArray();
        this._android.updateValues(nativeList);
        if (this.editor && this.editor.android) {
            this.editor.android.notifyEntityPropertyChanged();
        }
    };
    EntityProperty.prototype.updateNativeImageResource = function (value) {
        if (!this._android || value === undefined) {
            return;
        }
        if (value != null) {
            var nativeValue = value;
            var appResources = utils_1.ad.getApplicationContext().getResources();
            var packageName = utils_1.ad.getApplication().getPackageName();
            if (appResources) {
                var identifier = appResources.getIdentifier(nativeValue, 'drawable', packageName);
                nativeValue = identifier;
            }
            this._android.setImageResource(nativeValue);
        }
        else {
            this._android.setImageResource(0);
        }
        if (this.editor && this.editor.android) {
            this.editor.android.notifyEntityPropertyChanged();
        }
    };
    EntityProperty.prototype.updateNativeDisplayName = function (value) {
        if (!this._android || value == null) {
            return;
        }
        this._android.setHeader(value);
        if (this.editor && this.editor.android) {
            this.editor.android.notifyEntityPropertyChanged();
        }
    };
    EntityProperty.prototype.updateNativeIndex = function (value) {
        if (!this._android || value == null) {
            return;
        }
        this._android.setPosition(value);
    };
    EntityProperty.prototype.updateNativeConverter = function (value) {
        if (!this._android || value == null) {
            return;
        }
        this._android.setConverter(new com.telerik.widget.dataform.engine.PropertyConverter({
            convertTo: function (source) {
                var result = value.convertTo(source);
                return result;
            },
            convertFrom: function (source) {
                var result = value.convertFrom(source);
                return result;
            }
        }));
        if (this.editor && this.editor.android) {
            this.editor.android.loadPropertyValue();
        }
    };
    EntityProperty.prototype.updateNativeColumnIndex = function (value) {
        if (!this._android || value == null) {
            return;
        }
        this._android.setColumnPosition(value);
    };
    EntityProperty.prototype.updateNativeHidden = function (value) {
        if (!this._android || value == null) {
            return;
        }
        this._android.setSkip(value);
    };
    EntityProperty.prototype.updateNativeReadOnly = function (value) {
        if (!this._android || value == null) {
            return;
        }
        if (this.editor) {
            PropertyEditorHelper.setReadOnly(this.editor, value);
            if (this.editor.android) {
                this.editor.android.setEnabled(!value);
            }
        }
    };
    EntityProperty.prototype.updateNativeRequired = function (value) {
        if (!this._android || value == null) {
            return;
        }
        this._android.setRequired(value);
    };
    EntityProperty.prototype.updateNativeHintText = function (value) {
        if (!this._android || !value) {
            return;
        }
        this._android.setHintText(value);
        if (this.editor && this.editor.android) {
            this.editor.android.notifyEntityPropertyChanged();
        }
    };
    return EntityProperty;
}(commonModule.EntityProperty));
exports.EntityProperty = EntityProperty;
var DataFormEditorLabel = /** @class */ (function (_super) {
    __extends(DataFormEditorLabel, _super);
    function DataFormEditorLabel(editor) {
        var _this = _super.call(this) || this;
        _this._editor = editor;
        _this._android = editor.android.getHeaderView();
        return _this;
    }
    Object.defineProperty(DataFormEditorLabel.prototype, "android", {
        get: function () {
            return this._android;
        },
        enumerable: true,
        configurable: true
    });
    DataFormEditorLabel.prototype.createNativeView = function () {
        return this._android;
    };
    DataFormEditorLabel.prototype.disposeNativeView = function () {
        this._editor = null;
        this._android = null;
    };
    DataFormEditorLabel.prototype[view_1.colorProperty.setNative] = function (value) {
        var nsColor = value instanceof color_1.Color ? value.android : value;
        this._android.setTextColor(nsColor);
    };
    DataFormEditorLabel.prototype[view_1.fontSizeProperty.setNative] = function (value) {
        if (typeof value === "number") {
            this._android.setTextSize(value);
        }
        else {
            this._android.setTextSize(android.util.TypedValue.COMPLEX_UNIT_PX, value.nativeSize);
        }
    };
    DataFormEditorLabel.prototype[view_1.fontInternalProperty.setNative] = function (value) {
        this._android.setTypeface(value instanceof font_1.Font ? value.getAndroidTypeface() : value);
    };
    DataFormEditorLabel.prototype[view_1.widthProperty.setNative] = function (value) {
        PropertyEditorHelper._updateLabelWidth(this._editor, value);
    };
    DataFormEditorLabel.prototype[commonModule.PropertyEditor.positionProperty.setNative] = function (value) {
        if (!value) {
            return;
        }
        if (value.toLowerCase() === "left") {
            PropertyEditorHelper._updateLabelPosition(this._editor, commonModule.DataFormLabelPosition.Left);
        }
        else if (value.toLowerCase() === "top") {
            PropertyEditorHelper._updateLabelPosition(this._editor, commonModule.DataFormLabelPosition.Top);
        }
    };
    return DataFormEditorLabel;
}(commonModule.DataFormEditorLabel));
exports.DataFormEditorLabel = DataFormEditorLabel;
var DataFormEditorCore = /** @class */ (function (_super) {
    __extends(DataFormEditorCore, _super);
    function DataFormEditorCore(editor) {
        var _this = _super.call(this) || this;
        _this._editor = editor;
        _this._android = _this._editor.android.getEditorView();
        return _this;
    }
    Object.defineProperty(DataFormEditorCore.prototype, "android", {
        get: function () {
            return this._android;
        },
        enumerable: true,
        configurable: true
    });
    DataFormEditorCore.prototype.createNativeView = function () {
        return this._android;
    };
    DataFormEditorCore.prototype.disposeNativeView = function () {
        this._editor = null;
        this._android = null;
    };
    DataFormEditorCore.prototype[view_1.colorProperty.setNative] = function (value) {
        var nsColor = value instanceof color_1.Color ? value.android : value;
        this._editor.android.setEditorColor(nsColor);
    };
    DataFormEditorCore.prototype[view_1.fontSizeProperty.setNative] = function (value) {
        var size = typeof value === "number" ? value : value.nativeSize;
        this._editor.android.setEditorTextSize(size);
    };
    DataFormEditorCore.prototype[view_1.fontInternalProperty.setNative] = function (value) {
        var editorTypeface = value instanceof font_1.Font ? value.getAndroidTypeface() : value;
        this._editor.android.setEditorTypeface(editorTypeface);
    };
    return DataFormEditorCore;
}(commonModule.DataFormEditorCore));
exports.DataFormEditorCore = DataFormEditorCore;
//////////////////////////////////////////////////////////////////////////////////////////////
// Editors
var PropertyEditor = /** @class */ (function (_super) {
    __extends(PropertyEditor, _super);
    function PropertyEditor() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this._readOnly = false;
        return _this;
    }
    Object.defineProperty(PropertyEditor.prototype, "android", {
        get: function () {
            return this._android;
        },
        set: function (value) {
            this._android = value;
            this.setNativeView(value.rootLayout());
            if (this._label) {
                this._removeView(this._label);
            }
            if (this._editorCore) {
                this._removeView(this._editorCore);
            }
            if (this._android) {
                this._label = new DataFormEditorLabel(this);
                this._editorCore = new DataFormEditorCore(this);
                this._addView(this._label);
                this._addView(this._editorCore);
            }
            else {
                this._label = null;
                this._editorCore = null;
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PropertyEditor.prototype, "label", {
        get: function () {
            return this._label;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PropertyEditor.prototype, "editorCore", {
        get: function () {
            return this._editorCore;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PropertyEditor.prototype, "editorClass", {
        get: function () {
            return this._editorClass;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PropertyEditor.prototype, "editorParams", {
        get: function () {
            return this._editorParams;
        },
        enumerable: true,
        configurable: true
    });
    PropertyEditor.prototype[view_1.paddingLeftProperty.setNative] = function (value) {
        this.android.getMainLayout().getLayoutParams().leftMargin = value;
    };
    PropertyEditor.prototype[view_1.paddingTopProperty.setNative] = function (value) {
        this.android.getMainLayout().getLayoutParams().topMargin = value;
    };
    PropertyEditor.prototype[view_1.paddingRightProperty.setNative] = function (value) {
        this.android.getMainLayout().getLayoutParams().rightMargin = value;
    };
    PropertyEditor.prototype[view_1.paddingBottomProperty.setNative] = function (value) {
        this.android.getMainLayout().getLayoutParams().bottomMargin = value;
    };
    PropertyEditor.prototype.createNativeView = function () {
        return this._android ? this._android.rootLayout() : _super.prototype.createNativeView.call(this);
    };
    PropertyEditor.prototype.onPropertyEditorStyleChanged = function (oldValue, newValue) {
        PropertyEditorHelper.applyStyle(this);
    };
    PropertyEditor.prototype.onStylePropertyChanged = function (propertyName) {
        PropertyEditorHelper.applyStyleForProperty(this, propertyName);
    };
    PropertyEditor.prototype.onParamsChanged = function (oldValue, newValue) {
        PropertyEditorHelper.applyParams(this);
    };
    PropertyEditor.prototype.onParamsPropertyChanged = function (propertyName) {
        PropertyEditorHelper.applyParams(this);
    };
    PropertyEditor.prototype.onTypeChanged = function (oldValue, newValue) {
        this._updateEditorClass();
    };
    PropertyEditor.prototype._updateEditorClass = function () {
        if (this.type == null) {
            return;
        }
        switch (this.type) {
            case commonModule.DataFormEditorType.Text:
                this._editorClass = com.telerik.widget.dataform.visualization.editors.DataFormTextEditor.class;
                break;
            case commonModule.DataFormEditorType.MultilineText:
                this._editorClass = com.telerik.widget.dataform.visualization.editors.DataFormMultilineTextEditor.class;
                break;
            case commonModule.DataFormEditorType.Email:
                this._editorClass = com.telerik.widget.dataform.visualization.editors.DataFormEmailEditor.class;
                break;
            case commonModule.DataFormEditorType.Password:
                this._editorClass = com.telerik.widget.dataform.visualization.editors.DataFormPasswordEditor.class;
                break;
            case commonModule.DataFormEditorType.Phone:
                this._editorClass = com.telerik.widget.dataform.visualization.editors.DataFormPhoneEditor.class;
                break;
            case commonModule.DataFormEditorType.Decimal:
                this._editorClass = com.telerik.widget.dataform.visualization.editors.DataFormDecimalEditor.class;
                break;
            case commonModule.DataFormEditorType.Number:
                this._editorClass = com.telerik.widget.dataform.visualization.editors.DataFormIntegerEditor.class;
                break;
            case commonModule.DataFormEditorType.Switch:
                this._editorClass = com.telerik.widget.dataform.visualization.editors.DataFormSwitchEditor.class;
                break;
            case commonModule.DataFormEditorType.Stepper:
                this._editorClass = com.telerik.widget.dataform.visualization.editors.DataFormNumberPickerEditor.class;
                break;
            case commonModule.DataFormEditorType.Slider:
                this._editorClass = com.telerik.widget.dataform.visualization.editors.DataFormSeekBarEditor.class;
                break;
            case commonModule.DataFormEditorType.SegmentedEditor:
                this._editorClass = com.telerik.widget.dataform.visualization.editors.DataFormSegmentedEditor.class;
                break;
            case commonModule.DataFormEditorType.DatePicker:
                this._editorClass = com.telerik.widget.dataform.visualization.editors.DataFormDateEditor.class;
                break;
            case commonModule.DataFormEditorType.TimePicker:
                this._editorClass = com.telerik.widget.dataform.visualization.editors.DataFormTimeEditor.class;
                break;
            case commonModule.DataFormEditorType.Picker:
                this._editorClass = com.telerik.widget.dataform.visualization.editors.DataFormSpinnerEditor.class;
                break;
            case commonModule.DataFormEditorType.List:
                this._editorClass = com.telerik.widget.dataform.visualization.editors.DataFormListViewEditor.class;
                break;
            case commonModule.DataFormEditorType.AutoCompleteInline:
                this._editorClass = com.telerik.widget.dataform.visualization.editors.DataFormRadAutoCompleteEditor.class;
                break;
            case commonModule.DataFormEditorType.Label:
                this._editorClass = com.telerik.widget.dataform.visualization.editors.DataFormLabelEditor.class;
                break;
            default:
                console.log("WARNING: Unsupported editor type: " + this.type);
        }
    };
    PropertyEditor._getNativeEditorType = function (nativeEditor) {
        var nativeEditorClass = nativeEditor.getClass();
        if (nativeEditorClass === com.telerik.widget.dataform.visualization.editors.DataFormMultilineTextEditor.class) {
            return commonModule.DataFormEditorType.MultilineText;
        }
        if (nativeEditorClass === com.telerik.widget.dataform.visualization.editors.DataFormEmailEditor.class) {
            return commonModule.DataFormEditorType.Email;
        }
        if (nativeEditorClass === com.telerik.widget.dataform.visualization.editors.DataFormPasswordEditor.class) {
            return commonModule.DataFormEditorType.Password;
        }
        if (nativeEditorClass === com.telerik.widget.dataform.visualization.editors.DataFormPhoneEditor.class) {
            return commonModule.DataFormEditorType.Phone;
        }
        if (nativeEditorClass === com.telerik.widget.dataform.visualization.editors.DataFormDecimalEditor.class) {
            return commonModule.DataFormEditorType.Decimal;
        }
        if (nativeEditorClass === com.telerik.widget.dataform.visualization.editors.DataFormIntegerEditor.class) {
            return commonModule.DataFormEditorType.Number;
        }
        if (nativeEditorClass === com.telerik.widget.dataform.visualization.editors.DataFormSwitchEditor.class) {
            return commonModule.DataFormEditorType.Switch;
        }
        if (nativeEditorClass === com.telerik.widget.dataform.visualization.editors.DataFormNumberPickerEditor.class) {
            return commonModule.DataFormEditorType.Stepper;
        }
        if (nativeEditorClass === com.telerik.widget.dataform.visualization.editors.DataFormSeekBarEditor.class) {
            return commonModule.DataFormEditorType.Slider;
        }
        if (nativeEditorClass === com.telerik.widget.dataform.visualization.editors.DataFormSegmentedEditor.class) {
            return commonModule.DataFormEditorType.SegmentedEditor;
        }
        if (nativeEditorClass === com.telerik.widget.dataform.visualization.editors.DataFormDateEditor.class) {
            return commonModule.DataFormEditorType.DatePicker;
        }
        if (nativeEditorClass === com.telerik.widget.dataform.visualization.editors.DataFormTimeEditor.class) {
            return commonModule.DataFormEditorType.TimePicker;
        }
        if (nativeEditorClass === com.telerik.widget.dataform.visualization.editors.DataFormSpinnerEditor.class) {
            return commonModule.DataFormEditorType.Picker;
        }
        if (nativeEditorClass === com.telerik.widget.dataform.visualization.editors.DataFormListViewEditor.class) {
            return commonModule.DataFormEditorType.List;
        }
        if (nativeEditorClass === com.telerik.widget.dataform.visualization.editors.DataFormRadAutoCompleteEditor.class) {
            return commonModule.DataFormEditorType.AutoCompleteInline;
        }
        if (nativeEditorClass === com.telerik.widget.dataform.visualization.editors.DataFormLabelEditor.class) {
            return commonModule.DataFormEditorType.Label;
        }
        return commonModule.DataFormEditorType.Text;
    };
    return PropertyEditor;
}(commonModule.PropertyEditor));
exports.PropertyEditor = PropertyEditor;
var CustomPropertyEditor = /** @class */ (function (_super) {
    __extends(CustomPropertyEditor, _super);
    function CustomPropertyEditor() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this._readOnly = false;
        return _this;
    }
    Object.defineProperty(CustomPropertyEditor.prototype, "android", {
        get: function () {
            return this._android;
        },
        set: function (value) {
            this._android = value;
            this.setNativeView(value.rootLayout());
            if (this._label) {
                this._removeView(this._label);
            }
            if (this._editorCore) {
                this._removeView(this._editorCore);
            }
            if (this._android) {
                this._label = new DataFormEditorLabel(this);
                this._editorCore = new DataFormEditorCore(this);
                this._addView(this._label);
                this._addView(this._editorCore);
            }
            else {
                this._label = null;
                this._editorCore = null;
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CustomPropertyEditor.prototype, "label", {
        get: function () {
            return this._label;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CustomPropertyEditor.prototype, "editorCore", {
        get: function () {
            return this._editorCore;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CustomPropertyEditor.prototype, "editorClass", {
        get: function () {
            return this._editorClass;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CustomPropertyEditor.prototype, "editorParams", {
        get: function () {
            return this._editorParams;
        },
        enumerable: true,
        configurable: true
    });
    CustomPropertyEditor.prototype.onPropertyEditorStyleChanged = function (oldValue, newValue) {
        PropertyEditorHelper.applyStyle(this);
    };
    CustomPropertyEditor.prototype.onStylePropertyChanged = function (propertyName) {
        PropertyEditorHelper.applyStyleForProperty(this, propertyName);
    };
    CustomPropertyEditor.prototype.onParamsChanged = function (oldValue, newValue) {
        PropertyEditorHelper.applyParams(this);
    };
    CustomPropertyEditor.prototype.onParamsPropertyChanged = function (propertyName) {
        PropertyEditorHelper.applyParams(this);
    };
    CustomPropertyEditor.prototype.onTypeChanged = function (oldValue, newValue) {
        console.log("WARNING: You can't change CustomPropertyEditor's type");
    };
    CustomPropertyEditor.prototype[view_1.paddingLeftProperty.setNative] = function (value) {
        this.android.getMainLayout().getLayoutParams().leftMargin = value;
    };
    CustomPropertyEditor.prototype[view_1.paddingTopProperty.setNative] = function (value) {
        this.android.getMainLayout().getLayoutParams().topMargin = value;
    };
    CustomPropertyEditor.prototype[view_1.paddingRightProperty.setNative] = function (value) {
        this.android.getMainLayout().getLayoutParams().rightMargin = value;
    };
    CustomPropertyEditor.prototype[view_1.paddingBottomProperty.setNative] = function (value) {
        this.android.getMainLayout().getLayoutParams().bottomMargin = value;
    };
    CustomPropertyEditor.prototype.createView = function (context) {
        var args = {
            eventName: commonModule.CustomPropertyEditor.editorNeedsViewEvent,
            object: this,
            view: undefined,
            context: context,
            value: undefined
        };
        this.notify(args);
        return args.view;
    };
    CustomPropertyEditor.prototype.applyValueToEditor = function (value, view) {
        var args = {
            eventName: commonModule.CustomPropertyEditor.editorHasToApplyValueEvent,
            object: this,
            view: view,
            context: view.getContext(),
            value: value
        };
        this.notify(args);
    };
    CustomPropertyEditor.prototype.value = function (view) {
        var args = {
            eventName: commonModule.CustomPropertyEditor.editorNeedsValueEvent,
            object: this,
            view: view,
            context: view.getContext(),
            value: undefined
        };
        this.notify(args);
        return args.value;
    };
    CustomPropertyEditor.prototype.notifyValueChanged = function () {
        if (this.android) {
            this.android.notifyEditorValueChanged();
        }
    };
    return CustomPropertyEditor;
}(commonModule.CustomPropertyEditor));
exports.CustomPropertyEditor = CustomPropertyEditor;
var PropertyEditorHelper = /** @class */ (function () {
    function PropertyEditorHelper() {
    }
    PropertyEditorHelper._linkEditorWithNative = function (editor, value) {
        if (editor instanceof CustomPropertyEditor) {
            editor.android = value;
        }
        else {
            editor.android = value;
        }
        if (!editor.propertyEditorStyle) {
            editor.propertyEditorStyle = new commonModule.PropertyEditorStyle();
        }
        if (!editor.params) {
            editor.params = new commonModule.PropertyEditorParams();
        }
        PropertyEditorHelper._onNativeSet(editor);
    };
    PropertyEditorHelper._onNativeSet = function (editor) {
        if (!editor.android) {
            return;
        }
        if (editor instanceof CustomPropertyEditor) {
            editor.android.setProvider(new com.telerik.widget.dataform.visualization.editors.DataFormCustomEditor.DataFormCustomEditorProvider({
                createView: function (context) {
                    return editor.createView(context);
                },
                applyValueToEditor: function (value, view) {
                    editor.applyValueToEditor(value, view);
                },
                getValue: function (view) {
                    return editor.value(view);
                }
            }));
        }
        else {
            editor.type = PropertyEditor._getNativeEditorType(editor.android);
        }
        PropertyEditorHelper.applyStyle(editor);
        PropertyEditorHelper.applyParams(editor);
        var editorEnabled = !PropertyEditorHelper.isReadOnly(editor);
        editor.android.setEnabled(editorEnabled);
        editor.android.notifyEntityPropertyChanged();
    };
    PropertyEditorHelper._updateLabelTextColor = function (editor, labelTextColor) {
        if (!editor.android || labelTextColor === undefined) {
            return;
        }
        editor.android.getHeaderView().setTextColor(labelTextColor.android);
    };
    PropertyEditorHelper._updateLabelFont = function (editor, labelFontName, labelFontStyle) {
        if (!editor._android || (labelFontName === undefined && labelFontStyle === undefined)) {
            return;
        }
        var editorTypeface = RadDataForm._makeTypeface(labelFontName, labelFontStyle);
        editor.android.getHeaderView().setTypeface(editorTypeface);
    };
    PropertyEditorHelper._updateLabelTextSize = function (editor, labelTextSize) {
        if (!editor.android || labelTextSize === undefined) {
            return;
        }
        editor.android.getHeaderView().setTextSize(labelTextSize);
    };
    PropertyEditorHelper._updateLabelHorizontalOffset = function (editor, labelHorizontalOffset) {
        if (!editor.android || labelHorizontalOffset === undefined) {
            return;
        }
        editor.android.getHeaderView().setTranslationX(labelHorizontalOffset);
    };
    PropertyEditorHelper._updateLabelVerticalOffset = function (editor, labelVerticalOffset) {
        if (!editor.android || labelVerticalOffset === undefined) {
            return;
        }
        editor.android.getHeaderView().setTranslationY(labelVerticalOffset);
    };
    PropertyEditorHelper._updateEditorHorizontalOffset = function (editor, editorHorizontalOffset) {
        if (!editor.android || editorHorizontalOffset === undefined) {
            return;
        }
        editor.android.getEditorView().setTranslationX(editorHorizontalOffset);
    };
    PropertyEditorHelper._updateEditorVerticalOffset = function (editor, editorVerticalOffset) {
        if (!editor.android || editorVerticalOffset === undefined) {
            return;
        }
        editor.android.getEditorView().setTranslationY(editorVerticalOffset);
    };
    PropertyEditorHelper._updateEditorFillColor = function (editor, editorFillColor) {
        if (!editor.android || editorFillColor === undefined) {
            return;
        }
        editor.android.rootLayout().setBackgroundColor(editorFillColor.android);
    };
    PropertyEditorHelper._updateEditorStroke = function (editor, editorStrokeColor, editorStrokeWidth, editorFillColor) {
        if (!editor.android || (editorStrokeColor === undefined && editorStrokeWidth === undefined)) {
            return;
        }
        var drawable = new android.graphics.drawable.GradientDrawable();
        var strokeWidthDips = editorStrokeWidth ? editorStrokeWidth : 2;
        var strokeWidth = strokeWidthDips * utils_1.layout.getDisplayDensity();
        var strokeColor = editorStrokeColor ?
            editorStrokeColor.android :
            android.graphics.Color.BLACK;
        var fillColor = editorFillColor ?
            editorFillColor.android :
            android.graphics.Color.TRANSPARENT;
        drawable.setStroke(strokeWidth, strokeColor);
        drawable.setColor(fillColor);
        editor.android.rootLayout().setBackgroundDrawable(drawable);
    };
    PropertyEditorHelper._updateLabelHidden = function (editor, labelHidden) {
        if (!editor.android || labelHidden === undefined) {
            return;
        }
        var visibility = labelHidden ? android.view.View.GONE : android.view.View.VISIBLE;
        editor.android.getHeaderView().setVisibility(visibility);
    };
    PropertyEditorHelper._updateLabelPosition = function (editor, labelPosition) {
        if (!editor.android || labelPosition === undefined) {
            return;
        }
        if (labelPosition === commonModule.DataFormLabelPosition.Left) {
            editor.android.setLabelPosition(com.telerik.widget.dataform.engine.LabelPosition.LEFT);
        }
        else if (labelPosition === commonModule.DataFormLabelPosition.Top) {
            editor.android.setLabelPosition(com.telerik.widget.dataform.engine.LabelPosition.TOP);
        }
    };
    PropertyEditorHelper._updateLabelWidth = function (editor, labelWidth) {
        if (!editor.android || labelWidth === undefined) {
            return;
        }
        var nativeLabelWidth = labelWidth * utils_1.layout.getDisplayDensity();
        editor.android.setLabelWidth(nativeLabelWidth);
    };
    PropertyEditorHelper.applyParams = function (editor) {
        var editorParams = editor.params;
        if (!editorParams) {
            return;
        }
        editor._editorParams = new java.util.HashMap();
        if (editorParams.minimum) {
            var min = new java.lang.Float(editorParams.minimum);
            editor._editorParams.put("minimum", min);
        }
        if (editorParams.maximum) {
            var max = new java.lang.Float(editorParams.maximum);
            editor._editorParams.put("maximum", max);
        }
        if (editorParams.step) {
            var step = new java.lang.Float(editorParams.step);
            editor._editorParams.put("step", step);
        }
        if (editor.android) {
            editor.android.applyParams(editor.editorParams);
        }
    };
    PropertyEditorHelper.applyStyle = function (editor) {
        if (!editor.propertyEditorStyle) {
            return;
        }
        PropertyEditorHelper._updateLabelTextColor(editor, editor.propertyEditorStyle.labelTextColor);
        PropertyEditorHelper._updateLabelFont(editor, editor.propertyEditorStyle.labelFontName, editor.propertyEditorStyle.labelFontStyle);
        PropertyEditorHelper._updateLabelTextSize(editor, editor.propertyEditorStyle.labelTextSize);
        PropertyEditorHelper._updateLabelHorizontalOffset(editor, editor.propertyEditorStyle.labelHorizontalOffset);
        PropertyEditorHelper._updateLabelVerticalOffset(editor, editor.propertyEditorStyle.labelVerticalOffset);
        PropertyEditorHelper._updateEditorHorizontalOffset(editor, editor.propertyEditorStyle.editorHorizontalOffset);
        PropertyEditorHelper._updateEditorVerticalOffset(editor, editor.propertyEditorStyle.editorVerticalOffset);
        PropertyEditorHelper._updateEditorFillColor(editor, editor.propertyEditorStyle.fillColor);
        PropertyEditorHelper._updateEditorStroke(editor, editor.propertyEditorStyle.strokeColor, editor.propertyEditorStyle.strokeWidth, editor.propertyEditorStyle.fillColor);
        PropertyEditorHelper._updateLabelHidden(editor, editor.propertyEditorStyle.labelHidden);
        PropertyEditorHelper._updateLabelPosition(editor, editor.propertyEditorStyle.labelPosition);
        PropertyEditorHelper._updateLabelWidth(editor, editor.propertyEditorStyle.labelWidth);
    };
    PropertyEditorHelper.applyStyleForProperty = function (editor, propertyName) {
        if (!editor.propertyEditorStyle) {
            return;
        }
        switch (propertyName) {
            case "labelTextColor":
                PropertyEditorHelper._updateLabelTextColor(editor, editor.propertyEditorStyle.labelTextColor);
                break;
            case "labelFontName":
            case "labelFontStyle":
                PropertyEditorHelper._updateLabelFont(editor, editor.propertyEditorStyle.labelFontName, editor.propertyEditorStyle.labelFontStyle);
                break;
            case "labelTextSize":
                PropertyEditorHelper._updateLabelTextSize(editor, editor.propertyEditorStyle.labelTextSize);
                break;
            case "labelHorizontalOffset":
                PropertyEditorHelper._updateLabelHorizontalOffset(editor, editor.propertyEditorStyle.labelHorizontalOffset);
                break;
            case "labelVerticalOffset":
                PropertyEditorHelper._updateLabelVerticalOffset(editor, editor.propertyEditorStyle.labelVerticalOffset);
                break;
            case "editorHorizontalOffset":
                PropertyEditorHelper._updateEditorHorizontalOffset(editor, editor.propertyEditorStyle.editorHorizontalOffset);
                break;
            case "editorVerticalOffset":
                PropertyEditorHelper._updateEditorVerticalOffset(editor, editor.propertyEditorStyle.editorVerticalOffset);
                break;
            case "fillColor":
                PropertyEditorHelper._updateEditorFillColor(editor, editor.propertyEditorStyle.fillColor);
                PropertyEditorHelper._updateEditorStroke(editor, editor.propertyEditorStyle.strokeColor, editor.propertyEditorStyle.strokeWidth, editor.propertyEditorStyle.fillColor);
                break;
            case "strokeColor":
            case "strokeWidth":
                PropertyEditorHelper._updateEditorStroke(editor, editor.propertyEditorStyle.strokeColor, editor.propertyEditorStyle.strokeWidth, editor.propertyEditorStyle.fillColor);
                break;
            case "labelHidden":
                PropertyEditorHelper._updateLabelHidden(editor, editor.propertyEditorStyle.labelHidden);
                break;
            case "labelPosition":
                PropertyEditorHelper._updateLabelPosition(editor, editor.propertyEditorStyle.labelPosition);
                break;
            case "labelWidth":
                PropertyEditorHelper._updateLabelWidth(editor, editor.propertyEditorStyle.labelWidth);
                break;
        }
    };
    PropertyEditorHelper.isReadOnly = function (editor) {
        if (editor instanceof CustomPropertyEditor) {
            return editor._readOnly;
        }
        return editor._readOnly;
    };
    PropertyEditorHelper.setReadOnly = function (editor, value) {
        if (editor instanceof CustomPropertyEditor) {
            editor._readOnly = value;
        }
        editor._readOnly = value;
    };
    return PropertyEditorHelper;
}());
exports.PropertyEditorHelper = PropertyEditorHelper;
var ManualValidationProvider;
function initializeValidationProviders() {
    if (!ManualValidationProvider) {
        var ManualValidationProviderImpl = /** @class */ (function (_super) {
            __extends(ManualValidationProviderImpl, _super);
            function ManualValidationProviderImpl(owner) {
                var _this = _super.call(this) || this;
                _this.owner = owner;
                return global.__native(_this);
            }
            ManualValidationProviderImpl.prototype.validate = function (value, propertyName) {
                return this.owner.validate(value, propertyName);
            };
            ManualValidationProviderImpl = __decorate([
                Interfaces([com.telerik.widget.dataform.engine.PropertyValidatorManual.ValidationProvider]),
                __metadata("design:paramtypes", [PropertyValidator])
            ], ManualValidationProviderImpl);
            return ManualValidationProviderImpl;
        }(java.lang.Object));
        ManualValidationProvider = ManualValidationProviderImpl;
    }
}
var PropertyValidator = /** @class */ (function (_super) {
    __extends(PropertyValidator, _super);
    function PropertyValidator() {
        var _this = _super.call(this) || this;
        initializeValidationProviders();
        _this._android = new com.telerik.widget.dataform.engine.PropertyValidatorManual();
        _this._android._manualValidationProvider = new ManualValidationProvider(_this);
        _this._android.setValidationProvider(_this._android._manualValidationProvider);
        if (_this.errorMessage === undefined) {
            _this.errorMessage = "This is not valid.";
        }
        return _this;
    }
    Object.defineProperty(PropertyValidator.prototype, "android", {
        get: function () {
            return this._android;
        },
        enumerable: true,
        configurable: true
    });
    PropertyValidator.prototype.disposeNativeView = function () {
        if (this._android._manualValidationProvider) {
            this._android._manualValidationProvider.owner = null;
        }
        _super.prototype.disposeNativeView.call(this);
    };
    PropertyValidator.prototype.validate = function (value, propertyName) {
        return true;
    };
    return PropertyValidator;
}(commonModule.PropertyValidator));
exports.PropertyValidator = PropertyValidator;
var MinimumLengthValidator = /** @class */ (function (_super) {
    __extends(MinimumLengthValidator, _super);
    function MinimumLengthValidator() {
        var _this = _super.call(this) || this;
        _this._android = new com.telerik.widget.dataform.engine.MinimumLengthValidator();
        return _this;
    }
    Object.defineProperty(MinimumLengthValidator.prototype, "android", {
        get: function () {
            return this._android;
        },
        enumerable: true,
        configurable: true
    });
    MinimumLengthValidator.prototype.onLengthChanged = function (oldValue, newValue) {
        if (!isNaN(+newValue)) {
            this.android.setMinimumLength(newValue);
        }
    };
    return MinimumLengthValidator;
}(commonModule.MinimumLengthValidator));
exports.MinimumLengthValidator = MinimumLengthValidator;
var MaximumLengthValidator = /** @class */ (function (_super) {
    __extends(MaximumLengthValidator, _super);
    function MaximumLengthValidator() {
        var _this = _super.call(this) || this;
        _this._android = new com.telerik.widget.dataform.engine.MaximumLengthValidator();
        return _this;
    }
    Object.defineProperty(MaximumLengthValidator.prototype, "android", {
        get: function () {
            return this._android;
        },
        enumerable: true,
        configurable: true
    });
    MaximumLengthValidator.prototype.onLengthChanged = function (oldValue, newValue) {
        if (!isNaN(+newValue)) {
            this.android.setMaximumLength(newValue);
        }
    };
    return MaximumLengthValidator;
}(commonModule.MaximumLengthValidator));
exports.MaximumLengthValidator = MaximumLengthValidator;
var EmailValidator = /** @class */ (function (_super) {
    __extends(EmailValidator, _super);
    function EmailValidator() {
        var _this = _super.call(this) || this;
        _this._android = new com.telerik.widget.dataform.engine.MailValidator();
        return _this;
    }
    Object.defineProperty(EmailValidator.prototype, "android", {
        get: function () {
            return this._android;
        },
        enumerable: true,
        configurable: true
    });
    return EmailValidator;
}(commonModule.EmailValidator));
exports.EmailValidator = EmailValidator;
var NonEmptyValidator = /** @class */ (function (_super) {
    __extends(NonEmptyValidator, _super);
    function NonEmptyValidator() {
        var _this = _super.call(this) || this;
        _this._android = new com.telerik.widget.dataform.engine.NonEmptyValidator();
        return _this;
    }
    Object.defineProperty(NonEmptyValidator.prototype, "android", {
        get: function () {
            return this._android;
        },
        enumerable: true,
        configurable: true
    });
    return NonEmptyValidator;
}(commonModule.NonEmptyValidator));
exports.NonEmptyValidator = NonEmptyValidator;
var RangeValidator = /** @class */ (function (_super) {
    __extends(RangeValidator, _super);
    function RangeValidator() {
        var _this = _super.call(this) || this;
        _this._android = new com.telerik.widget.dataform.engine.RangeValidator();
        return _this;
    }
    Object.defineProperty(RangeValidator.prototype, "android", {
        get: function () {
            return this._android;
        },
        enumerable: true,
        configurable: true
    });
    RangeValidator.prototype.onMinimumChanged = function (oldValue, newValue) {
        if (!isNaN(+newValue)) {
            this._android.setMin(newValue);
        }
    };
    RangeValidator.prototype.onMaximumChanged = function (oldValue, newValue) {
        if (!isNaN(+newValue)) {
            this._android.setMax(newValue);
        }
    };
    return RangeValidator;
}(commonModule.RangeValidator));
exports.RangeValidator = RangeValidator;
var PhoneValidator = /** @class */ (function (_super) {
    __extends(PhoneValidator, _super);
    function PhoneValidator() {
        var _this = _super.call(this) || this;
        _this._android = new com.telerik.widget.dataform.engine.PhoneValidator();
        return _this;
    }
    Object.defineProperty(PhoneValidator.prototype, "android", {
        get: function () {
            return this._android;
        },
        enumerable: true,
        configurable: true
    });
    return PhoneValidator;
}(commonModule.PhoneValidator));
exports.PhoneValidator = PhoneValidator;
var RegExValidator = /** @class */ (function (_super) {
    __extends(RegExValidator, _super);
    function RegExValidator() {
        var _this = _super.call(this) || this;
        _this._android = new com.telerik.widget.dataform.engine.RegExValidator();
        return _this;
    }
    Object.defineProperty(RegExValidator.prototype, "android", {
        get: function () {
            return this._android;
        },
        enumerable: true,
        configurable: true
    });
    RegExValidator.prototype.onRegExChanged = function (oldValue, newValue) {
        this._android.setRegEx(newValue);
    };
    return RegExValidator;
}(commonModule.RegExValidator));
exports.RegExValidator = RegExValidator;
var IsTrueValidator = /** @class */ (function (_super) {
    __extends(IsTrueValidator, _super);
    function IsTrueValidator() {
        var _this = _super.call(this) || this;
        _this._android = new com.telerik.widget.dataform.engine.IsTrueValidator();
        return _this;
    }
    Object.defineProperty(IsTrueValidator.prototype, "android", {
        get: function () {
            return this._android;
        },
        enumerable: true,
        configurable: true
    });
    return IsTrueValidator;
}(commonModule.IsTrueValidator));
exports.IsTrueValidator = IsTrueValidator;
var StringToDateConverter = /** @class */ (function (_super) {
    __extends(StringToDateConverter, _super);
    function StringToDateConverter() {
        var _this = _super.call(this) || this;
        _this._android = new com.telerik.widget.dataform.engine.StringToDateConverter();
        return _this;
    }
    Object.defineProperty(StringToDateConverter.prototype, "android", {
        get: function () {
            return this._android;
        },
        enumerable: true,
        configurable: true
    });
    return StringToDateConverter;
}(commonModule.StringToDateConverter));
exports.StringToDateConverter = StringToDateConverter;
var StringToTimeConverter = /** @class */ (function (_super) {
    __extends(StringToTimeConverter, _super);
    function StringToTimeConverter() {
        var _this = _super.call(this) || this;
        _this._android = new com.telerik.widget.dataform.engine.StringToTimeConverter();
        return _this;
    }
    Object.defineProperty(StringToTimeConverter.prototype, "android", {
        get: function () {
            return this._android;
        },
        enumerable: true,
        configurable: true
    });
    return StringToTimeConverter;
}(commonModule.StringToTimeConverter));
exports.StringToTimeConverter = StringToTimeConverter;
