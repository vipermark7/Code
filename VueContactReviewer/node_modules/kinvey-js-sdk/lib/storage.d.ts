import { Query } from './query';
import { Aggregation } from './aggregation';
export interface Entity {
    _id?: string;
    _acl?: {
        creator?: string;
        gr?: boolean;
        gw?: boolean;
        r?: string[];
        w?: string[];
        groups?: {
            r?: string[];
            w?: string[];
        };
    };
    _kmd?: {
        local?: boolean;
        authtoken?: string;
        ect?: string;
        lmt?: string;
        emailVerification?: {
            status: string;
        };
    };
}
export interface StorageAdapter {
    find(dbName: string, collectionName: string): Promise<Entity[]>;
    count(dbName: string, collectionName: string): Promise<number>;
    findById(dbName: string, collectionName: string, id: string): Promise<Entity>;
    save(dbName: string, collectionName: string, docs: Entity[]): Promise<Entity[]>;
    removeById(dbName: string, collectionName: string, id: string): Promise<number>;
    clear(dbName: string, collectionName: string): Promise<any>;
    clearDatabase(dbName: string, exclude?: string[]): Promise<any>;
}
export declare class Storage<T extends Entity> {
    dbName: string;
    collectionName: string;
    constructor(dbName: string, collectionName: string);
    readonly storageAdapter: StorageAdapter;
    find(query?: Query): Promise<T[]>;
    group(aggregation: Aggregation): Promise<any>;
    count(query?: Query): Promise<number>;
    findById(id: string): Promise<Entity>;
    save(doc: T): Promise<T>;
    save(docs: T[]): Promise<T[]>;
    remove(query?: Query): Promise<number>;
    removeById(id: string): Promise<number>;
    clear(): Promise<any>;
    static clear(dbName: string): Promise<any>;
}
