import { Entity } from './storage';
/**
 * This class provides a way to access the ACL (Access Control List)
 * information for an entity and to modify the access control permissions.
 */
export declare class Acl {
    private entity;
    constructor(entity: Entity);
    /**
     * Get the creator.
     *
     * @returns {string} Creator
     */
    readonly creator: string;
    /**
     * Get the readers.
     *
     * @returns {string[]} Readers
     */
    readonly readers: string[];
    /**
     * Get the writers.
     *
     * @returns {string[]} Writers
     */
    readonly writers: string[];
    /**
     * Get the reader groups.
     *
     * @returns {string[]} Reader groups
     */
    readonly readerGroups: string[];
    /**
     * Get the writer groups.
     *
     * @returns {string[]} Writer groups
     */
    readonly writerGroups: string[];
    /**
     * Set the globally readable permission.
     *
     * @param {boolean} gr Globally readable
     */
    globallyReadable: boolean;
    /**
     * Set the globally writable permission.
     *
     * @param {boolean} gw Globally writable
     */
    globallyWritable: boolean;
    /**
     * Add a reader.
     *
     * @param {string} reader Reader
     * @returns {Acl} Acl
     */
    addReader(reader: string): this;
    /**
     * Add a reader group.
     *
     * @param {string} group Reader group
     * @returns {Acl} Acl
     */
    addReaderGroup(group: string): this;
    /**
     * Add a writer.
     *
     * @param {string} writer Writer
     * @returns {Acl} Acl
     */
    addWriter(writer: string): this;
    /**
     * Add a writer group.
     *
     * @param {string} group Writer group
     * @returns {Acl} Acl
     */
    addWriterGroup(group: string): this;
    /**
     * Check if globally readable is allowed.
     *
     * @returns {boolean} True if globally readable is allowed otherwise false
     */
    isGloballyReadable(): boolean;
    /**
     * Check if globally writable is allowed.
     *
     * @returns {boolean} True if globally writable is allowed otherwise false
     */
    isGloballyWritable(): boolean;
    /**
     * Remove a reader.
     *
     * @param {string} reader Reader
     * @returns {Acl} Acl
     */
    removeReader(reader: string): this;
    /**
     * Remove a reader group.
     *
     * @param {string} group Reader group
     * @returns {Acl} Acl
     */
    removeReaderGroup(group: string): this;
    /**
     * Remove a writer.
     *
     * @param {string} writer Writer
     * @returns {Acl} Acl
     */
    removeWriter(writer: string): this;
    /**
     * Remove a writer group.
     *
     * @param {string} group Writer group
     * @returns {Acl} Acl
     */
    removeWriterGroup(group: string): this;
    /**
     * The acl as a plain object.
     *
     * @returns {Object} Acl as a plain object.
     */
    toPlainObject(): {
        creator?: string;
        gr?: boolean;
        gw?: boolean;
        r?: string[];
        w?: string[];
        groups?: {
            r?: string[];
            w?: string[];
        };
    };
}
