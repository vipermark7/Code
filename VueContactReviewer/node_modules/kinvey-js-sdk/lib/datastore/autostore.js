Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var query_1 = require("../query");
var network_1 = require("../errors/network");
var kinvey_1 = require("../errors/kinvey");
var cache_1 = require("./cache");
var networkstore_1 = require("./networkstore");
var cachestore_1 = require("./cachestore");
var AutoStore = /** @class */ (function (_super) {
    tslib_1.__extends(AutoStore, _super);
    function AutoStore(collectionName, options) {
        if (options === void 0) { options = { tag: undefined, useDeltaSet: false, useAutoPagination: false }; }
        return _super.call(this, collectionName, options) || this;
    }
    AutoStore.prototype.find = function (query, options) {
        if (options === void 0) { options = {}; }
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var cache, error_1;
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        cache = new cache_1.DataStoreCache(this.collectionName, this.tag);
                        if (query && !(query instanceof query_1.Query)) {
                            throw new kinvey_1.KinveyError('query is not an instance of the Query class.');
                        }
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, 3, , 4]);
                        return [4 /*yield*/, this.pull(query, options)];
                    case 2:
                        _a.sent();
                        return [2 /*return*/, cache.find(query)];
                    case 3:
                        error_1 = _a.sent();
                        if (error_1 instanceof network_1.NetworkError) {
                            return [2 /*return*/, cache.find(query)];
                        }
                        throw error_1;
                    case 4: return [2 /*return*/];
                }
            });
        });
    };
    AutoStore.prototype.count = function (query, options) {
        if (options === void 0) { options = {}; }
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var network, count, error_2, cache;
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (query && !(query instanceof query_1.Query)) {
                            throw new kinvey_1.KinveyError('query is not an instance of the Query class.');
                        }
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, 3, , 4]);
                        network = new networkstore_1.NetworkStore(this.collectionName);
                        return [4 /*yield*/, network.count(query, options).toPromise()];
                    case 2:
                        count = _a.sent();
                        return [2 /*return*/, count];
                    case 3:
                        error_2 = _a.sent();
                        if (error_2 instanceof network_1.NetworkError) {
                            cache = new cache_1.DataStoreCache(this.collectionName, this.tag);
                            return [2 /*return*/, cache.count(query)];
                        }
                        throw error_2;
                    case 4: return [2 /*return*/];
                }
            });
        });
    };
    AutoStore.prototype.group = function (aggregation, options) {
        if (options === void 0) { options = {}; }
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var network, result, error_3, cache;
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (!(aggregation instanceof query_1.Query)) {
                            throw new kinvey_1.KinveyError('aggregation is not an instance of the Aggregation class.');
                        }
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, 3, , 4]);
                        network = new networkstore_1.NetworkStore(this.collectionName);
                        return [4 /*yield*/, network.group(aggregation, options).toPromise()];
                    case 2:
                        result = _a.sent();
                        return [2 /*return*/, result];
                    case 3:
                        error_3 = _a.sent();
                        if (error_3 instanceof network_1.NetworkError) {
                            cache = new cache_1.DataStoreCache(this.collectionName, this.tag);
                            return [2 /*return*/, cache.group(aggregation)];
                        }
                        throw error_3;
                    case 4: return [2 /*return*/];
                }
            });
        });
    };
    AutoStore.prototype.findById = function (id, options) {
        if (options === void 0) { options = {}; }
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var cache, doc, error_4;
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        cache = new cache_1.DataStoreCache(this.collectionName, this.tag);
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, 3, , 4]);
                        return [4 /*yield*/, this.pullById(id, options)];
                    case 2:
                        doc = _a.sent();
                        return [2 /*return*/, doc];
                    case 3:
                        error_4 = _a.sent();
                        if (error_4 instanceof network_1.NetworkError) {
                            return [2 /*return*/, cache.findById(id)];
                        }
                        throw error_4;
                    case 4: return [2 /*return*/];
                }
            });
        });
    };
    return AutoStore;
}(cachestore_1.CacheStore));
exports.AutoStore = AutoStore;
//# sourceMappingURL=autostore.js.map