Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var isArray_1 = tslib_1.__importDefault(require("lodash/isArray"));
var times_1 = tslib_1.__importDefault(require("lodash/times"));
var rxjs_1 = require("rxjs");
var query_1 = require("../query");
var kinvey_1 = require("../errors/kinvey");
var missingConfiguration_1 = require("../errors/missingConfiguration");
var parameterValueOutOfRange_1 = require("../errors/parameterValueOutOfRange");
var notFound_1 = require("../errors/notFound");
var http_1 = require("../http");
var cache_1 = require("./cache");
var sync_1 = require("./sync");
var networkstore_1 = require("./networkstore");
var PAGE_LIMIT = 10000;
var InvalidDeltaSetQueryError = /** @class */ (function (_super) {
    tslib_1.__extends(InvalidDeltaSetQueryError, _super);
    function InvalidDeltaSetQueryError(message) {
        if (message === void 0) { message = 'Invalid delta set query.'; }
        var _this = _super.call(this, message) || this;
        _this.name = 'InvalidDeltaSetQueryError';
        return _this;
    }
    return InvalidDeltaSetQueryError;
}(kinvey_1.KinveyError));
exports.InvalidDeltaSetQueryError = InvalidDeltaSetQueryError;
var CacheStore = /** @class */ (function () {
    function CacheStore(collectionName, options) {
        if (options === void 0) { options = { tag: undefined, useDeltaSet: false, useAutoPagination: false, autoSync: true }; }
        this.collectionName = collectionName;
        this.tag = options.tag;
        this.useDeltaSet = options.useDeltaSet === true;
        this.useAutoPagination = options.useAutoPagination === true || options.autoPagination;
        this.autoSync = options.autoSync === true;
    }
    Object.defineProperty(CacheStore.prototype, "pathname", {
        get: function () {
            return "/" + this.collectionName;
        },
        enumerable: true,
        configurable: true
    });
    CacheStore.prototype.find = function (query, options) {
        var _this = this;
        if (options === void 0) { options = {}; }
        var autoSync = options.autoSync === true || this.autoSync;
        var cache = new cache_1.DataStoreCache(this.collectionName, this.tag);
        var stream = rxjs_1.Observable.create(function (observer) { return tslib_1.__awaiter(_this, void 0, void 0, function () {
            var cachedDocs, docs, error_1;
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        _a.trys.push([0, 5, , 6]);
                        return [4 /*yield*/, cache.find(query)];
                    case 1:
                        cachedDocs = _a.sent();
                        observer.next(cachedDocs);
                        if (!autoSync) return [3 /*break*/, 4];
                        return [4 /*yield*/, this.pull(query, options)];
                    case 2:
                        _a.sent();
                        return [4 /*yield*/, cache.find(query)];
                    case 3:
                        docs = _a.sent();
                        observer.next(docs);
                        _a.label = 4;
                    case 4:
                        observer.complete();
                        return [3 /*break*/, 6];
                    case 5:
                        error_1 = _a.sent();
                        observer.error(error_1);
                        return [3 /*break*/, 6];
                    case 6: return [2 /*return*/];
                }
            });
        }); });
        return stream;
    };
    CacheStore.prototype.count = function (query, options) {
        var _this = this;
        if (options === void 0) { options = {}; }
        var autoSync = options.autoSync === true || this.autoSync;
        var cache = new cache_1.DataStoreCache(this.collectionName, this.tag);
        var stream = rxjs_1.Observable.create(function (observer) { return tslib_1.__awaiter(_this, void 0, void 0, function () {
            var cacheCount, network, count, error_2;
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        _a.trys.push([0, 4, , 5]);
                        return [4 /*yield*/, cache.count(query)];
                    case 1:
                        cacheCount = _a.sent();
                        observer.next(cacheCount);
                        if (!autoSync) return [3 /*break*/, 3];
                        network = new networkstore_1.NetworkStore(this.collectionName);
                        return [4 /*yield*/, network.count(query, options).toPromise()];
                    case 2:
                        count = _a.sent();
                        observer.next(count);
                        _a.label = 3;
                    case 3:
                        observer.complete();
                        return [3 /*break*/, 5];
                    case 4:
                        error_2 = _a.sent();
                        observer.error(error_2);
                        return [3 /*break*/, 5];
                    case 5: return [2 /*return*/];
                }
            });
        }); });
        return stream;
    };
    CacheStore.prototype.group = function (aggregation, options) {
        var _this = this;
        if (options === void 0) { options = {}; }
        var autoSync = options.autoSync === true || this.autoSync;
        var cache = new cache_1.DataStoreCache(this.collectionName, this.tag);
        var stream = rxjs_1.Observable.create(function (observer) { return tslib_1.__awaiter(_this, void 0, void 0, function () {
            var cacheResult, network, networkResult, error_3;
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        _a.trys.push([0, 4, , 5]);
                        return [4 /*yield*/, cache.group(aggregation)];
                    case 1:
                        cacheResult = _a.sent();
                        observer.next(cacheResult);
                        if (!autoSync) return [3 /*break*/, 3];
                        network = new networkstore_1.NetworkStore(this.collectionName);
                        return [4 /*yield*/, network.group(aggregation, options).toPromise()];
                    case 2:
                        networkResult = _a.sent();
                        observer.next(networkResult);
                        _a.label = 3;
                    case 3:
                        observer.complete();
                        return [3 /*break*/, 5];
                    case 4:
                        error_3 = _a.sent();
                        observer.error(error_3);
                        return [3 /*break*/, 5];
                    case 5: return [2 /*return*/];
                }
            });
        }); });
        return stream;
    };
    CacheStore.prototype.findById = function (id, options) {
        var _this = this;
        if (options === void 0) { options = {}; }
        var stream = rxjs_1.Observable.create(function (observer) { return tslib_1.__awaiter(_this, void 0, void 0, function () {
            var autoSync, cache, cachedDoc, doc, error_4;
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        _a.trys.push([0, 5, , 6]);
                        if (!!id) return [3 /*break*/, 1];
                        observer.next(undefined);
                        return [3 /*break*/, 4];
                    case 1:
                        autoSync = options.autoSync === true || this.autoSync;
                        cache = new cache_1.DataStoreCache(this.collectionName, this.tag);
                        return [4 /*yield*/, cache.findById(id)];
                    case 2:
                        cachedDoc = _a.sent();
                        if (!cachedDoc) {
                            if (!autoSync) {
                                throw new notFound_1.NotFoundError();
                            }
                            observer.next(undefined);
                        }
                        else {
                            observer.next(cachedDoc);
                        }
                        if (!autoSync) return [3 /*break*/, 4];
                        return [4 /*yield*/, this.pullById(id, options)];
                    case 3:
                        doc = _a.sent();
                        observer.next(doc);
                        _a.label = 4;
                    case 4:
                        observer.complete();
                        return [3 /*break*/, 6];
                    case 5:
                        error_4 = _a.sent();
                        observer.error(error_4);
                        return [3 /*break*/, 6];
                    case 6: return [2 /*return*/];
                }
            });
        }); });
        return stream;
    };
    CacheStore.prototype.create = function (doc, options) {
        if (options === void 0) { options = {}; }
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var autoSync, cache, sync, cachedDoc, syncDoc, query, pushResults, pushResult;
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (isArray_1.default(doc)) {
                            throw new kinvey_1.KinveyError('Unable to create an array of entities. Please create entities one by one.');
                        }
                        autoSync = options.autoSync === true || this.autoSync;
                        cache = new cache_1.DataStoreCache(this.collectionName, this.tag);
                        sync = new sync_1.Sync(this.collectionName, this.tag);
                        return [4 /*yield*/, cache.save(doc)];
                    case 1:
                        cachedDoc = _a.sent();
                        return [4 /*yield*/, sync.addCreateSyncEvent(cachedDoc)];
                    case 2:
                        syncDoc = _a.sent();
                        if (!autoSync) return [3 /*break*/, 4];
                        query = new query_1.Query().equalTo('_id', syncDoc._id);
                        return [4 /*yield*/, sync.push(query, options)];
                    case 3:
                        pushResults = _a.sent();
                        pushResult = pushResults.shift();
                        if (pushResult.error) {
                            throw pushResult.error;
                        }
                        return [2 /*return*/, pushResult.entity];
                    case 4: return [2 /*return*/, cachedDoc];
                }
            });
        });
    };
    CacheStore.prototype.update = function (doc, options) {
        if (options === void 0) { options = {}; }
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var autoSync, cache, sync, cachedDoc, syncDoc, query, pushResults, pushResult;
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (isArray_1.default(doc)) {
                            throw new kinvey_1.KinveyError('Unable to update an array of entities. Please update entities one by one.');
                        }
                        if (!doc._id) {
                            throw new kinvey_1.KinveyError('The entity provided does not contain an _id. An _id is required to update the entity.');
                        }
                        autoSync = options.autoSync === true || this.autoSync;
                        cache = new cache_1.DataStoreCache(this.collectionName, this.tag);
                        sync = new sync_1.Sync(this.collectionName, this.tag);
                        return [4 /*yield*/, cache.save(doc)];
                    case 1:
                        cachedDoc = _a.sent();
                        return [4 /*yield*/, sync.addUpdateSyncEvent(cachedDoc)];
                    case 2:
                        syncDoc = _a.sent();
                        if (!autoSync) return [3 /*break*/, 4];
                        query = new query_1.Query().equalTo('_id', syncDoc._id);
                        return [4 /*yield*/, sync.push(query, options)];
                    case 3:
                        pushResults = _a.sent();
                        pushResult = pushResults.shift();
                        if (pushResult.error) {
                            throw pushResult.error;
                        }
                        return [2 /*return*/, pushResult.entity];
                    case 4: return [2 /*return*/, cachedDoc];
                }
            });
        });
    };
    CacheStore.prototype.save = function (doc, options) {
        if (doc._id) {
            return this.update(doc, options);
        }
        return this.create(doc, options);
    };
    CacheStore.prototype.remove = function (query, options) {
        if (options === void 0) { options = {}; }
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var autoSync, cache, sync, count, docs, network, result;
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        autoSync = options.autoSync === true || this.autoSync;
                        cache = new cache_1.DataStoreCache(this.collectionName, this.tag);
                        sync = new sync_1.Sync(this.collectionName, this.tag);
                        count = 0;
                        return [4 /*yield*/, cache.find(query)];
                    case 1:
                        docs = _a.sent();
                        if (!(docs.length > 0)) return [3 /*break*/, 4];
                        return [4 /*yield*/, cache.remove(query)];
                    case 2:
                        // Remove docs from the cache
                        count = _a.sent();
                        // Add delete events for the removed docs to sync
                        return [4 /*yield*/, sync.addDeleteSyncEvent(docs)];
                    case 3:
                        // Add delete events for the removed docs to sync
                        _a.sent();
                        _a.label = 4;
                    case 4:
                        if (!autoSync) return [3 /*break*/, 7];
                        network = new networkstore_1.NetworkStore(this.collectionName);
                        return [4 /*yield*/, network.remove(query, options)];
                    case 5:
                        result = _a.sent();
                        count = result.count;
                        // Clear the sync items that match the query
                        return [4 /*yield*/, this.clearSync(query)];
                    case 6:
                        // Clear the sync items that match the query
                        _a.sent();
                        _a.label = 7;
                    case 7: return [2 /*return*/, { count: count }];
                }
            });
        });
    };
    CacheStore.prototype.removeById = function (id, options) {
        if (options === void 0) { options = {}; }
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var autoSync, cache, sync, count, doc, syncDoc, query, pushResults, pushResult;
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        autoSync = options.autoSync === true || this.autoSync;
                        cache = new cache_1.DataStoreCache(this.collectionName, this.tag);
                        sync = new sync_1.Sync(this.collectionName, this.tag);
                        count = 0;
                        if (!id) return [3 /*break*/, 8];
                        return [4 /*yield*/, cache.findById(id)];
                    case 1:
                        doc = _a.sent();
                        if (!doc) return [3 /*break*/, 7];
                        return [4 /*yield*/, cache.removeById(id)];
                    case 2:
                        // Remove the doc from the cache
                        count = _a.sent();
                        return [4 /*yield*/, sync.addDeleteSyncEvent(doc)];
                    case 3:
                        syncDoc = _a.sent();
                        if (!(autoSync && syncDoc)) return [3 /*break*/, 5];
                        query = new query_1.Query().equalTo('_id', syncDoc._id);
                        return [4 /*yield*/, sync.push(query)];
                    case 4:
                        pushResults = _a.sent();
                        if (pushResults.length > 0) {
                            pushResult = pushResults.shift();
                            if (pushResult.error) {
                                count -= 1;
                            }
                        }
                        return [3 /*break*/, 6];
                    case 5:
                        count = 1;
                        _a.label = 6;
                    case 6: return [3 /*break*/, 8];
                    case 7: throw new notFound_1.NotFoundError();
                    case 8: return [2 /*return*/, { count: count }];
                }
            });
        });
    };
    CacheStore.prototype.clear = function (query) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var cache, count, queryCache;
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        cache = new cache_1.DataStoreCache(this.collectionName, this.tag);
                        return [4 /*yield*/, cache.remove(query)];
                    case 1:
                        count = _a.sent();
                        // Remove the sync events
                        return [4 /*yield*/, this.clearSync(query)];
                    case 2:
                        // Remove the sync events
                        _a.sent();
                        // Clear the query cache
                        if (!query) {
                            queryCache = new cache_1.QueryCache(this.tag);
                            queryCache.remove();
                        }
                        // Return the count
                        return [2 /*return*/, { count: count }];
                }
            });
        });
    };
    CacheStore.prototype.push = function (query, options) {
        var sync = new sync_1.Sync(this.collectionName, this.tag);
        return sync.push(undefined, options);
    };
    CacheStore.prototype.pull = function (query, options) {
        if (query === void 0) { query = new query_1.Query(); }
        if (options === void 0) { options = {}; }
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var pullQuery, network, cache, queryCache, useDeltaSet, useAutoPagination, queryCacheDocs, queryCacheDoc, count, queryObject, url, request, response_1, _a, changed, deleted, removeQuery, headers_1, error_5, response_2, count_1, pageSize_1, pageCount, pageQueries, pagePromises, pageCounts, totalPageCount, headers_2, response, docs, headers;
            return tslib_1.__generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        pullQuery = new query_1.Query({ filter: query.filter });
                        network = new networkstore_1.NetworkStore(this.collectionName);
                        cache = new cache_1.DataStoreCache(this.collectionName, this.tag);
                        queryCache = new cache_1.QueryCache(this.tag);
                        useDeltaSet = options.useDeltaSet === true || this.useDeltaSet;
                        useAutoPagination = options.useAutoPagination === true || options.autoPagination || this.useAutoPagination;
                        return [4 /*yield*/, queryCache.find(new query_1.Query().equalTo('query', pullQuery.key).equalTo('collectionName', this.collectionName))];
                    case 1:
                        queryCacheDocs = _b.sent();
                        queryCacheDoc = queryCacheDocs.shift() || { collectionName: this.collectionName, query: pullQuery.key, lastRequest: null };
                        return [4 /*yield*/, this.pendingSyncCount()];
                    case 2:
                        count = _b.sent();
                        if (count > 0) {
                            // TODO in newer version
                            // if (autoSync) {
                            //   await sync.push();
                            //   return this.pull(query, Object.assign({}, { useDeltaSet, useAutoPagination, autoSync }, options));
                            // }
                            if (count === 1) {
                                throw new kinvey_1.KinveyError("Unable to pull entities from the backend. There is " + count + " entity"
                                    + ' that needs to be pushed to the backend.');
                            }
                            throw new kinvey_1.KinveyError("Unable to pull entities from the backend. There are " + count + " entities"
                                + ' that need to be pushed to the backend.');
                        }
                        if (!(useDeltaSet && queryCacheDoc.lastRequest)) return [3 /*break*/, 11];
                        _b.label = 3;
                    case 3:
                        _b.trys.push([3, 10, , 11]);
                        queryObject = Object.assign({ since: queryCacheDoc.lastRequest }, pullQuery.toQueryObject());
                        url = http_1.formatKinveyBaasUrl(http_1.KinveyBaasNamespace.AppData, "/" + this.collectionName + "/_deltaset", queryObject);
                        request = new http_1.KinveyHttpRequest({ method: http_1.HttpRequestMethod.GET, auth: http_1.KinveyHttpAuth.Session, url: url });
                        return [4 /*yield*/, request.execute()];
                    case 4:
                        response_1 = _b.sent();
                        _a = response_1.data, changed = _a.changed, deleted = _a.deleted;
                        if (!(Array.isArray(deleted) && deleted.length > 0)) return [3 /*break*/, 6];
                        removeQuery = new query_1.Query().contains('_id', deleted.map(function (doc) { return doc._id; }));
                        return [4 /*yield*/, cache.remove(removeQuery)];
                    case 5:
                        _b.sent();
                        _b.label = 6;
                    case 6:
                        if (!(Array.isArray(changed) && changed.length > 0)) return [3 /*break*/, 8];
                        return [4 /*yield*/, cache.save(changed)];
                    case 7:
                        _b.sent();
                        _b.label = 8;
                    case 8:
                        headers_1 = new http_1.KinveyHttpHeaders(response_1.headers.toPlainObject());
                        queryCacheDoc.lastRequest = headers_1.requestStart;
                        return [4 /*yield*/, queryCache.save(queryCacheDoc)];
                    case 9:
                        _b.sent();
                        // Return the number of changed docs
                        return [2 /*return*/, changed.length];
                    case 10:
                        error_5 = _b.sent();
                        if (!(error_5 instanceof missingConfiguration_1.MissingConfigurationError) && !(error_5 instanceof parameterValueOutOfRange_1.ParameterValueOutOfRangeError)) {
                            throw error_5;
                        }
                        return [3 /*break*/, 11];
                    case 11:
                        if (!useAutoPagination) return [3 /*break*/, 16];
                        // Clear the cache
                        return [4 /*yield*/, cache.clear()];
                    case 12:
                        // Clear the cache
                        _b.sent();
                        return [4 /*yield*/, network.count(pullQuery, Object.assign({}, options, { rawResponse: true })).toPromise()];
                    case 13:
                        response_2 = _b.sent();
                        count_1 = 'count' in response_2.data ? response_2.data.count : Number.MAX_SAFE_INTEGER;
                        pageSize_1 = options.autoPaginationPageSize || (options.autoPagination && options.autoPagination.pageSize) || PAGE_LIMIT;
                        pageCount = Math.ceil(count_1 / pageSize_1);
                        pageQueries = times_1.default(pageCount, function (i) {
                            var pageQuery = new query_1.Query(pullQuery);
                            pageQuery.skip = i * pageSize_1;
                            pageQuery.limit = Math.min(count_1 - (i * pageSize_1), pageSize_1);
                            return pageQuery;
                        });
                        pagePromises = pageQueries.map(function (pageQuery) {
                            return network.find(pageQuery, options).toPromise()
                                .then(function (docs) { return cache.save(docs); })
                                .then(function (docs) { return docs.length; });
                        });
                        return [4 /*yield*/, Promise.all(pagePromises)];
                    case 14:
                        pageCounts = _b.sent();
                        totalPageCount = pageCounts.reduce(function (totalCount, pageCount) { return totalCount + pageCount; }, 0);
                        headers_2 = new http_1.KinveyHttpHeaders(response_2.headers.toPlainObject());
                        queryCacheDoc.lastRequest = headers_2.requestStart;
                        return [4 /*yield*/, queryCache.save(queryCacheDoc)];
                    case 15:
                        _b.sent();
                        // Return the total page count
                        return [2 /*return*/, totalPageCount];
                    case 16: return [4 /*yield*/, network.find(pullQuery, Object.assign({}, options, { rawResponse: true })).toPromise()];
                    case 17:
                        response = _b.sent();
                        docs = response.data;
                        if (!pullQuery) return [3 /*break*/, 19];
                        return [4 /*yield*/, cache.remove(pullQuery)];
                    case 18:
                        _b.sent();
                        return [3 /*break*/, 21];
                    case 19: return [4 /*yield*/, cache.clear()];
                    case 20:
                        _b.sent();
                        _b.label = 21;
                    case 21: 
                    // Update the cache
                    return [4 /*yield*/, cache.save(docs)];
                    case 22:
                        // Update the cache
                        _b.sent();
                        headers = new http_1.KinveyHttpHeaders(response.headers.toPlainObject());
                        queryCacheDoc.lastRequest = headers.requestStart;
                        return [4 /*yield*/, queryCache.save(queryCacheDoc)];
                    case 23:
                        _b.sent();
                        // Return the number of docs
                        return [2 /*return*/, docs.length];
                }
            });
        });
    };
    CacheStore.prototype.pullById = function (id, options) {
        if (options === void 0) { options = {}; }
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var network, cache, count, doc, error_6;
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        network = new networkstore_1.NetworkStore(this.collectionName);
                        cache = new cache_1.DataStoreCache(this.collectionName, this.tag);
                        return [4 /*yield*/, this.pendingSyncCount()];
                    case 1:
                        count = _a.sent();
                        if (count > 0) {
                            // TODO in newer version
                            // if (autoSync) {
                            //   await sync.push();
                            //   return this.pull(query, Object.assign({}, { useDeltaSet, useAutoPagination, autoSync }, options));
                            // }
                            if (count === 1) {
                                throw new kinvey_1.KinveyError("Unable to pull entities from the backend. There is " + count + " entity"
                                    + ' that needs to be pushed to the backend.');
                            }
                            throw new kinvey_1.KinveyError("Unable to pull entities from the backend. There are " + count + " entities"
                                + ' that need to be pushed to the backend.');
                        }
                        _a.label = 2;
                    case 2:
                        _a.trys.push([2, 5, , 8]);
                        return [4 /*yield*/, network.findById(id, options).toPromise()];
                    case 3:
                        doc = _a.sent();
                        // Update the doc in the cache
                        return [4 /*yield*/, cache.save(doc)];
                    case 4:
                        // Update the doc in the cache
                        _a.sent();
                        // Return the doc
                        return [2 /*return*/, doc];
                    case 5:
                        error_6 = _a.sent();
                        if (!(error_6 instanceof notFound_1.NotFoundError)) return [3 /*break*/, 7];
                        // Remove the doc from the cache
                        return [4 /*yield*/, cache.removeById(id)];
                    case 6:
                        // Remove the doc from the cache
                        _a.sent();
                        _a.label = 7;
                    case 7: throw error_6;
                    case 8: return [2 /*return*/];
                }
            });
        });
    };
    CacheStore.prototype.sync = function (query, options) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var push, pull;
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.push(undefined, options)];
                    case 1:
                        push = _a.sent();
                        return [4 /*yield*/, this.pull(query, options)];
                    case 2:
                        pull = _a.sent();
                        return [2 /*return*/, { push: push, pull: pull }];
                }
            });
        });
    };
    CacheStore.prototype.pendingSyncDocs = function (query) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var sync;
            return tslib_1.__generator(this, function (_a) {
                sync = new sync_1.Sync(this.collectionName, this.tag);
                return [2 /*return*/, sync.find(sync_1.queryToSyncQuery(query))];
            });
        });
    };
    CacheStore.prototype.pendingSyncEntities = function (query) {
        return this.pendingSyncDocs(query);
    };
    CacheStore.prototype.pendingSyncCount = function (query) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var syncDocs;
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.pendingSyncDocs(query)];
                    case 1:
                        syncDocs = _a.sent();
                        return [2 /*return*/, syncDocs.length];
                }
            });
        });
    };
    CacheStore.prototype.clearSync = function (query) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var sync;
            return tslib_1.__generator(this, function (_a) {
                sync = new sync_1.Sync(this.collectionName, this.tag);
                return [2 /*return*/, sync.remove(sync_1.queryToSyncQuery(query))];
            });
        });
    };
    CacheStore.prototype.subscribe = function (receiver, options) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var network;
            return tslib_1.__generator(this, function (_a) {
                network = new networkstore_1.NetworkStore(this.collectionName);
                return [2 /*return*/, network.subscribe(receiver, options)];
            });
        });
    };
    CacheStore.prototype.unsubscribe = function (options) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var network;
            return tslib_1.__generator(this, function (_a) {
                network = new networkstore_1.NetworkStore(this.collectionName);
                return [2 /*return*/, network.unsubscribe(options)];
            });
        });
    };
    return CacheStore;
}());
exports.CacheStore = CacheStore;
//# sourceMappingURL=cachestore.js.map