Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var isString_1 = tslib_1.__importDefault(require("lodash/isString"));
var kinvey_1 = require("../errors/kinvey");
var log_1 = require("../log");
var cache_1 = require("./cache");
var networkstore_1 = require("./networkstore");
var cachestore_1 = require("./cachestore");
var cache_2 = require("./cache");
var autostore_1 = require("./autostore");
var DataStoreType;
(function (DataStoreType) {
    DataStoreType["Auto"] = "Auto";
    DataStoreType["Cache"] = "Cache";
    DataStoreType["Network"] = "Network";
    DataStoreType["Sync"] = "Sync";
})(DataStoreType = exports.DataStoreType || (exports.DataStoreType = {}));
;
function collection(collectionName, type, options) {
    if (type === void 0) { type = DataStoreType.Cache; }
    if (options === void 0) { options = {}; }
    var datastore;
    var tagWasPassed = options && ('tag' in options);
    if (collectionName == null || !isString_1.default(collectionName)) {
        throw new kinvey_1.KinveyError('A collection is required and must be a string.');
    }
    if (tagWasPassed && !cache_1.isValidTag(options.tag)) {
        throw new kinvey_1.KinveyError('Please provide a valid data store tag.');
    }
    if (type === DataStoreType.Auto) {
        datastore = new autostore_1.AutoStore(collectionName, Object.assign({}, options, { autoSync: true }));
    }
    else if (type === DataStoreType.Cache) {
        log_1.logger.warn('DataStoreType.Cache will be deprecated soon. Please use DataStoreType.Auto instead.');
        datastore = new cachestore_1.CacheStore(collectionName, Object.assign({}, options, { autoSync: true }));
    }
    else if (type === DataStoreType.Network) {
        if (tagWasPassed) {
            throw new kinvey_1.KinveyError('The tagged option is not valid for data stores of type "Network"');
        }
        datastore = new networkstore_1.NetworkStore(collectionName);
    }
    else if (type === DataStoreType.Sync) {
        datastore = new cachestore_1.CacheStore(collectionName, Object.assign({}, options, { autoSync: false }));
    }
    else {
        throw new kinvey_1.KinveyError('Unknown data store type.');
    }
    return datastore;
}
exports.collection = collection;
function getInstance(collectionName, type, options) {
    return collection(collectionName, type, options);
}
exports.getInstance = getInstance;
function clearCache() {
    return cache_2.DataStoreCache.clear();
}
exports.clearCache = clearCache;
//# sourceMappingURL=index.js.map