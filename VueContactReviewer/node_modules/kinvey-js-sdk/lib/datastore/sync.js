Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var query_1 = require("../query");
var sync_1 = require("../errors/sync");
var notFound_1 = require("../errors/notFound");
var networkstore_1 = require("./networkstore");
var cache_1 = require("./cache");
var pushInProgress = new Map();
function markPushStart(collectionName) {
    pushInProgress.set(collectionName, true);
}
function markPushEnd(collectionName) {
    pushInProgress.set(collectionName, false);
    ;
}
function queryToSyncQuery(query) {
    if (query && query instanceof query_1.Query) {
        var newFilter = Object.keys(query.filter)
            .reduce(function (filter, field) {
            var _a;
            return Object.assign({}, filter, (_a = {}, _a["entity." + field] = query.filter[field], _a));
        }, {});
        var newSort = Object.keys(query.sort)
            .reduce(function (sort, field) {
            var _a;
            return Object.assign({}, sort, (_a = {}, _a["entity." + field] = query.sort[field], _a));
        }, {});
        return new query_1.Query({
            filter: newFilter,
            sort: newSort,
            skip: query.skip,
            limit: query.limit
        });
    }
    return undefined;
}
exports.queryToSyncQuery = queryToSyncQuery;
var Sync = /** @class */ (function () {
    function Sync(collectionName, tag) {
        this.collectionName = collectionName;
        this.tag = tag;
    }
    Sync.prototype.isPushInProgress = function () {
        return pushInProgress.get(this.collectionName) === true;
    };
    Sync.prototype.find = function (providedQuery) {
        var syncCache = new cache_1.SyncCache(this.tag);
        var query = new query_1.Query(providedQuery).equalTo('collection', this.collectionName);
        return syncCache.find(query);
    };
    Sync.prototype.findById = function (id) {
        var syncCache = new cache_1.SyncCache(this.tag);
        return syncCache.findById(id);
    };
    Sync.prototype.count = function (providedQuery) {
        var syncCache = new cache_1.SyncCache(this.tag);
        var query = new query_1.Query(providedQuery).equalTo('collection', this.collectionName);
        return syncCache.count(query);
    };
    Sync.prototype.addCreateSyncEvent = function (docs) {
        return this.addSyncEvent(cache_1.SyncEvent.Create, docs);
    };
    Sync.prototype.addUpdateSyncEvent = function (docs) {
        return this.addSyncEvent(cache_1.SyncEvent.Update, docs);
    };
    Sync.prototype.addDeleteSyncEvent = function (docs) {
        return this.addSyncEvent(cache_1.SyncEvent.Delete, docs);
    };
    Sync.prototype.addSyncEvent = function (event, docs) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var syncCache, singular, syncDocs, docsToSync, docWithNoId, query;
            var _this = this;
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        syncCache = new cache_1.SyncCache(this.tag);
                        singular = false;
                        syncDocs = [];
                        docsToSync = docs;
                        if (!Array.isArray(docs)) {
                            singular = true;
                            docsToSync = [docs];
                        }
                        if (!(docsToSync.length > 0)) return [3 /*break*/, 3];
                        docWithNoId = docsToSync.find(function (doc) { return !doc._id; });
                        if (docWithNoId) {
                            throw new sync_1.SyncError('A doc is missing an _id. All docs must have an _id in order to be added to the sync collection.');
                        }
                        query = new query_1.Query().contains('entityId', docsToSync.map(function (doc) { return doc._id; }));
                        return [4 /*yield*/, this.remove(query)];
                    case 1:
                        _a.sent();
                        // Don't add delete events for docs that were created offline
                        if (event === cache_1.SyncEvent.Delete) {
                            docsToSync = docsToSync.filter(function (doc) {
                                if (doc._kmd && doc._kmd.local === true) {
                                    return false;
                                }
                                return true;
                            });
                        }
                        return [4 /*yield*/, syncCache.save(docsToSync.map(function (doc) {
                                return {
                                    entityId: doc._id,
                                    entity: doc,
                                    collection: _this.collectionName,
                                    state: {
                                        operation: event
                                    }
                                };
                            }))];
                    case 2:
                        // Add sync events for the docs
                        syncDocs = _a.sent();
                        _a.label = 3;
                    case 3: return [2 /*return*/, singular ? syncDocs.shift() : syncDocs];
                }
            });
        });
    };
    Sync.prototype.push = function (providedQuery, options) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var network, cache, syncCache, batchSize, query, syncDocs, i_1, batchPush_1;
            var _this = this;
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        network = new networkstore_1.NetworkStore(this.collectionName);
                        cache = new cache_1.DataStoreCache(this.collectionName, this.tag);
                        syncCache = new cache_1.SyncCache(this.tag);
                        if (this.isPushInProgress()) {
                            throw new sync_1.SyncError('Data is already being pushed to the backend. Please wait for it to complete before pushing new data to the backend.');
                        }
                        batchSize = 100;
                        query = new query_1.Query(providedQuery).equalTo('collection', this.collectionName);
                        return [4 /*yield*/, syncCache.find(query)];
                    case 1:
                        syncDocs = _a.sent();
                        if (syncDocs.length > 0) {
                            i_1 = 0;
                            batchPush_1 = function (pushResults) {
                                if (pushResults === void 0) { pushResults = []; }
                                return tslib_1.__awaiter(_this, void 0, void 0, function () {
                                    var batch, results;
                                    var _this = this;
                                    return tslib_1.__generator(this, function (_a) {
                                        switch (_a.label) {
                                            case 0:
                                                markPushStart(this.collectionName);
                                                if (i_1 >= syncDocs.length) {
                                                    markPushEnd(this.collectionName);
                                                    return [2 /*return*/, pushResults];
                                                }
                                                batch = syncDocs.slice(i_1, i_1 + batchSize);
                                                i_1 += batchSize;
                                                return [4 /*yield*/, Promise.all(batch.map(function (syncDoc) { return tslib_1.__awaiter(_this, void 0, void 0, function () {
                                                        var _id, entityId, _a, state, event, error_1, error_2, doc, local, error_3;
                                                        return tslib_1.__generator(this, function (_b) {
                                                            switch (_b.label) {
                                                                case 0:
                                                                    _id = syncDoc._id, entityId = syncDoc.entityId, _a = syncDoc.state, state = _a === void 0 ? { operation: undefined } : _a;
                                                                    event = state.operation;
                                                                    if (!(event === cache_1.SyncEvent.Delete)) return [3 /*break*/, 9];
                                                                    _b.label = 1;
                                                                case 1:
                                                                    _b.trys.push([1, 7, , 8]);
                                                                    _b.label = 2;
                                                                case 2:
                                                                    _b.trys.push([2, 4, , 5]);
                                                                    // Remove the doc from the backend
                                                                    return [4 /*yield*/, network.removeById(entityId, options)];
                                                                case 3:
                                                                    // Remove the doc from the backend
                                                                    _b.sent();
                                                                    return [3 /*break*/, 5];
                                                                case 4:
                                                                    error_1 = _b.sent();
                                                                    // Rethrow the error if it is not a NotFoundError
                                                                    if (!(error_1 instanceof notFound_1.NotFoundError)) {
                                                                        throw error_1;
                                                                    }
                                                                    return [3 /*break*/, 5];
                                                                case 5: 
                                                                // Remove the sync doc
                                                                return [4 /*yield*/, syncCache.removeById(_id)];
                                                                case 6:
                                                                    // Remove the sync doc
                                                                    _b.sent();
                                                                    // Return a result
                                                                    return [2 /*return*/, {
                                                                            _id: entityId,
                                                                            operation: event
                                                                        }];
                                                                case 7:
                                                                    error_2 = _b.sent();
                                                                    // Return a result with the error
                                                                    return [2 /*return*/, {
                                                                            _id: entityId,
                                                                            operation: event,
                                                                            error: error_2
                                                                        }];
                                                                case 8: return [3 /*break*/, 21];
                                                                case 9:
                                                                    if (!(event === cache_1.SyncEvent.Create || event === cache_1.SyncEvent.Update)) return [3 /*break*/, 21];
                                                                    return [4 /*yield*/, cache.findById(entityId)];
                                                                case 10:
                                                                    doc = _b.sent();
                                                                    local = false;
                                                                    _b.label = 11;
                                                                case 11:
                                                                    _b.trys.push([11, 20, , 21]);
                                                                    if (!(event === cache_1.SyncEvent.Create)) return [3 /*break*/, 13];
                                                                    if (doc._kmd && doc._kmd.local === true) {
                                                                        local = true;
                                                                        // tslint:disable-next-line:no-delete
                                                                        delete doc._id;
                                                                        // tslint:disable-next-line:no-delete
                                                                        delete doc._kmd.local;
                                                                    }
                                                                    return [4 /*yield*/, network.create(doc, options)];
                                                                case 12:
                                                                    doc = _b.sent();
                                                                    return [3 /*break*/, 15];
                                                                case 13: return [4 /*yield*/, network.update(doc, options)];
                                                                case 14:
                                                                    doc = _b.sent();
                                                                    _b.label = 15;
                                                                case 15: 
                                                                // Remove the sync doc
                                                                return [4 /*yield*/, syncCache.removeById(_id)];
                                                                case 16:
                                                                    // Remove the sync doc
                                                                    _b.sent();
                                                                    // Save the doc to cache
                                                                    return [4 /*yield*/, cache.save(doc)];
                                                                case 17:
                                                                    // Save the doc to cache
                                                                    _b.sent();
                                                                    if (!local) return [3 /*break*/, 19];
                                                                    return [4 /*yield*/, cache.removeById(entityId)];
                                                                case 18:
                                                                    _b.sent();
                                                                    _b.label = 19;
                                                                case 19: 
                                                                // Return a result
                                                                return [2 /*return*/, {
                                                                        _id: entityId,
                                                                        operation: event,
                                                                        entity: doc
                                                                    }];
                                                                case 20:
                                                                    error_3 = _b.sent();
                                                                    // Return a result with the error
                                                                    return [2 /*return*/, {
                                                                            _id: entityId,
                                                                            operation: event,
                                                                            entity: doc,
                                                                            error: error_3
                                                                        }];
                                                                case 21: 
                                                                // Return a default result
                                                                return [2 /*return*/, {
                                                                        _id: _id,
                                                                        operation: event,
                                                                        error: new Error('Unable to push item in sync table because the event was not recognized.')
                                                                    }];
                                                            }
                                                        });
                                                    }); }))];
                                            case 1:
                                                results = _a.sent();
                                                markPushEnd(this.collectionName);
                                                // Push remaining docs
                                                return [2 /*return*/, batchPush_1(pushResults.concat(results))];
                                        }
                                    });
                                });
                            };
                            return [2 /*return*/, batchPush_1()];
                        }
                        return [2 /*return*/, []];
                }
            });
        });
    };
    Sync.prototype.remove = function (providedQuery) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var syncCache, query;
            return tslib_1.__generator(this, function (_a) {
                syncCache = new cache_1.SyncCache(this.tag);
                query = new query_1.Query(providedQuery).equalTo('collection', this.collectionName);
                return [2 /*return*/, syncCache.remove(query)];
            });
        });
    };
    Sync.prototype.removeById = function (id) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var syncCache;
            return tslib_1.__generator(this, function (_a) {
                syncCache = new cache_1.SyncCache(this.tag);
                return [2 /*return*/, syncCache.removeById(id)];
            });
        });
    };
    Sync.prototype.clear = function () {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var syncCache, query;
            return tslib_1.__generator(this, function (_a) {
                syncCache = new cache_1.SyncCache(this.tag);
                query = new query_1.Query().equalTo('collection', this.collectionName);
                return [2 /*return*/, syncCache.remove(query)];
            });
        });
    };
    return Sync;
}());
exports.Sync = Sync;
//# sourceMappingURL=sync.js.map