import { Query } from '../query';
import { ExistsOptions } from './exists';
import { ForgotUsernameOptions } from './forgotUsername';
import { LoginOptions } from './login';
import { MICOptions } from './loginWithRedirectUri';
import { AuthorizationGrant } from './loginWithMIC';
import { LookupOptions } from './lookup';
import { User as KinveyUser } from './user';
import { VerifyEmailOptions } from './verifyEmail';
export { AuthorizationGrant };
export declare class User extends KinveyUser {
    static exists(username: string, options?: ExistsOptions): Promise<boolean>;
    static forgotUsername(email: string, options?: ForgotUsernameOptions): Promise<any>;
    static login(username: string | {
        username?: string;
        password?: string;
        _socialIdentity?: any;
    }, password?: string, options?: LoginOptions): Promise<KinveyUser>;
    static loginWithRedirectUri(redirectUri: string, options?: MICOptions): Promise<KinveyUser>;
    static loginWithMICUsingResourceOwnerCredentials(username: string, password: string, options?: MICOptions): Promise<KinveyUser>;
    static loginWithMIC(redirectUri: string, authorizationGrant: AuthorizationGrant, options?: any): Promise<KinveyUser>;
    static logout(options?: any): Promise<KinveyUser>;
    static lookup(query?: Query, options?: LookupOptions): any;
    static me(options?: {
        timeout?: number;
    }): Promise<KinveyUser>;
    static remove(id: string, options?: {
        timeout?: number;
        hard?: boolean;
    }): Promise<any>;
    static resetPassword(username: string, options?: {
        timeout?: number;
    }): Promise<any>;
    static restore(): Promise<void>;
    static signup(data: object | User, options?: {
        timeout?: number;
        state?: boolean;
    }): Promise<KinveyUser>;
    static signUpWithIdentity(): Promise<void>;
    static update(data: any, options?: {
        timeout?: number;
    }): Promise<KinveyUser>;
    static getActiveUser(): KinveyUser;
    static verifyEmail(username: string, options?: VerifyEmailOptions): Promise<any>;
    static registerForLiveService(options?: {
        timeout?: number;
    }): Promise<boolean>;
    static unregisterFromLiveService(options?: {
        timeout?: number;
    }): Promise<boolean>;
}
