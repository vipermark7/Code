Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var isArray_1 = tslib_1.__importDefault(require("lodash/isArray"));
var acl_1 = require("../acl");
var kmd_1 = require("../kmd");
var device_1 = require("../device");
var http_1 = require("../http");
var kinvey_1 = require("../errors/kinvey");
var cache_1 = require("../datastore/cache");
var live_1 = require("../live");
var log_1 = require("../log");
var utils_1 = require("./utils");
var User = /** @class */ (function () {
    function User(data) {
        if (data === void 0) { data = {}; }
        this.data = data;
    }
    Object.defineProperty(User.prototype, "_id", {
        get: function () {
            if (this.data) {
                return this.data._id;
            }
            return undefined;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(User.prototype, "_acl", {
        get: function () {
            if (this.data) {
                return new acl_1.Acl(this.data);
            }
            return undefined;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(User.prototype, "_kmd", {
        get: function () {
            if (this.data) {
                return new kmd_1.Kmd(this.data);
            }
            return undefined;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(User.prototype, "metadata", {
        get: function () {
            return this._kmd;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(User.prototype, "authtoken", {
        get: function () {
            var kmd = this._kmd;
            if (kmd) {
                return kmd.authtoken;
            }
            return undefined;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(User.prototype, "_socialIdentity", {
        get: function () {
            return this.data._socialIdentity;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(User.prototype, "username", {
        get: function () {
            if (this.data) {
                return this.data.username;
            }
            return undefined;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(User.prototype, "email", {
        get: function () {
            if (this.data) {
                return this.data.email;
            }
            return undefined;
        },
        enumerable: true,
        configurable: true
    });
    User.prototype.isActive = function () {
        var activeUser = http_1.getSession();
        if (activeUser && activeUser._id === this._id) {
            return true;
        }
        return false;
    };
    User.prototype.isEmailVerified = function () {
        var metadata = this.metadata;
        if (metadata) {
            return metadata.isEmailConfirmed();
        }
        return false;
    };
    User.prototype.me = function (options) {
        if (options === void 0) { options = {}; }
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var request, response, data;
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        request = new http_1.KinveyHttpRequest({
                            method: http_1.HttpRequestMethod.GET,
                            auth: http_1.KinveyHttpAuth.Session,
                            url: http_1.formatKinveyBaasUrl(http_1.KinveyBaasNamespace.User, '/_me'),
                            timeout: options.timeout
                        });
                        return [4 /*yield*/, request.execute()];
                    case 1:
                        response = _a.sent();
                        data = response.data;
                        // Remove sensitive data
                        delete data.password;
                        // Merge _socialIdentity
                        if (data._socialIdentity) {
                            data._socialIdentity = utils_1.mergeSocialIdentity(this._socialIdentity, data._socialIdentity);
                        }
                        // Update the active session
                        if (this.isActive()) {
                            http_1.setSession(data);
                        }
                        this.data = data;
                        return [2 /*return*/, this];
                }
            });
        });
    };
    User.prototype.update = function (data, options) {
        if (options === void 0) { options = {}; }
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var body, request, response, updatedData;
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        body = Object.assign({}, this.data, data);
                        if (!data) {
                            throw new kinvey_1.KinveyError('No user was provided to be updated.');
                        }
                        if (isArray_1.default(data)) {
                            throw new kinvey_1.KinveyError('Only one user can be updated at one time.');
                        }
                        if (!body._id) {
                            throw new kinvey_1.KinveyError('User must have an _id.');
                        }
                        request = new http_1.KinveyHttpRequest({
                            method: http_1.HttpRequestMethod.PUT,
                            auth: http_1.KinveyHttpAuth.SessionOrMaster,
                            url: http_1.formatKinveyBaasUrl(http_1.KinveyBaasNamespace.User, "/" + this._id),
                            body: body,
                            timeout: options.timeout
                        });
                        return [4 /*yield*/, request.execute()];
                    case 1:
                        response = _a.sent();
                        updatedData = response.data;
                        // Remove sensitive data
                        delete updatedData.password;
                        // Merge _socialIdentity
                        if (updatedData._socialIdentity) {
                            updatedData._socialIdentity = utils_1.mergeSocialIdentity(this._socialIdentity, updatedData._socialIdentity);
                        }
                        // Update the active session
                        if (this.isActive()) {
                            http_1.setSession(updatedData);
                        }
                        this.data = updatedData;
                        return [2 /*return*/, this];
                }
            });
        });
    };
    User.prototype.registerForLiveService = function (options) {
        if (options === void 0) { options = {}; }
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var deviceId, request, response, config;
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (!!live_1.isSubscribed()) return [3 /*break*/, 3];
                        return [4 /*yield*/, device_1.getDeviceId()];
                    case 1:
                        deviceId = _a.sent();
                        request = new http_1.KinveyHttpRequest({
                            method: http_1.HttpRequestMethod.POST,
                            auth: http_1.KinveyHttpAuth.Session,
                            url: http_1.formatKinveyBaasUrl(http_1.KinveyBaasNamespace.User, "/" + this._id + "/register-realtime"),
                            body: { deviceId: deviceId },
                            timeout: options.timeout
                        });
                        return [4 /*yield*/, request.execute()];
                    case 2:
                        response = _a.sent();
                        config = Object.assign({}, { authKey: this.authtoken }, response.data);
                        // Subscribe to PubNub
                        live_1.subscribe(config);
                        _a.label = 3;
                    case 3: return [2 /*return*/, true];
                }
            });
        });
    };
    User.prototype.unregisterFromLiveService = function (options) {
        if (options === void 0) { options = {}; }
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var deviceId, request;
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (!live_1.isSubscribed()) return [3 /*break*/, 3];
                        // Unsubscribe from PubNub
                        live_1.unsubscribe();
                        return [4 /*yield*/, device_1.getDeviceId()];
                    case 1:
                        deviceId = _a.sent();
                        request = new http_1.KinveyHttpRequest({
                            method: http_1.HttpRequestMethod.POST,
                            auth: http_1.KinveyHttpAuth.Session,
                            url: http_1.formatKinveyBaasUrl(http_1.KinveyBaasNamespace.User, "/" + this._id + "/unregister-realtime"),
                            body: { deviceId: deviceId },
                            timeout: options.timeout
                        });
                        return [4 /*yield*/, request.execute()];
                    case 2:
                        _a.sent();
                        _a.label = 3;
                    case 3: return [2 /*return*/, true];
                }
            });
        });
    };
    User.prototype.logout = function (options) {
        if (options === void 0) { options = {}; }
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var request, error_1;
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (!this.isActive()) return [3 /*break*/, 8];
                        // TODO: unregister push
                        // Unregister from Live Service
                        this.unregisterFromLiveService();
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, 3, , 4]);
                        request = new http_1.KinveyHttpRequest({
                            method: http_1.HttpRequestMethod.POST,
                            auth: http_1.KinveyHttpAuth.Session,
                            url: http_1.formatKinveyBaasUrl(http_1.KinveyBaasNamespace.User, '/_logout'),
                            timeout: options.timeout
                        });
                        return [4 /*yield*/, request.execute()];
                    case 2:
                        _a.sent();
                        return [3 /*break*/, 4];
                    case 3:
                        error_1 = _a.sent();
                        log_1.logger.error('Logout request failed.');
                        log_1.logger.error(error_1.message);
                        return [3 /*break*/, 4];
                    case 4:
                        // Remove the session
                        http_1.removeSession();
                        // Clear cache's
                        return [4 /*yield*/, cache_1.QueryCache.clear()];
                    case 5:
                        // Clear cache's
                        _a.sent();
                        return [4 /*yield*/, cache_1.SyncCache.clear()];
                    case 6:
                        _a.sent();
                        return [4 /*yield*/, cache_1.DataStoreCache.clear()];
                    case 7:
                        _a.sent();
                        _a.label = 8;
                    case 8: return [2 /*return*/, this];
                }
            });
        });
    };
    return User;
}());
exports.User = User;
//# sourceMappingURL=user.js.map