Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var isPlainObject_1 = tslib_1.__importDefault(require("lodash/isPlainObject"));
var activeUser_1 = require("../errors/activeUser");
var kinvey_1 = require("../errors/kinvey");
var http_1 = require("../http");
var getActiveUser_1 = require("./getActiveUser");
var user_1 = require("./user");
var utils_1 = require("./utils");
// export async function login(credentials: { username: string, password: string}, options: LoginOptions = {}): Promise<User>
function login(username, password, options) {
    if (options === void 0) { options = {}; }
    return tslib_1.__awaiter(this, void 0, void 0, function () {
        var activeUser, credentials, timeout, request, response, session;
        return tslib_1.__generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    activeUser = getActiveUser_1.getActiveUser();
                    credentials = { username: username, password: password };
                    timeout = options.timeout;
                    if (activeUser) {
                        throw new activeUser_1.ActiveUserError('An active user already exists. Please logout the active user before you login.');
                    }
                    if (isPlainObject_1.default(username)) {
                        credentials = username;
                        if (isPlainObject_1.default(password)) {
                            timeout = password.timeout;
                        }
                    }
                    if (credentials.username) {
                        credentials.username = String(credentials.username).trim();
                    }
                    if (credentials.password) {
                        credentials.password = String(credentials.password).trim();
                    }
                    if ((!credentials.username || credentials.username === '' || !credentials.password || credentials.password === '') && !credentials._socialIdentity) {
                        throw new kinvey_1.KinveyError('Username and/or password missing. Please provide both a username and password to login.');
                    }
                    request = new http_1.KinveyHttpRequest({
                        method: http_1.HttpRequestMethod.POST,
                        auth: http_1.KinveyHttpAuth.App,
                        url: http_1.formatKinveyBaasUrl(http_1.KinveyBaasNamespace.User, '/login'),
                        body: credentials,
                        timeout: timeout
                    });
                    return [4 /*yield*/, request.execute()];
                case 1:
                    response = _a.sent();
                    session = response.data;
                    // Remove sensitive data
                    delete session.password;
                    // Merge _socialIdentity
                    if (credentials._socialIdentity) {
                        session._socialIdentity = utils_1.mergeSocialIdentity(credentials._socialIdentity, session._socialIdentity);
                    }
                    // Store the active session
                    http_1.setSession(session);
                    // Return the user
                    return [2 /*return*/, new user_1.User(session)];
            }
        });
    });
}
exports.login = login;
//# sourceMappingURL=login.js.map