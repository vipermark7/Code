Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var rxjs_1 = require("rxjs");
var query_1 = require("../query");
var kinvey_1 = require("../errors/kinvey");
var http_1 = require("../http");
function lookup(query, options) {
    var _this = this;
    if (options === void 0) { options = {}; }
    var stream = rxjs_1.Observable.create(function (observer) { return tslib_1.__awaiter(_this, void 0, void 0, function () {
        var request, response, error_1;
        return tslib_1.__generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    _a.trys.push([0, 2, , 3]);
                    if (query && !(query instanceof query_1.Query)) {
                        throw new kinvey_1.KinveyError('Invalid query. It must be an instance of the Query class.');
                    }
                    request = new http_1.KinveyHttpRequest({
                        method: http_1.HttpRequestMethod.POST,
                        auth: http_1.KinveyHttpAuth.SessionOrMaster,
                        url: http_1.formatKinveyBaasUrl(http_1.KinveyBaasNamespace.User, '/_lookup'),
                        body: query ? query.filter : undefined,
                        timeout: options.timeout
                    });
                    return [4 /*yield*/, request.execute()];
                case 1:
                    response = _a.sent();
                    observer.next(response.data);
                    observer.complete();
                    return [3 /*break*/, 3];
                case 2:
                    error_1 = _a.sent();
                    observer.error(error_1);
                    return [3 /*break*/, 3];
                case 3: return [2 /*return*/];
            }
        });
    }); });
    return stream;
}
exports.lookup = lookup;
//# sourceMappingURL=lookup.js.map