Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var js_base64_1 = require("js-base64");
var http_1 = require("../../http");
var kinvey_1 = require("../../kinvey");
var utils_1 = require("./utils");
// export interface Token {
//   identity: string;
//   client_id: string;
//   redirect_uri: string;
//   protocol: string;
//   host: string;
// }
function getTokenWithCode(code, clientId, redirectUri, options) {
    if (options === void 0) { options = {}; }
    return tslib_1.__awaiter(this, void 0, void 0, function () {
        var request, response, token;
        return tslib_1.__generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    request = new http_1.KinveyHttpRequest({
                        method: http_1.HttpRequestMethod.POST,
                        headers: new http_1.KinveyHttpHeaders({
                            'Content-Type': function () { return 'application/x-www-form-urlencoded'; },
                            Authorization: function () {
                                var credentials = js_base64_1.Base64.encode(clientId + ":" + kinvey_1.getAppSecret());
                                return "Basic " + credentials;
                            }
                        }),
                        url: http_1.formatKinveyAuthUrl("/" + utils_1.getVersion(options.version) + "/oauth/token"),
                        body: {
                            grant_type: 'authorization_code',
                            client_id: clientId,
                            redirect_uri: redirectUri,
                            code: code
                        },
                        timeout: options.timeout
                    });
                    return [4 /*yield*/, request.execute()];
                case 1:
                    response = _a.sent();
                    token = response.data;
                    return [2 /*return*/, Object.assign({}, {
                            identity: utils_1.Identity,
                            client_id: clientId,
                            redirect_uri: redirectUri,
                            protocol: kinvey_1.getAuthProtocol(),
                            host: kinvey_1.getAuthHost()
                        }, token)];
            }
        });
    });
}
exports.getTokenWithCode = getTokenWithCode;
//# sourceMappingURL=getTokenWithCode.js.map