Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var isString_1 = tslib_1.__importDefault(require("lodash/isString"));
var activeUser_1 = require("../errors/activeUser");
var notFound_1 = require("../errors/notFound");
var kinvey_1 = require("../errors/kinvey");
var kinvey_2 = require("../kinvey");
var login_1 = require("./login");
var mic_1 = require("./mic");
var signup_1 = require("./signup");
var getActiveUser_1 = require("./getActiveUser");
function loginWithMICUsingResourceOwnerCredentials(username, password, options) {
    if (options === void 0) { options = {}; }
    return tslib_1.__awaiter(this, void 0, void 0, function () {
        var _a, activeUser, micId, clientId, token, socialIdentity, credentials, error_1;
        return tslib_1.__generator(this, function (_b) {
            switch (_b.label) {
                case 0:
                    activeUser = getActiveUser_1.getActiveUser();
                    micId = options.micId;
                    clientId = kinvey_2.getAppKey();
                    if (activeUser) {
                        throw new activeUser_1.ActiveUserError('An active user already exists. Please logout the active user before you login with Mobile Identity Connect.');
                    }
                    if (!isString_1.default(username) || !isString_1.default(password)) {
                        throw new kinvey_1.KinveyError('A username and password are required and must be a string.');
                    }
                    if (isString_1.default(micId)) {
                        clientId = clientId + "." + micId;
                    }
                    return [4 /*yield*/, mic_1.getTokenWithUsernamePassword(username, password, clientId, options)];
                case 1:
                    token = _b.sent();
                    socialIdentity = (_a = {}, _a[token.identity] = token, _a);
                    credentials = { _socialIdentity: socialIdentity };
                    _b.label = 2;
                case 2:
                    _b.trys.push([2, 4, , 7]);
                    return [4 /*yield*/, login_1.login(credentials)];
                case 3: return [2 /*return*/, _b.sent()];
                case 4:
                    error_1 = _b.sent();
                    if (!(error_1 instanceof notFound_1.NotFoundError)) return [3 /*break*/, 6];
                    return [4 /*yield*/, signup_1.signup(credentials)];
                case 5: return [2 /*return*/, _b.sent()];
                case 6: throw error_1;
                case 7: return [2 /*return*/];
            }
        });
    });
}
exports.loginWithMICUsingResourceOwnerCredentials = loginWithMICUsingResourceOwnerCredentials;
//# sourceMappingURL=loginWithMICUsingResourceOwnerCredentials.js.map