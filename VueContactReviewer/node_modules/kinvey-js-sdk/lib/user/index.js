Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var exists_1 = require("./exists");
var forgotUsername_1 = require("./forgotUsername");
var login_1 = require("./login");
var loginWithRedirectUri_1 = require("./loginWithRedirectUri");
var loginWithMICUsingResourceOwnerCredentials_1 = require("./loginWithMICUsingResourceOwnerCredentials");
var loginWithMIC_1 = require("./loginWithMIC");
exports.AuthorizationGrant = loginWithMIC_1.AuthorizationGrant;
var logout_1 = require("./logout");
var lookup_1 = require("./lookup");
var me_1 = require("./me");
var remove_1 = require("./remove");
var resetPassword_1 = require("./resetPassword");
var restore_1 = require("./restore");
var signup_1 = require("./signup");
var signupWithIdentity_1 = require("./signupWithIdentity");
var update_1 = require("./update");
var getActiveUser_1 = require("./getActiveUser");
var user_1 = require("./user");
var verifyEmail_1 = require("./verifyEmail");
var registerForLiveService_1 = require("./registerForLiveService");
var unregisterFromLiveService_1 = require("./unregisterFromLiveService");
var User = /** @class */ (function (_super) {
    tslib_1.__extends(User, _super);
    function User() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    User.exists = function (username, options) {
        return exists_1.exists(username, options);
    };
    User.forgotUsername = function (email, options) {
        return forgotUsername_1.forgotUsername(email, options);
    };
    User.login = function (username, password, options) {
        return login_1.login(username, password, options);
    };
    User.loginWithRedirectUri = function (redirectUri, options) {
        return loginWithRedirectUri_1.loginWithRedirectUri(redirectUri, options);
    };
    User.loginWithMICUsingResourceOwnerCredentials = function (username, password, options) {
        return loginWithMICUsingResourceOwnerCredentials_1.loginWithMICUsingResourceOwnerCredentials(username, password, options);
    };
    User.loginWithMIC = function (redirectUri, authorizationGrant, options) {
        return loginWithMIC_1.loginWithMIC(redirectUri, authorizationGrant, options);
    };
    User.logout = function (options) {
        return logout_1.logout(options);
    };
    User.lookup = function (query, options) {
        return lookup_1.lookup(query, options);
    };
    User.me = function (options) {
        return me_1.me(options);
    };
    User.remove = function (id, options) {
        return remove_1.remove(id, options);
    };
    User.resetPassword = function (username, options) {
        return resetPassword_1.resetPassword(username, options);
    };
    User.restore = function () {
        return restore_1.restore();
    };
    User.signup = function (data, options) {
        return signup_1.signup(data, options);
    };
    User.signUpWithIdentity = function () {
        return signupWithIdentity_1.signUpWithIdentity();
    };
    User.update = function (data, options) {
        return update_1.update(data, options);
    };
    User.getActiveUser = function () {
        return getActiveUser_1.getActiveUser();
    };
    User.verifyEmail = function (username, options) {
        return verifyEmail_1.verifyEmail(username, options);
    };
    User.registerForLiveService = function (options) {
        return registerForLiveService_1.registerForLiveService(options);
    };
    User.unregisterFromLiveService = function (options) {
        return unregisterFromLiveService_1.unregisterFromLiveService(options);
    };
    return User;
}(user_1.User));
exports.User = User;
//# sourceMappingURL=index.js.map