Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var isString_1 = tslib_1.__importDefault(require("lodash/isString"));
var kinvey_1 = require("../errors/kinvey");
var http_1 = require("../http");
var getActiveUser_1 = require("./getActiveUser");
function remove(id, options) {
    if (options === void 0) { options = {}; }
    return tslib_1.__awaiter(this, void 0, void 0, function () {
        var hard, activeUser, url, request, response;
        return tslib_1.__generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    hard = options.hard;
                    activeUser = getActiveUser_1.getActiveUser();
                    if (!id) {
                        throw new kinvey_1.KinveyError('An id was not provided.');
                    }
                    if (!isString_1.default(id)) {
                        throw new kinvey_1.KinveyError('The id provided is not a string.');
                    }
                    url = http_1.formatKinveyBaasUrl(http_1.KinveyBaasNamespace.User, "/" + id, { hard: hard ? hard === true : undefined });
                    request = new http_1.KinveyHttpRequest({
                        method: http_1.HttpRequestMethod.DELETE,
                        auth: http_1.KinveyHttpAuth.SessionOrMaster,
                        url: url,
                        timeout: options.timeout
                    });
                    return [4 /*yield*/, request.execute()];
                case 1:
                    response = _a.sent();
                    if (!(activeUser && activeUser._id === id)) return [3 /*break*/, 3];
                    return [4 /*yield*/, activeUser.logout()];
                case 2:
                    _a.sent();
                    _a.label = 3;
                case 3: 
                // Return the response
                return [2 /*return*/, response.data];
            }
        });
    });
}
exports.remove = remove;
//# sourceMappingURL=remove.js.map