Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var isPlainObject_1 = tslib_1.__importDefault(require("lodash/isPlainObject"));
var isArray_1 = tslib_1.__importDefault(require("lodash/isArray"));
var kinvey_1 = require("./errors/kinvey");
/**
 * This class provides a way to access the ACL (Access Control List)
 * information for an entity and to modify the access control permissions.
 */
var Acl = /** @class */ (function () {
    function Acl(entity) {
        if (!isPlainObject_1.default(entity)) {
            throw new kinvey_1.KinveyError('entity must be an object.');
        }
        entity._acl = entity._acl || {}; // eslint-disable-line no-param-reassign
        this.entity = entity;
    }
    Object.defineProperty(Acl.prototype, "creator", {
        /**
         * Get the creator.
         *
         * @returns {string} Creator
         */
        get: function () {
            return (this.entity._acl && this.entity._acl.creator) || null;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Acl.prototype, "readers", {
        /**
         * Get the readers.
         *
         * @returns {string[]} Readers
         */
        get: function () {
            return this.entity._acl && isArray_1.default(this.entity._acl.r) ? this.entity._acl.r : [];
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Acl.prototype, "writers", {
        /**
         * Get the writers.
         *
         * @returns {string[]} Writers
         */
        get: function () {
            return this.entity._acl && isArray_1.default(this.entity._acl.w) ? this.entity._acl.w : [];
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Acl.prototype, "readerGroups", {
        /**
         * Get the reader groups.
         *
         * @returns {string[]} Reader groups
         */
        get: function () {
            return this.entity._acl && this.entity._acl.groups && isArray_1.default(this.entity._acl.groups.r) ? this.entity._acl.groups.r : [];
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Acl.prototype, "writerGroups", {
        /**
         * Get the writer groups.
         *
         * @returns {string[]} Writer groups
         */
        get: function () {
            return this.entity._acl && this.entity._acl.groups && isArray_1.default(this.entity._acl.groups.w) ? this.entity._acl.groups.w : [];
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Acl.prototype, "globallyReadable", {
        /**
         * Set the globally readable permission.
         *
         * @param {boolean} gr Globally readable
         */
        set: function (gr) {
            if (!this.entity._acl) {
                this.entity._acl = {};
            }
            this.entity._acl.gr = gr === true;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Acl.prototype, "globallyWritable", {
        /**
         * Set the globally writable permission.
         *
         * @param {boolean} gw Globally writable
         */
        set: function (gw) {
            if (!this.entity._acl) {
                this.entity._acl = {};
            }
            this.entity._acl.gw = gw === true;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Add a reader.
     *
     * @param {string} reader Reader
     * @returns {Acl} Acl
     */
    Acl.prototype.addReader = function (reader) {
        var r = this.readers;
        if (r.indexOf(reader) === -1) {
            r.push(reader);
        }
        if (!this.entity._acl) {
            this.entity._acl = {};
        }
        this.entity._acl.r = r;
        return this;
    };
    /**
     * Add a reader group.
     *
     * @param {string} group Reader group
     * @returns {Acl} Acl
     */
    Acl.prototype.addReaderGroup = function (group) {
        var groups = this.readerGroups;
        if (groups.indexOf(group) === -1) {
            groups.push(group);
        }
        if (!this.entity._acl) {
            this.entity._acl = {};
        }
        this.entity._acl.groups = Object.assign({}, this.entity._acl.groups, { r: groups });
        return this;
    };
    /**
     * Add a writer.
     *
     * @param {string} writer Writer
     * @returns {Acl} Acl
     */
    Acl.prototype.addWriter = function (writer) {
        var w = this.writers;
        if (w.indexOf(writer) === -1) {
            w.push(writer);
        }
        if (!this.entity._acl) {
            this.entity._acl = {};
        }
        this.entity._acl.w = w;
        return this;
    };
    /**
     * Add a writer group.
     *
     * @param {string} group Writer group
     * @returns {Acl} Acl
     */
    Acl.prototype.addWriterGroup = function (group) {
        var groups = this.writerGroups;
        if (groups.indexOf(group) === -1) {
            groups.push(group);
        }
        if (!this.entity._acl) {
            this.entity._acl = {};
        }
        this.entity._acl.groups = Object.assign({}, this.entity._acl.groups, { w: groups });
        return this;
    };
    /**
     * Check if globally readable is allowed.
     *
     * @returns {boolean} True if globally readable is allowed otherwise false
     */
    Acl.prototype.isGloballyReadable = function () {
        return (this.entity._acl && this.entity._acl.gr === true) || false;
    };
    /**
     * Check if globally writable is allowed.
     *
     * @returns {boolean} True if globally writable is allowed otherwise false
     */
    Acl.prototype.isGloballyWritable = function () {
        return (this.entity._acl && this.entity._acl.gw === true) || false;
    };
    /**
     * Remove a reader.
     *
     * @param {string} reader Reader
     * @returns {Acl} Acl
     */
    Acl.prototype.removeReader = function (reader) {
        var r = this.readers;
        var index = r.indexOf(reader);
        if (index !== -1) {
            r.splice(index, 1);
        }
        if (!this.entity._acl) {
            this.entity._acl = {};
        }
        this.entity._acl.r = r;
        return this;
    };
    /**
     * Remove a reader group.
     *
     * @param {string} group Reader group
     * @returns {Acl} Acl
     */
    Acl.prototype.removeReaderGroup = function (group) {
        var groups = this.readerGroups;
        var index = groups.indexOf(group);
        if (index !== -1) {
            groups.splice(index, 1);
        }
        if (!this.entity._acl) {
            this.entity._acl = {};
        }
        this.entity._acl.groups = Object.assign({}, this.entity._acl.groups, { r: groups });
        return this;
    };
    /**
     * Remove a writer.
     *
     * @param {string} writer Writer
     * @returns {Acl} Acl
     */
    Acl.prototype.removeWriter = function (writer) {
        var w = this.writers;
        var index = w.indexOf(writer);
        if (index !== -1) {
            w.splice(index, 1);
        }
        if (!this.entity._acl) {
            this.entity._acl = {};
        }
        this.entity._acl.w = w;
        return this;
    };
    /**
     * Remove a writer group.
     *
     * @param {string} group Writer group
     * @returns {Acl} Acl
     */
    Acl.prototype.removeWriterGroup = function (group) {
        var groups = this.writerGroups;
        var index = groups.indexOf(group);
        if (index !== -1) {
            groups.splice(index, 1);
        }
        if (!this.entity._acl) {
            this.entity._acl = {};
        }
        this.entity._acl.groups = Object.assign({}, this.entity._acl.groups, { w: groups });
        return this;
    };
    /**
     * The acl as a plain object.
     *
     * @returns {Object} Acl as a plain object.
     */
    Acl.prototype.toPlainObject = function () {
        return this.entity._acl;
    };
    return Acl;
}());
exports.Acl = Acl;
//# sourceMappingURL=acl.js.map