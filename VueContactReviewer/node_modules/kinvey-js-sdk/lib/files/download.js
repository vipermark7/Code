Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var isNumber_1 = tslib_1.__importDefault(require("lodash/isNumber"));
var downloadByUrl_1 = require("./downloadByUrl");
var http_1 = require("../http");
function download(id, options) {
    if (options === void 0) { options = {}; }
    return tslib_1.__awaiter(this, void 0, void 0, function () {
        var _a, stream, _b, tls, ttl, queryStringObject, request, response, file;
        return tslib_1.__generator(this, function (_c) {
            switch (_c.label) {
                case 0:
                    _a = options.stream, stream = _a === void 0 ? false : _a, _b = options.tls, tls = _b === void 0 ? true : _b, ttl = options.ttl;
                    queryStringObject = Object.assign({}, { tls: tls === true });
                    if (isNumber_1.default(ttl)) {
                        queryStringObject.ttl_in_seconds = ttl;
                    }
                    request = new http_1.KinveyHttpRequest({
                        method: http_1.HttpRequestMethod.GET,
                        auth: http_1.KinveyHttpAuth.SessionOrMaster,
                        url: http_1.formatKinveyBaasUrl(http_1.KinveyBaasNamespace.Blob, "/" + id, queryStringObject),
                        timeout: options.timeout
                    });
                    return [4 /*yield*/, request.execute()];
                case 1:
                    response = _c.sent();
                    file = response.data;
                    if (stream) {
                        return [2 /*return*/, file];
                    }
                    return [2 /*return*/, downloadByUrl_1.downloadByUrl(file._downloadURL, options)];
            }
        });
    });
}
exports.download = download;
//# sourceMappingURL=download.js.map