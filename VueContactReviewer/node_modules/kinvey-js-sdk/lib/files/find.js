Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var isNumber_1 = tslib_1.__importDefault(require("lodash/isNumber"));
var query_1 = require("../query");
var kinvey_1 = require("../errors/kinvey");
var http_1 = require("../http");
var downloadByUrl_1 = require("./downloadByUrl");
function find(query, options) {
    if (query === void 0) { query = new query_1.Query(); }
    if (options === void 0) { options = {}; }
    return tslib_1.__awaiter(this, void 0, void 0, function () {
        var _a, download, _b, tls, ttl, queryStringObject, request, response, files;
        return tslib_1.__generator(this, function (_c) {
            switch (_c.label) {
                case 0:
                    _a = options.download, download = _a === void 0 ? false : _a, _b = options.tls, tls = _b === void 0 ? true : _b, ttl = options.ttl;
                    queryStringObject = Object.assign({}, { tls: tls === true });
                    if (query) {
                        if (!(query instanceof query_1.Query)) {
                            throw new kinvey_1.KinveyError('Invalid query. It must be an instance of the Query class.');
                        }
                        queryStringObject = Object.assign({}, queryStringObject, query.toQueryObject());
                    }
                    if (isNumber_1.default(ttl)) {
                        queryStringObject.ttl_in_seconds = ttl;
                    }
                    request = new http_1.KinveyHttpRequest({
                        method: http_1.HttpRequestMethod.GET,
                        auth: http_1.KinveyHttpAuth.SessionOrMaster,
                        url: http_1.formatKinveyBaasUrl(http_1.KinveyBaasNamespace.Blob, '/', queryStringObject),
                        timeout: options.timeout
                    });
                    return [4 /*yield*/, request.execute()];
                case 1:
                    response = _c.sent();
                    files = response.data;
                    if (download === true) {
                        return [2 /*return*/, Promise.all(files.map(function (file) { return downloadByUrl_1.downloadByUrl(file._downloadURL, options); }))];
                    }
                    return [2 /*return*/, files];
            }
        });
    });
}
exports.find = find;
//# sourceMappingURL=find.js.map