Object.defineProperty(exports, "__esModule", { value: true });
var query_1 = require("./query");
var Aggregation = /** @class */ (function () {
    function Aggregation(aggregation) {
        var config = Object.assign({}, {
            query: null,
            initial: {},
            key: {},
            // eslint-disable-next-line func-names
            reduceFn: function () { }.toString()
        }, aggregation);
        this.query = config.query;
        this.initial = config.initial;
        this.key = config.key;
        this.reduceFn = config.reduceFn;
    }
    Object.defineProperty(Aggregation.prototype, "query", {
        get: function () {
            return this._query;
        },
        set: function (query) {
            if (query && !(query instanceof query_1.Query)) {
                throw new Error('Query must be an instance of Query class.');
            }
            this._query = query;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Adds the filed to the array of fields.
     *
     * @param {string} field
     * @returns {Aggregation} Aggregation
     */
    Aggregation.prototype.by = function (field) {
        this.key[field] = true;
        return this;
    };
    Aggregation.prototype.process = function (docs) {
        var _this = this;
        if (docs === void 0) { docs = []; }
        // eslint-disable-next-line no-new-func
        var reduceFn = new Function('doc', 'out', this.reduceFn.replace(/function[\s\S]*?\([\s\S]*?\)/, ''));
        var filteredDocs = docs;
        if (this.query) {
            filteredDocs = this.query.process(docs);
        }
        if (filteredDocs.length > 0) {
            var fields_1 = Object.keys(this.key) || [];
            if (fields_1.length > 0) {
                return filteredDocs.reduce(function (results, doc) {
                    var index = results.findIndex(function (result) { return fields_1.reduce(function (match, field) { return match && result[field] === doc[field]; }, true); });
                    if (index === -1) {
                        var result = fields_1.reduce(function (result, field) {
                            result[field] = doc[field];
                            return result;
                        }, Object.assign({}, _this.initial));
                        results.push(reduceFn(doc, result));
                    }
                    else {
                        var result = results[index];
                        results[index] = reduceFn(doc, result);
                    }
                    return results;
                }, []);
            }
            return filteredDocs.reduce(function (result, doc) { return reduceFn(doc, result); }, Object.assign({}, this.initial));
        }
        return Object.assign({}, this.initial);
    };
    Aggregation.prototype.toPlainObject = function () {
        return {
            key: this.key,
            initial: this.initial,
            reduce: this.reduceFn,
            reduceFn: this.reduceFn,
            condition: this.query ? this.query.toPlainObject().filter : {},
            query: this.query ? this.query.toPlainObject() : null
        };
    };
    Aggregation.average = function (field) {
        if (field === void 0) { field = ''; }
        var aggregation = new Aggregation({
            initial: { count: 0, average: 0 },
            reduceFn: ''
                + 'function(doc, out) {'
                + ("  out.average = (out.average * out.count + doc[\"" + field.replace('\'', '\\\'') + "\"]) / (out.count + 1);")
                + '  out.count += 1;'
                + '  return out;'
                + '}'
        });
        return aggregation;
    };
    Aggregation.count = function (field) {
        if (field === void 0) { field = ''; }
        var aggregation = new Aggregation({
            initial: { count: 0 },
            reduceFn: ''
                + 'function(doc, out) {'
                + '  out.count += 1;'
                + '  return out;'
                + '}'
        });
        aggregation.by(field);
        return aggregation;
    };
    Aggregation.max = function (field) {
        if (field === void 0) { field = ''; }
        var aggregation = new Aggregation({
            initial: { max: -1 * Number.MAX_SAFE_INTEGER },
            reduceFn: ''
                + 'function(doc, out) {'
                + ("  out.max = Math.max(out.max, doc[\"" + field.replace('\'', '\\\'') + "\"]);")
                + '  return out;'
                + '}'
        });
        return aggregation;
    };
    Aggregation.min = function (field) {
        if (field === void 0) { field = ''; }
        var aggregation = new Aggregation({
            initial: { min: Number.MAX_SAFE_INTEGER },
            reduceFn: ''
                + 'function(doc, out) {'
                + ("  out.min = Math.min(out.min, doc[\"" + field.replace('\'', '\\\'') + "\"]);")
                + '  return out;'
                + '}'
        });
        return aggregation;
    };
    Aggregation.sum = function (field) {
        if (field === void 0) { field = ''; }
        var aggregation = new Aggregation({
            initial: { sum: 0 },
            reduceFn: ''
                + 'function(doc, out) {'
                + ("  out.sum += doc[\"" + field.replace('\'', '\\\'') + "\"];")
                + '  return out;'
                + '}'
        });
        return aggregation;
    };
    return Aggregation;
}());
exports.Aggregation = Aggregation;
//# sourceMappingURL=aggregation.js.map