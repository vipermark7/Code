Object.defineProperty(exports, "__esModule", { value: true });
var url_1 = require("url");
var config_1 = require("./config");
var http_1 = require("./http");
var kinvey_1 = require("./kinvey");
var kinvey_2 = require("./errors/kinvey");
var device_1 = require("./device");
function init(config) {
    // Check that an appKey was provided
    if (config.kinveyConfig.appKey === null && config.kinveyConfig.appKey === undefined) {
        throw new kinvey_2.KinveyError('No app key was provided to initialize the Kinvey JavaScript SDK.');
    }
    // Check that an appSecret or masterSecret was provided
    if (config.kinveyConfig.appSecret === null
        && config.kinveyConfig.appSecret === undefined
        && config.kinveyConfig.masterSecret === null
        && config.kinveyConfig.masterSecret === undefined) {
        throw new kinvey_2.KinveyError('No app secret was provided to initialize the Kinvey JavaScript SDK.');
    }
    config_1.setConfig(config_1.ConfigKey.KinveyConfig, config.kinveyConfig);
    config_1.setConfig(config_1.ConfigKey.HttpAdapter, config.httpAdapter);
    config_1.setConfig(config_1.ConfigKey.SessionStore, config.sessionStore);
    config_1.setConfig(config_1.ConfigKey.Popup, config.popup);
    config_1.setConfig(config_1.ConfigKey.StorageAdapter, config.storageAdapter);
    config_1.setConfig(config_1.ConfigKey.PubNub, config.pubnub);
    return {
        apiHost: kinvey_1.getBaasHost(),
        apiHostname: url_1.format({ protocol: kinvey_1.getBaasProtocol(), host: kinvey_1.getBaasHost() }),
        apiProtocol: kinvey_1.getBaasProtocol(),
        appKey: kinvey_1.getAppKey(),
        appSecret: kinvey_1.getAppSecret(),
        masterSecret: kinvey_1.getMasterSecret(),
        authHost: kinvey_1.getAuthHost(),
        authHostname: url_1.format({ protocol: kinvey_1.getAuthProtocol(), host: kinvey_1.getAuthHost() }),
        authProtocol: kinvey_1.getAuthProtocol(),
        micHost: kinvey_1.getAuthHost(),
        micHostname: url_1.format({ protocol: kinvey_1.getAuthProtocol(), host: kinvey_1.getAuthHost() }),
        micProtocol: kinvey_1.getAuthProtocol(),
        _defaultTimeout: kinvey_1.getDefaultTimeout(),
        defaultTimeout: kinvey_1.getDefaultTimeout(),
        encryptionKey: kinvey_1.getEncryptionKey(),
        _appVersion: http_1.getAppVersion(),
        appVersion: http_1.getAppVersion(),
        deviceId: device_1.getDeviceId()
    };
}
exports.init = init;
function initialize(config) {
    throw new kinvey_2.KinveyError('initialize() has been deprecated. Please use init().');
}
exports.initialize = initialize;
//# sourceMappingURL=init.js.map