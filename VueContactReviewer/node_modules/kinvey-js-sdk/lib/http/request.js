Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var isString_1 = tslib_1.__importDefault(require("lodash/isString"));
var p_queue_1 = tslib_1.__importDefault(require("p-queue"));
var js_base64_1 = require("js-base64");
var invalidCredentials_1 = require("../errors/invalidCredentials");
var kinvey_1 = require("../kinvey");
var log_1 = require("../log");
var cache_1 = require("../datastore/cache");
var headers_1 = require("./headers");
var http_1 = require("./http");
var session_1 = require("./session");
var utils_1 = require("./utils");
var REQUEST_QUEUE = new p_queue_1.default();
var refreshTokenRequestInProgress = false;
var HttpRequestMethod;
(function (HttpRequestMethod) {
    HttpRequestMethod["GET"] = "GET";
    HttpRequestMethod["POST"] = "POST";
    HttpRequestMethod["PUT"] = "PUT";
    HttpRequestMethod["DELETE"] = "DELETE";
})(HttpRequestMethod = exports.HttpRequestMethod || (exports.HttpRequestMethod = {}));
;
function serialize(contentType, body) {
    if (body && !isString_1.default(body)) {
        if (contentType.indexOf('application/x-www-form-urlencoded') === 0) {
            var str_1 = [];
            Object.keys(body).forEach(function (key) {
                str_1.push(encodeURIComponent(key) + "=" + encodeURIComponent(body[key]));
            });
            return str_1.join('&');
        }
        else if (contentType.indexOf('application/json') === 0) {
            return JSON.stringify(body);
        }
    }
    return body;
}
exports.serialize = serialize;
var HttpRequest = /** @class */ (function () {
    function HttpRequest(config) {
        this.method = HttpRequestMethod.GET;
        this.headers = new headers_1.HttpHeaders(config.headers);
        if (config.method) {
            this.method = config.method;
        }
        this.url = config.url;
        this.body = config.body;
        this.timeout = config.timeout;
    }
    HttpRequest.prototype.execute = function () {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var response;
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, http_1.send(this.toPlainObject())];
                    case 1:
                        response = _a.sent();
                        // Return the response if it was successful
                        if (response.isSuccess()) {
                            return [2 /*return*/, response];
                        }
                        // Else throw the error
                        throw response.error;
                }
            });
        });
    };
    HttpRequest.prototype.toPlainObject = function () {
        return {
            headers: this.headers.toPlainObject(),
            method: this.method,
            url: this.url,
            body: this.body ? serialize(this.headers.contentType, this.body) : undefined,
            timeout: this.timeout
        };
    };
    return HttpRequest;
}());
exports.HttpRequest = HttpRequest;
function isRefreshTokenRequestInProgress() {
    return refreshTokenRequestInProgress === true;
}
function markRefreshTokenRequestInProgress() {
    REQUEST_QUEUE.pause();
    refreshTokenRequestInProgress = true;
}
function markRefreshTokenRequestComplete() {
    refreshTokenRequestInProgress = false;
    REQUEST_QUEUE.start();
}
var KinveyHttpRequest = /** @class */ (function (_super) {
    tslib_1.__extends(KinveyHttpRequest, _super);
    function KinveyHttpRequest(config) {
        var _this = _super.call(this, config) || this;
        _this.headers = new headers_1.KinveyHttpHeaders(config.headers);
        if (config.auth) {
            _this.headers.setAuthorization(config.auth);
            _this.auth = config.auth;
        }
        return _this;
    }
    KinveyHttpRequest.prototype.execute = function (retry) {
        if (retry === void 0) { retry = true; }
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var _a, error_1, activeSession, socialIdentity_1, micIdentityKey, micSession_1, refreshRequest, refreshResponse, newMICSession, loginRequest, loginResponse, newSession, request, response, error_2, request, error_3;
            var _this = this;
            return tslib_1.__generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        _b.trys.push([0, 2, , 16]);
                        return [4 /*yield*/, _super.prototype.execute.call(this)];
                    case 1: return [2 /*return*/, _b.sent()];
                    case 2:
                        error_1 = _b.sent();
                        if (!retry) return [3 /*break*/, 15];
                        if (!(error_1 instanceof invalidCredentials_1.InvalidCredentialsError)) return [3 /*break*/, 14];
                        if (isRefreshTokenRequestInProgress()) {
                            return [2 /*return*/, REQUEST_QUEUE.add(function () {
                                    var request = new KinveyHttpRequest(_this);
                                    return request.execute(false).catch(function () { return Promise.reject(error_1); });
                                })];
                        }
                        // Mark refresh token request in progress
                        markRefreshTokenRequestInProgress();
                        activeSession = session_1.getSession();
                        socialIdentity_1 = (activeSession && activeSession._socialIdentity) || {};
                        micIdentityKey = Object.keys(socialIdentity_1).find(function (sessionKey) { return socialIdentity_1[sessionKey].identity === 'kinveyAuth'; });
                        if (!micIdentityKey) return [3 /*break*/, 8];
                        micSession_1 = socialIdentity_1[micIdentityKey];
                        if (!micSession_1) return [3 /*break*/, 8];
                        _b.label = 3;
                    case 3:
                        _b.trys.push([3, 7, , 8]);
                        refreshRequest = new KinveyHttpRequest({
                            method: HttpRequestMethod.POST,
                            headers: new headers_1.KinveyHttpHeaders({
                                'Content-Type': function () { return 'application/x-www-form-urlencoded'; },
                                Authorization: function () {
                                    var credentials = js_base64_1.Base64.encode(micSession_1.client_id + ":" + kinvey_1.getAppSecret());
                                    return "Basic " + credentials;
                                }
                            }),
                            url: utils_1.formatKinveyAuthUrl('/oauth/token'),
                            body: {
                                grant_type: 'refresh_token',
                                client_id: micSession_1.client_id,
                                redirect_uri: micSession_1.redirect_uri,
                                refresh_token: micSession_1.refresh_token
                            }
                        });
                        return [4 /*yield*/, refreshRequest.execute()];
                    case 4:
                        refreshResponse = _b.sent();
                        newMICSession = Object.assign({}, micSession_1, refreshResponse.data);
                        loginRequest = new KinveyHttpRequest({
                            method: HttpRequestMethod.POST,
                            auth: headers_1.KinveyHttpAuth.App,
                            url: utils_1.formatKinveyBaasUrl(utils_1.KinveyBaasNamespace.User, '/login'),
                            body: {
                                _socialIdentity: (_a = {},
                                    _a[micIdentityKey] = newMICSession,
                                    _a)
                            }
                        });
                        return [4 /*yield*/, loginRequest.execute()];
                    case 5:
                        loginResponse = _b.sent();
                        newSession = loginResponse.data;
                        newSession._socialIdentity[micIdentityKey] = Object.assign({}, newSession._socialIdentity[micIdentityKey], newMICSession);
                        // Set the new session
                        session_1.setSession(newSession);
                        request = new KinveyHttpRequest(this);
                        return [4 /*yield*/, request.execute(false)];
                    case 6:
                        response = _b.sent();
                        // Mark the refresh token as complete
                        markRefreshTokenRequestComplete();
                        // Return the response
                        return [2 /*return*/, response];
                    case 7:
                        error_2 = _b.sent();
                        log_1.logger.error(error_2.message);
                        return [3 /*break*/, 8];
                    case 8:
                        _b.trys.push([8, 13, , 14]);
                        request = new KinveyHttpRequest({
                            method: HttpRequestMethod.POST,
                            auth: headers_1.KinveyHttpAuth.Session,
                            url: utils_1.formatKinveyBaasUrl(utils_1.KinveyBaasNamespace.User, '/_logout')
                        });
                        return [4 /*yield*/, request.execute(false)];
                    case 9:
                        _b.sent();
                        // Remove the session
                        session_1.removeSession();
                        // Clear cache's
                        return [4 /*yield*/, cache_1.QueryCache.clear()];
                    case 10:
                        // Clear cache's
                        _b.sent();
                        return [4 /*yield*/, cache_1.SyncCache.clear()];
                    case 11:
                        _b.sent();
                        return [4 /*yield*/, cache_1.DataStoreCache.clear()];
                    case 12:
                        _b.sent();
                        return [3 /*break*/, 14];
                    case 13:
                        error_3 = _b.sent();
                        log_1.logger.error(error_3.message);
                        return [3 /*break*/, 14];
                    case 14:
                        // Mark the refresh token as complete
                        markRefreshTokenRequestComplete();
                        _b.label = 15;
                    case 15: 
                    // Throw the error
                    throw error_1;
                    case 16: return [2 /*return*/];
                }
            });
        });
    };
    return KinveyHttpRequest;
}(HttpRequest));
exports.KinveyHttpRequest = KinveyHttpRequest;
//# sourceMappingURL=request.js.map