Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var isString_1 = tslib_1.__importDefault(require("lodash/isString"));
var apiVersionNotAvailable_1 = require("../errors/apiVersionNotAvailable");
var apiVersionNotImplemented_1 = require("../errors/apiVersionNotImplemented");
var appProblem_1 = require("../errors/appProblem");
var badRequest_1 = require("../errors/badRequest");
var bl_1 = require("../errors/bl");
var corsDisabled_1 = require("../errors/corsDisabled");
var duplicateEndUsers_1 = require("../errors/duplicateEndUsers");
var featureUnavailable_1 = require("../errors/featureUnavailable");
var incompleteRequestBody_1 = require("../errors/incompleteRequestBody");
var indirectCollectionAccessDisallowed_1 = require("../errors/indirectCollectionAccessDisallowed");
var insufficientCredentials_1 = require("../errors/insufficientCredentials");
var invalidCredentials_1 = require("../errors/invalidCredentials");
var invalidIdentifier_1 = require("../errors/invalidIdentifier");
var invalidQuerySyntax_1 = require("../errors/invalidQuerySyntax");
var jsonParse_1 = require("../errors/jsonParse");
var kinvey_1 = require("../errors/kinvey");
var kinveyInternalErrorRetry_1 = require("../errors/kinveyInternalErrorRetry");
var kinveyInternalErrorStop_1 = require("../errors/kinveyInternalErrorStop");
var missingQuery_1 = require("../errors/missingQuery");
var missingRequestHeader_1 = require("../errors/missingRequestHeader");
var missingRequestParameter_1 = require("../errors/missingRequestParameter");
var missingConfiguration_1 = require("../errors/missingConfiguration");
var notFound_1 = require("../errors/notFound");
var parameterValueOutOfRange_1 = require("../errors/parameterValueOutOfRange");
var resultSetSizeExceeded_1 = require("../errors/resultSetSizeExceeded");
var server_1 = require("../errors/server");
var staleRequest_1 = require("../errors/staleRequest");
var userAlreadyExists_1 = require("../errors/userAlreadyExists");
var writesToCollectionDisallowed_1 = require("../errors/writesToCollectionDisallowed");
var headers_1 = require("./headers");
var isPlainObject = require("lodash/isPlainObject");
var HttpStatusCode;
(function (HttpStatusCode) {
    HttpStatusCode[HttpStatusCode["Ok"] = 200] = "Ok";
    HttpStatusCode[HttpStatusCode["Created"] = 201] = "Created";
    HttpStatusCode[HttpStatusCode["Empty"] = 204] = "Empty";
    HttpStatusCode[HttpStatusCode["MovedPermanently"] = 301] = "MovedPermanently";
    HttpStatusCode[HttpStatusCode["Found"] = 302] = "Found";
    HttpStatusCode[HttpStatusCode["NotModified"] = 304] = "NotModified";
    HttpStatusCode[HttpStatusCode["TemporaryRedirect"] = 307] = "TemporaryRedirect";
    HttpStatusCode[HttpStatusCode["PermanentRedirect"] = 308] = "PermanentRedirect";
    HttpStatusCode[HttpStatusCode["Unauthorized"] = 401] = "Unauthorized";
    HttpStatusCode[HttpStatusCode["Forbidden"] = 403] = "Forbidden";
    HttpStatusCode[HttpStatusCode["NotFound"] = 404] = "NotFound";
    HttpStatusCode[HttpStatusCode["ServerError"] = 500] = "ServerError";
})(HttpStatusCode = exports.HttpStatusCode || (exports.HttpStatusCode = {}));
var HttpResponse = /** @class */ (function () {
    function HttpResponse(config) {
        this.statusCode = config.statusCode;
        this.headers = new headers_1.HttpHeaders(config.headers);
        var contentType = this.headers.get('Content-Type') || '';
        if (isString_1.default(config.data) && contentType.indexOf('application/json') !== -1) {
            try {
                this.data = JSON.parse(config.data);
            }
            catch (error) {
                this.data = config.data;
            }
        }
        else {
            this.data = config.data;
        }
    }
    Object.defineProperty(HttpResponse.prototype, "error", {
        get: function () {
            if (!this.isSuccess()) {
                if (isPlainObject(this.data)) {
                    var message = this.data.message || this.data.description;
                    var name_1 = this.data.name || this.data.error;
                    var debug = this.data.debug;
                    if (name_1 === 'APIVersionNotAvailable') {
                        return new apiVersionNotAvailable_1.APIVersionNotAvailableError(message, debug);
                    }
                    else if (name_1 === 'APIVersionNotImplemented') {
                        return new apiVersionNotImplemented_1.APIVersionNotImplementedError(message, debug);
                    }
                    else if (name_1 === 'AppProblem') {
                        return new appProblem_1.AppProblemError(message, debug);
                    }
                    else if (name_1 === 'AppProblem') {
                        return new appProblem_1.AppProblemError(message, debug);
                    }
                    else if (name_1 === 'BadRequest') {
                        return new badRequest_1.BadRequestError(message, debug);
                    }
                    else if (name_1 === 'BLInternalError'
                        || name_1 === 'BLRuntimeError'
                        || name_1 === 'BLSyntaxError'
                        || name_1 === 'BLTimeoutError'
                        || name_1 === 'BLViolationError') {
                        return new bl_1.BLError(message, debug);
                    }
                    else if (name_1 === 'CORSDisabled') {
                        return new corsDisabled_1.CORSDisabledError(message, debug);
                    }
                    else if (name_1 === 'DuplicateEndUsers') {
                        return new duplicateEndUsers_1.DuplicateEndUsersError(message, debug);
                    }
                    else if (name_1 === 'FeatureUnavailable') {
                        return new featureUnavailable_1.FeatureUnavailableError(message, debug);
                    }
                    else if (name_1 === 'IncompleteRequestBody') {
                        return new incompleteRequestBody_1.IncompleteRequestBodyError(message, debug);
                    }
                    else if (name_1 === 'IndirectCollectionAccessDisallowed') {
                        return new indirectCollectionAccessDisallowed_1.IndirectCollectionAccessDisallowedError(message, debug);
                    }
                    else if (name_1 === 'InsufficientCredentials') {
                        return new insufficientCredentials_1.InsufficientCredentialsError(message, debug);
                    }
                    else if (name_1 === 'InvalidCredentials') {
                        return new invalidCredentials_1.InvalidCredentialsError(message, debug);
                    }
                    else if (name_1 === 'InvalidIdentifier') {
                        return new invalidIdentifier_1.InvalidIdentifierError(message, debug);
                    }
                    else if (name_1 === 'InvalidQuerySyntax') {
                        return new invalidQuerySyntax_1.InvalidQuerySyntaxError(message, debug);
                    }
                    else if (name_1 === 'JSONParseError') {
                        return new jsonParse_1.JSONParseError(message, debug);
                    }
                    else if (name_1 === 'KinveyInternalErrorRetry') {
                        return new kinveyInternalErrorRetry_1.KinveyInternalErrorRetry(message, debug);
                    }
                    else if (name_1 === 'KinveyInternalErrorStop') {
                        return new kinveyInternalErrorStop_1.KinveyInternalErrorStop(message, debug);
                    }
                    else if (name_1 === 'MissingQuery') {
                        return new missingQuery_1.MissingQueryError(message, debug);
                    }
                    else if (name_1 === 'MissingRequestHeader') {
                        return new missingRequestHeader_1.MissingRequestHeaderError(message, debug);
                    }
                    else if (name_1 === 'MissingRequestParameter') {
                        return new missingRequestParameter_1.MissingRequestParameterError(message, debug);
                    }
                    else if (name_1 === 'MissingConfiguration') {
                        return new missingConfiguration_1.MissingConfigurationError(message, debug);
                    }
                    else if (name_1 === 'EntityNotFound'
                        || name_1 === 'CollectionNotFound'
                        || name_1 === 'AppNotFound'
                        || name_1 === 'UserNotFound'
                        || name_1 === 'BlobNotFound'
                        || name_1 === 'DocumentNotFound') {
                        return new notFound_1.NotFoundError(message, debug);
                    }
                    else if (name_1 === 'ParameterValueOutOfRange') {
                        return new parameterValueOutOfRange_1.ParameterValueOutOfRangeError(message, debug);
                    }
                    else if (name_1 === 'ResultSetSizeExceeded') {
                        return new resultSetSizeExceeded_1.ResultSetSizeExceededError(message, debug);
                    }
                    else if (name_1 === 'ServerError') {
                        return new server_1.ServerError(message, debug);
                    }
                    else if (name_1 === 'StaleRequest') {
                        return new staleRequest_1.StaleRequestError(message, debug);
                    }
                    else if (name_1 === 'UserAlreadyExists') {
                        return new userAlreadyExists_1.UserAlreadyExistsError(message, debug);
                    }
                    else if (name_1 === 'WritesToCollectionDisallowed') {
                        return new writesToCollectionDisallowed_1.WritesToCollectionDisallowedError(message, debug);
                    }
                    else if (this.statusCode === HttpStatusCode.Unauthorized
                        || this.statusCode === HttpStatusCode.Forbidden) {
                        return new insufficientCredentials_1.InsufficientCredentialsError(message, debug);
                    }
                    else if (this.statusCode === HttpStatusCode.NotFound) {
                        return new notFound_1.NotFoundError(message, debug);
                    }
                    else if (this.statusCode === HttpStatusCode.ServerError) {
                        return new server_1.ServerError(message, debug);
                    }
                    return new kinvey_1.KinveyError(message, debug);
                }
                return new kinvey_1.KinveyError();
            }
            return null;
        },
        enumerable: true,
        configurable: true
    });
    HttpResponse.prototype.isSuccess = function () {
        return (this.statusCode >= 200 && this.statusCode < 300)
            || this.statusCode === HttpStatusCode.MovedPermanently
            || this.statusCode === HttpStatusCode.Found
            || this.statusCode === HttpStatusCode.NotModified
            || this.statusCode === HttpStatusCode.TemporaryRedirect
            || this.statusCode === HttpStatusCode.PermanentRedirect;
    };
    return HttpResponse;
}());
exports.HttpResponse = HttpResponse;
//# sourceMappingURL=response.js.map