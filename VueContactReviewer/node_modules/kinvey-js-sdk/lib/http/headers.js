Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var isFunction_1 = tslib_1.__importDefault(require("lodash/isFunction"));
var isEmpty_1 = tslib_1.__importDefault(require("lodash/isEmpty"));
var isArray_1 = tslib_1.__importDefault(require("lodash/isArray"));
var js_base64_1 = require("js-base64");
var kinvey_1 = require("../errors/kinvey");
var kinvey_2 = require("../kinvey");
var session_1 = require("./session");
function byteCount(str) {
    if (str) {
        var count = 0;
        var stringLength = str.length;
        for (var i = 0; i < stringLength; i += 1) {
            var partCount = encodeURI(str[i]).split('%').length;
            count += partCount === 1 ? 1 : partCount - 1;
        }
        return count;
    }
    return 0;
}
var HttpHeaders = /** @class */ (function () {
    function HttpHeaders(headers) {
        var _this = this;
        this.headers = new Map();
        this.normalizedNames = new Map();
        if (headers) {
            if (headers instanceof HttpHeaders) {
                this.join(headers);
            }
            else {
                Object.keys(headers).forEach(function (name) {
                    _this.set(name, headers[name]);
                });
            }
        }
    }
    Object.defineProperty(HttpHeaders.prototype, "contentType", {
        get: function () {
            return this.get('Content-Type');
        },
        set: function (value) {
            this.set('Content-Type', value);
        },
        enumerable: true,
        configurable: true
    });
    HttpHeaders.prototype.has = function (name) {
        return this.headers.has(name.toLowerCase());
    };
    HttpHeaders.prototype.get = function (name) {
        return this.headers.get(name.toLowerCase()) || undefined;
    };
    HttpHeaders.prototype.keys = function () {
        return Array.from(this.normalizedNames.values());
    };
    HttpHeaders.prototype.set = function (name, value) {
        if (isFunction_1.default(value)) {
            return this.set(name, value());
        }
        else if (isArray_1.default(value)) {
            return this.set(name, value.join(','));
        }
        var key = name.toLowerCase();
        this.headers.set(key, value);
        if (!this.normalizedNames.has(key)) {
            this.normalizedNames.set(key, name);
        }
        return this;
    };
    HttpHeaders.prototype.join = function (headers) {
        var _this = this;
        headers.keys().forEach(function (name) {
            var value = headers.get(name);
            if (value) {
                _this.set(name, value);
            }
        });
    };
    HttpHeaders.prototype.delete = function (name) {
        return this.headers.delete(name);
    };
    HttpHeaders.prototype.toPlainObject = function () {
        var _this = this;
        return this.keys()
            .reduce(function (headers, header) {
            var value = _this.get(header);
            if (value) {
                headers[header] = value;
            }
            return headers;
        }, {});
    };
    return HttpHeaders;
}());
exports.HttpHeaders = HttpHeaders;
var KinveyHttpAuth;
(function (KinveyHttpAuth) {
    KinveyHttpAuth["All"] = "All";
    KinveyHttpAuth["App"] = "App";
    KinveyHttpAuth["Master"] = "Master";
    KinveyHttpAuth["Session"] = "Session";
    KinveyHttpAuth["SessionOrApp"] = "SessionOrApp";
    KinveyHttpAuth["SessionOrMaster"] = "SessionOrMaster";
})(KinveyHttpAuth = exports.KinveyHttpAuth || (exports.KinveyHttpAuth = {}));
var globalHeaders = new HttpHeaders();
function getAppVersion() {
    return globalHeaders.get('X-Kinvey-Client-App-Version');
}
exports.getAppVersion = getAppVersion;
function setAppVersion(appVersion) {
    globalHeaders.set('X-Kinvey-Client-App-Version', appVersion);
}
exports.setAppVersion = setAppVersion;
var KinveyHttpHeaders = /** @class */ (function (_super) {
    tslib_1.__extends(KinveyHttpHeaders, _super);
    function KinveyHttpHeaders(headers) {
        var _this = _super.call(this, headers) || this;
        // Add the Accept header
        if (!_this.has('Accept')) {
            _this.set('Accept', 'application/json; charset=utf-8');
        }
        // Add Content-Type header
        if (!_this.has('Content-Type')) {
            _this.set('Content-Type', 'application/json; charset=utf-8');
        }
        // Add the X-Kinvey-API-Version header
        if (!_this.has('X-Kinvey-Api-Version')) {
            _this.set('X-Kinvey-Api-Version', String(kinvey_2.getApiVersion()));
        }
        // Add global Kinvey headers
        _this.join(globalHeaders);
        return _this;
    }
    Object.defineProperty(KinveyHttpHeaders.prototype, "requestStart", {
        get: function () {
            return this.get('X-Kinvey-Request-Start');
        },
        enumerable: true,
        configurable: true
    });
    KinveyHttpHeaders.prototype.setAuthorization = function (auth) {
        var appKey = kinvey_2.getAppKey();
        var appSecret = kinvey_2.getAppSecret();
        var masterSecret = kinvey_2.getMasterSecret();
        var session = session_1.getSession();
        var value = '';
        if (auth === KinveyHttpAuth.App) {
            if (!appKey || !appSecret) {
                throw new kinvey_1.KinveyError('Missing appKey and/or appSecret to authorize the request.');
            }
            var credentials = js_base64_1.Base64.encode(appKey + ":" + appSecret);
            value = "Basic " + credentials;
        }
        else if (auth === KinveyHttpAuth.Master) {
            if (!appKey || !masterSecret) {
                throw new kinvey_1.KinveyError('Missing appKey and/or masterSecret to authorize the request.');
            }
            var credentials = js_base64_1.Base64.encode(appKey + ":" + masterSecret);
            value = "Basic " + credentials;
        }
        else if (auth === KinveyHttpAuth.Session) {
            if (!session || !session._kmd || !session._kmd.authtoken) {
                throw new kinvey_1.KinveyError('There is no active user to authorize the request.');
            }
            value = "Kinvey " + session._kmd.authtoken;
        }
        else if (auth === KinveyHttpAuth.All) {
            try {
                return this.setAuthorization(KinveyHttpAuth.Session);
            }
            catch (error) {
                try {
                    return this.setAuthorization(KinveyHttpAuth.App);
                }
                catch (error) {
                    return this.setAuthorization(KinveyHttpAuth.Master);
                }
            }
        }
        else if (auth === KinveyHttpAuth.SessionOrApp) {
            try {
                return this.setAuthorization(KinveyHttpAuth.Session);
            }
            catch (error) {
                return this.setAuthorization(KinveyHttpAuth.App);
            }
        }
        else if (auth === KinveyHttpAuth.SessionOrMaster) {
            try {
                return this.setAuthorization(KinveyHttpAuth.Session);
            }
            catch (error) {
                return this.setAuthorization(KinveyHttpAuth.Master);
            }
        }
        this.set('Authorization', value);
    };
    KinveyHttpHeaders.prototype.setCustomRequestProperties = function (properties) {
        var customRequestPropertiesVal = JSON.stringify(properties);
        if (!isEmpty_1.default(customRequestPropertiesVal)) {
            var customRequestPropertiesByteCount = byteCount(customRequestPropertiesVal);
            if (customRequestPropertiesByteCount >= 2000) {
                throw new Error("The custom properties are " + customRequestPropertiesByteCount + " bytes." +
                    'It must be less then 2000 bytes.');
            }
            this.set('X-Kinvey-Custom-Request-Properties', customRequestPropertiesVal);
        }
        else {
            this.delete('X-Kinvey-Custom-Request-Properties');
        }
    };
    return KinveyHttpHeaders;
}(HttpHeaders));
exports.KinveyHttpHeaders = KinveyHttpHeaders;
//# sourceMappingURL=headers.js.map