export interface QueryObject {
    filter?: any;
    fields?: string[];
    sort?: any;
    limit?: number;
    skip?: number;
}
export declare class Query {
    private _parent?;
    filter: any;
    private _fields?;
    private _sort?;
    private _limit?;
    private _skip?;
    constructor(query?: Query | QueryObject);
    readonly key: string;
    fields: string[];
    sort: any;
    limit: number;
    skip: number;
    /**
     * Returns true or false depending on if the query is able to be processed offline.
     *
     * @returns {boolean} True if the query is supported offline otherwise false.
     */
    isSupportedOffline(): boolean;
    /**
     * Adds an equal to filter to the query. Requires field to equal value.
     * Any existing filters on field will be discarded.
     * @see https://docs.mongodb.com/manual/reference/operator/query/#comparison
     *
     * @param {string} field Field
     * @param {*} value Value
     * @returns {Query} Query
     */
    equalTo(field: string, value: any): this;
    /**
     * Adds a not equal to filter to the query. Requires field not to equal
     * value.
     * @see https://docs.mongodb.com/manual/reference/operator/query/ne
     *
     * @param {string} field Field
     * @param {*} value Value
     * @returns {Query} Query
     */
    notEqualTo(field: string, value: any): this;
    /**
     * Adds a contains filter to the query. Requires field to contain at least
     * one of the members of list.
     * @see https://docs.mongodb.com/manual/reference/operator/query/in
     *
     * @param {string} field Field
     * @param {Array} values List of values.
     * @throws {Error} A value is required.
     * @returns {Query} Query
     */
    contains(field: string, values: any): this;
    /**
     * Adds a not contained in filter to the query. Requires `field` not to
     * contain any of the members of `list`.
     * @see https://docs.mongodb.com/manual/reference/operator/query/nin
     *
     * @param {string} field Field
     * @param {Array} values List of values.
     * @throws {Error} A value is required.
     * @returns {Query} Query
     */
    notContainedIn(field: string, values: any): this;
    /**
     * Adds a contains all filter to the query. Requires `field` to contain all
     * members of `list`.
     * @see https://docs.mongodb.com/manual/reference/operator/query/all
     *
     * @param {string} field Field
     * @param {object|Array} values List of values.
     * @throws {Error} A value is required.
     * @returns {Query} Query
     */
    containsAll(field: string, values: any): this;
    /**
     * Adds a greater than filter to the query. Requires `field` to be greater
     * than `value`.
     * @see https://docs.mongodb.com/manual/reference/operator/query/gt
     *
     * @param {string} field Field
     * @param {number|string} value Value
     * @throws {Error} The value must be a number or string.
     * @returns {Query} Query
     */
    greaterThan(field: string, value: any): this;
    /**
     * Adds a greater than or equal to filter to the query. Requires `field` to
     * be greater than or equal to `value`.
     * @see https://docs.mongodb.com/manual/reference/operator/query/gte
     *
     * @param {string} field Field.
     * @param {number|string} value Value.
     * @throws {Error} The value must be a number or string.
     * @returns {Query} Query
     */
    greaterThanOrEqualTo(field: string, value: any): this;
    /**
     * Adds a less than filter to the query. Requires `field` to be less than
     * `value`.
     * @see https://docs.mongodb.com/manual/reference/operator/query/lt
     *
     * @param {string} field Field
     * @param {number|string} value Value
     * @throws {Error} The value must be a number or string.
     * @returns {Query} Query
     */
    lessThan(field: string, value: any): this;
    /**
     * Adds a less than or equal to filter to the query. Requires `field` to be
     * less than or equal to `value`.
     * @see https://docs.mongodb.com/manual/reference/operator/query/lte
     *
     * @param {string} field Field
     * @param {number|string} value Value
     * @throws {Error} The value must be a number or string.
     * @returns {Query} Query
     */
    lessThanOrEqualTo(field: string, value: any): this;
    /**
     * Adds an exists filter to the query. Requires `field` to exist if `flag` is
     * `true`, or not to exist if `flag` is `false`.
     * @see https://docs.mongodb.com/manual/reference/operator/query/exists
     *
     * @param {string} field Field
     * @param {boolean} [flag=true] The exists flag.
     * @returns {Query} Query
     */
    exists(field: string, flag?: boolean): this;
    /**
     * Adds a modulus filter to the query. Requires `field` modulo `divisor` to
     * have remainder `remainder`.
     * @see https://docs.mongodb.com/manual/reference/operator/query/mod
     *
     * @param {string} field Field
     * @param {number} divisor Divisor
     * @param {number} [remainder=0] Remainder
     * @throws {Error} The divisor must be a number.
     * @throws {Error} The remainder must be a number.
     * @returns {Query} Query
     */
    mod(field: string, divisor: number, remainder?: number): this;
    /**
     * Adds a match filter to the query. Requires `field` to match `regExp`.
     * @see https://docs.mongodb.com/manual/reference/operator/query/regex
     *
     * @param {string} field Field
     * @param {RegExp|string} regExp Regular expression.
     * @param {Object} [options] Options
     * @param {boolean} [options.ignoreCase=inherit] Toggles case-insensitivity.
     * @param {boolean} [options.multiline=inherit] Toggles multiline matching.
     * @param {boolean} [options.extended=false] Toggles extended capability.
     * @param {boolean} [options.dotMatchesAll=false] Toggles dot matches all.
     * @throws {Error} The regExp must have '^' at the beginning of the expression to make it an anchored expression.
     * @throws {Error} The ignoreCase flag is not supported.
     * @returns {Query} Query
     */
    matches(field: string, expression: any, options?: {
        ignoreCase?: boolean;
        multiline?: boolean;
        extended?: boolean;
        dotMatchesAll?: boolean;
    }): this;
    /**
     * Adds a near filter to the query. Requires `field` to be a coordinate
     * within `maxDistance` of `coord`. Sorts documents from nearest to farthest.
     * @see https://docs.mongodb.com/manual/reference/operator/query/near
     *
     * @param {string} field The field.
     * @param {Array<number, number>} coord The coordinate (longitude, latitude).
     * @param {number} [maxDistance] The maximum distance (miles).
     * @throws {Error} The coord must be a [number, number].
     * @returns {Query} Query
     */
    near(field: string, coord: number[], maxDistance: number): this;
    /**
     * Adds a within box filter to the query. Requires `field` to be a coordinate
     * within the bounds of the rectangle defined by `bottomLeftCoord`,
     * `bottomRightCoord`.
     * @see https://docs.mongodb.com/manual/reference/operator/query/box
     *
     * @param {string} field The field.
     * @param {Array<number, number>} bottomLeftCoord The bottom left coordinate (longitude, latitude).
     * @param {Array<number, number>} upperRightCoord The bottom right coordinate (longitude, latitude).
     * @throws {Error} The bottomLeftCoord must be a [number, number].
     * @throws {Error} The upperRightCoord must be a [number, number].
     * @returns {Query} Query
     */
    withinBox(field: string, bottomLeftCoord: number[], upperRightCoord: number[]): this;
    /**
     * Adds a within polygon filter to the query. Requires `field` to be a
     * coordinate within the bounds of the polygon defined by `coords`.
     * @see https://docs.mongodb.com/manual/reference/operator/query/polygon
     *
     * @param {string} field The field.
     * @param {Array<Array<number, number>>} coords List of coordinates.
     * @throws {Error} The coords must be a [[number, number]].
     * @returns {Query} Query
     */
    withinPolygon(field: string, coords: number[][]): this;
    /**
     * Adds a size filter to the query. Requires `field` to be an `Array` with
     * exactly `size` members.
     * @see https://docs.mongodb.com/manual/reference/operator/query/size
     *
     * @param {string} field Field
     * @param {number} size Size
     * @throws {Error} The size must be a number.
     * @returns {Query} Query
     */
    size(field: string, size: number): this;
    /**
     * Adds an ascending sort modifier to the query. Sorts by `field`, ascending.
     *
     * @param {string} field Field
     * @returns {Query} Query
     */
    ascending(field: string): this;
    /**
     * Adds an descending sort modifier to the query. Sorts by `field`,
     * descending.
     *
     * @param {string} field Field
     * @returns {Query} Query
     */
    descending(field: string): this;
    /**
     * Performs a logical AND operation on the query and the provided queries.
     * @see https://docs.mongodb.com/manual/reference/operator/query/and
     *
     * @param {...Query|...Object} args Queries
     * @throws {Error} Queries must be an array of Query instances or objects.
     * @returns {Query} Query
     */
    and(...args: any): Query;
    /**
     * Performs a logical NOR operation on the query and the provided queries.
     * @see https://docs.mongodb.com/manual/reference/operator/query/nor
     *
     * @param {...Query|...Object} args Queries
     * @throws {Error} Queries must be an array of Query instances or objects.
     * @returns {Query} Query
     */
    nor(...args: any): Query;
    /**
     * Performs a logical OR operation on the query and the provided queries.
     * @see https://docs.mongodb.com/manual/reference/operator/query/or
     *
     * @param {...Query|...Object} args Queries.
     * @throws {Error} Queries must be an array of Query instances or objects.
     * @returns {Query} Query
     */
    or(...args: any): Query;
    /**
     * Returns query string representation of the query as a JavaScript object.
     *
     * @returns {Object} Query string object.
     */
    toQueryObject(): any;
    /**
     * @deprecated
     * Please use Query.prototype.toQueryObject() instead.
     */
    toQueryString(): any;
    /**
     * Returns Object representation of the query.
     *
     * @returns {Object} Object
     */
    toPlainObject(): any;
    /**
     * Returns query string representation of the query.
     *
     * @return {string} Query string string.
     */
    toString(): string;
    /**
     * @private
     * Adds a filter to the query.
     *
     * @param {string} field Field
     * @param {string} condition Condition
     * @param {*} values Values
     * @returns {Query} Query
     */
    addFilter(field: string, ...args: any): this;
    /**
     * @private
     * Joins the current query with another query using an operator.
     *
     * @param {string} operator Operator
     * @param {Query[]|object[]} queries Queries
     * @throws {Error} Queries must be an array of Query instances or objects.
     * @returns {Query} Query
     */
    private join;
    process(docs?: object[]): any;
}
